${template unit-}
${call java.header-}
package ${call java.package};

public ${if opts.lexerInput == 'custom'}abstract ${end}class ${opts.prefix}Lexer {
${call symbolClass-}
${call statesInterface-}
${call lexemsInterface-}
${call errorReporter-}

	public static final int TOKEN_SIZE = ${opts.maxtoken};

	private java.io.@Reader stream;
	final private ErrorReporter reporter;

${if opts.lexerInput == 'buffered'-}
	final private char[] data = new char[2048];
	private int datalen, l, tokenStart;
${end-}
	private char chr;

	private int state;

	final private StringBuilder token = new StringBuilder(TOKEN_SIZE);

	private int tokenLine = 1;
	private int currLine = 1;
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
	private int currColumn = 1;
${end-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
	private int currOffset = 0;
${end-}
${util.shiftRight(self->lexercode(), 1)-}

${call lexerCtor-}

	public void reset(${if opts.lexerInput != 'custom'}java.io.@Reader stream${end}) throws java.io.@IOException {
${if opts.lexerInput != 'custom'-}
		this.stream = stream;
${end-}
		this.state = 0;
${if opts.lexerInput == 'buffered'-}
		datalen = stream.read(data);
		l = 0;
		tokenStart = -1;
		chr = l < datalen ? data[l++] : 0;
${else if opts.lexerInput == 'char'-}
		int c = stream.read();
		if (c == -1) {
			c = 0;
		}
		chr = (char) c;
${else if opts.lexerInput == 'custom'-}
		chr = nextChar();
${end-}
	}
${if opts.lexerInput == 'custom'-}

	protected abstract char nextChar() throws java.io.@IOException;
${end-}

	protected void advance() throws java.io.@IOException {
		if (chr == 0) return;
${self->advanceChar(false)-}
	}

	public int getState() {
		return state;
	}

	public void setState(int state) {
		this.state = state;
	}

	public int getTokenLine() {
		return tokenLine;
	}

	public int getLine() {
		return currLine;
	}

	public void setLine(int currLine) {
		this.currLine = currLine;
	}

${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
	public int getColumn() {
		return currColumn;
	}

	public void setColumn(int currColumn) {
		this.currColumn = currColumn;
	}

${end-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
	public int getOffset() {
		return currOffset;
	}

	public void setOffset(int currOffset) {
		this.currOffset = currOffset;
	}

${end-}
	public String current() {
		return token.toString();
	}

${self->lexerTables()-}
${call mapCharacter-}

	public ${self->java.symbolClassName()} next() throws java.io.@IOException {
		${self->java.symbolClassName()} lapg_n = new ${self->java.symbolClassName()}();
		int state;

		do {
${if opts.positions.contains('offset')-}
			lapg_n.offset = currOffset;
${end-}
			tokenLine =${if opts.positions.contains('line')} lapg_n.line =${end} currLine;
${if opts.positions.contains('column')-}
			lapg_n.column = currColumn;
${end-}
			if (token.length() > TOKEN_SIZE) {
				token.setLength(TOKEN_SIZE);
				token.trimToSize();
			}
			token.setLength(0);
${if opts.lexerInput == 'buffered'-}
			tokenStart = l - 1;
${end-}

			for (state = this.state; state >= 0; ) {
				state = lapg_lexem[state * ${self->numOfChars()} + mapCharacter(chr)];
				if (state == -1 && chr == 0) {
${if opts.endpositions.contains('offset')-}
					lapg_n.endoffset = currOffset;
${end-}
${if opts.endpositions.contains('line')-}
					lapg_n.endline = currLine;
${end-}
${if opts.endpositions.contains('column')-}
					lapg_n.endcolumn = currColumn;
${end-}
					lapg_n.lexem = 0;
					lapg_n.sym = null;
					reporter.error(${call java.err_location('lapg_n', 'this') }"Unexpected end of input reached");
${if opts.lexerInput == 'buffered'-}
					tokenStart = -1;
${end-}
					return lapg_n;
				}
				if (state >= -1 && chr != 0) {
${util.shiftRight(self->advanceChar(true), 3)-}
				}
			}
${if opts.endpositions.contains('offset')-}
			lapg_n.endoffset = currOffset;
${end-}
${if opts.endpositions.contains('line')-}
			lapg_n.endline = currLine;
${end-}
${if opts.endpositions.contains('column')-}
			lapg_n.endcolumn = currColumn;
${end-}

			if (state == -1) {
${if opts.lexerInput == 'buffered'-}
				if (l - 1 > tokenStart) {
					token.append(data, tokenStart, l - 1 - tokenStart);
				}
${end-}
				reporter.error(${call java.err_location('lapg_n', 'this') }java.text.@MessageFormat.format("invalid lexem at line {0}: `{1}`, skipped", currLine, current()));
				lapg_n.lexem = -1;
				continue;
			}

			if (state == -2) {
				lapg_n.lexem = 0;
				lapg_n.sym = null;
${if opts.lexerInput == 'buffered'-}
				tokenStart = -1;
${end-}
				return lapg_n;
			}

${if opts.lexerInput == 'buffered'-}
			if (l - 1 > tokenStart) {
				token.append(data, tokenStart, l - 1 - tokenStart);
			}

${end-}
			lapg_n.lexem = lapg_lexemnum[-state - 3];
			lapg_n.sym = null;

		} while (lapg_n.lexem == -1 || !createToken(lapg_n, -state - 3));
${if opts.lexerInput == 'buffered'-}
		tokenStart = -1;
${end-}
		return lapg_n;
	}
${call createToken-}
${call unpackRoutines-}
}
${end}

${template unpackRoutines}
${call java_pack.unpackInt}
${call java_pack.unpackShort-}
${end}

${query numOfChars = lex.nchars}

${template lexerCtor-}
	public ${opts.prefix}Lexer(${if opts.lexerInput != 'custom'}java.io.@Reader stream, ${end}ErrorReporter reporter) throws java.io.@IOException {
		this.reporter = reporter;
		reset(${if opts.lexerInput != 'custom'}stream${end});
	}
${end}

${template mapCharacter}
	private static int mapCharacter(int chr) {
		if (chr >= 0 && chr < ${lex.char2no.length}) {
			return lapg_char2no[chr];
		}
		return 1;
	}
${end}


${template createToken}
	protected boolean createToken(${self->java.symbolClassName()} lapg_n, int lexemIndex) throws java.io.@IOException {
${if self->hasLexemActions()-}
		boolean spaceToken = false;
		switch (lexemIndex) {
${foreach lexem in syntax.lexems-}
${if lexem.kindAsText == 'class'-}
			case ${lexem.index}:
				return create${lexem->classLexemName()}Token(lapg_n, lexemIndex);
${else if lexem->hasActions() && !lexem.classLexem-}
			case ${lexem.index}: // ${lexem.symbol.name}: /${lexem.regexp}/
${call lexerAction('lapg_n.sym') for lexem-}
				break;
${end-}
${end-}
		}
		return !(spaceToken);
${else-}
		return true;
${end-}
	}
${foreach lexem in self->classLexems()-}
${if lexem->classHasInstances()-}

	private static java.util.@Map<String,Integer> subTokensOf${lexem->classLexemName()} = new java.util.@HashMap<String,Integer>();
	static {
${foreach instance in lexem->classInstances()-}
		subTokensOf${lexem->classLexemName()}.put("${util.escape(instance.regexp.constantValue)}", ${instance.index});
${end-}
	}
${end-}

	protected boolean create${lexem->classLexemName()}Token(${self->java.symbolClassName()} lapg_n, int lexemIndex) {
${if lexem->classHasInstances()-}
		Integer replacement = subTokensOf${lexem->classLexemName()}.get(current());
		if (replacement != null) {
			lexemIndex = replacement;
			lapg_n.lexem = lapg_lexemnum[lexemIndex];
		}
${end-}
${if lexem->classInstances().exists(x|x->hasActions()) || lexem->hasActions()-}
		boolean spaceToken = false;
		switch(lexemIndex) {
${foreach instance in lexem->classInstances().select(x|x->hasActions())-}
			case ${instance.index}:	// ${instance.regexp.constantValue}
${call lexerAction('lapg_n.sym') for instance-}
				break;
${end-}
${if lexem->hasActions()-}
${foreach instance in lexem->classInstances().select(x|!x.action && x.kindAsText == 'soft')-}
			case ${instance.index}:	// ${instance.regexp.constantValue} (soft)
${end-}
			case ${lexem.index}:	// <default>
${call lexerAction('lapg_n.sym') for lexem-}
				break;
${end-}
		}
		return !(spaceToken);
${else-}
		return true;
${end-}
	}
${end-}
${end}

${template advanceChar(inNext)-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
		currOffset++;
${end-}
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
		currColumn++;
${end-}
		if (chr == '\n') {
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
			currColumn = 1;
${end-}
			currLine++;
		}
${if opts.lexerInput == 'char'-}
		token.append(chr);
		int c = stream.read();
		if (c == -1) {
			c = 0;
		}
		chr = (char) c;
${else if opts.lexerInput == 'custom'-}
		token.append(chr);
		chr = nextChar();
${else if opts.lexerInput == 'buffered'-}
		if (l >= datalen) {
${if inNext-}
			token.append(data, tokenStart, l - tokenStart);
			tokenStart = l = 0;
${else-}
			if (tokenStart >= 0) {
				token.append(data, tokenStart, l - tokenStart);
				tokenStart = 0;
			}
			l = 0;
${end-}
			datalen = stream.read(data);
		}
		chr = l < datalen ? data[l++] : 0;
${end-}
${end}


${template lexerAction(lexem)-}
${if self.kindAsText == 'space'-}
				spaceToken = true;
${end-}
${if self.transitions-}
${if self.transitions.stateSwitch-}
				switch(state) {
${foreach x in self.transitions.stateSwitch.entrySet()-}
					case States.${x.key->stateId()}:
						state = States.${x.value->stateId()};
						break;
${end-}
${if self.transitions.defaultTransition-}
					default:
						state = States.${self.transitions.defaultTransition->stateId()};
						break;
${end-}
				}
${else if self.transitions.defaultTransition-}
				state = States.${self.transitions.defaultTransition->stateId()};
${end-}
${end-}
${if action-}
				${eval action}
${end-}
${end}

${template lexerTables-}
${if lex.char2no.size() > 128-}
	private static final char[] lapg_char2no = ${lex.char2no->java_pack.packCountValue(true)};

${call java_pack.unpackCountValue(true)-}
${else-}
	private static final short lapg_char2no[] = {
		${util.format(lex.char2no, 16, 2)}
	};
${end-}

	private static final short[] lapg_lexemnum = ${syntax.lexemSymbols->java_pack.packShort()};

	private static final short[] lapg_lexem = ${lex.change->java_pack.packCountValue(false)};

${call java_pack.unpackCountValue(false)-}
${end}


${template symbolClass}
	public static class ${self->java.symbolClassName()} {
		public Object sym;
		public int lexem;
		public int state;
${if opts.positions.contains('line')-}
		public int line;
${end-}
${if opts.positions.contains('column')-}
		public int column;
${end-}
${if opts.positions.contains('offset')-}
		public int offset;
${end-}
${if opts.endpositions.contains('line')-}
		public int endline;
${end-}
${if opts.endpositions.contains('column')-}
		public int endcolumn;
${end-}
${if opts.endpositions.contains('offset')-}
		public int endoffset;
${end-}
	}
${end}

${template lexemsInterface}
	public interface Lexems {
${for i in [0, syntax.terminals - 1]-}
		public static final int ${syntax.symbols[i].id->java.escapeJavaReserved()} = ${i};
${end-}
	}
${end}

${template statesInterface-}
${if syntax.lexerStates.size() > 1}
	public interface States {
${foreach state in syntax.lexerStates-}
		public static final int ${state->stateId()} = ${state.index};
${end-}
	}
${end-}
${end}

${cached query stateId() = self.name->java.escapeJavaReserved()}


${template errorReporter}
	public interface ErrorReporter {
		void error(${call java.err_parameters()}String s);
	}
${end}

${template lexercode-}
${end}

${cached query hasLexemActions() =
	syntax.lexems.exists(l|l->hasActions() && !l.classLexem || l.kindAsText == 'class')}

${cached query hasActions() = self.action || self.transitions || self.kindAsText == 'space' }

${cached query classLexems() = syntax.lexems.select(x|x.kindAsText == 'class')}

${cached query classHasInstances() = self->classInstances().size() > 0 }

${cached query classInstances() = context.syntax.lexems.select(x|x.classLexem && x.classLexem == self)}

${cached query classLexemName() = util.uniqueId(util.toFirstUpper(self.symbol.id), '__classlexem__')}