/**
 * Copyright 2002-2015 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.Span;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(419,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\264\0\265\0\uffbb\uffff\274\0\uff6f" +
		"\uffff\266\0\267\0\uffff\uffff\257\0\256\0\262\0\271\0\uff05\uffff\ufefd\uffff\ufef1" +
		"\uffff\350\0\ufeaf\uffff\uffff\uffff\ufea9\uffff\14\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\301\0\uffff\uffff\uffff\uffff\uffff\uffff\275\0\uffff\uffff\uffff\uffff\261" +
		"\0\uffff\uffff\uffff\uffff\ufe5f\uffff\235\0\246\0\uffff\uffff\340\0\336\0\245\0" +
		"\uffff\uffff\ufe57\uffff\uffff\uffff\ufe51\uffff\uffff\uffff\uffff\uffff\3\0\272" +
		"\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufe13\uffff\277\0\12\0\347\0\13" +
		"\0\241\0\242\0\uffff\uffff\uffff\uffff\236\0\uffff\uffff\237\0\uffff\uffff\344\0" +
		"\ufe0d\uffff\uffff\uffff\ufe07\uffff\uffff\uffff\10\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\0\0\16\0\240\0\335\0\337\0\uffff\uffff\uffff\uffff\260\0\uffff" +
		"\uffff\6\0\7\0\uffff\uffff\uffff\uffff\ufe01\uffff\ufdf9\uffff\ufdf3\uffff\41\0\45" +
		"\0\46\0\47\0\44\0\11\0\uffff\uffff\263\0\343\0\2\0\uffff\uffff\ufdad\uffff\316\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\303\0\uffff\uffff\42\0\43\0\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\ufda5\uffff\66\0\71\0\72\0\73\0\uffff\uffff\332\0\ufd61\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\62\0\40\0\50\0\uffff\uffff\31\0\32\0\25\0\26" +
		"\0\uffff\uffff\23\0\24\0\30\0\33\0\35\0\34\0\27\0\uffff\uffff\22\0\ufd1b\uffff\uffff" +
		"\uffff\113\0\114\0\115\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\ufcd3\uffff\233\0\ufc8b\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufc39\uffff\ufbf9" +
		"\uffff\110\0\111\0\uffff\uffff\uffff\uffff\67\0\70\0\uffff\uffff\331\0\uffff\uffff" +
		"\63\0\64\0\315\0\17\0\37\0\uffff\uffff\20\0\21\0\ufbb9\uffff\ufb6b\uffff\324\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\131\0\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufb63\uffff\uffff\uffff\uffff\uffff\ufb11\uffff" +
		"\uffff\uffff\273\0\uffff\uffff\210\0\uffff\uffff\326\0\ufaab\uffff\ufa5b\uffff\327" +
		"\0\ufa0b\uffff\ufa01\uffff\uf9af\uffff\170\0\173\0\175\0\uf959\uffff\171\0\uf901" +
		"\uffff\uf8a7\uffff\217\0\uffff\uffff\172\0\156\0\uf849\uffff\155\0\334\0\uffff\uffff" +
		"\uf841\uffff\104\0\317\0\uf801\uffff\uf7fb\uffff\uf7f5\uffff\uf7a3\uffff\uffff\uffff" +
		"\uf751\uffff\uffff\uffff\uffff\uffff\61\0\36\0\uffff\uffff\305\0\uf6ff\uffff\127" +
		"\0\123\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\243\0\244\0" +
		"\uffff\uffff\122\0\132\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uf6b3\uffff" +
		"\253\0\uffff\uffff\uffff\uffff\uf6a7\uffff\uffff\uffff\uf655\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\103\0\uf603\uffff\uf5b3\uffff\uf5a9\uffff\145\0\uf557" +
		"\uffff\uf54d\uffff\uffff\uffff\151\0\154\0\uf4fb\uffff\uf4f1\uffff\167\0\153\0\uffff" +
		"\uffff\201\0\uffff\uffff\214\0\215\0\160\0\174\0\uf49b\uffff\uffff\uffff\234\0\uf447" +
		"\uffff\uffff\uffff\321\0\106\0\107\0\uffff\uffff\uffff\uffff\uf441\uffff\uffff\uffff" +
		"\uf3ef\uffff\uf39d\uffff\uffff\uffff\53\0\307\0\uf34b\uffff\323\0\uffff\uffff\124" +
		"\0\125\0\uffff\uffff\uffff\uffff\121\0\231\0\161\0\162\0\247\0\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\157\0\uffff\uffff\211\0\uffff\uffff\uffff\uffff\164\0\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uf301\uffff\222\0\225\0\uffff\uffff\uffff\uffff\176\0\uf2bd" +
		"\uffff\177\0\uf25f\uffff\uf255\uffff\141\0\144\0\uf203\uffff\143\0\150\0\uf1f9\uffff" +
		"\147\0\152\0\uf1ef\uffff\203\0\204\0\325\0\333\0\105\0\133\0\uf199\uffff\102\0\101" +
		"\0\uffff\uffff\77\0\uffff\uffff\uffff\uffff\uf193\uffff\uffff\uffff\311\0\uf141\uffff" +
		"\126\0\uffff\uffff\117\0\uffff\uffff\251\0\252\0\uf0f9\uffff\uf0f1\uffff\uffff\uffff" +
		"\163\0\216\0\uffff\uffff\224\0\221\0\uffff\uffff\220\0\uffff\uffff\140\0\uf0e9\uffff" +
		"\137\0\142\0\146\0\uffff\uffff\100\0\76\0\75\0\uffff\uffff\55\0\56\0\57\0\60\0\uffff" +
		"\uffff\313\0\51\0\uffff\uffff\120\0\uffff\uffff\223\0\uf0df\uffff\uf0d7\uffff\136" +
		"\0\134\0\74\0\54\0\116\0\213\0\212\0\uffff\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(3886,
		"\10\276\45\276\46\276\54\276\56\276\57\276\60\276\61\276\62\276\63\276\64\276\65" +
		"\276\66\276\67\276\70\276\71\276\72\276\73\276\74\276\75\276\76\276\77\276\100\276" +
		"\101\276\102\276\103\276\104\276\105\276\106\276\107\276\110\276\111\276\uffff\ufffe" +
		"\2\uffff\3\uffff\23\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\47\uffff\50\uffff\51" +
		"\uffff\24\352\uffff\ufffe\31\uffff\0\15\6\15\10\15\11\15\17\15\21\15\24\15\25\15" +
		"\26\15\27\15\30\15\33\15\34\15\36\15\41\15\43\15\44\15\45\15\46\15\52\15\53\15\55" +
		"\15\56\15\57\15\60\15\61\15\62\15\63\15\64\15\65\15\66\15\67\15\70\15\71\15\72\15" +
		"\73\15\74\15\75\15\76\15\77\15\100\15\101\15\102\15\103\15\104\15\105\15\106\15\107" +
		"\15\110\15\111\15\113\15\uffff\ufffe\25\uffff\107\uffff\17\302\uffff\ufffe\20\uffff" +
		"\17\270\25\270\26\270\107\270\uffff\ufffe\54\uffff\10\300\45\300\46\300\56\300\57" +
		"\300\60\300\61\300\62\300\63\300\64\300\65\300\66\300\67\300\70\300\71\300\72\300" +
		"\73\300\74\300\75\300\76\300\77\300\100\300\101\300\102\300\103\300\104\300\105\300" +
		"\106\300\107\300\110\300\111\300\uffff\ufffe\21\uffff\24\351\uffff\ufffe\2\uffff" +
		"\3\uffff\34\uffff\40\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\47\uffff\50\uffff\32\342\uffff" +
		"\ufffe\22\13\21\16\32\16\uffff\ufffe\21\uffff\32\341\uffff\ufffe\46\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\26\346\uffff\ufffe\10\uffff\0\1\uffff\ufffe\21\uffff\26\345\uffff\ufffe" +
		"\107\uffff\17\302\uffff\ufffe\13\uffff\22\13\25\13\uffff\ufffe\25\uffff\22\304\uffff" +
		"\ufffe\6\uffff\23\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\0\4\10\4\uffff\ufffe" +
		"\16\uffff\21\65\24\65\uffff\ufffe\6\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110" +
		"\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100" +
		"\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\0\5\uffff\ufffe\44\uffff\22\230\25\230\43\230\46\230\55\230\56\230\57\230" +
		"\60\230\61\230\62\230\63\230\64\230\65\230\66\230\67\230\70\230\71\230\72\230\73" +
		"\230\74\230\75\230\76\230\77\230\100\230\101\230\102\230\103\230\104\230\105\230" +
		"\106\230\107\230\110\230\111\230\uffff\ufffe\1\uffff\0\52\6\52\10\52\23\52\45\52" +
		"\46\52\56\52\57\52\60\52\61\52\62\52\63\52\64\52\65\52\66\52\67\52\70\52\71\52\72" +
		"\52\73\52\74\52\75\52\76\52\77\52\100\52\101\52\102\52\103\52\104\52\105\52\106\52" +
		"\107\52\110\52\111\52\uffff\ufffe\114\uffff\22\232\25\232\43\232\44\232\46\232\55" +
		"\232\56\232\57\232\60\232\61\232\62\232\63\232\64\232\65\232\66\232\67\232\70\232" +
		"\71\232\72\232\73\232\74\232\75\232\76\232\77\232\100\232\101\232\102\232\103\232" +
		"\104\232\105\232\106\232\107\232\110\232\111\232\uffff\ufffe\6\uffff\23\uffff\25" +
		"\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113" +
		"\uffff\11\330\17\330\uffff\ufffe\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\320\22\320\uffff\ufffe" +
		"\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\7\320\22\320\uffff\ufffe\16\uffff\0\306\3\306\6\306\10" +
		"\306\23\306\25\306\45\306\46\306\56\306\57\306\60\306\61\306\62\306\63\306\64\306" +
		"\65\306\66\306\67\306\70\306\71\306\72\306\73\306\74\306\75\306\76\306\77\306\100" +
		"\306\101\306\102\306\103\306\104\306\105\306\106\306\107\306\110\306\111\306\113" +
		"\306\uffff\ufffe\77\uffff\17\130\21\130\uffff\ufffe\6\uffff\23\uffff\25\uffff\27" +
		"\uffff\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11" +
		"\330\26\330\uffff\ufffe\31\uffff\13\13\22\13\35\13\6\15\11\15\17\15\25\15\26\15\27" +
		"\15\33\15\34\15\36\15\41\15\43\15\44\15\45\15\46\15\52\15\53\15\55\15\56\15\57\15" +
		"\60\15\61\15\62\15\63\15\64\15\65\15\66\15\67\15\70\15\71\15\72\15\73\15\74\15\75" +
		"\15\76\15\77\15\100\15\101\15\102\15\103\15\104\15\105\15\106\15\107\15\110\15\111" +
		"\15\113\15\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\46\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\113\uffff\11\330\17\330\26\330\uffff\ufffe\6\uffff\25\uffff\27" +
		"\uffff\43\uffff\44\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11\330\17" +
		"\330\26\330\uffff\ufffe\6\uffff\11\330\17\330\26\330\uffff\ufffe\6\uffff\25\uffff" +
		"\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11" +
		"\330\17\330\26\330\uffff\ufffe\41\uffff\6\165\11\165\17\165\25\165\26\165\27\165" +
		"\43\165\44\165\45\165\46\165\52\165\55\165\56\165\57\165\60\165\61\165\62\165\63" +
		"\165\64\165\65\165\66\165\67\165\70\165\71\165\72\165\73\165\74\165\75\165\76\165" +
		"\77\165\100\165\101\165\102\165\103\165\104\165\105\165\106\165\107\165\110\165\111" +
		"\165\113\165\uffff\ufffe\36\uffff\6\200\11\200\17\200\25\200\26\200\27\200\41\200" +
		"\43\200\44\200\45\200\46\200\52\200\55\200\56\200\57\200\60\200\61\200\62\200\63" +
		"\200\64\200\65\200\66\200\67\200\70\200\71\200\72\200\73\200\74\200\75\200\76\200" +
		"\77\200\100\200\101\200\102\200\103\200\104\200\105\200\106\200\107\200\110\200\111" +
		"\200\113\200\uffff\ufffe\53\uffff\6\202\11\202\17\202\25\202\26\202\27\202\36\202" +
		"\41\202\43\202\44\202\45\202\46\202\52\202\55\202\56\202\57\202\60\202\61\202\62" +
		"\202\63\202\64\202\65\202\66\202\67\202\70\202\71\202\72\202\73\202\74\202\75\202" +
		"\76\202\77\202\100\202\101\202\102\202\103\202\104\202\105\202\106\202\107\202\110" +
		"\202\111\202\113\202\uffff\ufffe\33\uffff\34\uffff\6\206\11\206\17\206\25\206\26" +
		"\206\27\206\36\206\41\206\43\206\44\206\45\206\46\206\52\206\53\206\55\206\56\206" +
		"\57\206\60\206\61\206\62\206\63\206\64\206\65\206\66\206\67\206\70\206\71\206\72" +
		"\206\73\206\74\206\75\206\76\206\77\206\100\206\101\206\102\206\103\206\104\206\105" +
		"\206\106\206\107\206\110\206\111\206\113\206\uffff\ufffe\11\uffff\17\135\26\135\uffff" +
		"\ufffe\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\7\320\22\320\uffff\ufffe\22\uffff\7\322\uffff\ufffe\22" +
		"\uffff\7\322\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45" +
		"\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11\330\17\330\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\113\uffff\11\330\17\330\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11\330" +
		"\17\330\uffff\ufffe\3\uffff\0\310\6\310\10\310\23\310\25\310\45\310\46\310\56\310" +
		"\57\310\60\310\61\310\62\310\63\310\64\310\65\310\66\310\67\310\70\310\71\310\72" +
		"\310\73\310\74\310\75\310\76\310\77\310\100\310\101\310\102\310\103\310\104\310\105" +
		"\310\106\310\107\310\110\310\111\310\113\310\uffff\ufffe\14\uffff\15\uffff\12\250" +
		"\24\250\42\250\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46" +
		"\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\52\uffff\55\uffff\113\uffff\11\330\26\330\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\113\uffff\11\330\26\330\uffff\ufffe\6\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104" +
		"\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11\330\17\330\26" +
		"\330\uffff\ufffe\6\uffff\11\330\17\330\26\330\uffff\ufffe\6\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11\330" +
		"\17\330\26\330\uffff\ufffe\6\uffff\11\330\17\330\26\330\uffff\ufffe\6\uffff\25\uffff" +
		"\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11" +
		"\330\17\330\26\330\uffff\ufffe\6\uffff\11\330\17\330\26\330\uffff\ufffe\41\uffff" +
		"\6\166\11\166\17\166\25\166\26\166\27\166\43\166\44\166\45\166\46\166\52\166\55\166" +
		"\56\166\57\166\60\166\61\166\62\166\63\166\64\166\65\166\66\166\67\166\70\166\71" +
		"\166\72\166\73\166\74\166\75\166\76\166\77\166\100\166\101\166\102\166\103\166\104" +
		"\166\105\166\106\166\107\166\110\166\111\166\113\166\uffff\ufffe\6\uffff\23\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113" +
		"\uffff\11\330\17\330\26\330\uffff\ufffe\22\uffff\7\322\uffff\ufffe\6\uffff\23\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113" +
		"\uffff\11\330\17\330\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff" +
		"\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11\330\17\330\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\113\uffff\11\330\17\330\uffff\ufffe\25\uffff\0\312\6\312\10\312" +
		"\23\312\45\312\46\312\56\312\57\312\60\312\61\312\62\312\63\312\64\312\65\312\66" +
		"\312\67\312\70\312\71\312\72\312\73\312\74\312\75\312\76\312\77\312\100\312\101\312" +
		"\102\312\103\312\104\312\105\312\106\312\107\312\110\312\111\312\113\312\uffff\ufffe" +
		"\31\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\11\15\26\15\41\15\uffff\ufffe\33\uffff\34\uffff" +
		"\6\207\11\207\17\207\25\207\26\207\27\207\36\207\41\207\43\207\44\207\45\207\46\207" +
		"\52\207\53\207\55\207\56\207\57\207\60\207\61\207\62\207\63\207\64\207\65\207\66" +
		"\207\67\207\70\207\71\207\72\207\73\207\74\207\75\207\76\207\77\207\100\207\101\207" +
		"\102\207\103\207\104\207\105\207\106\207\107\207\110\207\111\207\113\207\uffff\ufffe" +
		"\6\uffff\11\330\17\330\26\330\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff" +
		"\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11\330\17\330\26\330\uffff" +
		"\ufffe\6\uffff\11\330\17\330\26\330\uffff\ufffe\6\uffff\11\330\17\330\26\330\uffff" +
		"\ufffe\41\205\6\205\11\205\17\205\25\205\26\205\27\205\43\205\44\205\45\205\46\205" +
		"\52\205\55\205\56\205\57\205\60\205\61\205\62\205\63\205\64\205\65\205\66\205\67" +
		"\205\70\205\71\205\72\205\73\205\74\205\75\205\76\205\77\205\100\205\101\205\102" +
		"\205\103\205\104\205\105\205\106\205\107\205\110\205\111\205\113\205\uffff\ufffe" +
		"\21\uffff\7\112\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff" +
		"\45\uffff\46\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\113\uffff\11\330\17\330\uffff\ufffe" +
		"\113\uffff\0\314\6\314\10\314\23\314\45\314\46\314\56\314\57\314\60\314\61\314\62" +
		"\314\63\314\64\314\65\314\66\314\67\314\70\314\71\314\72\314\73\314\74\314\75\314" +
		"\76\314\77\314\100\314\101\314\102\314\103\314\104\314\105\314\106\314\107\314\110" +
		"\314\111\314\uffff\ufffe\12\255\42\uffff\24\255\uffff\ufffe\12\254\42\254\24\254" +
		"\uffff\ufffe\6\uffff\11\330\17\330\26\330\uffff\ufffe\11\226\41\uffff\26\226\uffff" +
		"\ufffe\11\227\41\227\26\227\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(172,
		"\0\2\4\26\46\46\46\105\115\117\124\127\135\136\137\141\167\174\210\221\250\257\334" +
		"\351\374\377\u0108\u010f\u0116\u011b\u011c\u0121\u0124\u012b\u0136\u0139\u0152\u016d" +
		"\u0187\u01e5\u01f3\u0201\u0207\u0208\u0209\u020a\u0226\u0285\u02e7\u0346\u03a5\u0407" +
		"\u0466\u04c5\u0524\u0583\u05e2\u0641\u06a0\u06ff\u075e\u07be\u081e\u087e\u08dd\u093c" +
		"\u09a0\u0a02\u0a64\u0ac3\u0b22\u0b81\u0be1\u0c40\u0c9f\u0c9f\u0cb4\u0cb5\u0cb6\u0cb7" +
		"\u0cb8\u0cb9\u0cbb\u0cbc\u0cbd\u0cec\u0d12\u0d24\u0d29\u0d2b\u0d2f\u0d31\u0d32\u0d34" +
		"\u0d36\u0d38\u0d39\u0d3a\u0d3b\u0d3d\u0d3f\u0d41\u0d43\u0d44\u0d46\u0d48\u0d4c\u0d4f" +
		"\u0d50\u0d52\u0d54\u0d56\u0d58\u0d59\u0d63\u0d6e\u0d79\u0d85\u0da0\u0db3\u0dc1\u0dd5" +
		"\u0de9\u0dff\u0e17\u0e2f\u0e43\u0e5b\u0e74\u0e90\u0e95\u0e99\u0eaf\u0ec6\u0ec8\u0ed2" +
		"\u0ed5\u0ed7\u0ed9\u0ede\u0ee1\u0ee4\u0eea\u0eec\u0efa\u0efd\u0f00\u0f15\u0f2f\u0f30" +
		"\u0f31\u0f33\u0f34\u0f35\u0f36\u0f37\u0f38\u0f39\u0f3c\u0f3f\u0f40\u0f4a\u0f65\u0f7b" +
		"\u0f7c\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(3971,
		"\u019f\u01a0\155\223\1\6\26\36\41\65\77\100\115\124\156\301\u0108\u011e\u013a\u0140" +
		"\u0141\u0171\1\6\26\41\61\77\100\115\124\301\362\u011e\u013a\u0140\u0141\u0171\114" +
		"\136\145\166\237\304\316\317\321\322\350\351\353\u0107\u0109\u010f\u0110\u0111\u0113" +
		"\u0114\u0118\u0123\u012d\u012f\u0130\u0154\u0155\u0158\u015b\u016c\u0182\165\247" +
		"\250\253\352\354\355\u0131\40\70\337\u014f\u017b\u0196\u0197\u0105\u0176\u0177\67" +
		"\134\272\312\374\u0139\u0103\u0103\152\266\34\64\113\127\255\271\300\314\367\370" +
		"\374\u012b\u012c\u012e\u0136\u0139\u0168\u016a\u016b\u0173\u018a\u0192\21\156\211" +
		"\221\263\24\54\55\106\154\156\211\221\263\271\342\u0165\50\104\160\312\334\346\347" +
		"\u0126\u0150\1\6\41\114\115\124\136\156\211\221\237\263\301\304\350\351\353\u0109" +
		"\u0123\u012d\u012f\u0130\u016c\25\154\156\211\221\263\u0105\20\30\32\135\156\165" +
		"\211\221\237\250\253\263\304\306\310\316\317\322\334\350\351\353\355\u0107\u0109" +
		"\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u0123\u012d\u012f\u0130\u0134" +
		"\u014a\u014b\u0155\u016c\u017e\u0180\60\107\111\204\211\221\263\u0106\u0149\u014f" +
		"\u0178\u017b\u018f\237\304\316\317\322\350\351\353\u0107\u0109\u010f\u0111\u0114" +
		"\u0123\u012d\u012f\u0130\u0155\u016c\377\u0108\u0147\10\156\165\211\221\253\263\307" +
		"\u014c\54\56\156\211\221\263\342\156\211\221\263\332\u0152\u0194\26\102\332\u0152" +
		"\u0194\312\156\211\221\263\327\303\u0142\u0144\26\102\u010a\u014a\u014b\u017e\u0180" +
		"\156\211\221\263\323\u0119\u014f\u015e\u017b\u0196\u0197\u0105\u0176\u0177\237\304" +
		"\316\317\322\334\350\351\353\u0107\u0109\u010b\u010c\u010d\u010f\u0111\u0114\u0115" +
		"\u011c\u0123\u012d\u012f\u0130\u0155\u016c\145\156\166\175\211\221\237\263\304\316" +
		"\317\322\350\351\353\u0107\u0109\u010f\u0111\u0114\u011c\u0123\u012d\u012f\u0130" +
		"\u0155\u016c\1\6\40\41\115\124\136\164\166\237\301\304\322\350\351\353\u0107\u0109" +
		"\u0111\u0114\u0123\u012d\u012f\u0130\u0155\u016c\1\2\6\13\26\31\35\36\40\41\43\44" +
		"\57\77\100\102\114\115\124\125\133\136\145\151\156\164\166\173\176\177\200\211\221" +
		"\224\230\233\234\237\240\242\243\244\263\275\300\301\303\304\305\316\317\322\334" +
		"\343\350\351\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f" +
		"\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144" +
		"\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\6\26\41\77\100" +
		"\115\124\301\u011e\u013a\u0140\u0141\u0171\1\6\26\41\77\100\115\124\301\u011e\u013a" +
		"\u0140\u0141\u0171\1\6\41\115\124\301\u0107\331\22\237\273\274\304\316\317\322\334" +
		"\350\351\353\366\u0107\u0109\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u0123" +
		"\u012d\u012f\u0130\u0155\u016c\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114" +
		"\115\124\125\132\133\136\145\151\156\164\166\173\176\177\200\211\221\224\230\233" +
		"\234\237\240\242\243\244\263\275\300\301\303\304\305\316\317\322\334\343\350\351" +
		"\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114" +
		"\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a" +
		"\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41" +
		"\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156\164\165\166\173\176\177" +
		"\200\211\221\224\230\233\234\237\240\242\243\244\250\253\263\275\300\301\303\304" +
		"\305\316\317\322\334\343\350\351\353\355\360\365\u0100\u0101\u0102\u0107\u0109\u010a" +
		"\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f" +
		"\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180" +
		"\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145" +
		"\151\156\164\166\173\176\177\200\211\221\224\230\233\234\237\240\242\243\244\263" +
		"\275\300\301\302\303\304\305\316\317\322\334\343\350\351\353\360\365\u0100\u0101" +
		"\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123" +
		"\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c" +
		"\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114" +
		"\115\124\125\133\136\145\151\156\164\166\173\176\177\200\211\221\224\230\233\234" +
		"\237\240\242\243\244\263\275\300\301\302\303\304\305\316\317\322\334\343\350\351" +
		"\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114" +
		"\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a" +
		"\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41" +
		"\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156\164\165\166\173\176\177" +
		"\200\211\221\224\230\233\234\237\240\242\243\244\250\253\263\275\300\301\303\304" +
		"\305\316\317\322\334\343\350\351\353\355\360\365\u0100\u0101\u0102\u0107\u0109\u010a" +
		"\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f" +
		"\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180" +
		"\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145" +
		"\151\156\163\164\166\173\176\177\200\211\221\224\230\233\234\237\240\242\243\244" +
		"\263\275\300\301\303\304\305\316\317\322\334\343\350\351\353\360\365\u0100\u0101" +
		"\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123" +
		"\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c" +
		"\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114" +
		"\115\124\125\133\136\145\151\156\163\164\166\173\176\177\200\211\221\224\230\233" +
		"\234\237\240\242\243\244\263\275\300\301\303\304\305\316\317\322\334\343\350\351" +
		"\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114" +
		"\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a" +
		"\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41" +
		"\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156\163\164\166\173\176\177" +
		"\200\211\221\224\230\233\234\237\240\242\243\244\263\275\300\301\303\304\305\316" +
		"\317\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c" +
		"\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a" +
		"\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1" +
		"\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156" +
		"\163\164\166\173\176\177\200\211\221\224\230\233\234\237\240\242\243\244\263\275" +
		"\300\301\303\304\305\316\317\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107" +
		"\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127" +
		"\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178" +
		"\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124\125" +
		"\133\136\145\151\156\163\164\166\173\176\177\200\211\221\224\230\233\234\237\240" +
		"\242\243\244\263\275\300\301\303\304\305\316\317\322\334\343\350\351\353\360\365" +
		"\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c" +
		"\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c" +
		"\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77" +
		"\100\102\114\115\124\125\133\136\145\151\156\163\164\166\173\176\177\200\211\221" +
		"\224\230\233\234\237\240\242\243\244\263\275\300\301\303\304\305\316\317\322\334" +
		"\343\350\351\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f" +
		"\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144" +
		"\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31" +
		"\35\36\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156\164\166\173" +
		"\176\177\200\211\221\224\230\231\233\234\237\240\242\243\244\263\275\300\301\303" +
		"\304\305\316\317\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a" +
		"\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f" +
		"\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180" +
		"\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145" +
		"\151\156\164\166\173\176\177\200\211\221\224\230\231\233\234\237\240\242\243\244" +
		"\263\275\300\301\303\304\305\316\317\322\334\343\350\351\353\360\365\u0100\u0101" +
		"\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123" +
		"\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c" +
		"\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114" +
		"\115\124\125\133\136\145\151\156\163\164\166\173\176\177\200\211\221\224\230\233" +
		"\234\237\240\242\243\244\263\275\300\301\303\304\305\316\317\322\334\343\350\351" +
		"\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114" +
		"\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a" +
		"\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41" +
		"\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156\163\164\166\173\176\177" +
		"\200\211\221\224\230\232\233\234\237\240\242\243\244\263\275\300\301\303\304\305" +
		"\316\317\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b" +
		"\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130" +
		"\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186" +
		"\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156" +
		"\164\166\173\176\177\200\211\221\224\230\233\234\237\240\242\243\244\263\275\276" +
		"\300\301\303\304\305\316\317\322\334\343\350\351\353\360\365\371\u0100\u0101\u0102" +
		"\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124" +
		"\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171" +
		"\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124" +
		"\125\133\136\145\151\156\164\166\173\176\177\200\211\221\224\230\233\234\237\240" +
		"\242\243\244\263\275\276\300\301\303\304\305\316\317\322\334\343\350\351\353\360" +
		"\365\371\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114" +
		"\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a" +
		"\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41" +
		"\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156\164\166\173\176\177\200" +
		"\211\221\224\230\233\234\237\240\242\243\244\263\267\275\300\301\303\304\305\316" +
		"\317\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c" +
		"\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a" +
		"\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1" +
		"\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156" +
		"\164\166\173\176\177\200\211\221\224\230\233\234\237\240\242\243\244\263\275\300" +
		"\301\303\304\305\316\317\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107" +
		"\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127" +
		"\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u016d\u0171" +
		"\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124" +
		"\125\133\136\145\151\156\164\165\166\173\176\177\200\211\221\224\230\233\234\237" +
		"\240\241\242\243\244\250\253\263\275\300\301\303\304\305\316\317\322\334\343\350" +
		"\351\353\355\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f" +
		"\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144" +
		"\u0146\u014a\u014b\u014c\u0155\u016c\u016d\u0171\u0178\u017e\u0180\u0186\1\2\6\13" +
		"\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156\164\165" +
		"\166\173\176\177\200\211\221\224\230\233\234\237\240\242\243\244\250\253\263\275" +
		"\300\301\303\304\305\316\317\322\334\343\350\351\353\355\360\365\u0100\u0101\u0102" +
		"\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124" +
		"\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171" +
		"\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124" +
		"\125\133\136\145\151\156\164\165\166\173\176\177\200\211\221\224\230\233\234\237" +
		"\240\242\243\244\250\253\263\275\300\301\303\304\305\316\317\322\334\343\350\351" +
		"\353\355\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111" +
		"\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146" +
		"\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\2\6\13\26\31\35\36" +
		"\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156\164\166\173\176\177" +
		"\200\211\221\224\230\233\234\237\240\242\243\244\263\275\300\301\303\304\305\316" +
		"\317\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c" +
		"\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a" +
		"\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u016d\u0171\u0178\u017e\u0180\u0186" +
		"\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\124\125\133\136\145\151\156" +
		"\164\166\173\176\177\200\211\221\224\230\233\234\237\240\242\243\244\263\275\300" +
		"\301\303\304\305\316\317\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107" +
		"\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127" +
		"\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u016d\u0171" +
		"\u0178\u017e\u0180\u0186\0\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115" +
		"\124\125\133\136\145\151\156\164\166\173\176\177\200\211\221\224\230\233\234\237" +
		"\240\242\243\244\263\275\300\301\303\304\305\316\317\322\334\343\350\351\353\360" +
		"\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115" +
		"\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b" +
		"\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1\2\6\13\20\26\31\35\36\40\41\43" +
		"\44\57\77\100\102\110\114\115\124\125\133\136\145\151\156\164\166\173\176\177\200" +
		"\211\221\224\230\233\234\237\240\242\243\244\263\275\300\301\303\304\305\316\317" +
		"\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c" +
		"\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a" +
		"\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178\u017e\u0180\u0186\1" +
		"\2\6\13\26\31\35\36\40\41\43\44\57\66\77\100\102\114\115\124\125\133\136\145\151" +
		"\156\164\166\173\176\177\200\211\221\224\230\233\234\237\240\242\243\244\263\275" +
		"\300\301\303\304\305\316\317\322\334\343\350\351\353\360\365\u0100\u0101\u0102\u0107" +
		"\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u0124\u0127" +
		"\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0155\u016c\u0171\u0178" +
		"\u017e\u0180\u0186\1\2\6\13\26\31\35\36\40\41\43\44\57\77\100\102\114\115\116\124" +
		"\125\133\136\145\151\156\164\166\173\176\177\200\211\221\224\230\233\234\237\240" +
		"\242\243\244\263\275\300\301\303\304\305\316\317\322\334\343\350\351\353\360\365" +
		"\u0100\u0101\u0102\u0107\u0109\u010a\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c" +
		"\u011e\u0123\u0124\u0127\u012d\u012f\u0130\u013a\u0142\u0144\u0146\u014a\u014b\u014c" +
		"\u0155\u016c\u0171\u0178\u017e\u0180\u0186\237\304\316\317\322\350\351\353\u0107" +
		"\u0109\u010f\u0111\u0114\u011c\u0123\u012d\u012f\u0130\u0155\u016c\u016f\235\0\0" +
		"\40\70\20\110\22\40\26\43\44\102\114\133\136\145\166\173\200\233\237\240\243\244" +
		"\275\303\304\305\316\317\322\334\343\350\351\353\u0102\u0107\u0109\u010b\u010d\u010f" +
		"\u0111\u0114\u0115\u011c\u0123\u0124\u012d\u012f\u0130\u0142\u0144\u0155\u016c\1" +
		"\6\41\115\124\237\301\304\316\317\322\334\350\351\353\u0107\u0109\u010a\u010b\u010c" +
		"\u010d\u010f\u0111\u0114\u0115\u011c\u011e\u0123\u012d\u012f\u0130\u014a\u014b\u014c" +
		"\u0155\u016c\u017e\u0180\26\77\100\151\176\224\234\242\300\365\u0100\u0101\u0127" +
		"\u013a\u0146\u0171\u0178\u0186\135\165\250\253\355\156\211\156\211\221\263\155\223" +
		"\114\114\136\114\136\114\136\266\u0134\u016d\114\136\114\136\177\360\133\200\145" +
		"\145\166\145\166\165\250\253\355\346\347\u0126\163\145\166\145\166\224\365\234\u0146" +
		"\u0127\237\304\350\351\353\u0109\u012d\u012f\u0130\u016c\237\304\350\351\353\u0109" +
		"\u0123\u012d\u012f\u0130\u016c\237\304\350\351\353\u0109\u0123\u012d\u012f\u0130" +
		"\u016c\237\304\316\350\351\353\u0109\u0123\u012d\u012f\u0130\u016c\237\304\316\317" +
		"\321\322\350\351\353\u0107\u0109\u010f\u0110\u0111\u0113\u0114\u0118\u0123\u012d" +
		"\u012f\u0130\u0154\u0155\u0158\u015b\u016c\u0182\237\304\316\317\322\350\351\353" +
		"\u0107\u0109\u010f\u0111\u0114\u0123\u012d\u012f\u0130\u0155\u016c\237\304\316\317" +
		"\350\351\353\u0109\u010f\u0123\u012d\u012f\u0130\u016c\237\304\316\317\322\350\351" +
		"\353\u0107\u0109\u010f\u0111\u0114\u011c\u0123\u012d\u012f\u0130\u0155\u016c\237" +
		"\304\316\317\322\350\351\353\u0107\u0109\u010f\u0111\u0114\u011c\u0123\u012d\u012f" +
		"\u0130\u0155\u016c\237\304\316\317\322\334\350\351\353\u0107\u0109\u010f\u0111\u0114" +
		"\u0115\u011c\u0123\u012d\u012f\u0130\u0155\u016c\237\304\316\317\322\334\350\351" +
		"\353\u0107\u0109\u010b\u010d\u010f\u0111\u0114\u0115\u011c\u0123\u012d\u012f\u0130" +
		"\u0155\u016c\237\304\316\317\322\334\350\351\353\u0107\u0109\u010b\u010d\u010f\u0111" +
		"\u0114\u0115\u011c\u0123\u012d\u012f\u0130\u0155\u016c\237\304\316\317\322\350\351" +
		"\353\u0107\u0109\u010f\u0111\u0114\u011c\u0123\u012d\u012f\u0130\u0155\u016c\237" +
		"\304\316\317\322\334\350\351\353\u0107\u0109\u010b\u010d\u010f\u0111\u0114\u0115" +
		"\u011c\u0123\u012d\u012f\u0130\u0155\u016c\237\304\316\317\322\334\350\351\353\u0107" +
		"\u0109\u010b\u010c\u010d\u010f\u0111\u0114\u0115\u011c\u0123\u012d\u012f\u0130\u0155" +
		"\u016c\237\273\274\304\316\317\322\334\350\351\353\366\u0107\u0109\u010b\u010c\u010d" +
		"\u010f\u0111\u0114\u0115\u011c\u0123\u012d\u012f\u0130\u0155\u016c\u010a\u014a\u014b" +
		"\u017e\u0180\u010a\u014a\u017e\u0180\145\166\237\304\316\317\322\350\351\353\u0107" +
		"\u0109\u010f\u0111\u0114\u011c\u0123\u012d\u012f\u0130\u0155\u016c\145\166\175\237" +
		"\304\316\317\322\350\351\353\u0107\u0109\u010f\u0111\u0114\u011c\u0123\u012d\u012f" +
		"\u0130\u0155\u016c\165\253\26\43\44\102\240\303\u0102\u0124\u0142\u0144\10\307\u014c" +
		"\26\102\276\371\26\77\100\u013a\u0171\303\u0142\u0144\303\u0142\u0144\1\6\41\115" +
		"\124\301\57\125\1\6\26\41\77\100\115\124\301\u011e\u013a\u0140\u0141\u0171\2\13\31" +
		"\2\13\31\237\304\316\317\322\350\351\353\u0107\u0109\u010f\u0111\u0114\u011c\u0123" +
		"\u012d\u012f\u0130\u0155\u016c\u016f\1\6\40\41\115\124\136\164\166\237\301\304\322" +
		"\350\351\353\u0107\u0109\u0111\u0114\u0123\u012d\u012f\u0130\u0155\u016c\3\22\20" +
		"\110\135\266\362\u0134\u016f\133\243\244\343\346\347\u0126\224\237\304\350\351\353" +
		"\u0109\u012d\u012f\u0130\u016c\237\304\316\317\321\322\350\351\353\u0107\u0109\u010f" +
		"\u0110\u0111\u0113\u0114\u0118\u0123\u012d\u012f\u0130\u0154\u0155\u0158\u015b\u016c" +
		"\u0182\145\166\237\304\316\317\322\350\351\353\u0107\u0109\u010f\u0111\u0114\u011c" +
		"\u0123\u012d\u012f\u0130\u0155\u016c\240\26\26\26\57\57\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(3971,
		"\u01a1\u01a2\202\202\4\4\4\64\4\113\4\4\4\4\204\4\u0147\4\4\4\4\4\5\5\5\5\111\5\5" +
		"\5\5\5\u0133\5\5\5\5\5\132\132\163\163\302\302\302\302\302\302\302\302\302\302\302" +
		"\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\237\350\351\353" +
		"\u012d\u012f\u0130\u016c\66\116\u0123\u017e\u017e\u017e\u017e\u0142\u0142\u0142\115" +
		"\155\366\u010b\u013a\u0171\u0140\u0141\177\360\62\112\131\150\356\364\375\u010e\u0137" +
		"\u0138\u013b\u0166\u0167\u0169\u0170\u0172\u0187\u0188\u0189\u0193\u019a\u019c\35" +
		"\205\205\205\205\41\100\102\125\200\206\206\206\206\365\u0124\u0186\77\124\223\u010c" +
		"\u0121\u0127\u0127\u0127\u010c\6\6\6\133\6\6\133\207\207\207\303\207\6\303\303\303" +
		"\303\303\303\303\303\303\303\42\201\210\210\210\210\u0143\31\57\61\156\211\156\211" +
		"\211\304\156\156\211\304\u0109\u010a\304\304\304\304\304\304\304\156\304\304\u014a" +
		"\304\304\304\304\304\304\304\304\304\304\304\304\u016d\u014a\u014a\304\304\u014a" +
		"\u014a\110\126\130\261\262\264\357\u0145\u017a\u017f\u0194\u0195\u019b\305\305\305" +
		"\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\u013c\u0148\u0179" +
		"\26\212\240\212\212\240\212\26\26\101\103\213\213\213\213\u0125\214\214\214\214\u011f" +
		"\u011f\u019d\43\43\u0120\u0120\u019e\u010d\215\215\215\215\u011d\u0102\u0102\u0102" +
		"\44\44\u014b\u014b\u014b\u014b\u014b\216\216\216\216\u011c\u011c\u0180\u011c\u0180" +
		"\u0180\u0180\u0144\u0144\u0144\306\306\306\306\306\306\306\306\306\306\306\306\306" +
		"\306\306\306\306\306\306\306\306\306\306\306\306\164\217\164\164\217\217\164\217" +
		"\164\164\164\164\164\164\164\164\164\164\164\164\164\164\164\164\164\164\164\7\7" +
		"\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\45\17\63\65\67\10\74" +
		"\74\104\120\120\74\134\10\10\104\74\134\74\120\220\235\74\74\120\256\74\220\220\120" +
		"\272\74\120\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307\307\74\307\307\307" +
		"\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307" +
		"\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c\120\11\11\11\11" +
		"\11\11\11\11\11\11\11\11\11\11\12\12\12\12\12\12\12\12\12\12\12\12\12\12\13\13\13" +
		"\13\13\13\u0146\u011e\36\310\310\310\310\310\310\310\310\310\310\310\310\310\310" +
		"\310\310\310\310\310\310\310\310\310\310\310\310\310\310\10\17\10\17\45\17\63\65" +
		"\67\10\74\74\104\120\120\74\134\10\10\104\151\74\134\74\120\220\235\74\74\120\256" +
		"\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307\307" +
		"\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10" +
		"\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c" +
		"\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120" +
		"\220\235\241\74\74\120\256\74\220\220\120\272\74\120\307\74\120\74\74\241\241\220" +
		"\74\120\10\74\307\74\307\307\307\307\74\307\307\307\241\256\120\120\120\74\307\307" +
		"\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c" +
		"\u014c\10\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104" +
		"\120\120\74\134\10\10\104\74\134\74\120\220\235\74\74\120\256\74\220\220\120\272" +
		"\74\120\307\74\120\74\74\220\74\120\10\u0100\74\307\74\307\307\307\307\74\307\307" +
		"\307\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307\74\120" +
		"\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c\120\10\17\10" +
		"\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120\220\235\74" +
		"\74\120\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120\10\u0101\74\307" +
		"\74\307\307\307\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307" +
		"\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120" +
		"\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10" +
		"\104\74\134\74\120\220\235\242\74\74\120\256\74\220\220\120\272\74\120\307\74\120" +
		"\74\74\242\242\220\74\120\10\74\307\74\307\307\307\307\74\307\307\307\242\256\120" +
		"\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307\307\307" +
		"\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63" +
		"\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120\220\224\235\74\74\120" +
		"\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307" +
		"\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307" +
		"\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c" +
		"\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120" +
		"\220\225\235\74\74\120\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120" +
		"\10\74\307\74\307\307\307\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307" +
		"\10\307\307\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10" +
		"\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120" +
		"\74\134\10\10\104\74\134\74\120\220\226\235\74\74\120\256\74\220\220\120\272\74\120" +
		"\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307\307\74\307\307\307\256\120" +
		"\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307\307\307" +
		"\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63" +
		"\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120\220\227\235\74\74\120" +
		"\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307" +
		"\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307" +
		"\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c" +
		"\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120" +
		"\220\230\235\74\74\120\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120" +
		"\10\74\307\74\307\307\307\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307" +
		"\10\307\307\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10" +
		"\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120" +
		"\74\134\10\10\104\74\134\74\120\220\231\235\74\74\120\256\74\220\220\120\272\74\120" +
		"\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307\307\74\307\307\307\256\120" +
		"\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307\307\307" +
		"\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63" +
		"\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120\220\235\74\74\120\256" +
		"\74\220\220\120\272\273\74\120\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307" +
		"\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307" +
		"\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c" +
		"\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120" +
		"\220\235\74\74\120\256\74\220\220\120\272\274\74\120\307\74\120\74\74\220\74\120" +
		"\10\74\307\74\307\307\307\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307" +
		"\10\307\307\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10" +
		"\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120" +
		"\74\134\10\10\104\74\134\74\120\220\232\235\74\74\120\256\74\220\220\120\272\74\120" +
		"\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307\307\74\307\307\307\256\120" +
		"\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307\307\307" +
		"\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63" +
		"\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120\220\233\235\74\74\120" +
		"\256\74\220\220\120\272\275\74\120\307\74\120\74\74\220\74\120\10\74\307\74\307\307" +
		"\307\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307" +
		"\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c" +
		"\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134" +
		"\74\120\220\235\74\74\120\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\372" +
		"\120\10\74\307\74\307\307\307\307\74\307\307\307\256\120\372\120\120\74\307\307\u014c" +
		"\307\10\307\307\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c" +
		"\10\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120" +
		"\74\134\10\10\104\74\134\74\120\220\235\74\74\120\256\74\220\220\120\272\74\120\307" +
		"\74\120\74\74\220\74\373\120\10\74\307\74\307\307\307\307\74\307\307\307\256\120" +
		"\373\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307\307" +
		"\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c\120\10\17\10\17\45" +
		"\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120\220\235\74\74\120" +
		"\256\74\220\220\120\272\74\120\307\74\120\74\74\220\363\74\120\10\74\307\74\307\307" +
		"\307\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307" +
		"\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c" +
		"\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134" +
		"\74\120\220\235\74\74\120\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120" +
		"\10\74\307\74\307\307\307\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307" +
		"\10\307\307\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10" +
		"\307\307\u018b\120\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120" +
		"\120\74\134\10\10\104\74\134\74\120\220\235\243\74\74\120\256\74\220\220\120\272" +
		"\74\120\307\74\343\120\74\74\243\243\220\74\120\10\74\307\74\307\307\307\307\74\307" +
		"\307\307\243\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307" +
		"\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\u018c\120\120\u014c\u014c" +
		"\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120" +
		"\220\235\244\74\74\120\256\74\220\220\120\272\74\120\307\74\120\74\74\244\244\220" +
		"\74\120\10\74\307\74\307\307\307\307\74\307\307\307\244\256\120\120\120\74\307\307" +
		"\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c" +
		"\u014c\10\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104" +
		"\120\120\74\134\10\10\104\74\134\74\120\220\235\245\74\74\120\256\74\220\220\120" +
		"\272\74\120\307\74\120\74\74\245\245\220\74\120\10\74\307\74\307\307\307\307\74\307" +
		"\307\307\245\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307" +
		"\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c\120" +
		"\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120\220" +
		"\235\74\74\120\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120\10\74\307" +
		"\74\307\307\307\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307" +
		"\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\u018d" +
		"\120\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\120\120\74\134\10" +
		"\10\104\74\134\74\120\220\235\74\74\120\256\74\220\220\120\272\74\120\307\74\120" +
		"\74\74\220\74\120\10\74\307\74\307\307\307\307\74\307\307\307\256\120\120\120\74" +
		"\307\307\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307\307\307\120\74\74" +
		"\120\u014c\u014c\10\307\307\u018e\120\120\u014c\u014c\120\2\10\17\10\17\45\17\63" +
		"\65\67\10\74\74\104\120\120\74\134\10\10\104\74\134\74\120\220\235\74\74\120\256" +
		"\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307\307" +
		"\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10" +
		"\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c" +
		"\120\10\17\10\17\32\45\17\63\65\67\10\74\74\104\120\120\74\32\134\10\10\104\74\134" +
		"\74\120\220\235\74\74\120\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120" +
		"\10\74\307\74\307\307\307\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307" +
		"\10\307\307\307\307\307\307\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10" +
		"\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63\65\67\10\74\74\104\114\120" +
		"\120\74\134\10\10\104\74\134\74\120\220\235\74\74\120\256\74\220\220\120\272\74\120" +
		"\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307\307\74\307\307\307\256\120" +
		"\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307\10\307\74\120\307\307\307" +
		"\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c\120\10\17\10\17\45\17\63" +
		"\65\67\10\74\74\104\120\120\74\134\10\145\10\104\74\134\74\120\220\235\74\74\120" +
		"\256\74\220\220\120\272\74\120\307\74\120\74\74\220\74\120\10\74\307\74\307\307\307" +
		"\307\74\307\307\307\256\120\120\120\74\307\307\u014c\307\10\307\307\307\307\307\307" +
		"\10\307\74\120\307\307\307\120\74\74\120\u014c\u014c\10\307\307\120\120\u014c\u014c" +
		"\120\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311" +
		"\311\311\301\u019f\3\70\117\33\33\37\71\46\46\46\46\135\152\135\165\165\253\152\276" +
		"\312\46\345\345\371\46\312\u0108\312\312\312\312\345\312\312\312\46\312\312\u0150" +
		"\u0150\312\312\312\312\312\312\46\312\312\312\46\46\312\312\14\14\14\14\14\313\14" +
		"\313\313\313\313\313\313\313\313\313\313\u014d\313\313\313\313\313\313\313\313\u015f" +
		"\313\313\313\313\u014d\u014d\u017d\313\313\u014d\u014d\47\47\47\176\255\267\277\344" +
		"\376\267\u013d\u013e\u0164\47\277\47\376\u0199\157\246\246\246\246\221\263\222\222" +
		"\265\265\203\266\136\137\161\140\140\141\141\361\u016e\u018f\142\142\143\143\257" +
		"\u0132\153\260\166\167\251\170\170\247\352\354\u0131\u0128\u0128\u0128\234\171\171" +
		"\172\172\270\u0135\300\u0178\u0165\314\u0106\u012b\u012c\u012e\u0149\u0168\u016a" +
		"\u016b\u018a\315\315\315\315\315\315\u0161\315\315\315\315\316\316\316\316\316\316" +
		"\316\316\316\316\316\317\317\u010f\317\317\317\317\317\317\317\317\317\320\320\320" +
		"\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320" +
		"\320\320\320\320\321\321\u0110\u0113\u0118\321\321\321\u0118\321\u0154\u0158\u015b" +
		"\321\321\321\321\u0182\321\322\u0107\u0111\u0114\322\322\322\322\u0155\322\322\322" +
		"\322\322\323\323\323\323\u0119\323\323\323\u0119\323\323\u0119\u0119\u015e\323\323" +
		"\323\323\u0119\323\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324" +
		"\324\324\324\324\325\325\325\325\325\u0122\325\325\325\325\325\325\325\325\u0122" +
		"\325\325\325\325\325\325\325\326\326\326\326\326\326\326\326\326\326\326\u0151\u0153" +
		"\326\326\326\326\326\326\326\326\326\326\326\327\327\327\327\327\327\327\327\327" +
		"\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\330\330\330\330\330" +
		"\330\330\330\330\330\330\330\330\330\330\330\330\330\330\330\331\331\331\331\331" +
		"\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\332" +
		"\332\332\332\332\332\332\332\332\332\332\332\u0152\332\332\332\332\332\332\332\332" +
		"\332\332\332\332\333\367\370\333\333\333\333\333\333\333\333\u0136\333\333\333\333" +
		"\333\333\333\333\333\333\333\333\333\333\333\333\u014e\u014e\u017c\u014e\u014e\u014f" +
		"\u017b\u0196\u0197\173\173\334\334\334\u0115\u0115\334\334\334\u0115\334\u0115\u0115" +
		"\u0115\u0115\334\334\334\334\u0115\334\174\174\254\174\174\174\174\174\174\174\174" +
		"\174\174\174\174\174\174\174\174\174\174\174\174\250\355\50\75\76\50\341\u0103\u013f" +
		"\u0162\u0103\u0103\27\27\27\51\123\374\u0139\52\121\122\u0173\u0192\u0104\u0104\u0104" +
		"\u0105\u0176\u0177\u01a0\23\73\144\146\377\105\147\15\15\53\15\53\53\15\15\15\u0160" +
		"\53\u0174\u0175\53\20\30\60\21\21\21\335\335\335\335\335\335\335\335\335\335\335" +
		"\335\335\335\335\335\335\335\335\335\u0190\16\16\72\16\16\16\162\236\252\336\16\336" +
		"\u011a\336\336\336\u011a\336\u011a\u011a\336\336\336\336\u011a\336\22\40\34\127\160" +
		"\362\u0134\u016f\u0191\154\346\347\u0126\u0129\u012a\u0163\271\337\337\337\337\337" +
		"\337\337\337\337\337\340\340\u0112\u0116\u0117\u011b\340\340\340\u011b\340\u0156" +
		"\u0157\u0159\u015a\u015c\u015d\340\340\340\340\u0181\u0183\u0184\u0185\340\u0198" +
		"\175\175\175\175\175\175\175\175\175\175\175\175\175\175\175\175\175\175\175\175" +
		"\175\175\342\54\55\56\106\107\24\25");

	private static final short[] tmRuleLen = TMLexer.unpack_short(235,
		"\5\4\7\4\3\3\4\4\3\3\1\1\2\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2\1\1\1\1" +
		"\3\10\3\2\3\1\1\1\1\5\3\1\3\1\1\2\2\1\1\1\7\6\6\5\6\5\5\4\2\4\3\3\1\1\2\1\1\1\10" +
		"\6\7\5\4\4\5\5\6\2\1\1\2\1\3\1\5\4\4\3\4\3\3\2\4\3\3\2\3\2\2\1\1\3\2\3\3\4\3\1\2" +
		"\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\4\1\4\2\1\3\2\1\3\3\1\5\2\2\3\1\3" +
		"\3\3\2\2\1\1\1\1\2\1\3\3\1\3\3\1\1\5\3\1\3\1\1\1\1\1\1\3\1\1\2\0\2\0\1\0\1\0\1\0" +
		"\1\0\1\0\1\0\3\1\1\0\1\0\3\1\3\1\1\0\2\1\3\1\3\1\3\1\1\0\3\1\1\0\3\1\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(235,
		"\115\115\116\116\117\120\121\122\122\123\123\124\125\125\126\127\127\130\130\131" +
		"\131\131\131\131\131\131\131\131\131\131\131\131\132\133\133\133\134\134\134\134" +
		"\135\136\136\137\140\141\141\141\141\142\143\144\145\145\146\146\146\147\147\147" +
		"\150\150\150\150\150\150\150\150\151\151\151\151\151\151\152\153\153\153\154\154" +
		"\154\154\155\155\155\155\155\156\156\157\157\160\160\161\162\162\162\162\162\162" +
		"\162\162\162\162\162\162\162\162\162\162\162\163\164\165\165\166\166\167\167\167" +
		"\170\170\170\171\171\172\172\172\173\173\174\174\174\175\176\176\177\177\177\177" +
		"\177\177\177\177\200\201\201\201\201\202\202\202\203\204\204\204\205\206\207\207" +
		"\210\210\210\211\211\212\212\213\213\213\213\214\214\214\215\215\215\215\215\216" +
		"\217\217\217\217\220\221\221\222\223\224\224\225\225\226\226\227\227\230\230\231" +
		"\231\232\232\233\233\234\234\235\235\236\236\237\237\240\240\241\241\242\242\243" +
		"\243\244\244\245\245\246\246\247\247\250\250\251\251\252\252");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'||'",
		"'='",
		"'=='",
		"'!='",
		"'=>'",
		"';'",
		"'.'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'!'",
		"'~'",
		"'&'",
		"'&&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Lbrackets",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lgenerate",
		"Lassert",
		"Lempty",
		"Lnonempty",
		"Lglobal",
		"Lparam",
		"Lbool",
		"Lsymbol",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"symref_noargs",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"lexer_directive",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"nonterm_param",
		"directive",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule0",
		"predicate",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsSet",
		"setPrimary",
		"setExpression",
		"annotations",
		"annotation",
		"nonterm_params",
		"param_ref",
		"symref_args",
		"keyval_arg",
		"param_type",
		"param_value",
		"predicate_primary",
		"predicate_expression",
		"expression",
		"map_entry",
		"literal",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"import__optlist",
		"option_optlist",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"lexer_state_list_Comma_separated",
		"identifieropt",
		"implementsopt",
		"inputref_list_Comma_separated",
		"rule0_list_Or_separated",
		"rhsSuffixopt",
		"annotation_list",
		"param_ref_list_Comma_separated",
		"param_value_list_Comma_separated",
		"keyval_arg_list_Comma_separated",
		"keyval_arg_list_Comma_separated_opt",
		"map_entry_list_Comma_separated",
		"map_entry_list_Comma_separated_opt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		int input = 77;
		int header = 78;
		int lexer_section = 79;
		int parser_section = 80;
		int parsing_algorithm = 81;
		int import_ = 82;
		int option = 83;
		int identifier = 84;
		int symref = 85;
		int symref_noargs = 86;
		int type = 87;
		int type_part_list = 88;
		int type_part = 89;
		int pattern = 90;
		int lexer_parts = 91;
		int lexer_part = 92;
		int named_pattern = 93;
		int lexeme = 94;
		int lexeme_transition = 95;
		int lexeme_attrs = 96;
		int lexeme_attribute = 97;
		int lexer_directive = 98;
		int state_selector = 99;
		int stateref = 100;
		int lexer_state = 101;
		int grammar_parts = 102;
		int grammar_part = 103;
		int nonterm = 104;
		int nonterm_type = 105;
		int _implements = 106;
		int assoc = 107;
		int nonterm_param = 108;
		int directive = 109;
		int inputref = 110;
		int references = 111;
		int references_cs = 112;
		int rules = 113;
		int rule0 = 114;
		int predicate = 115;
		int rhsPrefix = 116;
		int rhsSuffix = 117;
		int ruleAction = 118;
		int rhsParts = 119;
		int rhsPart = 120;
		int rhsAnnotated = 121;
		int rhsAssignment = 122;
		int rhsOptional = 123;
		int rhsCast = 124;
		int rhsUnordered = 125;
		int rhsClass = 126;
		int rhsPrimary = 127;
		int rhsSet = 128;
		int setPrimary = 129;
		int setExpression = 130;
		int annotations = 131;
		int annotation = 132;
		int nonterm_params = 133;
		int param_ref = 134;
		int symref_args = 135;
		int keyval_arg = 136;
		int param_type = 137;
		int param_value = 138;
		int predicate_primary = 139;
		int predicate_expression = 140;
		int expression = 141;
		int map_entry = 142;
		int literal = 143;
		int name = 144;
		int qualified_id = 145;
		int command = 146;
		int syntax_problem = 147;
		int import__optlist = 148;
		int option_optlist = 149;
		int parsing_algorithmopt = 150;
		int typeopt = 151;
		int lexeme_transitionopt = 152;
		int iconopt = 153;
		int lexeme_attrsopt = 154;
		int commandopt = 155;
		int lexer_state_list_Comma_separated = 156;
		int identifieropt = 157;
		int implementsopt = 158;
		int inputref_list_Comma_separated = 159;
		int rule0_list_Or_separated = 160;
		int rhsSuffixopt = 161;
		int annotation_list = 162;
		int param_ref_list_Comma_separated = 163;
		int param_value_list_Comma_separated = 164;
		int keyval_arg_list_Comma_separated = 165;
		int keyval_arg_list_Comma_separated_opt = 166;
		int map_entry_list_Comma_separated = 167;
		int map_entry_list_Comma_separated_opt = 168;
		int expression_list_Comma_separated = 169;
		int expression_list_Comma_separated_opt = 170;
	}

	public interface Rules {
		int lexer_directive_directiveBrackets = 49;  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
		int nonterm_type_nontermTypeAST = 68;  // nonterm_type ::= Lreturns symref_noargs
		int nonterm_type_nontermTypeHint = 69;  // nonterm_type ::= Linline Lclass identifieropt implementsopt
		int nonterm_type_nontermTypeHint2 = 70;  // nonterm_type ::= Lclass identifieropt implementsopt
		int nonterm_type_nontermTypeHint3 = 71;  // nonterm_type ::= Linterface identifieropt implementsopt
		int nonterm_type_nontermTypeHint4 = 72;  // nonterm_type ::= Lvoid
		int nonterm_type_nontermTypeRaw = 73;  // nonterm_type ::= type
		int directive_directivePrio = 82;  // directive ::= '%' assoc references ';'
		int directive_directiveInput = 83;  // directive ::= '%' Linput inputref_list_Comma_separated ';'
		int directive_directiveAssert = 84;  // directive ::= '%' Lassert Lempty rhsSet ';'
		int directive_directiveAssert2 = 85;  // directive ::= '%' Lassert Lnonempty rhsSet ';'
		int directive_directiveSet = 86;  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
		int rhsOptional_rhsQuantifier = 129;  // rhsOptional ::= rhsCast '?'
		int rhsCast_rhsAsLiteral = 132;  // rhsCast ::= rhsClass Las literal
		int rhsPrimary_rhsSymbol = 136;  // rhsPrimary ::= symref
		int rhsPrimary_rhsNested = 137;  // rhsPrimary ::= '(' rules ')'
		int rhsPrimary_rhsList = 138;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		int rhsPrimary_rhsList2 = 139;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		int rhsPrimary_rhsQuantifier = 140;  // rhsPrimary ::= rhsPrimary '*'
		int rhsPrimary_rhsQuantifier2 = 141;  // rhsPrimary ::= rhsPrimary '+'
		int rhsPrimary_rhsIgnored = 142;  // rhsPrimary ::= '$' '(' rules ')'
		int setPrimary_setSymbol = 145;  // setPrimary ::= ID symref
		int setPrimary_setSymbol2 = 146;  // setPrimary ::= symref
		int setPrimary_setCompound = 147;  // setPrimary ::= '(' setExpression ')'
		int setPrimary_setComplement = 148;  // setPrimary ::= '~' setPrimary
		int setExpression_setBinary = 150;  // setExpression ::= setExpression '|' setExpression
		int setExpression_setBinary2 = 151;  // setExpression ::= setExpression '&' setExpression
		int predicate_primary_boolPredicate = 167;  // predicate_primary ::= '!' param_ref
		int predicate_primary_boolPredicate2 = 168;  // predicate_primary ::= param_ref
		int predicate_primary_comparePredicate = 169;  // predicate_primary ::= param_ref '==' literal
		int predicate_primary_comparePredicate2 = 170;  // predicate_primary ::= param_ref '!=' literal
		int predicate_expression_predicateBinary = 172;  // predicate_expression ::= predicate_expression '&&' predicate_expression
		int predicate_expression_predicateBinary2 = 173;  // predicate_expression ::= predicate_expression '||' predicate_expression
		int expression_instance = 176;  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
		int expression_array = 177;  // expression ::= '[' expression_list_Comma_separated_opt ']'
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected Span[] tmStack;
	protected Span tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new Span[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new Span();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new Span();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 37) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new Span();
			tmStack[tmHead].symbol = 37;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 37);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.tokenText()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		Span left = new Span();
		left.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		left.symbol = tmRuleSymbol[rule];
		left.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		Span startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		left.line = startsym.line;
		left.offset = startsym.offset;
		left.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(left, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = left;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, left.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(Span tmLeft, int ruleIndex, int ruleLength) {
		switch (ruleIndex) {
			case 0:  // input ::= header import__optlist option_optlist lexer_section parser_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead - 1].value) /* lexer */,
						((List<ITmaGrammarPart>)tmStack[tmHead].value) /* parser */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 1:  // input ::= header import__optlist option_optlist lexer_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead].value) /* lexer */,
						null /* parser */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 2:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						source, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 3:  // header ::= Llanguage name parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 4:  // lexer_section ::= '::' Llexer lexer_parts
				tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value);
				break;
			case 5:  // parser_section ::= '::' Lparser grammar_parts
				tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value);
				break;
			case 6:  // parsing_algorithm ::= Llalr '(' icon ')'
				tmLeft.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 7:  // import_ ::= Limport ID scon ';'
				tmLeft.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // import_ ::= Limport scon ';'
				tmLeft.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 9:  // option ::= ID '=' expression
				tmLeft.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* key */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* syntaxProblem */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 10:  // option ::= syntax_problem
				tmLeft.value = new TmaOption(
						null /* key */,
						null /* value */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 11:  // identifier ::= ID
				tmLeft.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 12:  // symref ::= ID symref_args
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead - 1].value) /* name */,
						((TmaSymrefArgs)tmStack[tmHead].value) /* args */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // symref ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 14:  // symref_noargs ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 15:  // type ::= '(' scon ')'
				{ tmLeft.value = ((String)tmStack[tmHead - 1].value); }
				break;
			case 16:  // type ::= '(' type_part_list ')'
				{ tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); }
				break;
			case 32:  // pattern ::= regexp
				tmLeft.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 33:  // lexer_parts ::= lexer_part
				tmLeft.value = new ArrayList();
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 34:  // lexer_parts ::= lexer_parts lexer_part
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 35:  // lexer_parts ::= lexer_parts syntax_problem
				((List<ITmaLexerPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 40:  // named_pattern ::= ID '=' pattern
				tmLeft.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 41:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* transition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemeAttrs)tmStack[tmHead - 1].value) /* attrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						source, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 42:  // lexeme ::= identifier typeopt ':'
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* transition */,
						null /* priority */,
						null /* attrs */,
						null /* command */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 43:  // lexeme_transition ::= '=>' stateref
				tmLeft.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 44:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				tmLeft.value = new TmaLexemeAttrs(
						((TmaLexemeAttribute)tmStack[tmHead - 1].value) /* kind */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 45:  // lexeme_attribute ::= Lsoft
				tmLeft.value = TmaLexemeAttribute.LSOFT;
				break;
			case 46:  // lexeme_attribute ::= Lclass
				tmLeft.value = TmaLexemeAttribute.LCLASS;
				break;
			case 47:  // lexeme_attribute ::= Lspace
				tmLeft.value = TmaLexemeAttribute.LSPACE;
				break;
			case 48:  // lexeme_attribute ::= Llayout
				tmLeft.value = TmaLexemeAttribute.LLAYOUT;
				break;
			case 49:  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
				tmLeft.value = new TmaDirectiveBrackets(
						((TmaSymref)tmStack[tmHead - 2].value) /* opening */,
						((TmaSymref)tmStack[tmHead - 1].value) /* closing */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 50:  // state_selector ::= '[' lexer_state_list_Comma_separated ']'
				tmLeft.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 51:  // stateref ::= ID
				tmLeft.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 52:  // lexer_state ::= identifier '=>' stateref
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 53:  // lexer_state ::= identifier
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 54:  // grammar_parts ::= grammar_part
				tmLeft.value = new ArrayList();
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 55:  // grammar_parts ::= grammar_parts grammar_part
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 56:  // grammar_parts ::= grammar_parts syntax_problem
				((List<ITmaGrammarPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 60:  // nonterm ::= annotations identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 6].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 61:  // nonterm ::= annotations identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 62:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 63:  // nonterm ::= annotations identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 64:  // nonterm ::= identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 65:  // nonterm ::= identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 66:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 67:  // nonterm ::= identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 68:  // nonterm_type ::= Lreturns symref_noargs
				tmLeft.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 69:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						true /* inline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 70:  // nonterm_type ::= Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 71:  // nonterm_type ::= Linterface identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 72:  // nonterm_type ::= Lvoid
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* _implements */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 73:  // nonterm_type ::= type
				tmLeft.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* typeText */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 74:  // implements ::= ':' references_cs
				tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value);
				break;
			case 75:  // assoc ::= Lleft
				tmLeft.value = TmaAssoc.LLEFT;
				break;
			case 76:  // assoc ::= Lright
				tmLeft.value = TmaAssoc.LRIGHT;
				break;
			case 77:  // assoc ::= Lnonassoc
				tmLeft.value = TmaAssoc.LNONASSOC;
				break;
			case 78:  // nonterm_param ::= '%' Lglobal Lparam identifier param_type '=' param_value ';'
				tmLeft.value = new TmaNontermParam(
						true /* global */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaParamType)tmStack[tmHead - 3].value) /* paramType */,
						((ITmaParamValue)tmStack[tmHead - 1].value) /* paramValue */,
						source, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 79:  // nonterm_param ::= '%' Lglobal Lparam identifier param_type ';'
				tmLeft.value = new TmaNontermParam(
						true /* global */,
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaParamType)tmStack[tmHead - 1].value) /* paramType */,
						null /* paramValue */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 80:  // nonterm_param ::= '%' Lparam identifier param_type '=' param_value ';'
				tmLeft.value = new TmaNontermParam(
						false /* global */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaParamType)tmStack[tmHead - 3].value) /* paramType */,
						((ITmaParamValue)tmStack[tmHead - 1].value) /* paramValue */,
						source, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 81:  // nonterm_param ::= '%' Lparam identifier param_type ';'
				tmLeft.value = new TmaNontermParam(
						false /* global */,
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaParamType)tmStack[tmHead - 1].value) /* paramType */,
						null /* paramValue */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 82:  // directive ::= '%' assoc references ';'
				tmLeft.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 83:  // directive ::= '%' Linput inputref_list_Comma_separated ';'
				tmLeft.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 84:  // directive ::= '%' Lassert Lempty rhsSet ';'
				tmLeft.value = new TmaDirectiveAssert(
						TmaDirectiveAssert.TmaKindKind.LEMPTY /* kind */,
						((TmaRhsSet)tmStack[tmHead - 1].value) /* rhsSet */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 85:  // directive ::= '%' Lassert Lnonempty rhsSet ';'
				tmLeft.value = new TmaDirectiveAssert(
						TmaDirectiveAssert.TmaKindKind.LNONEMPTY /* kind */,
						((TmaRhsSet)tmStack[tmHead - 1].value) /* rhsSet */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 86:  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
				tmLeft.value = new TmaDirectiveSet(
						((String)tmStack[tmHead - 3].value) /* name */,
						((TmaRhsSet)tmStack[tmHead - 1].value) /* rhsSet */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 87:  // inputref ::= symref_noargs Lnoeoi
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* reference */,
						true /* noeoi */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 88:  // inputref ::= symref_noargs
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						false /* noeoi */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 89:  // references ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 90:  // references ::= references symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 91:  // references_cs ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 92:  // references_cs ::= references_cs ',' symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 94:  // rule0 ::= predicate rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 4].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 95:  // rule0 ::= predicate rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 3].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 96:  // rule0 ::= predicate rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 3].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 97:  // rule0 ::= predicate rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 98:  // rule0 ::= predicate rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 3].value) /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 99:  // rule0 ::= predicate rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 100:  // rule0 ::= predicate ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 101:  // rule0 ::= predicate rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 1].value) /* predicate */,
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 102:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 103:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 104:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 105:  // rule0 ::= rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 106:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 107:  // rule0 ::= rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 108:  // rule0 ::= ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 109:  // rule0 ::= rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 110:  // rule0 ::= syntax_problem
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						null /* list */,
						null /* action */,
						null /* suffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* error */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 111:  // predicate ::= '[' predicate_expression ']'
				tmLeft.value = ((ITmaPredicateExpression)tmStack[tmHead - 1].value);
				break;
			case 112:  // rhsPrefix ::= annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 113:  // rhsSuffix ::= '%' Lprio symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 114:  // rhsSuffix ::= '%' Lshift symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 115:  // ruleAction ::= '{~' identifier scon '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* action */,
						((String)tmStack[tmHead - 1].value) /* parameter */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 116:  // ruleAction ::= '{~' identifier '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 1].value) /* action */,
						null /* parameter */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 117:  // rhsParts ::= rhsPart
				tmLeft.value = new ArrayList();
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 118:  // rhsParts ::= rhsParts rhsPart
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 119:  // rhsParts ::= rhsParts syntax_problem
				((List<ITmaRhsPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 124:  // rhsAnnotated ::= annotations rhsAssignment
				tmLeft.value = new TmaRhsAnnotated(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 126:  // rhsAssignment ::= identifier '=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 127:  // rhsAssignment ::= identifier '+=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 129:  // rhsOptional ::= rhsCast '?'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 131:  // rhsCast ::= rhsClass Las symref
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaSymref)tmStack[tmHead].value) /* target */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 132:  // rhsCast ::= rhsClass Las literal
				tmLeft.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 133:  // rhsUnordered ::= rhsPart '&' rhsPart
				tmLeft.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 135:  // rhsClass ::= identifier ':' rhsPrimary
				tmLeft.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 136:  // rhsPrimary ::= symref
				tmLeft.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 137:  // rhsPrimary ::= '(' rules ')'
				tmLeft.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 138:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						true /* atLeastOne */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 139:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						false /* atLeastOne */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 140:  // rhsPrimary ::= rhsPrimary '*'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 141:  // rhsPrimary ::= rhsPrimary '+'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 142:  // rhsPrimary ::= '$' '(' rules ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 144:  // rhsSet ::= Lset '(' setExpression ')'
				tmLeft.value = new TmaRhsSet(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* expr */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 145:  // setPrimary ::= ID symref
				tmLeft.value = new TmaSetSymbol(
						((String)tmStack[tmHead - 1].value) /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 146:  // setPrimary ::= symref
				tmLeft.value = new TmaSetSymbol(
						null /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 147:  // setPrimary ::= '(' setExpression ')'
				tmLeft.value = new TmaSetCompound(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 148:  // setPrimary ::= '~' setPrimary
				tmLeft.value = new TmaSetComplement(
						((ITmaSetExpression)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 150:  // setExpression ::= setExpression '|' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.OR /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 151:  // setExpression ::= setExpression '&' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.AMPERSAND /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 152:  // annotations ::= annotation_list
				tmLeft.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 153:  // annotation ::= '@' ID '{' expression '}'
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 154:  // annotation ::= '@' ID
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 155:  // annotation ::= '@' syntax_problem
				tmLeft.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 156:  // nonterm_params ::= '<' param_ref_list_Comma_separated '>'
				tmLeft.value = new TmaNontermParams(
						((List<TmaIdentifier>)tmStack[tmHead - 1].value) /* refs */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 158:  // symref_args ::= '<' param_value_list_Comma_separated '>'
				tmLeft.value = new TmaSymrefArgs(
						((List<ITmaParamValue>)tmStack[tmHead - 1].value) /* valueList */,
						null /* keyvalueList */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 159:  // symref_args ::= '<' keyval_arg_list_Comma_separated_opt '>'
				tmLeft.value = new TmaSymrefArgs(
						null /* valueList */,
						((List<TmaKeyvalArg>)tmStack[tmHead - 1].value) /* keyvalueList */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 160:  // keyval_arg ::= param_ref ':' param_value
				tmLeft.value = new TmaKeyvalArg(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((ITmaParamValue)tmStack[tmHead].value) /* val */,
						null /* bool */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 161:  // keyval_arg ::= '+' param_ref
				tmLeft.value = new TmaKeyvalArg(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* val */,
						TmaKeyvalArg.TmaBoolKind.PLUS /* bool */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 162:  // keyval_arg ::= '~' param_ref
				tmLeft.value = new TmaKeyvalArg(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* val */,
						TmaKeyvalArg.TmaBoolKind.TILDE /* bool */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 163:  // param_type ::= Lbool
				tmLeft.value = TmaParamType.LBOOL;
				break;
			case 164:  // param_type ::= Lsymbol
				tmLeft.value = TmaParamType.LSYMBOL;
				break;
			case 167:  // predicate_primary ::= '!' param_ref
				tmLeft.value = new TmaBoolPredicate(
						true /* negated */,
						((TmaIdentifier)tmStack[tmHead].value) /* paramRef */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 168:  // predicate_primary ::= param_ref
				tmLeft.value = new TmaBoolPredicate(
						false /* negated */,
						((TmaIdentifier)tmStack[tmHead].value) /* paramRef */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 169:  // predicate_primary ::= param_ref '==' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EQUAL_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 170:  // predicate_primary ::= param_ref '!=' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EXCLAMATION_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 172:  // predicate_expression ::= predicate_expression '&&' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.AMPERSAND_AMPERSAND /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 173:  // predicate_expression ::= predicate_expression '||' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.OR_OR /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 176:  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
				tmLeft.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntry>)tmStack[tmHead - 1].value) /* entries */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 177:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				tmLeft.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 179:  // map_entry ::= ID ':' expression
				tmLeft.value = new TmaMapEntry(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 180:  // literal ::= scon
				tmLeft.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 181:  // literal ::= icon
				tmLeft.value = new TmaLiteral(
						((Integer)tmStack[tmHead].value) /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 182:  // literal ::= Ltrue
				tmLeft.value = new TmaLiteral(
						true /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 183:  // literal ::= Lfalse
				tmLeft.value = new TmaLiteral(
						false /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 184:  // name ::= qualified_id
				tmLeft.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 186:  // qualified_id ::= qualified_id '.' ID
				{ tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); }
				break;
			case 187:  // command ::= code
				tmLeft.value = new TmaCommand(
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 188:  // syntax_problem ::= error
				tmLeft.value = new TmaSyntaxProblem(
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 189:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 190:  // import__optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 191:  // option_optlist ::= option_optlist option
				((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 192:  // option_optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 205:  // lexer_state_list_Comma_separated ::= lexer_state_list_Comma_separated ',' lexer_state
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 206:  // lexer_state_list_Comma_separated ::= lexer_state
				tmLeft.value = new ArrayList();
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 211:  // inputref_list_Comma_separated ::= inputref_list_Comma_separated ',' inputref
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 212:  // inputref_list_Comma_separated ::= inputref
				tmLeft.value = new ArrayList();
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 213:  // rule0_list_Or_separated ::= rule0_list_Or_separated '|' rule0
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 214:  // rule0_list_Or_separated ::= rule0
				tmLeft.value = new ArrayList();
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 217:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 218:  // annotation_list ::= annotation
				tmLeft.value = new ArrayList();
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 219:  // param_ref_list_Comma_separated ::= param_ref_list_Comma_separated ',' param_ref
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 220:  // param_ref_list_Comma_separated ::= param_ref
				tmLeft.value = new ArrayList();
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 221:  // param_value_list_Comma_separated ::= param_value_list_Comma_separated ',' param_value
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 222:  // param_value_list_Comma_separated ::= param_value
				tmLeft.value = new ArrayList();
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 223:  // keyval_arg_list_Comma_separated ::= keyval_arg_list_Comma_separated ',' keyval_arg
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 224:  // keyval_arg_list_Comma_separated ::= keyval_arg
				tmLeft.value = new ArrayList();
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 227:  // map_entry_list_Comma_separated ::= map_entry_list_Comma_separated ',' map_entry
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 228:  // map_entry_list_Comma_separated ::= map_entry
				tmLeft.value = new ArrayList();
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 231:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 232:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(Span value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(Span value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 417);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 418);
	}
}
