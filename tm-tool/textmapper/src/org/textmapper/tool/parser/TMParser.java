/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(289,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\243\0\244\0\uffcd\uffff\262\0\26" +
		"\0\245\0\246\0\uffff\uffff\233\0\232\0\242\0\257\0\uff93\uffff\uff8b\uffff\uffff" +
		"\uffff\uff7f\uffff\15\0\uffff\uffff\247\0\uff4f\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\6\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\16\0\uffff" +
		"\uffff\uffff\uffff\uff49\uffff\uffff\uffff\21\0\24\0\uffff\uffff\241\0\uff43\uffff" +
		"\uffff\uffff\uffff\uffff\11\0\260\0\20\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\4\0\uff17\uffff\22\0\250\0\uffff\uffff\uff11\uffff\uffff\uffff\uff0b\uffff" +
		"\uffff\uffff\17\0\uffff\uffff\uff05\uffff\ufefd\uffff\ufef7\uffff\51\0\55\0\56\0" +
		"\54\0\23\0\uffff\uffff\2\0\254\0\255\0\253\0\uffff\uffff\uffff\uffff\236\0\uffff" +
		"\uffff\14\0\25\0\ufec5\uffff\uffff\uffff\103\0\uffff\uffff\uffff\uffff\60\0\uffff" +
		"\uffff\52\0\53\0\uffff\uffff\uffff\uffff\uffff\uffff\ufebd\uffff\110\0\113\0\114" +
		"\0\uffff\uffff\ufe8b\uffff\225\0\251\0\uffff\uffff\10\0\uffff\uffff\uffff\uffff\102" +
		"\0\50\0\57\0\uffff\uffff\41\0\42\0\35\0\36\0\uffff\uffff\33\0\34\0\40\0\43\0\45\0" +
		"\44\0\37\0\uffff\uffff\32\0\ufe59\uffff\uffff\uffff\131\0\132\0\133\0\uffff\uffff" +
		"\ufe25\uffff\231\0\ufdf1\uffff\uffff\uffff\uffff\uffff\ufdb5\uffff\ufd89\uffff\127" +
		"\0\130\0\uffff\uffff\111\0\112\0\uffff\uffff\226\0\uffff\uffff\105\0\106\0\104\0" +
		"\27\0\47\0\uffff\uffff\30\0\31\0\ufd5d\uffff\ufd23\uffff\uffff\uffff\136\0\143\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufd1b\uffff\uffff\uffff\ufcdf\uffff" +
		"\261\0\uffff\uffff\211\0\uffff\uffff\ufc91\uffff\150\0\ufc89\uffff\152\0\ufc4f\uffff" +
		"\ufc13\uffff\171\0\174\0\176\0\ufbd3\uffff\172\0\ufb91\uffff\ufb4d\uffff\uffff\uffff" +
		"\173\0\160\0\157\0\ufb05\uffff\121\0\122\0\125\0\126\0\ufad9\uffff\ufa9d\uffff\uffff" +
		"\uffff\252\0\46\0\uffff\uffff\62\0\ufa61\uffff\140\0\142\0\135\0\uffff\uffff\134" +
		"\0\144\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\ufa29\uffff\uf9ed\uffff\uffff\uffff\uffff\uffff\uffff\uffff\120\0\uf9af\uffff\uf971" +
		"\uffff\155\0\uf935\uffff\170\0\156\0\uffff\uffff\202\0\uffff\uffff\215\0\216\0\175" +
		"\0\124\0\uffff\uffff\uffff\uffff\uf8f5\uffff\74\0\64\0\uf8b9\uffff\137\0\227\0\164" +
		"\0\165\0\163\0\161\0\uffff\uffff\212\0\uffff\uffff\uffff\uffff\uffff\uffff\177\0" +
		"\uf883\uffff\200\0\151\0\154\0\uf83b\uffff\204\0\205\0\117\0\116\0\uffff\uffff\uffff" +
		"\uffff\66\0\uf7fb\uffff\162\0\uffff\uffff\uffff\uffff\222\0\115\0\76\0\77\0\100\0" +
		"\101\0\uffff\uffff\70\0\72\0\uffff\uffff\uffff\uffff\220\0\uffff\uffff\75\0\214\0" +
		"\213\0\uffff\uffff\uffff\uffff\221\0\223\0\217\0\uffff\uffff\uffff\uffff\ufffe\uffff" +
		"\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(2102,
		"\46\uffff\10\1\37\1\40\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62" +
		"\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\uffff\ufffe\2\uffff\3\uffff\21\uffff\37\uffff" +
		"\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\47\uffff\41\uffff\42\uffff\43\uffff\22\240\uffff\ufffe\23\uffff\67\uffff" +
		"\14\7\uffff\ufffe\15\uffff\14\256\23\256\24\256\67\256\uffff\ufffe\46\uffff\10\0" +
		"\37\0\40\0\47\0\50\0\51\0\52\0\53\0\54\0\55\0\56\0\57\0\60\0\61\0\62\0\63\0\64\0" +
		"\65\0\66\0\67\0\70\0\71\0\uffff\ufffe\17\uffff\22\237\uffff\ufffe\10\uffff\0\5\uffff" +
		"\ufffe\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\50\uffff\47\uffff\24\235\uffff\ufffe\10\uffff\0\3\uffff\ufffe\17\uffff\24" +
		"\234\uffff\ufffe\67\uffff\14\7\uffff\ufffe\12\uffff\20\25\23\25\uffff\ufffe\23\uffff" +
		"\20\61\uffff\ufffe\21\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\0\12\10\12\uffff\ufffe\13" +
		"\uffff\17\107\22\107\uffff\ufffe\6\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\0\13\uffff" +
		"\ufffe\36\uffff\22\224\23\224\35\224\40\224\47\224\50\224\51\224\52\224\53\224\54" +
		"\224\55\224\56\224\57\224\60\224\61\224\62\224\63\224\64\224\65\224\66\224\67\224" +
		"\70\224\71\224\uffff\ufffe\1\uffff\0\73\10\73\21\73\37\73\40\73\47\73\50\73\51\73" +
		"\52\73\53\73\54\73\55\73\56\73\57\73\60\73\61\73\62\73\63\73\64\73\65\73\66\73\67" +
		"\73\70\73\71\73\uffff\ufffe\74\uffff\22\230\23\230\35\230\36\230\40\230\47\230\50" +
		"\230\51\230\52\230\53\230\54\230\55\230\56\230\57\230\60\230\61\230\62\230\63\230" +
		"\64\230\65\230\66\230\67\230\70\230\71\230\uffff\ufffe\6\uffff\21\uffff\23\uffff" +
		"\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff" +
		"\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\153\14\153\uffff\ufffe" +
		"\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\47\uffff\7\123\uffff\ufffe\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\7\123\uffff\ufffe\13\uffff" +
		"\0\63\3\63\10\63\21\63\23\63\37\63\40\63\47\63\50\63\51\63\52\63\53\63\54\63\55\63" +
		"\56\63\57\63\60\63\61\63\62\63\63\63\64\63\65\63\66\63\67\63\70\63\71\63\73\63\uffff" +
		"\ufffe\57\uffff\14\141\17\141\uffff\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff" +
		"\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\47\uffff\73\uffff\11\153\24\153\uffff\ufffe\12\25\20\25\32\25" +
		"\6\26\11\26\14\26\23\26\24\26\30\26\31\26\33\26\34\26\35\26\36\26\37\26\40\26\44" +
		"\26\45\26\47\26\50\26\51\26\52\26\53\26\54\26\55\26\56\26\57\26\60\26\61\26\62\26" +
		"\63\26\64\26\65\26\66\26\67\26\70\26\71\26\73\26\uffff\ufffe\11\uffff\14\147\24\147" +
		"\uffff\ufffe\6\uffff\23\uffff\35\uffff\36\uffff\40\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\153\14" +
		"\153\24\153\uffff\ufffe\6\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff" +
		"\73\uffff\11\153\14\153\24\153\uffff\ufffe\34\uffff\6\166\11\166\14\166\23\166\24" +
		"\166\35\166\36\166\37\166\40\166\44\166\47\166\50\166\51\166\52\166\53\166\54\166" +
		"\55\166\56\166\57\166\60\166\61\166\62\166\63\166\64\166\65\166\66\166\67\166\70" +
		"\166\71\166\73\166\uffff\ufffe\33\uffff\6\201\11\201\14\201\23\201\24\201\34\201" +
		"\35\201\36\201\37\201\40\201\44\201\47\201\50\201\51\201\52\201\53\201\54\201\55" +
		"\201\56\201\57\201\60\201\61\201\62\201\63\201\64\201\65\201\66\201\67\201\70\201" +
		"\71\201\73\201\uffff\ufffe\45\uffff\6\203\11\203\14\203\23\203\24\203\33\203\34\203" +
		"\35\203\36\203\37\203\40\203\44\203\47\203\50\203\51\203\52\203\53\203\54\203\55" +
		"\203\56\203\57\203\60\203\61\203\62\203\63\203\64\203\65\203\66\203\67\203\70\203" +
		"\71\203\73\203\uffff\ufffe\30\uffff\31\uffff\6\207\11\207\14\207\23\207\24\207\33" +
		"\207\34\207\35\207\36\207\37\207\40\207\44\207\45\207\47\207\50\207\51\207\52\207" +
		"\53\207\54\207\55\207\56\207\57\207\60\207\61\207\62\207\63\207\64\207\65\207\66" +
		"\207\67\207\70\207\71\207\73\207\uffff\ufffe\40\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\7\123\uffff\ufffe" +
		"\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff" +
		"\11\153\14\153\uffff\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40" +
		"\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61" +
		"\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50" +
		"\uffff\47\uffff\73\uffff\11\153\14\153\uffff\ufffe\3\uffff\0\65\10\65\21\65\23\65" +
		"\37\65\40\65\47\65\50\65\51\65\52\65\53\65\54\65\55\65\56\65\57\65\60\65\61\65\62" +
		"\65\63\65\64\65\65\65\66\65\67\65\70\65\71\65\73\65\uffff\ufffe\6\uffff\23\uffff" +
		"\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff" +
		"\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\44\uffff\73\uffff\11\153\24\153\uffff" +
		"\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73" +
		"\uffff\11\153\14\153\24\153\uffff\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff" +
		"\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\47\uffff\73\uffff\11\153\14\153\24\153\uffff\ufffe\6\uffff\23" +
		"\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54" +
		"\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\153\14\153\24\153" +
		"\uffff\ufffe\34\uffff\6\167\11\167\14\167\23\167\24\167\35\167\36\167\37\167\40\167" +
		"\44\167\47\167\50\167\51\167\52\167\53\167\54\167\55\167\56\167\57\167\60\167\61" +
		"\167\62\167\63\167\64\167\65\167\66\167\67\167\70\167\71\167\73\167\uffff\ufffe\6" +
		"\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11" +
		"\153\14\153\uffff\ufffe\23\uffff\0\67\10\67\21\67\37\67\40\67\47\67\50\67\51\67\52" +
		"\67\53\67\54\67\55\67\56\67\57\67\60\67\61\67\62\67\63\67\64\67\65\67\66\67\67\67" +
		"\70\67\71\67\73\67\uffff\ufffe\30\uffff\31\uffff\6\210\11\210\14\210\23\210\24\210" +
		"\33\210\34\210\35\210\36\210\37\210\40\210\44\210\45\210\47\210\50\210\51\210\52" +
		"\210\53\210\54\210\55\210\56\210\57\210\60\210\61\210\62\210\63\210\64\210\65\210" +
		"\66\210\67\210\70\210\71\210\73\210\uffff\ufffe\34\206\6\206\11\206\14\206\23\206" +
		"\24\206\35\206\36\206\37\206\40\206\44\206\47\206\50\206\51\206\52\206\53\206\54" +
		"\206\55\206\56\206\57\206\60\206\61\206\62\206\63\206\64\206\65\206\66\206\67\206" +
		"\70\206\71\206\73\206\uffff\ufffe\73\uffff\0\71\10\71\21\71\37\71\40\71\47\71\50" +
		"\71\51\71\52\71\53\71\54\71\55\71\56\71\57\71\60\71\61\71\62\71\63\71\64\71\65\71" +
		"\66\71\67\71\70\71\71\71\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(138,
		"\0\2\4\17\31\31\31\46\52\56\57\64\70\103\110\111\122\127\153\164\220\234\235\241" +
		"\245\254\257\260\265\274\314\340\366\u0136\u013e\u0146\u014d\u014e\u014f\u0151\u0193" +
		"\u01d4\u0215\u0257\u0298\u02d9\u031a\u035b\u039c\u03dd\u0421\u0463\u04a5\u04e6\u0527" +
		"\u0568\u05aa\u05eb\u062c\u062c\u0639\u063a\u063b\u063c\u063e\u0640\u0642\u0643\u0645" +
		"\u0646\u0648\u0663\u0687\u068a\u068c\u0690\u0692\u0693\u0695\u0697\u0699\u069a\u069b" +
		"\u069c\u069e\u069f\u06a1\u06a3\u06a4\u06a6\u06a8\u06aa\u06ab\u06ad\u06ae\u06b0\u06b2" +
		"\u06b2\u06b8\u06be\u06c5\u06cc\u06d7\u06df\u06eb\u06f7\u0704\u0713\u0722\u072e\u073d" +
		"\u074d\u074f\u075e\u076d\u077d\u0784\u078c\u078d\u078e\u0790\u0793\u0796\u07a3\u07b9" +
		"\u07ba\u07bc\u07bd\u07be\u07bf\u07c0\u07c1\u07c4\u07c5\u07d0\u07d1\u07d2\u07d3");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(2003,
		"\u011d\u011e\125\174\1\6\22\40\50\62\114\126\220\237\341\1\6\50\54\62\114\220\237" +
		"\306\341\107\136\204\242\253\255\277\300\323\324\331\332\350\135\213\216\301\25\44" +
		"\45\65\251\43\70\77\146\246\70\122\146\231\35\37\60\117\233\236\250\346\347\365\u0101" +
		"\21\126\162\172\226\u0112\27\71\123\126\162\172\226\233\u0114\70\130\146\246\366" +
		"\1\6\50\61\62\101\114\126\162\172\204\220\226\237\242\277\300\324\331\350\30\123" +
		"\126\162\172\226\320\321\362\20\31\33\100\126\135\162\172\204\216\226\242\243\253" +
		"\255\266\277\300\323\324\325\326\327\331\332\337\350\353\53\72\74\155\162\172\226" +
		"\322\365\u0106\u010e\u0114\315\126\162\172\226\126\162\172\226\126\162\172\226\265" +
		"\370\u0111\265\370\u0111\246\126\162\172\226\262\126\162\172\226\256\334\374\204" +
		"\242\253\255\266\277\300\323\324\325\326\327\331\332\337\350\107\126\136\143\162" +
		"\172\204\226\241\242\253\255\277\300\323\324\331\332\337\350\1\6\25\45\50\62\101" +
		"\114\134\136\204\220\237\242\255\277\300\323\324\331\332\350\1\2\6\13\22\25\32\36" +
		"\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206" +
		"\207\210\220\226\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323" +
		"\324\325\326\327\331\332\337\341\350\364\u0106\u0107\u0118\u0119\1\6\50\62\114\220" +
		"\237\341\1\6\50\62\114\220\237\341\1\6\50\62\114\220\237\323\264\3\23\1\2\6\13\22" +
		"\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175" +
		"\201\204\206\207\210\216\220\226\236\237\241\242\253\255\266\272\277\300\304\312" +
		"\316\317\321\323\324\325\326\327\331\332\337\341\350\364\u0106\u0107\u0118\u0119" +
		"\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\220\226\236\237\240\241\242\253\255\266\272\277\300" +
		"\304\312\316\317\321\323\324\325\326\327\331\332\337\341\350\364\u0106\u0107\u0118" +
		"\u0119\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150" +
		"\151\162\172\175\201\204\206\207\210\220\226\236\237\240\241\242\253\255\266\272" +
		"\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341\350\364\u0106\u0107" +
		"\u0118\u0119\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136" +
		"\142\150\151\162\172\175\201\204\206\207\210\216\220\226\236\237\241\242\253\255" +
		"\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341\350\364" +
		"\u0106\u0107\u0118\u0119\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126" +
		"\133\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242" +
		"\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341" +
		"\350\364\u0106\u0107\u0118\u0119\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114" +
		"\115\126\133\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237" +
		"\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332" +
		"\337\341\350\364\u0106\u0107\u0118\u0119\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101" +
		"\107\114\115\126\133\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327" +
		"\331\332\337\341\350\364\u0106\u0107\u0118\u0119\1\2\6\13\22\25\32\36\45\50\52\61" +
		"\62\76\101\107\114\115\126\133\134\136\142\150\151\162\172\175\201\204\206\207\210" +
		"\220\226\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325" +
		"\326\327\331\332\337\341\350\364\u0106\u0107\u0118\u0119\1\2\6\13\22\25\32\36\45" +
		"\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207" +
		"\210\220\226\232\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323" +
		"\324\325\326\327\331\332\337\341\350\364\u0106\u0107\u0118\u0119\1\2\6\13\22\25\32" +
		"\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204" +
		"\206\207\210\220\226\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321" +
		"\323\324\325\326\327\331\332\337\341\350\364\u0102\u0106\u0107\u0118\u0119\1\2\6" +
		"\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142\150\151\162" +
		"\172\175\201\204\205\206\207\210\216\220\226\236\237\241\242\253\255\266\272\277" +
		"\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341\350\364\u0102\u0106" +
		"\u0107\u0118\u0119\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134" +
		"\135\136\142\150\151\162\172\175\201\204\206\207\210\216\220\226\236\237\241\242" +
		"\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341" +
		"\350\364\u0106\u0107\u0118\u0119\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114" +
		"\115\126\134\135\136\142\150\151\162\172\175\201\204\206\207\210\216\220\226\236" +
		"\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331" +
		"\332\337\341\350\364\u0106\u0107\u0118\u0119\1\2\6\13\22\25\32\36\45\50\52\61\62" +
		"\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327" +
		"\331\332\337\341\350\364\u0102\u0106\u0107\u0118\u0119\1\2\6\13\22\25\32\36\45\50" +
		"\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207" +
		"\210\220\226\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324" +
		"\325\326\327\331\332\337\341\350\364\u0102\u0106\u0107\u0118\u0119\0\1\2\6\13\22" +
		"\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201" +
		"\204\206\207\210\220\226\236\237\241\242\253\255\266\272\277\300\304\312\316\317" +
		"\321\323\324\325\326\327\331\332\337\341\350\364\u0106\u0107\u0118\u0119\1\2\6\13" +
		"\20\22\25\32\36\45\50\52\61\62\73\76\101\107\114\115\126\134\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\220\226\236\237\241\242\253\255\266\272\277\300\304" +
		"\312\316\317\321\323\324\325\326\327\331\332\337\341\350\364\u0106\u0107\u0118\u0119" +
		"\1\2\6\13\22\25\32\36\42\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151" +
		"\162\172\175\201\204\206\207\210\220\226\236\237\241\242\253\255\266\272\277\300" +
		"\304\312\316\317\321\323\324\325\326\327\331\332\337\341\350\364\u0106\u0107\u0118" +
		"\u0119\1\2\6\13\22\25\32\36\45\50\52\61\62\63\76\101\107\114\115\126\134\136\142" +
		"\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\253\255\266\272" +
		"\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341\350\364\u0106\u0107" +
		"\u0118\u0119\204\242\253\255\277\300\323\324\331\332\337\350\u0104\202\0\0\25\45" +
		"\44\65\20\73\3\3\23\25\25\45\61\76\101\107\136\142\151\204\207\210\241\242\253\255" +
		"\266\272\277\300\321\323\324\325\327\331\332\337\350\1\6\50\62\114\175\201\204\206" +
		"\220\236\237\242\253\255\266\277\300\312\316\317\323\324\325\326\327\331\332\337" +
		"\341\350\364\u0106\u0107\u0118\u0119\100\135\216\126\162\126\162\172\226\125\174" +
		"\61\61\101\61\101\61\101\231\353\u0102\61\101\76\150\304\76\151\107\107\136\107\136" +
		"\135\216\133\107\136\175\175\312\201\364\204\242\277\300\324\350\204\242\277\300" +
		"\324\350\204\242\277\300\324\331\350\204\242\277\300\324\331\350\204\242\253\255" +
		"\277\300\323\324\331\332\350\204\242\253\277\300\324\331\350\204\242\253\255\277" +
		"\300\323\324\331\332\337\350\204\242\253\255\277\300\323\324\331\332\337\350\204" +
		"\242\253\255\266\277\300\323\324\331\332\337\350\204\242\253\255\266\277\300\323" +
		"\324\325\327\331\332\337\350\204\242\253\255\266\277\300\323\324\325\327\331\332" +
		"\337\350\204\242\253\255\277\300\323\324\331\332\337\350\204\242\253\255\266\277" +
		"\300\323\324\325\327\331\332\337\350\204\242\253\255\266\277\300\323\324\325\326" +
		"\327\331\332\337\350\u0107\u0119\107\136\204\241\242\253\255\277\300\323\324\331" +
		"\332\337\350\107\136\204\241\242\253\255\277\300\323\324\331\332\337\350\107\136" +
		"\143\204\241\242\253\255\277\300\323\324\331\332\337\350\1\6\50\62\114\220\237\1" +
		"\6\50\62\114\220\237\341\6\52\70\146\2\13\32\2\13\32\204\242\253\255\277\300\323" +
		"\324\331\332\337\350\u0104\1\6\25\45\50\62\101\114\134\136\204\220\237\242\255\277" +
		"\300\323\324\331\332\350\3\20\73\100\231\306\353\u0104\207\210\272\232\204\242\253" +
		"\255\277\300\323\324\331\332\350\u0107\52\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(2003,
		"\u011f\u0120\153\153\4\4\37\60\4\4\4\155\4\4\4\5\5\5\74\5\5\5\5\352\5\133\133\240" +
		"\240\240\240\240\240\240\240\240\240\240\204\277\300\350\42\63\42\63\331\62\111\125" +
		"\111\325\112\150\112\304\55\57\75\147\311\313\330\377\u0100\u0107\u0109\36\156\156" +
		"\156\156\u0118\50\115\151\157\157\157\157\312\u0119\113\174\113\326\326\6\6\6\76" +
		"\6\76\6\160\160\160\241\6\160\6\241\241\241\241\241\241\51\152\161\161\161\161\360" +
		"\361\u0105\32\52\54\126\162\126\162\162\242\126\162\242\324\242\242\242\242\242\242" +
		"\242\242\242\242\242\242\242\242\u0102\73\116\120\224\225\227\303\363\u0108\u0111" +
		"\u0115\u011a\355\163\163\163\163\164\164\164\164\165\165\165\165\342\342\u0116\343" +
		"\343\u0117\327\166\166\166\166\340\167\167\167\167\337\337\337\243\243\243\243\243" +
		"\243\243\243\243\243\243\243\243\243\243\243\134\170\134\134\170\170\134\170\134" +
		"\134\134\134\134\134\134\134\134\134\134\134\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7" +
		"\7\7\7\7\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121" +
		"\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244" +
		"\221\10\10\10\121\244\244\244\10\244\244\244\244\10\244\10\10\10\10\10\11\11\11\11" +
		"\11\11\11\11\12\12\12\12\12\12\12\12\13\13\13\13\13\13\13\364\341\22\22\10\17\10" +
		"\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\205\121\121\221\121\171" +
		"\171\10\10\244\10\121\121\205\10\171\10\10\121\244\244\244\244\121\244\244\221\10" +
		"\10\10\121\244\244\244\10\244\244\244\244\10\244\10\10\10\10\10\10\17\10\17\40\43" +
		"\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244" +
		"\10\121\121\10\171\10\10\316\121\244\244\244\244\121\244\244\221\10\10\10\121\244" +
		"\244\244\10\244\244\244\244\10\244\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70" +
		"\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10" +
		"\171\10\10\317\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244" +
		"\244\244\244\10\244\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77" +
		"\121\10\146\171\202\206\121\121\221\121\171\171\10\10\244\10\121\121\206\10\171\10" +
		"\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244" +
		"\10\244\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171" +
		"\175\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244" +
		"\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\244\10\10\10" +
		"\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\176\202\121\121" +
		"\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244" +
		"\221\10\10\10\121\244\244\244\10\244\244\244\244\10\244\10\10\10\10\10\10\17\10\17" +
		"\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\177\202\121\121\221\121\171\171" +
		"\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121" +
		"\244\244\244\10\244\244\244\244\10\244\10\10\10\10\10\10\17\10\17\40\43\17\56\43" +
		"\10\70\77\10\121\77\121\10\146\171\200\202\121\121\221\121\171\171\10\10\244\10\121" +
		"\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10" +
		"\244\244\244\244\10\244\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121" +
		"\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\307\10" +
		"\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244" +
		"\10\244\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171" +
		"\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244" +
		"\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\244\10\u010a\10\10" +
		"\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\207\121\121" +
		"\221\121\171\171\10\10\244\272\10\121\121\207\10\171\10\10\121\244\244\244\244\121" +
		"\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\244\10\u010b\10\10\10" +
		"\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\210\121\121" +
		"\221\121\171\171\10\10\244\10\121\121\210\10\171\10\10\121\244\244\244\244\121\244" +
		"\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\244\10\10\10\10\10\10\17" +
		"\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\211\121\121\221\121\171" +
		"\171\10\10\244\10\121\121\211\10\171\10\10\121\244\244\244\244\121\244\244\221\10" +
		"\10\10\121\244\244\244\10\244\244\244\244\10\244\10\10\10\10\10\10\17\10\17\40\43" +
		"\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244" +
		"\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244" +
		"\244\10\244\244\244\244\10\244\10\u010c\10\10\10\10\10\17\10\17\40\43\17\56\43\10" +
		"\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121" +
		"\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244" +
		"\244\244\244\10\244\10\u010d\10\10\10\10\2\10\17\10\17\40\43\17\56\43\10\70\77\10" +
		"\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10" +
		"\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244" +
		"\10\244\10\10\10\10\10\10\17\10\17\33\40\43\17\56\43\10\70\77\10\33\121\77\121\10" +
		"\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244" +
		"\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\244\10\10" +
		"\10\10\10\10\17\10\17\40\43\17\56\61\43\10\70\77\10\121\77\121\10\146\171\202\121" +
		"\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244" +
		"\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\244\10\10\10\10\10\10\17" +
		"\10\17\40\43\17\56\43\10\70\77\10\107\121\77\121\10\146\171\202\121\121\221\121\171" +
		"\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10" +
		"\10\121\244\244\244\10\244\244\244\244\10\244\10\10\10\10\10\245\245\245\245\245" +
		"\245\245\245\245\245\245\245\245\237\u011d\3\44\65\64\110\34\34\23\24\41\45\46\66" +
		"\100\122\100\135\135\216\122\246\274\274\320\246\246\246\246\274\246\246\362\246" +
		"\246\366\366\246\246\246\246\14\14\14\14\14\232\235\247\273\14\314\14\247\247\247" +
		"\247\247\247\232\356\357\247\247\247\247\247\247\247\247\375\247\235\314\u0112\u011b" +
		"\u0112\127\212\212\172\226\173\173\230\230\154\231\101\102\131\103\103\104\104\305" +
		"\u0103\u010e\105\105\123\222\351\124\223\136\137\214\140\140\213\301\201\141\141" +
		"\233\234\354\236\u0106\250\322\346\347\365\u0101\251\251\251\251\251\251\252\252" +
		"\252\252\252\372\252\253\253\253\253\253\253\253\254\254\254\254\254\254\254\254" +
		"\254\254\254\255\323\332\255\255\255\255\255\256\256\256\334\256\256\334\256\256" +
		"\334\374\256\257\257\257\257\257\257\257\257\257\257\257\257\260\260\260\260\344" +
		"\260\260\260\260\260\260\260\260\261\261\261\261\261\261\261\261\261\367\371\261" +
		"\261\261\261\262\262\262\262\262\262\262\262\262\262\262\262\262\262\262\263\263" +
		"\263\263\263\263\263\263\263\263\263\263\264\264\264\264\264\264\264\264\264\264" +
		"\264\264\264\264\264\265\265\265\265\265\265\265\265\265\265\370\265\265\265\265" +
		"\265\u0113\u011c\142\142\266\321\266\266\266\266\266\266\266\266\266\266\266\143" +
		"\143\143\143\143\143\143\143\143\143\143\143\143\143\143\144\144\217\144\144\144" +
		"\144\144\144\144\144\144\144\144\144\144\u011e\26\67\106\145\302\315\15\15\15\15" +
		"\15\15\15\376\27\71\114\220\20\31\53\21\21\21\267\267\267\267\267\267\267\267\267" +
		"\267\267\267\u010f\16\16\47\47\16\16\132\16\203\215\270\16\16\270\335\270\270\335" +
		"\270\270\335\270\25\35\117\130\306\353\u0104\u0110\275\276\345\310\271\271\333\336" +
		"\271\271\336\271\271\373\271\u0114\72\30");

	private static final short[] tmRuleLen = TMLexer.unpack_short(179,
		"\1\0\5\4\4\3\1\0\7\4\3\3\4\1\2\4\3\1\2\3\1\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2" +
		"\1\1\2\2\1\1\1\3\1\0\1\0\1\0\1\0\1\0\10\3\2\3\1\1\1\1\3\1\3\1\3\1\1\2\2\1\1\6\5\5" +
		"\4\2\1\0\3\2\2\1\1\1\1\1\4\4\1\3\1\0\2\1\2\1\3\1\1\3\1\0\3\2\2\1\1\3\4\3\3\3\1\2" +
		"\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\3\1\6\4\3\1\1\2\5\2\2\1\1\1\0\5\1" +
		"\0\3\1\1\1\1\1\1\3\3\5\1\1\1\1\1\3\1\1");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(179,
		"\174\174\75\75\75\75\175\175\76\76\77\100\101\102\102\103\103\104\104\105\105\106" +
		"\107\110\110\111\111\112\112\112\112\112\112\112\112\112\112\112\112\112\113\114" +
		"\114\114\115\115\115\116\176\176\177\177\200\200\201\201\202\202\117\117\120\121" +
		"\122\122\122\122\123\124\124\125\126\126\127\127\127\130\130\131\131\131\131\132" +
		"\203\203\132\132\132\132\132\133\133\133\134\134\135\135\204\204\136\137\137\140" +
		"\140\141\142\142\205\205\143\143\143\143\143\144\144\144\145\145\146\146\146\147" +
		"\147\147\150\150\151\151\151\152\152\153\153\153\154\155\155\156\156\156\156\156" +
		"\156\206\206\156\156\157\160\161\161\162\162\162\163\163\207\207\163\210\210\163" +
		"\163\164\164\164\164\165\165\166\166\167\167\167\170\171\171\172\173");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'='",
		"'=>'",
		"';'",
		"'.'",
		"'..'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"imports",
		"import_",
		"options",
		"option",
		"identifier",
		"symref",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"state_selector",
		"state_list",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"assoc",
		"directive",
		"inputs",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule_list",
		"rule0",
		"rhsPrefix",
		"rhsSuffix",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsBracketsPair",
		"annotations",
		"annotation_list",
		"annotation",
		"expression",
		"literal",
		"expression_list",
		"map_entries",
		"map_separator",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"importsopt",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"identifieropt",
		"Lnoeoiopt",
		"rhsSuffixopt",
		"rhsBracketsPair_list_Comma_separated",
		"map_entriesopt",
		"expression_listopt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 61;
		static final int header = 62;
		static final int lexer_section = 63;
		static final int parser_section = 64;
		static final int parsing_algorithm = 65;
		static final int imports = 66;
		static final int import_ = 67;
		static final int options = 68;
		static final int option = 69;
		static final int identifier = 70;
		static final int symref = 71;
		static final int type = 72;
		static final int type_part_list = 73;
		static final int type_part = 74;
		static final int pattern = 75;
		static final int lexer_parts = 76;
		static final int lexer_part = 77;
		static final int named_pattern = 78;
		static final int lexeme = 79;
		static final int lexeme_transition = 80;
		static final int lexeme_attrs = 81;
		static final int lexeme_attribute = 82;
		static final int state_selector = 83;
		static final int state_list = 84;
		static final int stateref = 85;
		static final int lexer_state = 86;
		static final int grammar_parts = 87;
		static final int grammar_part = 88;
		static final int nonterm = 89;
		static final int nonterm_type = 90;
		static final int assoc = 91;
		static final int directive = 92;
		static final int inputs = 93;
		static final int inputref = 94;
		static final int references = 95;
		static final int references_cs = 96;
		static final int rules = 97;
		static final int rule_list = 98;
		static final int rule0 = 99;
		static final int rhsPrefix = 100;
		static final int rhsSuffix = 101;
		static final int rhsParts = 102;
		static final int rhsPart = 103;
		static final int rhsAnnotated = 104;
		static final int rhsAssignment = 105;
		static final int rhsOptional = 106;
		static final int rhsCast = 107;
		static final int rhsUnordered = 108;
		static final int rhsClass = 109;
		static final int rhsPrimary = 110;
		static final int rhsBracketsPair = 111;
		static final int annotations = 112;
		static final int annotation_list = 113;
		static final int annotation = 114;
		static final int expression = 115;
		static final int literal = 116;
		static final int expression_list = 117;
		static final int map_entries = 118;
		static final int map_separator = 119;
		static final int name = 120;
		static final int qualified_id = 121;
		static final int command = 122;
		static final int syntax_problem = 123;
		static final int importsopt = 124;
		static final int parsing_algorithmopt = 125;
		static final int typeopt = 126;
		static final int lexeme_transitionopt = 127;
		static final int iconopt = 128;
		static final int lexeme_attrsopt = 129;
		static final int commandopt = 130;
		static final int identifieropt = 131;
		static final int Lnoeoiopt = 132;
		static final int rhsSuffixopt = 133;
		static final int rhsBracketsPair_list_Comma_separated = 134;
		static final int map_entriesopt = 135;
		static final int expression_listopt = 136;
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 31) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 31;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 31);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 2:  // input ::= header importsopt options lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 4].value), ((List<TmaImport>)tmStack[tmHead - 3].value), ((List<TmaOption>)tmStack[tmHead - 2].value), ((TmaLexerSection)tmStack[tmHead - 1].value), ((TmaParserSection)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 3:  // input ::= header importsopt options lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)tmStack[tmHead - 1].value), ((TmaLexerSection)tmStack[tmHead].value), ((TmaParserSection)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 4:  // input ::= header importsopt lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)null), ((TmaLexerSection)tmStack[tmHead - 1].value), ((TmaParserSection)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 5:  // input ::= header importsopt lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 2].value), ((List<TmaImport>)tmStack[tmHead - 1].value), ((List<TmaOption>)null), ((TmaLexerSection)tmStack[tmHead].value), ((TmaParserSection)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 8:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 5].value), ((TmaName)tmStack[tmHead - 3].value), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 9:  // header ::= Llanguage name parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 2].value), ((TmaName)null), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 10:  // lexer_section ::= '::' Llexer lexer_parts
				 tmLeft.value = new TmaLexerSection(((List<TmaLexerPartsItem>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 11:  // parser_section ::= '::' Lparser grammar_parts
				 tmLeft.value = new TmaParserSection(((List<TmaGrammarPartsItem>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 12:  // parsing_algorithm ::= Llalr '(' icon ')'
				 tmLeft.value = new TmaParsingAlgorithm(((Integer)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 13:  // imports ::= import_
				 tmLeft.value = new ArrayList<TmaImport>(16); ((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 14:  // imports ::= imports import_
				 ((List<TmaImport>)tmStack[tmHead - 1].value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 15:  // import_ ::= Limport ID scon ';'
				 tmLeft.value = new TmaImport(((String)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 16:  // import_ ::= Limport scon ';'
				 tmLeft.value = new TmaImport(((String)null), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 17:  // options ::= option
				 tmLeft.value = new ArrayList<TmaOption>(16); ((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 18:  // options ::= options option
				 ((List<TmaOption>)tmStack[tmHead - 1].value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 19:  // option ::= ID '=' expression
				 tmLeft.value = new TmaOption(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 20:  // option ::= syntax_problem
				 tmLeft.value = new TmaOption(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 21:  // identifier ::= ID
				 tmLeft.value = new TmaIdentifier(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 22:  // symref ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 23:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 24:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 40:  // pattern ::= regexp
				 tmLeft.value = new TmaPattern(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 41:  // lexer_parts ::= lexer_part
				 tmLeft.value = new ArrayList<ITmaLexerPart>(64); ((List<TmaLexerPartsItem>)tmLeft.value).add(new TmaLexerPartsItem(((ITmaLexerPart)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 42:  // lexer_parts ::= lexer_parts lexer_part
				 ((List<TmaLexerPartsItem>)tmStack[tmHead - 1].value).add(new TmaLexerPartsItem(((ITmaLexerPart)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 43:  // lexer_parts ::= lexer_parts syntax_problem
				 ((List<TmaLexerPartsItem>)tmStack[tmHead - 1].value).add(new TmaLexerPartsItem(null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 47:  // named_pattern ::= ID '=' pattern
				 tmLeft.value = new TmaNamedPattern(((String)tmStack[tmHead - 2].value), ((TmaPattern)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 58:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 7].value), ((String)tmStack[tmHead - 6].value), ((TmaPattern)tmStack[tmHead - 4].value), ((TmaStateref)tmStack[tmHead - 3].value), ((Integer)tmStack[tmHead - 2].value), ((TmaLexemeAttrs)tmStack[tmHead - 1].value), ((TmaCommand)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 59:  // lexeme ::= identifier typeopt ':'
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), ((TmaPattern)null), ((TmaStateref)null), ((Integer)null), ((TmaLexemeAttrs)null), ((TmaCommand)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 60:  // lexeme_transition ::= '=>' stateref
				 tmLeft.value = ((TmaStateref)tmStack[tmHead].value); 
				break;
			case 61:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				 tmLeft.value = ((TmaLexemeAttrs)tmStack[tmHead - 1].value); 
				break;
			case 62:  // lexeme_attribute ::= Lsoft
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSOFT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 63:  // lexeme_attribute ::= Lclass
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LCLASS, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 64:  // lexeme_attribute ::= Lspace
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSPACE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 65:  // lexeme_attribute ::= Llayout
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LLAYOUT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 66:  // state_selector ::= '[' state_list ']'
				 tmLeft.value = new TmaStateSelector(((List<TmaLexerState>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 67:  // state_list ::= lexer_state
				 tmLeft.value = new ArrayList<Integer>(4); ((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 68:  // state_list ::= state_list ',' lexer_state
				 ((List<TmaLexerState>)tmStack[tmHead - 2].value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 69:  // stateref ::= ID
				 tmLeft.value = new TmaStateref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 70:  // lexer_state ::= identifier '=>' stateref
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaStateref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 71:  // lexer_state ::= identifier
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead].value), ((TmaStateref)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 72:  // grammar_parts ::= grammar_part
				 tmLeft.value = new ArrayList<TmaGrammarPartsItem>(64); ((List<TmaGrammarPartsItem>)tmLeft.value).add(new TmaGrammarPartsItem(((ITmaGrammarPart)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 73:  // grammar_parts ::= grammar_parts grammar_part
				 ((List<TmaGrammarPartsItem>)tmStack[tmHead - 1].value).add(new TmaGrammarPartsItem(((ITmaGrammarPart)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 74:  // grammar_parts ::= grammar_parts syntax_problem
				 ((List<TmaGrammarPartsItem>)tmStack[tmHead - 1].value).add(new TmaGrammarPartsItem(null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 77:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 78:  // nonterm ::= annotations identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 4].value), ((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 79:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 80:  // nonterm ::= identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 81:  // nonterm_type ::= Lreturns symref
				 tmLeft.value = new TmaNontermTypeAST(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 84:  // nonterm_type ::= Linline Lclass identifieropt
				 tmLeft.value = new TmaNontermTypeHint(true, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 85:  // nonterm_type ::= Lclass identifieropt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 86:  // nonterm_type ::= Linterface identifieropt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LINTERFACE, ((TmaIdentifier)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 87:  // nonterm_type ::= Lvoid
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LVOID, null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 88:  // nonterm_type ::= type
				 tmLeft.value = new TmaNontermTypeRaw(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 89:  // assoc ::= Lleft
				 tmLeft.value = TmaAssoc.LLEFT; 
				break;
			case 90:  // assoc ::= Lright
				 tmLeft.value = TmaAssoc.LRIGHT; 
				break;
			case 91:  // assoc ::= Lnonassoc
				 tmLeft.value = TmaAssoc.LNONASSOC; 
				break;
			case 92:  // directive ::= '%' assoc references ';'
				 tmLeft.value = new TmaDirectivePrio(((TmaAssoc)tmStack[tmHead - 2].value), ((List<TmaSymref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 93:  // directive ::= '%' Linput inputs ';'
				 tmLeft.value = new TmaDirectiveInput(((List<TmaInputref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 94:  // inputs ::= inputref
				 tmLeft.value = new ArrayList<TmaInputref>(); ((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 95:  // inputs ::= inputs ',' inputref
				 ((List<TmaInputref>)tmStack[tmHead - 2].value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 98:  // inputref ::= symref Lnoeoiopt
				 tmLeft.value = new TmaInputref(((TmaSymref)tmStack[tmHead - 1].value), ((String)tmStack[tmHead].value) != null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 99:  // references ::= symref
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 100:  // references ::= references symref
				 ((List<TmaSymref>)tmStack[tmHead - 1].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 101:  // references_cs ::= symref
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 102:  // references_cs ::= references_cs ',' symref
				 ((List<TmaSymref>)tmStack[tmHead - 2].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 104:  // rule_list ::= rule0
				 tmLeft.value = new ArrayList<TmaRule0>(); ((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 105:  // rule_list ::= rule_list '|' rule0
				 ((List<TmaRule0>)tmStack[tmHead - 2].value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 108:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 109:  // rule0 ::= rhsPrefix rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 1].value), ((List<ITmaRhsPart>)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 110:  // rule0 ::= rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 111:  // rule0 ::= rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 112:  // rule0 ::= syntax_problem
				 tmLeft.value = new TmaRule0(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 113:  // rhsPrefix ::= '[' annotations ']'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 114:  // rhsPrefix ::= '[' annotations identifier ']'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 2].value), ((TmaIdentifier)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 115:  // rhsPrefix ::= '[' identifier ']'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 116:  // rhsSuffix ::= '%' Lprio symref
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LPRIO, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 117:  // rhsSuffix ::= '%' Lshift symref
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LSHIFT, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 118:  // rhsParts ::= rhsPart
				 tmLeft.value = new ArrayList<ITmaRhsPart>(); ((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 119:  // rhsParts ::= rhsParts rhsPart
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 120:  // rhsParts ::= rhsParts syntax_problem
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 125:  // rhsAnnotated ::= annotations rhsAssignment
				 tmLeft.value = new TmaRhsAnnotated(((TmaAnnotations)tmStack[tmHead - 1].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 127:  // rhsAssignment ::= identifier '=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), false, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 128:  // rhsAssignment ::= identifier '+=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), true, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 130:  // rhsOptional ::= rhsCast '?'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_OPTIONAL, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 132:  // rhsCast ::= rhsClass Las symref
				 tmLeft.value = new TmaRhsCast(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 133:  // rhsCast ::= rhsClass Las literal
				 tmLeft.value = new TmaRhsAsLiteral(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 134:  // rhsUnordered ::= rhsPart '&' rhsPart
				 tmLeft.value = new TmaRhsUnordered(((ITmaRhsPart)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 136:  // rhsClass ::= identifier ':' rhsPrimary
				 tmLeft.value = new TmaRhsClass(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 137:  // rhsPrimary ::= symref
				 tmLeft.value = new TmaRhsSymbol(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 138:  // rhsPrimary ::= '(' rules ')'
				 tmLeft.value = new TmaRhsNested(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 139:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), true, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 140:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), false, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 141:  // rhsPrimary ::= rhsPrimary '*'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ZEROORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 142:  // rhsPrimary ::= rhsPrimary '+'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ONEORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 143:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair_list_Comma_separated ',' rhsBracketsPair
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 144:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair
				tmLeft.value = new ArrayList();
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 145:  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 3].value), ((List<TmaRhsBracketsPair>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 146:  // rhsPrimary ::= '$' '(' rules ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 1].value), ((List<TmaRhsBracketsPair>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 147:  // rhsBracketsPair ::= symref '..' symref
				 tmLeft.value = new TmaRhsBracketsPair(((TmaSymref)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 148:  // annotations ::= annotation_list
				 tmLeft.value = new TmaAnnotations(((List<TmaAnnotation>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 149:  // annotation_list ::= annotation
				 tmLeft.value = new ArrayList<TmaAnnotation>(); ((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 150:  // annotation_list ::= annotation_list annotation
				 ((List<TmaAnnotation>)tmStack[tmHead - 1].value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 151:  // annotation ::= '@' ID '{' expression '}'
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead - 3].value), ((ITmaExpression)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 152:  // annotation ::= '@' ID
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead].value), ((ITmaExpression)null), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 153:  // annotation ::= '@' syntax_problem
				 tmLeft.value = new TmaAnnotation(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 158:  // expression ::= Lnew name '(' map_entriesopt ')'
				 tmLeft.value = new TmaInstance(((TmaName)tmStack[tmHead - 3].value), ((List<TmaMapEntriesItem>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 161:  // expression ::= '[' expression_listopt ']'
				 tmLeft.value = new TmaArray(((List<ITmaExpression>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 163:  // literal ::= scon
				 tmLeft.value = new TmaLiteral(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 164:  // literal ::= icon
				 tmLeft.value = new TmaLiteral(((Integer)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 165:  // literal ::= Ltrue
				 tmLeft.value = new TmaLiteral(Boolean.TRUE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 166:  // literal ::= Lfalse
				 tmLeft.value = new TmaLiteral(Boolean.FALSE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 167:  // expression_list ::= expression
				 tmLeft.value = new ArrayList(); ((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 168:  // expression_list ::= expression_list ',' expression
				 ((List<ITmaExpression>)tmStack[tmHead - 2].value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 169:  // map_entries ::= ID map_separator expression
				 tmLeft.value = new ArrayList<TmaMapEntriesItem>(); ((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 170:  // map_entries ::= map_entries ',' ID map_separator expression
				 ((List<TmaMapEntriesItem>)tmStack[tmHead - 4].value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmLeft.endoffset)); 
				break;
			case 174:  // name ::= qualified_id
				 tmLeft.value = new TmaName(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 176:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 177:  // command ::= code
				 tmLeft.value = new TmaCommand(source, tmLeft.line, tmStack[tmHead].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 178:  // syntax_problem ::= error
				 tmLeft.value = new TmaSyntaxProblem(source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 287);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 288);
	}
}
