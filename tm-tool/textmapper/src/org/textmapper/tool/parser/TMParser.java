/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(315,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\256\0\257\0\uffcd\uffff\275\0\26" +
		"\0\260\0\261\0\uffff\uffff\246\0\245\0\255\0\272\0\uff93\uffff\uff8b\uffff\uffff" +
		"\uffff\uff7f\uffff\15\0\uffff\uffff\262\0\uff4f\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\6\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\16\0\uffff" +
		"\uffff\uffff\uffff\uff49\uffff\uffff\uffff\21\0\24\0\uffff\uffff\254\0\uff43\uffff" +
		"\uffff\uffff\uffff\uffff\11\0\273\0\20\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\4\0\uff17\uffff\22\0\263\0\uffff\uffff\uff11\uffff\uffff\uffff\uff0b\uffff" +
		"\uffff\uffff\17\0\uffff\uffff\uff05\uffff\ufefd\uffff\ufef7\uffff\51\0\55\0\56\0" +
		"\54\0\23\0\uffff\uffff\2\0\267\0\270\0\266\0\uffff\uffff\uffff\uffff\251\0\uffff" +
		"\uffff\14\0\25\0\ufec5\uffff\uffff\uffff\103\0\uffff\uffff\uffff\uffff\60\0\uffff" +
		"\uffff\52\0\53\0\uffff\uffff\uffff\uffff\uffff\uffff\ufebd\uffff\110\0\113\0\114" +
		"\0\uffff\uffff\ufe8b\uffff\240\0\264\0\uffff\uffff\10\0\uffff\uffff\uffff\uffff\102" +
		"\0\50\0\57\0\uffff\uffff\41\0\42\0\35\0\36\0\uffff\uffff\33\0\34\0\40\0\43\0\45\0" +
		"\44\0\37\0\uffff\uffff\32\0\ufe57\uffff\uffff\uffff\134\0\135\0\136\0\uffff\uffff" +
		"\ufe23\uffff\244\0\ufded\uffff\uffff\uffff\uffff\uffff\ufdaf\uffff\ufd81\uffff\131" +
		"\0\132\0\uffff\uffff\111\0\112\0\uffff\uffff\241\0\uffff\uffff\105\0\106\0\104\0" +
		"\27\0\47\0\uffff\uffff\30\0\31\0\ufd53\uffff\ufd19\uffff\uffff\uffff\141\0\146\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufd11\uffff\uffff\uffff\ufcd3\uffff" +
		"\uffff\uffff\274\0\uffff\uffff\214\0\uffff\uffff\ufc83\uffff\153\0\ufc7b\uffff\155" +
		"\0\ufc3f\uffff\ufc01\uffff\174\0\177\0\201\0\ufbbf\uffff\175\0\ufb7b\uffff\ufb35" +
		"\uffff\uffff\uffff\176\0\163\0\162\0\ufaeb\uffff\121\0\122\0\ufabd\uffff\ufab7\uffff" +
		"\ufab1\uffff\ufa73\uffff\uffff\uffff\265\0\46\0\uffff\uffff\62\0\ufa35\uffff\143" +
		"\0\145\0\140\0\uffff\uffff\137\0\147\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uf9fd\uffff\uf9bf\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\120\0\uf97f\uffff\uf93f\uffff\160\0\uf901\uffff\173\0\161\0\uffff" +
		"\uffff\205\0\uffff\uffff\220\0\221\0\200\0\uf8bf\uffff\uffff\uffff\124\0\127\0\130" +
		"\0\uffff\uffff\uffff\uffff\uf8b9\uffff\74\0\64\0\uf87b\uffff\142\0\242\0\167\0\170" +
		"\0\166\0\164\0\uffff\uffff\215\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uf845\uffff\230\0\233\0\uffff\uffff\uffff\uffff\202\0\uf815\uffff\203\0\154\0\157" +
		"\0\uf7cb\uffff\207\0\210\0\126\0\150\0\uf789\uffff\117\0\116\0\uffff\uffff\uffff" +
		"\uffff\66\0\uf783\uffff\165\0\uffff\uffff\uffff\uffff\225\0\uffff\uffff\232\0\227" +
		"\0\uffff\uffff\226\0\uffff\uffff\uffff\uffff\115\0\76\0\77\0\100\0\101\0\uffff\uffff" +
		"\70\0\72\0\uffff\uffff\uffff\uffff\223\0\uffff\uffff\231\0\uf74f\uffff\uf747\uffff" +
		"\151\0\75\0\217\0\216\0\uffff\uffff\uffff\uffff\224\0\236\0\222\0\uffff\uffff\uffff" +
		"\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(2238,
		"\47\uffff\10\1\40\1\41\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64" +
		"\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\uffff\ufffe\2\uffff\3\uffff\21\uffff\40\uffff" +
		"\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff" +
		"\52\uffff\51\uffff\42\uffff\43\uffff\44\uffff\22\253\uffff\ufffe\23\uffff\71\uffff" +
		"\14\7\uffff\ufffe\15\uffff\14\271\23\271\24\271\71\271\uffff\ufffe\47\uffff\10\0" +
		"\40\0\41\0\51\0\52\0\53\0\54\0\55\0\56\0\57\0\60\0\61\0\62\0\63\0\64\0\65\0\66\0" +
		"\67\0\70\0\71\0\72\0\73\0\uffff\ufffe\17\uffff\22\252\uffff\ufffe\10\uffff\0\5\uffff" +
		"\ufffe\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53" +
		"\uffff\52\uffff\51\uffff\24\250\uffff\ufffe\10\uffff\0\3\uffff\ufffe\17\uffff\24" +
		"\247\uffff\ufffe\71\uffff\14\7\uffff\ufffe\12\uffff\20\25\23\25\uffff\ufffe\23\uffff" +
		"\20\61\uffff\ufffe\21\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\0\12\10\12\uffff\ufffe\13" +
		"\uffff\17\107\22\107\uffff\ufffe\6\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\0\13\uffff" +
		"\ufffe\37\uffff\22\237\23\237\36\237\41\237\50\237\51\237\52\237\53\237\54\237\55" +
		"\237\56\237\57\237\60\237\61\237\62\237\63\237\64\237\65\237\66\237\67\237\70\237" +
		"\71\237\72\237\73\237\uffff\ufffe\1\uffff\0\73\10\73\21\73\40\73\41\73\51\73\52\73" +
		"\53\73\54\73\55\73\56\73\57\73\60\73\61\73\62\73\63\73\64\73\65\73\66\73\67\73\70" +
		"\73\71\73\72\73\73\73\uffff\ufffe\76\uffff\22\243\23\243\36\243\37\243\41\243\50" +
		"\243\51\243\52\243\53\243\54\243\55\243\56\243\57\243\60\243\61\243\62\243\63\243" +
		"\64\243\65\243\66\243\67\243\70\243\71\243\72\243\73\243\uffff\ufffe\6\uffff\21\uffff" +
		"\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11\156\14" +
		"\156\uffff\ufffe\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54" +
		"\uffff\53\uffff\52\uffff\51\uffff\7\123\20\123\uffff\ufffe\41\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\7\123\20" +
		"\123\uffff\ufffe\13\uffff\0\63\3\63\10\63\21\63\23\63\40\63\41\63\51\63\52\63\53" +
		"\63\54\63\55\63\56\63\57\63\60\63\61\63\62\63\63\63\64\63\65\63\66\63\67\63\70\63" +
		"\71\63\72\63\73\63\75\63\uffff\ufffe\61\uffff\14\144\17\144\uffff\ufffe\6\uffff\21" +
		"\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11" +
		"\156\24\156\uffff\ufffe\12\25\20\25\32\25\6\26\11\26\14\26\23\26\24\26\30\26\31\26" +
		"\33\26\35\26\36\26\37\26\40\26\41\26\45\26\46\26\50\26\51\26\52\26\53\26\54\26\55" +
		"\26\56\26\57\26\60\26\61\26\62\26\63\26\64\26\65\26\66\26\67\26\70\26\71\26\72\26" +
		"\73\26\75\26\uffff\ufffe\11\uffff\14\152\24\152\uffff\ufffe\6\uffff\23\uffff\36\uffff" +
		"\37\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff" +
		"\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11\156\14\156\24\156\uffff\ufffe\6" +
		"\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11" +
		"\156\14\156\24\156\uffff\ufffe\35\uffff\6\171\11\171\14\171\23\171\24\171\36\171" +
		"\37\171\40\171\41\171\45\171\50\171\51\171\52\171\53\171\54\171\55\171\56\171\57" +
		"\171\60\171\61\171\62\171\63\171\64\171\65\171\66\171\67\171\70\171\71\171\72\171" +
		"\73\171\75\171\uffff\ufffe\33\uffff\6\204\11\204\14\204\23\204\24\204\35\204\36\204" +
		"\37\204\40\204\41\204\45\204\50\204\51\204\52\204\53\204\54\204\55\204\56\204\57" +
		"\204\60\204\61\204\62\204\63\204\64\204\65\204\66\204\67\204\70\204\71\204\72\204" +
		"\73\204\75\204\uffff\ufffe\46\uffff\6\206\11\206\14\206\23\206\24\206\33\206\35\206" +
		"\36\206\37\206\40\206\41\206\45\206\50\206\51\206\52\206\53\206\54\206\55\206\56" +
		"\206\57\206\60\206\61\206\62\206\63\206\64\206\65\206\66\206\67\206\70\206\71\206" +
		"\72\206\73\206\75\206\uffff\ufffe\30\uffff\31\uffff\6\212\11\212\14\212\23\212\24" +
		"\212\33\212\35\212\36\212\37\212\40\212\41\212\45\212\46\212\50\212\51\212\52\212" +
		"\53\212\54\212\55\212\56\212\57\212\60\212\61\212\62\212\63\212\64\212\65\212\66" +
		"\212\67\212\70\212\71\212\72\212\73\212\75\212\uffff\ufffe\41\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\7\123\20" +
		"\123\uffff\ufffe\20\uffff\7\125\uffff\ufffe\20\uffff\7\125\uffff\ufffe\6\uffff\21" +
		"\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11" +
		"\156\14\156\uffff\ufffe\6\uffff\21\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\75\uffff\11\156\14\156\uffff\ufffe\3\uffff\0\65\10\65\21\65\23" +
		"\65\40\65\41\65\51\65\52\65\53\65\54\65\55\65\56\65\57\65\60\65\61\65\62\65\63\65" +
		"\64\65\65\65\66\65\67\65\70\65\71\65\72\65\73\65\75\65\uffff\ufffe\6\uffff\23\uffff" +
		"\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\45\uffff\50\uffff\75\uffff\11\156\24" +
		"\156\uffff\ufffe\6\uffff\21\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73" +
		"\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\50\uffff\75\uffff\11\156\14\156\24\156\uffff\ufffe\6\uffff\21\uffff\23\uffff" +
		"\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11\156\14\156\24" +
		"\156\uffff\ufffe\6\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72" +
		"\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61" +
		"\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50" +
		"\uffff\75\uffff\11\156\14\156\24\156\uffff\ufffe\35\uffff\6\172\11\172\14\172\23" +
		"\172\24\172\36\172\37\172\40\172\41\172\45\172\50\172\51\172\52\172\53\172\54\172" +
		"\55\172\56\172\57\172\60\172\61\172\62\172\63\172\64\172\65\172\66\172\67\172\70" +
		"\172\71\172\72\172\73\172\75\172\uffff\ufffe\20\uffff\7\125\uffff\ufffe\6\uffff\21" +
		"\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11" +
		"\156\14\156\uffff\ufffe\23\uffff\0\67\10\67\21\67\40\67\41\67\51\67\52\67\53\67\54" +
		"\67\55\67\56\67\57\67\60\67\61\67\62\67\63\67\64\67\65\67\66\67\67\67\70\67\71\67" +
		"\72\67\73\67\75\67\uffff\ufffe\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\11\26\24\26\35\26\uffff\ufffe\30\uffff" +
		"\31\uffff\6\213\11\213\14\213\23\213\24\213\33\213\35\213\36\213\37\213\40\213\41" +
		"\213\45\213\46\213\50\213\51\213\52\213\53\213\54\213\55\213\56\213\57\213\60\213" +
		"\61\213\62\213\63\213\64\213\65\213\66\213\67\213\70\213\71\213\72\213\73\213\75" +
		"\213\uffff\ufffe\35\211\6\211\11\211\14\211\23\211\24\211\36\211\37\211\40\211\41" +
		"\211\45\211\50\211\51\211\52\211\53\211\54\211\55\211\56\211\57\211\60\211\61\211" +
		"\62\211\63\211\64\211\65\211\66\211\67\211\70\211\71\211\72\211\73\211\75\211\uffff" +
		"\ufffe\17\uffff\7\133\uffff\ufffe\75\uffff\0\71\10\71\21\71\40\71\41\71\51\71\52" +
		"\71\53\71\54\71\55\71\56\71\57\71\60\71\61\71\62\71\63\71\64\71\65\71\66\71\67\71" +
		"\70\71\71\71\72\71\73\71\uffff\ufffe\11\234\35\uffff\24\234\uffff\ufffe\11\235\35" +
		"\235\24\235\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(144,
		"\0\2\4\17\31\31\31\46\52\56\63\70\74\107\114\115\127\137\163\174\236\254\255\261" +
		"\265\274\277\300\305\312\325\345\371\u010f\u0157\u015f\u0167\u016e\u016f\u0170\u0172" +
		"\u0182\u01cc\u0215\u025e\u02a8\u02f1\u033a\u0383\u03cc\u0415\u045e\u04aa\u04f4\u053e" +
		"\u0587\u05d0\u0619\u0663\u06ac\u06f5\u06f5\u0702\u0703\u0704\u0705\u0707\u0709\u070b" +
		"\u070c\u070e\u070f\u0711\u072c\u0758\u075b\u075d\u0761\u0763\u0764\u0766\u0768\u076a" +
		"\u076b\u076c\u076d\u076f\u0770\u0772\u0774\u0775\u0777\u0779\u077b\u077e\u077f\u0781" +
		"\u0782\u0784\u0786\u0787\u078d\u0793\u079a\u07a1\u07ac\u07b4\u07c0\u07cc\u07d9\u07e8" +
		"\u07f7\u0803\u0812\u0822\u0827\u082b\u082d\u083c\u084b\u085b\u0862\u086a\u086b\u086c" +
		"\u086e\u0871\u0874\u0881\u0897\u0898\u089a\u089b\u089c\u089d\u089e\u089f\u08a2\u08a5" +
		"\u08a6\u08b1\u08b2\u08b3\u08b4");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(2228,
		"\u0137\u0138\125\174\1\6\22\40\50\62\114\126\220\237\343\1\6\50\54\62\114\220\237" +
		"\307\343\107\136\204\242\254\256\300\301\324\325\333\334\356\135\213\216\302\25\44" +
		"\45\65\252\u0101\u0118\u012c\u012d\43\70\77\146\247\70\122\146\231\35\37\60\117\233" +
		"\236\251\354\355\373\u0110\21\126\162\172\226\u0128\27\71\123\126\162\172\226\233" +
		"\u010d\u012a\70\130\146\247\276\277\347\u0102\1\6\50\61\62\101\114\126\162\172\204" +
		"\220\226\237\242\300\301\325\333\356\30\123\126\162\172\226\321\322\370\20\31\33" +
		"\100\126\135\162\172\204\216\226\242\243\245\254\256\267\300\301\324\325\326\327" +
		"\330\331\333\334\341\356\361\374\375\u011b\u011d\53\72\74\155\162\172\226\323\373" +
		"\u0101\u0115\u0118\u0124\u012a\316\126\162\172\226\126\162\172\226\126\162\172\226" +
		"\266\u0104\u0127\266\u0104\u0127\247\126\162\172\226\263\326\374\375\u011b\u011d" +
		"\126\162\172\226\257\336\u0101\u0108\u0118\u012c\u012d\204\242\254\256\267\300\301" +
		"\324\325\327\330\331\333\334\341\356\107\126\136\143\162\172\204\226\241\242\254" +
		"\256\300\301\324\325\333\334\341\356\1\6\25\45\50\62\101\114\134\136\204\220\237" +
		"\242\256\300\301\324\325\333\334\356\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107" +
		"\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237" +
		"\241\242\254\256\267\273\300\301\305\313\317\320\322\324\325\326\327\330\331\333" +
		"\334\341\343\350\356\372\374\375\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1" +
		"\6\50\62\114\220\237\343\1\6\50\62\114\220\237\343\1\6\50\62\114\220\237\324\265" +
		"\3\23\204\242\254\256\267\300\301\324\325\327\330\331\333\334\341\356\1\2\6\13\22" +
		"\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175" +
		"\201\204\206\207\210\216\220\226\236\237\241\242\254\256\267\273\300\301\305\313" +
		"\317\320\322\324\325\326\327\330\331\333\334\341\343\350\356\372\374\375\376\u0115" +
		"\u0116\u011b\u011d\u011e\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107" +
		"\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237" +
		"\240\241\242\254\256\267\273\300\301\305\313\317\320\322\324\325\326\327\330\331" +
		"\333\334\341\343\350\356\372\374\375\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133" +
		"\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\220\226\236\237\240\241\242\254\256\267\273\300\301" +
		"\305\313\317\320\322\324\325\326\327\330\331\333\334\341\343\350\356\372\374\375" +
		"\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61\62" +
		"\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175\201\204\206\207\210\216" +
		"\220\226\236\237\241\242\254\256\267\273\300\301\305\313\317\320\322\324\325\326" +
		"\327\330\331\333\334\341\343\350\356\372\374\375\376\u0115\u0116\u011b\u011d\u011e" +
		"\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\133\134\136" +
		"\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\254\256\267" +
		"\273\300\301\305\313\317\320\322\324\325\326\327\330\331\333\334\341\343\350\356" +
		"\372\374\375\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1\2\6\13\22\25\32\36\45" +
		"\50\52\61\62\76\101\107\114\115\126\133\134\136\142\150\151\162\172\175\201\204\206" +
		"\207\210\220\226\236\237\241\242\254\256\267\273\300\301\305\313\317\320\322\324" +
		"\325\326\327\330\331\333\334\341\343\350\356\372\374\375\376\u0115\u0116\u011b\u011d" +
		"\u011e\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\133" +
		"\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\254" +
		"\256\267\273\300\301\305\313\317\320\322\324\325\326\327\330\331\333\334\341\343" +
		"\350\356\372\374\375\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1\2\6\13\22\25" +
		"\32\36\45\50\52\61\62\76\101\107\114\115\126\133\134\136\142\150\151\162\172\175" +
		"\201\204\206\207\210\220\226\236\237\241\242\254\256\267\273\300\301\305\313\317" +
		"\320\322\324\325\326\327\330\331\333\334\341\343\350\356\372\374\375\376\u0115\u0116" +
		"\u011b\u011d\u011e\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114" +
		"\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\232\236\237" +
		"\241\242\254\256\267\273\300\301\305\313\317\320\322\324\325\326\327\330\331\333" +
		"\334\341\343\350\356\372\374\375\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1" +
		"\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\220\226\236\237\241\242\254\256\267\273\300\301\305" +
		"\313\317\320\322\324\325\326\327\330\331\333\334\341\343\350\356\372\374\375\376" +
		"\u0111\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61" +
		"\62\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175\201\204\205\206\207" +
		"\210\216\220\226\236\237\241\242\254\256\267\273\300\301\305\313\317\320\322\324" +
		"\325\326\327\330\331\333\334\341\343\350\356\372\374\375\376\u0111\u0115\u0116\u011b" +
		"\u011d\u011e\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126" +
		"\134\135\136\142\150\151\162\172\175\201\204\206\207\210\216\220\226\236\237\241" +
		"\242\254\256\267\273\300\301\305\313\317\320\322\324\325\326\327\330\331\333\334" +
		"\341\343\350\356\372\374\375\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1\2\6" +
		"\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\216\220\226\236\237\241\242\254\256\267\273\300\301" +
		"\305\313\317\320\322\324\325\326\327\330\331\333\334\341\343\350\356\372\374\375" +
		"\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61\62" +
		"\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\236\237\241\242\254\256\267\273\300\301\305\313\317\320\322\324\325\326\327\330" +
		"\331\333\334\341\343\350\356\372\374\375\376\u0111\u0115\u0116\u011b\u011d\u011e" +
		"\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142" +
		"\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\254\256\267\273" +
		"\300\301\305\313\317\320\322\324\325\326\327\330\331\333\334\341\343\350\356\372" +
		"\374\375\376\u0111\u0115\u0116\u011b\u011d\u011e\u0132\u0133\0\1\2\6\13\22\25\32" +
		"\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204" +
		"\206\207\210\220\226\236\237\241\242\254\256\267\273\300\301\305\313\317\320\322" +
		"\324\325\326\327\330\331\333\334\341\343\350\356\372\374\375\376\u0115\u0116\u011b" +
		"\u011d\u011e\u0132\u0133\1\2\6\13\20\22\25\32\36\45\50\52\61\62\73\76\101\107\114" +
		"\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241" +
		"\242\254\256\267\273\300\301\305\313\317\320\322\324\325\326\327\330\331\333\334" +
		"\341\343\350\356\372\374\375\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1\2\6" +
		"\13\22\25\32\36\42\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\220\226\236\237\241\242\254\256\267\273\300\301\305" +
		"\313\317\320\322\324\325\326\327\330\331\333\334\341\343\350\356\372\374\375\376" +
		"\u0115\u0116\u011b\u011d\u011e\u0132\u0133\1\2\6\13\22\25\32\36\45\50\52\61\62\63" +
		"\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\236\237\241\242\254\256\267\273\300\301\305\313\317\320\322\324\325\326\327\330" +
		"\331\333\334\341\343\350\356\372\374\375\376\u0115\u0116\u011b\u011d\u011e\u0132" +
		"\u0133\204\242\254\256\300\301\324\325\333\334\341\356\u0113\202\0\0\25\45\44\65" +
		"\20\73\3\3\23\25\25\45\61\76\101\107\136\142\151\204\207\210\241\242\254\256\267" +
		"\273\300\301\322\324\325\327\331\333\334\341\356\1\6\50\62\114\175\201\204\206\220" +
		"\236\237\242\254\256\267\300\301\313\317\320\324\325\326\327\330\331\333\334\341" +
		"\343\350\356\372\374\375\376\u0115\u0116\u011b\u011d\u011e\u0132\u0133\100\135\216" +
		"\126\162\126\162\172\226\125\174\61\61\101\61\101\61\101\231\361\u0111\61\101\76" +
		"\150\305\76\151\107\107\136\107\136\135\216\276\277\347\133\107\136\175\175\313\201" +
		"\372\350\204\242\300\301\325\356\204\242\300\301\325\356\204\242\300\301\325\333" +
		"\356\204\242\300\301\325\333\356\204\242\254\256\300\301\324\325\333\334\356\204" +
		"\242\254\300\301\325\333\356\204\242\254\256\300\301\324\325\333\334\341\356\204" +
		"\242\254\256\300\301\324\325\333\334\341\356\204\242\254\256\267\300\301\324\325" +
		"\333\334\341\356\204\242\254\256\267\300\301\324\325\327\331\333\334\341\356\204" +
		"\242\254\256\267\300\301\324\325\327\331\333\334\341\356\204\242\254\256\300\301" +
		"\324\325\333\334\341\356\204\242\254\256\267\300\301\324\325\327\331\333\334\341" +
		"\356\204\242\254\256\267\300\301\324\325\327\330\331\333\334\341\356\326\374\375" +
		"\u011b\u011d\326\374\u011b\u011d\u0116\u0133\107\136\204\241\242\254\256\300\301" +
		"\324\325\333\334\341\356\107\136\204\241\242\254\256\300\301\324\325\333\334\341" +
		"\356\107\136\143\204\241\242\254\256\300\301\324\325\333\334\341\356\1\6\50\62\114" +
		"\220\237\1\6\50\62\114\220\237\343\6\52\70\146\2\13\32\2\13\32\204\242\254\256\300" +
		"\301\324\325\333\334\341\356\u0113\1\6\25\45\50\62\101\114\134\136\204\220\237\242" +
		"\256\300\301\324\325\333\334\356\3\20\73\100\231\307\361\u0113\207\210\273\276\277" +
		"\347\232\204\242\254\256\300\301\324\325\333\334\356\u0116\52\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(2228,
		"\u0139\u013a\153\153\4\4\37\60\4\4\4\155\4\4\4\5\5\5\74\5\5\5\5\360\5\133\133\240" +
		"\240\240\240\240\240\240\240\240\240\240\204\300\301\356\42\63\42\63\333\u011b\u011b" +
		"\u011b\u011b\62\111\125\111\327\112\150\112\305\55\57\75\147\312\314\332\u010e\u010f" +
		"\u0116\u011f\36\156\156\156\156\u0132\50\115\151\157\157\157\157\313\u011e\u0133" +
		"\113\174\113\330\350\350\350\330\6\6\6\76\6\76\6\160\160\160\241\6\160\6\241\241" +
		"\241\241\241\241\51\152\161\161\161\161\366\367\u0114\32\52\54\126\162\126\162\162" +
		"\242\126\162\242\325\326\242\242\242\242\242\242\242\374\242\242\242\242\242\242" +
		"\242\u0111\374\374\374\374\73\116\120\224\225\227\304\371\u0117\u011c\u0127\u012b" +
		"\u012f\u0134\363\163\163\163\163\164\164\164\164\165\165\165\165\344\344\u0130\345" +
		"\345\u0131\331\166\166\166\166\342\375\375\375\375\375\167\167\167\167\341\341\u011d" +
		"\341\u011d\u011d\u011d\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243" +
		"\243\134\170\134\134\170\170\134\170\134\134\134\134\134\134\134\134\134\134\134" +
		"\134\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\40\43\17\56\43\10\70" +
		"\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10" +
		"\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\376\244\10\244" +
		"\244\244\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10\11\11\11\11\11\11\11" +
		"\11\12\12\12\12\12\12\12\12\13\13\13\13\13\13\13\372\343\22\22\245\245\245\245\245" +
		"\245\245\245\245\245\245\245\245\245\245\245\10\17\10\17\40\43\17\56\43\10\70\77" +
		"\10\121\77\121\10\146\171\202\205\121\121\221\121\171\171\10\10\244\10\121\121\205" +
		"\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\376\244\10" +
		"\244\244\244\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10\10\17\10\17\40\43" +
		"\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244" +
		"\10\121\121\10\171\10\10\317\121\244\244\244\244\121\244\244\221\10\10\10\121\244" +
		"\244\376\244\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10\10" +
		"\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171" +
		"\171\10\10\244\10\121\121\10\171\10\10\320\121\244\244\244\244\121\244\244\221\10" +
		"\10\10\121\244\244\376\244\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376\376" +
		"\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\206\121" +
		"\121\221\121\171\171\10\10\244\10\121\121\206\10\171\10\10\121\244\244\244\244\121" +
		"\244\244\221\10\10\10\121\244\244\376\244\10\244\244\244\244\10\10\244\10\376\376" +
		"\10\10\10\376\376\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146" +
		"\171\175\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244" +
		"\244\244\121\244\244\221\10\10\10\121\244\244\376\244\10\244\244\244\244\10\10\244" +
		"\10\376\376\10\10\10\376\376\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121" +
		"\77\121\10\146\171\176\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10" +
		"\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\376\244\10\244\244\244" +
		"\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10\10\17\10\17\40\43\17\56\43\10" +
		"\70\77\10\121\77\121\10\146\171\177\202\121\121\221\121\171\171\10\10\244\10\121" +
		"\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\376\244" +
		"\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10\10\17\10\17\40" +
		"\43\17\56\43\10\70\77\10\121\77\121\10\146\171\200\202\121\121\221\121\171\171\10" +
		"\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121" +
		"\244\244\376\244\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10" +
		"\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121" +
		"\171\171\10\10\244\10\121\121\10\171\310\10\10\121\244\244\244\244\121\244\244\221" +
		"\10\10\10\121\244\244\376\244\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376" +
		"\376\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121" +
		"\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244" +
		"\244\221\10\10\10\121\244\244\376\244\10\244\244\244\244\10\10\244\10\376\376\10" +
		"\u0120\10\10\376\376\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10" +
		"\146\171\202\207\121\121\221\121\171\171\10\10\244\273\10\121\121\207\10\171\10\10" +
		"\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\376\244\10\244\244\244" +
		"\244\10\10\244\10\376\376\10\u0121\10\10\376\376\10\10\10\10\17\10\17\40\43\17\56" +
		"\43\10\70\77\10\121\77\121\10\146\171\202\210\121\121\221\121\171\171\10\10\244\10" +
		"\121\121\210\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244" +
		"\376\244\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10\10\17" +
		"\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\211\121\121\221\121\171" +
		"\171\10\10\244\10\121\121\211\10\171\10\10\121\244\244\244\244\121\244\244\221\10" +
		"\10\10\121\244\244\376\244\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376\376" +
		"\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121" +
		"\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244" +
		"\221\10\10\10\121\244\244\376\244\10\244\244\244\244\10\10\244\10\376\376\10\u0122" +
		"\10\10\376\376\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146" +
		"\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244" +
		"\244\121\244\244\221\10\10\10\121\244\244\376\244\10\244\244\244\244\10\10\244\10" +
		"\376\376\10\u0123\10\10\376\376\10\10\10\2\10\17\10\17\40\43\17\56\43\10\70\77\10" +
		"\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10" +
		"\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\376\244\10\244\244\244" +
		"\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10\10\17\10\17\33\40\43\17\56\43" +
		"\10\70\77\10\33\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121" +
		"\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\376\244" +
		"\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10\10\17\10\17\40" +
		"\43\17\56\61\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10" +
		"\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121" +
		"\244\244\376\244\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376\376\10\10\10" +
		"\10\17\10\17\40\43\17\56\43\10\70\77\10\107\121\77\121\10\146\171\202\121\121\221" +
		"\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221" +
		"\10\10\10\121\244\244\376\244\10\244\244\244\244\10\10\244\10\376\376\10\10\10\376" +
		"\376\10\10\10\246\246\246\246\246\246\246\246\246\246\246\246\246\237\u0137\3\44" +
		"\65\64\110\34\34\23\24\41\45\46\66\100\122\100\135\135\216\122\247\275\275\321\247" +
		"\247\247\247\275\247\247\370\247\247\u0102\u0102\247\247\247\247\14\14\14\14\14\232" +
		"\235\250\274\14\315\14\250\250\250\250\250\250\232\364\365\250\250\377\250\250\250" +
		"\250\250\250\u0109\u010c\250\235\377\377\u011a\315\u0128\377\377\u012e\u0135\u0128" +
		"\127\212\212\172\226\173\173\230\230\154\231\101\102\131\103\103\104\104\306\u0112" +
		"\u0124\105\105\123\222\357\124\223\136\137\214\140\140\213\302\351\351\351\201\141" +
		"\141\233\234\362\236\u0115\u010d\251\323\354\355\373\u0110\252\252\252\252\252\252" +
		"\253\253\253\253\253\u0106\253\254\254\254\254\254\254\254\255\255\255\255\255\255" +
		"\255\255\255\255\255\256\324\334\256\256\256\256\256\257\257\257\336\257\257\336" +
		"\257\257\336\u0108\257\260\260\260\260\260\260\260\260\260\260\260\260\261\261\261" +
		"\261\346\261\261\261\261\261\261\261\261\262\262\262\262\262\262\262\262\262\u0103" +
		"\u0105\262\262\262\262\263\263\263\263\263\263\263\263\263\263\263\263\263\263\263" +
		"\264\264\264\264\264\264\264\264\264\264\264\264\265\265\265\265\265\265\265\265" +
		"\265\265\265\265\265\265\265\266\266\266\266\266\266\266\266\266\266\u0104\266\266" +
		"\266\266\266\u0100\u0100\u0119\u0100\u0100\u0101\u0118\u012c\u012d\u0129\u0136\142" +
		"\142\267\322\267\267\267\267\267\267\267\267\267\267\267\143\143\143\143\143\143" +
		"\143\143\143\143\143\143\143\143\143\144\144\217\144\144\144\144\144\144\144\144" +
		"\144\144\144\144\144\u0138\26\67\106\145\303\316\15\15\15\15\15\15\15\u010a\27\71" +
		"\114\220\20\31\53\21\21\21\270\270\270\270\270\270\270\270\270\270\270\270\u0125" +
		"\16\16\47\47\16\16\132\16\203\215\271\16\16\271\337\271\271\337\271\271\337\271\25" +
		"\35\117\130\307\361\u0113\u0126\276\277\347\352\353\u010b\311\272\272\335\340\272" +
		"\272\340\272\272\u0107\272\u012a\72\30");

	private static final short[] tmRuleLen = TMLexer.unpack_short(190,
		"\1\0\5\4\4\3\1\0\7\4\3\3\4\1\2\4\3\1\2\3\1\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2" +
		"\1\1\2\2\1\1\1\3\1\0\1\0\1\0\1\0\1\0\10\3\2\3\1\1\1\1\3\1\3\1\3\1\1\2\2\1\1\6\5\5" +
		"\4\2\1\0\1\0\4\3\3\1\1\2\1\1\1\4\4\1\3\1\0\2\1\2\1\3\1\1\3\1\0\3\2\2\1\1\3\4\3\3" +
		"\3\1\2\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\3\1\6\4\4\2\1\3\2\1\3\3\3\1" +
		"\1\2\5\2\2\1\1\1\0\5\1\0\3\1\1\1\1\1\1\3\3\5\1\1\1\1\1\3\1\1");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(190,
		"\201\201\77\77\77\77\202\202\100\100\101\102\103\104\104\105\105\106\106\107\107" +
		"\110\111\112\112\113\113\114\114\114\114\114\114\114\114\114\114\114\114\114\115" +
		"\116\116\116\117\117\117\120\203\203\204\204\205\205\206\206\207\207\121\121\122" +
		"\123\124\124\124\124\125\126\126\127\130\130\131\131\131\132\132\133\133\133\133" +
		"\134\210\210\211\211\134\134\134\134\134\135\136\136\136\137\137\140\140\212\212" +
		"\141\142\142\143\143\144\145\145\213\213\146\146\146\146\146\147\147\147\150\150" +
		"\151\151\151\152\152\152\153\153\154\154\154\155\155\156\156\156\157\160\160\161" +
		"\161\161\161\161\161\214\214\161\161\161\162\162\162\162\163\163\163\164\165\166" +
		"\166\167\167\167\170\170\215\215\170\216\216\170\170\171\171\171\171\172\172\173" +
		"\173\174\174\174\175\176\176\177\200");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'='",
		"'=>'",
		"';'",
		"'.'",
		"'..'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'~'",
		"'&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"imports",
		"import_",
		"options",
		"option",
		"identifier",
		"symref",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"state_selector",
		"state_list",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"directive",
		"inputs",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule_list",
		"rule0",
		"rhsPrefix",
		"rhsSuffix",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"setPrimary",
		"setExpression",
		"rhsBracketsPair",
		"annotations",
		"annotation_list",
		"annotation",
		"expression",
		"literal",
		"expression_list",
		"map_entries",
		"map_separator",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"importsopt",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"identifieropt",
		"implementsopt",
		"Lnoeoiopt",
		"rhsSuffixopt",
		"rhsBracketsPair_list_Comma_separated",
		"map_entriesopt",
		"expression_listopt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 63;
		static final int header = 64;
		static final int lexer_section = 65;
		static final int parser_section = 66;
		static final int parsing_algorithm = 67;
		static final int imports = 68;
		static final int import_ = 69;
		static final int options = 70;
		static final int option = 71;
		static final int identifier = 72;
		static final int symref = 73;
		static final int type = 74;
		static final int type_part_list = 75;
		static final int type_part = 76;
		static final int pattern = 77;
		static final int lexer_parts = 78;
		static final int lexer_part = 79;
		static final int named_pattern = 80;
		static final int lexeme = 81;
		static final int lexeme_transition = 82;
		static final int lexeme_attrs = 83;
		static final int lexeme_attribute = 84;
		static final int state_selector = 85;
		static final int state_list = 86;
		static final int stateref = 87;
		static final int lexer_state = 88;
		static final int grammar_parts = 89;
		static final int grammar_part = 90;
		static final int nonterm = 91;
		static final int nonterm_type = 92;
		static final int _implements = 93;
		static final int assoc = 94;
		static final int directive = 95;
		static final int inputs = 96;
		static final int inputref = 97;
		static final int references = 98;
		static final int references_cs = 99;
		static final int rules = 100;
		static final int rule_list = 101;
		static final int rule0 = 102;
		static final int rhsPrefix = 103;
		static final int rhsSuffix = 104;
		static final int rhsParts = 105;
		static final int rhsPart = 106;
		static final int rhsAnnotated = 107;
		static final int rhsAssignment = 108;
		static final int rhsOptional = 109;
		static final int rhsCast = 110;
		static final int rhsUnordered = 111;
		static final int rhsClass = 112;
		static final int rhsPrimary = 113;
		static final int setPrimary = 114;
		static final int setExpression = 115;
		static final int rhsBracketsPair = 116;
		static final int annotations = 117;
		static final int annotation_list = 118;
		static final int annotation = 119;
		static final int expression = 120;
		static final int literal = 121;
		static final int expression_list = 122;
		static final int map_entries = 123;
		static final int map_separator = 124;
		static final int name = 125;
		static final int qualified_id = 126;
		static final int command = 127;
		static final int syntax_problem = 128;
		static final int importsopt = 129;
		static final int parsing_algorithmopt = 130;
		static final int typeopt = 131;
		static final int lexeme_transitionopt = 132;
		static final int iconopt = 133;
		static final int lexeme_attrsopt = 134;
		static final int commandopt = 135;
		static final int identifieropt = 136;
		static final int implementsopt = 137;
		static final int Lnoeoiopt = 138;
		static final int rhsSuffixopt = 139;
		static final int rhsBracketsPair_list_Comma_separated = 140;
		static final int map_entriesopt = 141;
		static final int expression_listopt = 142;
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 32) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 32;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 32);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 2:  // input ::= header importsopt options lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 4].value), ((List<TmaImport>)tmStack[tmHead - 3].value), ((List<TmaOption>)tmStack[tmHead - 2].value), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 3:  // input ::= header importsopt options lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)tmStack[tmHead - 1].value), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 4:  // input ::= header importsopt lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 5:  // input ::= header importsopt lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 2].value), ((List<TmaImport>)tmStack[tmHead - 1].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 8:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 5].value), ((TmaName)tmStack[tmHead - 3].value), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 9:  // header ::= Llanguage name parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 2].value), ((TmaName)null), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 10:  // lexer_section ::= '::' Llexer lexer_parts
				 tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value); 
				break;
			case 11:  // parser_section ::= '::' Lparser grammar_parts
				 tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value); 
				break;
			case 12:  // parsing_algorithm ::= Llalr '(' icon ')'
				 tmLeft.value = new TmaParsingAlgorithm(((Integer)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 13:  // imports ::= import_
				 tmLeft.value = new ArrayList<TmaImport>(16); ((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 14:  // imports ::= imports import_
				 ((List<TmaImport>)tmStack[tmHead - 1].value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 15:  // import_ ::= Limport ID scon ';'
				 tmLeft.value = new TmaImport(((String)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 16:  // import_ ::= Limport scon ';'
				 tmLeft.value = new TmaImport(((String)null), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 17:  // options ::= option
				 tmLeft.value = new ArrayList<TmaOption>(16); ((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 18:  // options ::= options option
				 ((List<TmaOption>)tmStack[tmHead - 1].value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 19:  // option ::= ID '=' expression
				 tmLeft.value = new TmaOption(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 20:  // option ::= syntax_problem
				 tmLeft.value = new TmaOption(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 21:  // identifier ::= ID
				 tmLeft.value = new TmaIdentifier(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 22:  // symref ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 23:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 24:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 40:  // pattern ::= regexp
				 tmLeft.value = new TmaPattern(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 41:  // lexer_parts ::= lexer_part
				 tmLeft.value = new ArrayList<ITmaLexerPart>(64); ((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 42:  // lexer_parts ::= lexer_parts lexer_part
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 43:  // lexer_parts ::= lexer_parts syntax_problem
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 47:  // named_pattern ::= ID '=' pattern
				 tmLeft.value = new TmaNamedPattern(((String)tmStack[tmHead - 2].value), ((TmaPattern)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 58:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 7].value), ((String)tmStack[tmHead - 6].value), ((TmaPattern)tmStack[tmHead - 4].value), ((TmaStateref)tmStack[tmHead - 3].value), ((Integer)tmStack[tmHead - 2].value), ((TmaLexemeAttrs)tmStack[tmHead - 1].value), ((TmaCommand)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 59:  // lexeme ::= identifier typeopt ':'
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), ((TmaPattern)null), ((TmaStateref)null), ((Integer)null), ((TmaLexemeAttrs)null), ((TmaCommand)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 60:  // lexeme_transition ::= '=>' stateref
				 tmLeft.value = ((TmaStateref)tmStack[tmHead].value); 
				break;
			case 61:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				 tmLeft.value = ((TmaLexemeAttrs)tmStack[tmHead - 1].value); 
				break;
			case 62:  // lexeme_attribute ::= Lsoft
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSOFT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 63:  // lexeme_attribute ::= Lclass
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LCLASS, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 64:  // lexeme_attribute ::= Lspace
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSPACE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 65:  // lexeme_attribute ::= Llayout
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LLAYOUT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 66:  // state_selector ::= '[' state_list ']'
				 tmLeft.value = new TmaStateSelector(((List<TmaLexerState>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 67:  // state_list ::= lexer_state
				 tmLeft.value = new ArrayList<Integer>(4); ((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 68:  // state_list ::= state_list ',' lexer_state
				 ((List<TmaLexerState>)tmStack[tmHead - 2].value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 69:  // stateref ::= ID
				 tmLeft.value = new TmaStateref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 70:  // lexer_state ::= identifier '=>' stateref
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaStateref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 71:  // lexer_state ::= identifier
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead].value), ((TmaStateref)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 72:  // grammar_parts ::= grammar_part
				 tmLeft.value = new ArrayList<ITmaGrammarPart>(64); ((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 73:  // grammar_parts ::= grammar_parts grammar_part
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 74:  // grammar_parts ::= grammar_parts syntax_problem
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 77:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 78:  // nonterm ::= annotations identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 4].value), ((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 79:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 80:  // nonterm ::= identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 81:  // nonterm_type ::= Lreturns symref
				 tmLeft.value = new TmaNontermTypeAST(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 86:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(true, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 87:  // nonterm_type ::= Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 88:  // nonterm_type ::= Linterface identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LINTERFACE, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 89:  // nonterm_type ::= Lvoid
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LVOID, null, null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 90:  // nonterm_type ::= type
				 tmLeft.value = new TmaNontermTypeRaw(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 91:  // implements ::= ':' references_cs
				 tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value); 
				break;
			case 92:  // assoc ::= Lleft
				 tmLeft.value = TmaAssoc.LLEFT; 
				break;
			case 93:  // assoc ::= Lright
				 tmLeft.value = TmaAssoc.LRIGHT; 
				break;
			case 94:  // assoc ::= Lnonassoc
				 tmLeft.value = TmaAssoc.LNONASSOC; 
				break;
			case 95:  // directive ::= '%' assoc references ';'
				 tmLeft.value = new TmaDirectivePrio(((TmaAssoc)tmStack[tmHead - 2].value), ((List<TmaSymref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 96:  // directive ::= '%' Linput inputs ';'
				 tmLeft.value = new TmaDirectiveInput(((List<TmaInputref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 97:  // inputs ::= inputref
				 tmLeft.value = new ArrayList<TmaInputref>(); ((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 98:  // inputs ::= inputs ',' inputref
				 ((List<TmaInputref>)tmStack[tmHead - 2].value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 101:  // inputref ::= symref Lnoeoiopt
				 tmLeft.value = new TmaInputref(((TmaSymref)tmStack[tmHead - 1].value), ((String)tmStack[tmHead].value) != null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 102:  // references ::= symref
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 103:  // references ::= references symref
				 ((List<TmaSymref>)tmStack[tmHead - 1].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 104:  // references_cs ::= symref
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 105:  // references_cs ::= references_cs ',' symref
				 ((List<TmaSymref>)tmStack[tmHead - 2].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 107:  // rule_list ::= rule0
				 tmLeft.value = new ArrayList<TmaRule0>(); ((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 108:  // rule_list ::= rule_list '|' rule0
				 ((List<TmaRule0>)tmStack[tmHead - 2].value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 111:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 112:  // rule0 ::= rhsPrefix rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 1].value), ((List<ITmaRhsPart>)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 113:  // rule0 ::= rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 114:  // rule0 ::= rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 115:  // rule0 ::= syntax_problem
				 tmLeft.value = new TmaRule0(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 116:  // rhsPrefix ::= '[' annotations ']'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 117:  // rhsPrefix ::= '[' annotations identifier ']'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 2].value), ((TmaIdentifier)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 118:  // rhsPrefix ::= '[' identifier ']'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 119:  // rhsSuffix ::= '%' Lprio symref
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LPRIO, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 120:  // rhsSuffix ::= '%' Lshift symref
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LSHIFT, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 121:  // rhsParts ::= rhsPart
				 tmLeft.value = new ArrayList<ITmaRhsPart>(); ((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 122:  // rhsParts ::= rhsParts rhsPart
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 123:  // rhsParts ::= rhsParts syntax_problem
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 128:  // rhsAnnotated ::= annotations rhsAssignment
				 tmLeft.value = new TmaRhsAnnotated(((TmaAnnotations)tmStack[tmHead - 1].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 130:  // rhsAssignment ::= identifier '=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), false, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 131:  // rhsAssignment ::= identifier '+=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), true, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 133:  // rhsOptional ::= rhsCast '?'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_OPTIONAL, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 135:  // rhsCast ::= rhsClass Las symref
				 tmLeft.value = new TmaRhsCast(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 136:  // rhsCast ::= rhsClass Las literal
				 tmLeft.value = new TmaRhsAsLiteral(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 137:  // rhsUnordered ::= rhsPart '&' rhsPart
				 tmLeft.value = new TmaRhsUnordered(((ITmaRhsPart)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 139:  // rhsClass ::= identifier ':' rhsPrimary
				 tmLeft.value = new TmaRhsClass(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 140:  // rhsPrimary ::= symref
				 tmLeft.value = new TmaRhsSymbol(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 141:  // rhsPrimary ::= '(' rules ')'
				 tmLeft.value = new TmaRhsNested(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 142:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), true, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 143:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), false, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 144:  // rhsPrimary ::= rhsPrimary '*'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ZEROORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 145:  // rhsPrimary ::= rhsPrimary '+'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ONEORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 146:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair_list_Comma_separated ',' rhsBracketsPair
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 147:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair
				tmLeft.value = new ArrayList();
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 148:  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 3].value), ((List<TmaRhsBracketsPair>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 149:  // rhsPrimary ::= '$' '(' rules ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 1].value), ((List<TmaRhsBracketsPair>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 150:  // rhsPrimary ::= Lset '(' setExpression ')'
				 tmLeft.value = new TmaRhsSet(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 151:  // setPrimary ::= ID symref
				 tmLeft.value = new TmaSetSymbol(((String)tmStack[tmHead - 1].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 152:  // setPrimary ::= symref
				 tmLeft.value = new TmaSetSymbol(((String)null), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 153:  // setPrimary ::= '(' setExpression ')'
				 tmLeft.value = new TmaSetCompound(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 154:  // setPrimary ::= '~' setPrimary
				 tmLeft.value = new TmaSetComplement(((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 156:  // setExpression ::= setExpression '|' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.OR, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 157:  // setExpression ::= setExpression '&' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.AMPERSAND, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 158:  // rhsBracketsPair ::= symref '..' symref
				 tmLeft.value = new TmaRhsBracketsPair(((TmaSymref)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 159:  // annotations ::= annotation_list
				 tmLeft.value = new TmaAnnotations(((List<TmaAnnotation>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 160:  // annotation_list ::= annotation
				 tmLeft.value = new ArrayList<TmaAnnotation>(); ((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 161:  // annotation_list ::= annotation_list annotation
				 ((List<TmaAnnotation>)tmStack[tmHead - 1].value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 162:  // annotation ::= '@' ID '{' expression '}'
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead - 3].value), ((ITmaExpression)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 163:  // annotation ::= '@' ID
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead].value), ((ITmaExpression)null), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 164:  // annotation ::= '@' syntax_problem
				 tmLeft.value = new TmaAnnotation(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 169:  // expression ::= Lnew name '(' map_entriesopt ')'
				 tmLeft.value = new TmaInstance(((TmaName)tmStack[tmHead - 3].value), ((List<TmaMapEntriesItem>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 172:  // expression ::= '[' expression_listopt ']'
				 tmLeft.value = new TmaArray(((List<ITmaExpression>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 174:  // literal ::= scon
				 tmLeft.value = new TmaLiteral(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 175:  // literal ::= icon
				 tmLeft.value = new TmaLiteral(((Integer)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 176:  // literal ::= Ltrue
				 tmLeft.value = new TmaLiteral(Boolean.TRUE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 177:  // literal ::= Lfalse
				 tmLeft.value = new TmaLiteral(Boolean.FALSE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 178:  // expression_list ::= expression
				 tmLeft.value = new ArrayList(); ((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 179:  // expression_list ::= expression_list ',' expression
				 ((List<ITmaExpression>)tmStack[tmHead - 2].value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 180:  // map_entries ::= ID map_separator expression
				 tmLeft.value = new ArrayList<TmaMapEntriesItem>(); ((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 181:  // map_entries ::= map_entries ',' ID map_separator expression
				 ((List<TmaMapEntriesItem>)tmStack[tmHead - 4].value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmLeft.endoffset)); 
				break;
			case 185:  // name ::= qualified_id
				 tmLeft.value = new TmaName(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 187:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 188:  // command ::= code
				 tmLeft.value = new TmaCommand(source, tmLeft.line, tmStack[tmHead].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 189:  // syntax_problem ::= error
				 tmLeft.value = new TmaSyntaxProblem(source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 313);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 314);
	}
}
