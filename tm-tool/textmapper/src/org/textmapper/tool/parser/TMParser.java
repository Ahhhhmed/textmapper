/**
 * Copyright 2002-2015 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.Span;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(416,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\267\0\270\0\uffbd\uffff\277\0\uff73" +
		"\uffff\271\0\272\0\uffff\uffff\262\0\261\0\265\0\274\0\uff0b\uffff\uff03\uffff\ufef7" +
		"\uffff\351\0\ufeb7\uffff\uffff\uffff\ufeb1\uffff\14\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\304\0\uffff\uffff\uffff\uffff\uffff\uffff\300\0\uffff\uffff\uffff\uffff\264" +
		"\0\uffff\uffff\uffff\uffff\13\0\240\0\ufe71\uffff\341\0\ufe69\uffff\uffff\uffff\ufe63" +
		"\uffff\uffff\uffff\uffff\uffff\3\0\275\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\ufe27\uffff\302\0\12\0\350\0\243\0\244\0\uffff\uffff\uffff\uffff\241\0\uffff" +
		"\uffff\345\0\ufe21\uffff\uffff\uffff\ufe1b\uffff\uffff\uffff\10\0\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\0\0\16\0\251\0\242\0\250\0\340\0\uffff\uffff\uffff" +
		"\uffff\263\0\uffff\uffff\6\0\7\0\uffff\uffff\uffff\uffff\ufe15\uffff\ufe0d\uffff" +
		"\ufe07\uffff\41\0\45\0\46\0\47\0\44\0\11\0\uffff\uffff\266\0\344\0\2\0\uffff\uffff" +
		"\ufdc3\uffff\321\0\uffff\uffff\uffff\uffff\uffff\uffff\306\0\uffff\uffff\42\0\43" +
		"\0\uffff\uffff\uffff\uffff\uffff\uffff\ufdbb\uffff\66\0\71\0\72\0\73\0\uffff\uffff" +
		"\335\0\ufd79\uffff\uffff\uffff\uffff\uffff\uffff\uffff\62\0\40\0\50\0\uffff\uffff" +
		"\31\0\32\0\25\0\26\0\uffff\uffff\23\0\24\0\30\0\33\0\35\0\34\0\27\0\uffff\uffff\22" +
		"\0\ufd35\uffff\uffff\uffff\113\0\114\0\115\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\247\0\246\0\uffff\uffff\uffff\uffff\ufcef\uffff\233\0\ufca9\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\ufc59\uffff\ufc1b\uffff\110\0\111\0\uffff\uffff\uffff\uffff\67" +
		"\0\70\0\uffff\uffff\334\0\uffff\uffff\63\0\64\0\320\0\17\0\37\0\uffff\uffff\20\0" +
		"\21\0\ufbdd\uffff\ufb91\uffff\327\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\131\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufb89" +
		"\uffff\uffff\uffff\uffff\uffff\ufb39\uffff\uffff\uffff\276\0\uffff\uffff\210\0\uffff" +
		"\uffff\331\0\ufad5\uffff\ufa87\uffff\332\0\ufa39\uffff\ufa2f\uffff\uf9df\uffff\170" +
		"\0\173\0\175\0\uf98b\uffff\171\0\uf935\uffff\uf8dd\uffff\217\0\uffff\uffff\172\0" +
		"\156\0\uf881\uffff\155\0\uf879\uffff\337\0\235\0\uffff\uffff\uf83b\uffff\104\0\322" +
		"\0\uf7fd\uffff\uf7f7\uffff\uf7f1\uffff\uf7a1\uffff\uffff\uffff\uf751\uffff\uffff" +
		"\uffff\uffff\uffff\61\0\36\0\uffff\uffff\310\0\uf701\uffff\127\0\123\0\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\122\0\132\0\uffff\uffff\121\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uf6b7\uffff\256\0\uffff\uffff\uffff\uffff" +
		"\uf6ab\uffff\uffff\uffff\uf65b\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\103\0\uf60b\uffff\uf5bd\uffff\uf5b3\uffff\145\0\uf563\uffff\uf559\uffff\uffff\uffff" +
		"\151\0\154\0\uf509\uffff\uf4ff\uffff\167\0\153\0\uffff\uffff\201\0\uffff\uffff\214" +
		"\0\215\0\160\0\174\0\uf4ab\uffff\uf459\uffff\uffff\uffff\234\0\uf451\uffff\uffff" +
		"\uffff\324\0\106\0\107\0\uffff\uffff\uffff\uffff\uf44b\uffff\uffff\uffff\uf3fb\uffff" +
		"\uf3ab\uffff\uffff\uffff\53\0\312\0\uf35b\uffff\326\0\uffff\uffff\124\0\125\0\uffff" +
		"\uffff\117\0\uffff\uffff\231\0\161\0\162\0\252\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\157\0\uffff\uffff\211\0\uffff\uffff\uffff\uffff\164\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uf313\uffff\222\0\225\0\uffff\uffff\uffff\uffff\176\0\uf2d1\uffff\177\0\uf275" +
		"\uffff\uf26b\uffff\141\0\144\0\uf21b\uffff\143\0\150\0\uf211\uffff\147\0\152\0\uf207" +
		"\uffff\203\0\204\0\330\0\uffff\uffff\336\0\105\0\133\0\uf1b3\uffff\102\0\101\0\uffff" +
		"\uffff\77\0\uffff\uffff\uffff\uffff\uf1ad\uffff\uffff\uffff\314\0\uf15d\uffff\126" +
		"\0\uffff\uffff\120\0\254\0\255\0\uf117\uffff\uf10f\uffff\uffff\uffff\163\0\216\0" +
		"\uffff\uffff\224\0\221\0\uffff\uffff\220\0\uffff\uffff\140\0\uf107\uffff\137\0\142" +
		"\0\146\0\236\0\uffff\uffff\100\0\76\0\75\0\uffff\uffff\55\0\56\0\57\0\60\0\uffff" +
		"\uffff\316\0\51\0\116\0\uffff\uffff\223\0\uf0fd\uffff\uf0f5\uffff\136\0\134\0\74" +
		"\0\54\0\213\0\212\0\uffff\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(3856,
		"\10\301\45\301\46\301\54\301\56\301\57\301\60\301\61\301\62\301\63\301\64\301\65" +
		"\301\66\301\67\301\70\301\71\301\72\301\73\301\74\301\75\301\76\301\77\301\100\301" +
		"\101\301\102\301\103\301\104\301\105\301\106\301\107\301\110\301\uffff\ufffe\2\uffff" +
		"\3\uffff\23\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\47\uffff\50\uffff\51\uffff\24\353\uffff\ufffe" +
		"\31\uffff\0\15\6\15\10\15\11\15\17\15\21\15\24\15\25\15\26\15\27\15\30\15\33\15\34" +
		"\15\36\15\41\15\43\15\44\15\45\15\46\15\52\15\53\15\55\15\56\15\57\15\60\15\61\15" +
		"\62\15\63\15\64\15\65\15\66\15\67\15\70\15\71\15\72\15\73\15\74\15\75\15\76\15\77" +
		"\15\100\15\101\15\102\15\103\15\104\15\105\15\106\15\107\15\110\15\112\15\uffff\ufffe" +
		"\25\uffff\106\uffff\17\305\uffff\ufffe\20\uffff\17\273\25\273\26\273\106\273\uffff" +
		"\ufffe\54\uffff\10\303\45\303\46\303\56\303\57\303\60\303\61\303\62\303\63\303\64" +
		"\303\65\303\66\303\67\303\70\303\71\303\72\303\73\303\74\303\75\303\76\303\77\303" +
		"\100\303\101\303\102\303\103\303\104\303\105\303\106\303\107\303\110\303\uffff\ufffe" +
		"\21\uffff\24\352\uffff\ufffe\34\uffff\40\uffff\46\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\32\343\uffff\ufffe\22" +
		"\uffff\21\245\32\245\uffff\ufffe\21\uffff\32\342\uffff\ufffe\46\uffff\110\uffff\107" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\26\347\uffff" +
		"\ufffe\10\uffff\0\1\uffff\ufffe\21\uffff\26\346\uffff\ufffe\106\uffff\17\305\uffff" +
		"\ufffe\13\uffff\22\13\25\13\uffff\ufffe\25\uffff\22\307\uffff\ufffe\6\uffff\23\uffff" +
		"\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\0\4\10\4\uffff\ufffe\16\uffff\21\65\24\65\uffff\ufffe" +
		"\6\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\0\5\uffff\ufffe\44\uffff\22\230\25\230\43\230" +
		"\46\230\55\230\56\230\57\230\60\230\61\230\62\230\63\230\64\230\65\230\66\230\67" +
		"\230\70\230\71\230\72\230\73\230\74\230\75\230\76\230\77\230\100\230\101\230\102" +
		"\230\103\230\104\230\105\230\106\230\107\230\110\230\uffff\ufffe\1\uffff\0\52\6\52" +
		"\10\52\23\52\45\52\46\52\56\52\57\52\60\52\61\52\62\52\63\52\64\52\65\52\66\52\67" +
		"\52\70\52\71\52\72\52\73\52\74\52\75\52\76\52\77\52\100\52\101\52\102\52\103\52\104" +
		"\52\105\52\106\52\107\52\110\52\uffff\ufffe\113\uffff\22\232\25\232\43\232\44\232" +
		"\46\232\55\232\56\232\57\232\60\232\61\232\62\232\63\232\64\232\65\232\66\232\67" +
		"\232\70\232\71\232\72\232\73\232\74\232\75\232\76\232\77\232\100\232\101\232\102" +
		"\232\103\232\104\232\105\232\106\232\107\232\110\232\uffff\ufffe\6\uffff\23\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11" +
		"\333\17\333\uffff\ufffe\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\7\323\22\323\uffff\ufffe\46\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\7\323\22\323\uffff\ufffe\16\uffff\0\311\3\311\6\311\10\311\23\311\25\311\45\311" +
		"\46\311\56\311\57\311\60\311\61\311\62\311\63\311\64\311\65\311\66\311\67\311\70" +
		"\311\71\311\72\311\73\311\74\311\75\311\76\311\77\311\100\311\101\311\102\311\103" +
		"\311\104\311\105\311\106\311\107\311\110\311\112\311\uffff\ufffe\76\uffff\17\130" +
		"\21\130\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff" +
		"\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101" +
		"\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\112\uffff\11\333\26\333\uffff\ufffe\31\uffff\13\13\22\13" +
		"\35\13\6\15\11\15\17\15\25\15\26\15\27\15\33\15\34\15\36\15\41\15\43\15\44\15\45" +
		"\15\46\15\52\15\53\15\55\15\56\15\57\15\60\15\61\15\62\15\63\15\64\15\65\15\66\15" +
		"\67\15\70\15\71\15\72\15\73\15\74\15\75\15\76\15\77\15\100\15\101\15\102\15\103\15" +
		"\104\15\105\15\106\15\107\15\110\15\112\15\uffff\ufffe\6\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11\333\17\333\26\333\uffff" +
		"\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\46\uffff\110\uffff\107\uffff\106" +
		"\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff" +
		"\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff" +
		"\11\333\17\333\26\333\uffff\ufffe\6\uffff\11\333\17\333\26\333\uffff\ufffe\6\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11" +
		"\333\17\333\26\333\uffff\ufffe\41\uffff\6\165\11\165\17\165\25\165\26\165\27\165" +
		"\43\165\44\165\45\165\46\165\52\165\55\165\56\165\57\165\60\165\61\165\62\165\63" +
		"\165\64\165\65\165\66\165\67\165\70\165\71\165\72\165\73\165\74\165\75\165\76\165" +
		"\77\165\100\165\101\165\102\165\103\165\104\165\105\165\106\165\107\165\110\165\112" +
		"\165\uffff\ufffe\36\uffff\6\200\11\200\17\200\25\200\26\200\27\200\41\200\43\200" +
		"\44\200\45\200\46\200\52\200\55\200\56\200\57\200\60\200\61\200\62\200\63\200\64" +
		"\200\65\200\66\200\67\200\70\200\71\200\72\200\73\200\74\200\75\200\76\200\77\200" +
		"\100\200\101\200\102\200\103\200\104\200\105\200\106\200\107\200\110\200\112\200" +
		"\uffff\ufffe\53\uffff\6\202\11\202\17\202\25\202\26\202\27\202\36\202\41\202\43\202" +
		"\44\202\45\202\46\202\52\202\55\202\56\202\57\202\60\202\61\202\62\202\63\202\64" +
		"\202\65\202\66\202\67\202\70\202\71\202\72\202\73\202\74\202\75\202\76\202\77\202" +
		"\100\202\101\202\102\202\103\202\104\202\105\202\106\202\107\202\110\202\112\202" +
		"\uffff\ufffe\33\uffff\34\uffff\6\206\11\206\17\206\25\206\26\206\27\206\36\206\41" +
		"\206\43\206\44\206\45\206\46\206\52\206\53\206\55\206\56\206\57\206\60\206\61\206" +
		"\62\206\63\206\64\206\65\206\66\206\67\206\70\206\71\206\72\206\73\206\74\206\75" +
		"\206\76\206\77\206\100\206\101\206\102\206\103\206\104\206\105\206\106\206\107\206" +
		"\110\206\112\206\uffff\ufffe\11\uffff\17\135\26\135\uffff\ufffe\46\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\21\13\32\13\uffff\ufffe\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\7\323\22\323\uffff\ufffe\22\uffff\7\325\uffff" +
		"\ufffe\22\uffff\7\325\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44" +
		"\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11\333\17\333\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112" +
		"\uffff\11\333\17\333\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff" +
		"\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11\333\17\333\uffff\ufffe\3\uffff" +
		"\0\313\6\313\10\313\23\313\25\313\45\313\46\313\56\313\57\313\60\313\61\313\62\313" +
		"\63\313\64\313\65\313\66\313\67\313\70\313\71\313\72\313\73\313\74\313\75\313\76" +
		"\313\77\313\100\313\101\313\102\313\103\313\104\313\105\313\106\313\107\313\110\313" +
		"\112\313\uffff\ufffe\14\uffff\15\uffff\12\253\24\253\42\253\uffff\ufffe\6\uffff\25" +
		"\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\52\uffff\55\uffff\112" +
		"\uffff\11\333\26\333\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff" +
		"\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11\333\26\333\uffff\ufffe\6\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11\333\17" +
		"\333\26\333\uffff\ufffe\6\uffff\11\333\17\333\26\333\uffff\ufffe\6\uffff\25\uffff" +
		"\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11\333\17" +
		"\333\26\333\uffff\ufffe\6\uffff\11\333\17\333\26\333\uffff\ufffe\6\uffff\25\uffff" +
		"\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11\333\17" +
		"\333\26\333\uffff\ufffe\6\uffff\11\333\17\333\26\333\uffff\ufffe\41\uffff\6\166\11" +
		"\166\17\166\25\166\26\166\27\166\43\166\44\166\45\166\46\166\52\166\55\166\56\166" +
		"\57\166\60\166\61\166\62\166\63\166\64\166\65\166\66\166\67\166\70\166\71\166\72" +
		"\166\73\166\74\166\75\166\76\166\77\166\100\166\101\166\102\166\103\166\104\166\105" +
		"\166\106\166\107\166\110\166\112\166\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104" +
		"\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11\333\17\333\26" +
		"\333\uffff\ufffe\13\uffff\21\237\32\237\uffff\ufffe\22\uffff\7\325\uffff\ufffe\6" +
		"\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\112\uffff\11\333\17\333\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff" +
		"\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112\uffff\11\333\17\333\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\112\uffff\11\333\17\333\uffff\ufffe\25\uffff\0\315\6\315\10\315\23\315" +
		"\45\315\46\315\56\315\57\315\60\315\61\315\62\315\63\315\64\315\65\315\66\315\67" +
		"\315\70\315\71\315\72\315\73\315\74\315\75\315\76\315\77\315\100\315\101\315\102" +
		"\315\103\315\104\315\105\315\106\315\107\315\110\315\112\315\uffff\ufffe\31\uffff" +
		"\46\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101" +
		"\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\11\15\26\15\41\15\uffff\ufffe\33\uffff\34\uffff\6\207\11\207\17\207" +
		"\25\207\26\207\27\207\36\207\41\207\43\207\44\207\45\207\46\207\52\207\53\207\55" +
		"\207\56\207\57\207\60\207\61\207\62\207\63\207\64\207\65\207\66\207\67\207\70\207" +
		"\71\207\72\207\73\207\74\207\75\207\76\207\77\207\100\207\101\207\102\207\103\207" +
		"\104\207\105\207\106\207\107\207\110\207\112\207\uffff\ufffe\6\uffff\11\333\17\333" +
		"\26\333\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\112\uffff\11\333\17\333\26\333\uffff\ufffe\6\uffff\11\333\17\333" +
		"\26\333\uffff\ufffe\6\uffff\11\333\17\333\26\333\uffff\ufffe\41\205\6\205\11\205" +
		"\17\205\25\205\26\205\27\205\43\205\44\205\45\205\46\205\52\205\55\205\56\205\57" +
		"\205\60\205\61\205\62\205\63\205\64\205\65\205\66\205\67\205\70\205\71\205\72\205" +
		"\73\205\74\205\75\205\76\205\77\205\100\205\101\205\102\205\103\205\104\205\105\205" +
		"\106\205\107\205\110\205\112\205\uffff\ufffe\21\uffff\7\112\uffff\ufffe\6\uffff\23" +
		"\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\112" +
		"\uffff\11\333\17\333\uffff\ufffe\112\uffff\0\317\6\317\10\317\23\317\45\317\46\317" +
		"\56\317\57\317\60\317\61\317\62\317\63\317\64\317\65\317\66\317\67\317\70\317\71" +
		"\317\72\317\73\317\74\317\75\317\76\317\77\317\100\317\101\317\102\317\103\317\104" +
		"\317\105\317\106\317\107\317\110\317\uffff\ufffe\12\260\42\uffff\24\260\uffff\ufffe" +
		"\12\257\42\257\24\257\uffff\ufffe\6\uffff\11\333\17\333\26\333\uffff\ufffe\11\226" +
		"\41\uffff\26\226\uffff\ufffe\11\227\41\227\26\227\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(171,
		"\0\2\4\25\44\44\44\103\113\115\122\125\134\135\136\140\166\173\206\217\246\255\332" +
		"\347\372\375\u0106\u010c\u0113\u0118\u0119\u011e\u0121\u0128\u0133\u0136\u014f\u016a" +
		"\u0184\u01e3\u01f0\u01fd\u0203\u0204\u0205\u0206\u0222\u0282\u02e5\u0345\u03a5\u0408" +
		"\u0468\u04c8\u0528\u0588\u05e8\u0648\u06a8\u0708\u0768\u07c9\u082a\u088a\u08ea\u094f" +
		"\u09b2\u0a15\u0a75\u0ad5\u0b35\u0b96\u0bf6\u0c56\u0c56\u0c6b\u0c6c\u0c6d\u0c6e\u0c6f" +
		"\u0c70\u0c72\u0c73\u0c74\u0ca4\u0cca\u0cdb\u0ce0\u0ce2\u0ce6\u0ce8\u0ce9\u0ceb\u0ced" +
		"\u0cef\u0cf0\u0cf1\u0cf2\u0cf4\u0cf6\u0cf8\u0cfa\u0cfb\u0cfd\u0cff\u0d03\u0d06\u0d07" +
		"\u0d09\u0d0b\u0d0d\u0d0f\u0d10\u0d1a\u0d25\u0d30\u0d3c\u0d57\u0d6a\u0d78\u0d8c\u0da0" +
		"\u0db6\u0dce\u0de6\u0dfa\u0e12\u0e2b\u0e47\u0e4c\u0e50\u0e66\u0e7d\u0e7f\u0e81\u0e8b" +
		"\u0e8e\u0e90\u0e92\u0e96\u0e99\u0e9c\u0ea2\u0ea4\u0eb1\u0eb4\u0eb7\u0ecc\u0ee6\u0ee7" +
		"\u0ee8\u0eea\u0eeb\u0eec\u0eed\u0eee\u0eef\u0ef0\u0ef3\u0ef6\u0ef7\u0f01\u0f1c\u0f32" +
		"\u0f33\u0f34\u0f35\u0f36\u0f37\u0f38\u0f39");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(3897,
		"\u019c\u019d\147\215\1\6\36\41\61\72\106\116\150\275\372\u0105\u011b\u0137\u013e" +
		"\u013f\u0160\1\6\41\55\72\106\116\275\360\372\u011b\u0137\u013e\u013f\u0160\105\130" +
		"\137\160\233\300\312\313\315\316\346\347\351\u0104\u0106\u010c\u010d\u010e\u0110" +
		"\u0111\u0115\u0120\u012b\u012d\u012e\u0152\u0153\u0156\u0159\u016b\u0180\157\243" +
		"\244\247\350\352\353\u012f\40\64\333\u014d\u0179\u0194\u0195\u0102\u0174\u0175\63" +
		"\126\266\274\306\367\u0121\u0100\u0100\144\262\34\60\104\121\251\265\273\274\310" +
		"\365\366\367\u0129\u012a\u012c\u0134\u0139\u0167\u0169\u016a\u0170\u0189\21\150\203" +
		"\213\257\24\51\77\146\150\203\213\257\265\340\u0164\47\75\152\306\330\344\345\u0124" +
		"\u014e\1\6\41\105\106\116\130\150\203\213\233\257\275\300\346\347\351\u0106\u0120" +
		"\u012b\u012d\u012e\u016b\25\146\150\203\213\257\u0102\20\30\32\127\150\157\203\213" +
		"\233\244\247\257\300\302\304\312\313\316\330\346\347\351\353\u0104\u0106\u0107\u0108" +
		"\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u0120\u012b\u012d\u012e\u0132\u0148\u0149" +
		"\u0153\u016b\u017c\u017e\54\100\102\176\203\213\257\u0103\u0147\u014d\u0176\u0179" +
		"\u018e\233\300\312\313\316\346\347\351\u0104\u0106\u010c\u010e\u0111\u0120\u012b" +
		"\u012d\u012e\u0153\u016b\374\u0105\u0145\10\150\157\203\213\247\257\303\u014a\52" +
		"\150\203\213\257\340\150\203\213\257\326\u0150\u0192\26\73\326\u0150\u0192\306\150" +
		"\203\213\257\323\277\u0140\u0142\26\73\u0107\u0148\u0149\u017c\u017e\150\203\213" +
		"\257\317\u0116\u014d\u015c\u0179\u0194\u0195\u0102\u0174\u0175\233\300\312\313\316" +
		"\330\346\347\351\u0104\u0106\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u0120" +
		"\u012b\u012d\u012e\u0153\u016b\137\150\160\167\203\213\233\257\300\312\313\316\346" +
		"\347\351\u0104\u0106\u010c\u010e\u0111\u0119\u0120\u012b\u012d\u012e\u0153\u016b" +
		"\1\6\40\41\106\116\130\156\160\233\275\300\316\346\347\351\u0104\u0106\u010e\u0111" +
		"\u0120\u012b\u012d\u012e\u0153\u016b\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\156\160\165\170\171\172\203\213\216\222\227\230" +
		"\233\234\236\237\240\257\271\273\275\277\300\301\312\313\316\330\335\341\346\347" +
		"\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111" +
		"\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148" +
		"\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\6\41\72\106\116\275\372" +
		"\u011b\u0137\u013e\u013f\u0160\1\6\41\72\106\116\275\372\u011b\u0137\u013e\u013f" +
		"\u0160\1\6\41\106\116\275\u0104\325\22\233\267\270\300\312\313\316\330\346\347\351" +
		"\364\u0104\u0106\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u0120\u012b\u012d" +
		"\u012e\u0153\u016b\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\124" +
		"\125\130\137\143\150\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236" +
		"\237\240\257\271\273\275\277\300\301\312\313\316\330\335\341\346\347\351\356\363" +
		"\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119" +
		"\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72" +
		"\73\105\106\116\117\125\130\137\143\150\156\157\160\165\170\171\172\203\213\216\222" +
		"\227\230\233\234\236\237\240\244\247\257\271\273\275\277\300\301\312\313\316\330" +
		"\335\341\346\347\351\353\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13" +
		"\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156\160\165" +
		"\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\276\277" +
		"\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106" +
		"\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b" +
		"\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c" +
		"\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137" +
		"\143\150\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257" +
		"\271\273\275\276\277\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375" +
		"\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b" +
		"\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153" +
		"\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\156\157\160\165\170\171\172\203\213\216\222\227" +
		"\230\233\234\236\237\240\244\247\257\271\273\275\277\300\301\312\313\316\330\335" +
		"\341\346\347\351\353\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13" +
		"\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\155\156\160" +
		"\165\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\277" +
		"\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106" +
		"\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b" +
		"\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c" +
		"\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137" +
		"\143\150\155\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236\237\240" +
		"\257\271\273\275\277\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375" +
		"\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b" +
		"\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153" +
		"\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\155\156\160\165\170\171\172\203\213\216\222\227" +
		"\230\233\234\236\237\240\257\271\273\275\277\300\301\312\313\316\330\335\341\346" +
		"\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e" +
		"\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144" +
		"\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36" +
		"\40\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\155\156\160\165\170\171" +
		"\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\277\300\301\312" +
		"\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108" +
		"\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e" +
		"\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185" +
		"\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\155" +
		"\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273" +
		"\275\277\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104" +
		"\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125" +
		"\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176" +
		"\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125" +
		"\130\137\143\150\155\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236" +
		"\237\240\257\271\273\275\277\300\301\312\313\316\330\335\341\346\347\351\356\363" +
		"\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119" +
		"\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72" +
		"\73\105\106\116\117\125\130\137\143\150\156\160\165\170\171\172\203\213\216\222\223" +
		"\227\230\233\234\236\237\240\257\271\273\275\277\300\301\312\313\316\330\335\341" +
		"\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e" +
		"\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144" +
		"\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36" +
		"\40\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156\160\165\170\171\172" +
		"\203\213\216\222\223\227\230\233\234\236\237\240\257\271\273\275\277\300\301\312" +
		"\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108" +
		"\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e" +
		"\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185" +
		"\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\155" +
		"\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273" +
		"\275\277\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104" +
		"\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125" +
		"\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176" +
		"\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125" +
		"\130\137\143\150\155\156\160\165\170\171\172\203\213\216\222\224\227\230\233\234" +
		"\236\237\240\257\271\273\275\277\300\301\312\313\316\330\335\341\346\347\351\356" +
		"\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112" +
		"\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149" +
		"\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44" +
		"\53\72\73\105\106\116\117\125\130\137\143\150\155\156\160\165\170\171\172\203\213" +
		"\216\222\224\227\230\233\234\236\237\240\257\271\273\275\277\300\301\312\313\316" +
		"\330\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13" +
		"\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156\160\165" +
		"\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\263\271\273\275\277" +
		"\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106" +
		"\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b" +
		"\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c" +
		"\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137" +
		"\143\150\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257" +
		"\271\273\275\277\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375\376" +
		"\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120" +
		"\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160" +
		"\u016b\u016c\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\156\157\160\165\170\171\172\203\213\216\222\227" +
		"\230\233\234\235\236\237\240\244\247\257\271\273\275\277\300\301\312\313\316\330" +
		"\335\341\346\347\351\353\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u016c\u0176\u017c\u017e\u0185\1" +
		"\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156" +
		"\157\160\165\170\171\172\203\213\216\222\227\230\233\234\236\237\240\244\247\257" +
		"\271\273\275\277\300\301\312\313\316\330\335\341\346\347\351\353\356\363\372\375" +
		"\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b" +
		"\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153" +
		"\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\156\157\160\165\170\171\172\203\213\216\222\227" +
		"\230\233\234\236\237\240\244\247\257\271\273\275\277\300\301\312\313\316\330\335" +
		"\341\346\347\351\353\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13" +
		"\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156\160\165" +
		"\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\277\300" +
		"\301\312\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107" +
		"\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d" +
		"\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u016c\u0176\u017c" +
		"\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\116\117\125\130\137" +
		"\143\150\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257" +
		"\271\273\275\277\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375\376" +
		"\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120" +
		"\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160" +
		"\u016b\u016c\u0176\u017c\u017e\u0185\0\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73" +
		"\105\106\116\117\125\130\137\143\150\156\160\165\170\171\172\203\213\216\222\227" +
		"\230\233\234\236\237\240\257\271\273\275\277\300\301\312\313\316\330\335\341\346" +
		"\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e" +
		"\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144" +
		"\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\20\26\31\35" +
		"\36\40\41\43\44\53\72\73\101\105\106\116\117\125\130\137\143\150\156\160\165\170" +
		"\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\277\300\301" +
		"\312\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108" +
		"\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125\u012b\u012d\u012e" +
		"\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176\u017c\u017e\u0185" +
		"\1\2\6\13\26\31\35\36\40\41\43\44\53\62\72\73\105\106\116\117\125\130\137\143\150" +
		"\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273" +
		"\275\277\300\301\312\313\316\330\335\341\346\347\351\356\363\372\375\376\377\u0104" +
		"\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u0122\u0125" +
		"\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0153\u0160\u016b\u0176" +
		"\u017c\u017e\u0185\1\2\6\13\26\31\35\36\40\41\43\44\53\72\73\105\106\107\116\117" +
		"\125\130\137\143\150\156\160\165\170\171\172\203\213\216\222\227\230\233\234\236" +
		"\237\240\257\271\273\275\277\300\301\312\313\316\330\335\341\346\347\351\356\363" +
		"\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010c\u010e\u0111\u0112\u0119" +
		"\u011b\u0120\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0153\u0160\u016b\u0176\u017c\u017e\u0185\233\300\312\313\316\346\347\351\u0104" +
		"\u0106\u010c\u010e\u0111\u0119\u0120\u012b\u012d\u012e\u0153\u016b\u016e\231\0\0" +
		"\40\64\20\101\22\40\26\43\44\73\105\125\130\137\160\165\172\230\233\234\237\240\271" +
		"\277\300\301\312\313\316\330\335\341\346\347\351\377\u0104\u0106\u0108\u010a\u010c" +
		"\u010e\u0111\u0112\u0119\u0120\u0122\u012b\u012d\u012e\u0140\u0142\u0153\u016b\1" +
		"\6\41\106\116\233\275\300\312\313\316\330\346\347\351\u0104\u0106\u0107\u0108\u0109" +
		"\u010a\u010c\u010e\u0111\u0112\u0119\u011b\u0120\u012b\u012d\u012e\u0148\u0149\u014a" +
		"\u0153\u016b\u017c\u017e\72\143\170\216\227\236\273\363\372\375\376\u0125\u0137\u0144" +
		"\u0160\u0176\u0185\127\157\244\247\353\150\203\150\203\213\257\147\215\105\105\130" +
		"\105\130\105\130\262\u0132\u016c\105\130\105\130\171\356\125\172\137\137\160\137" +
		"\160\157\244\247\353\344\345\u0124\155\137\160\137\160\216\363\227\u0144\u0125\233" +
		"\300\346\347\351\u0106\u012b\u012d\u012e\u016b\233\300\346\347\351\u0106\u0120\u012b" +
		"\u012d\u012e\u016b\233\300\346\347\351\u0106\u0120\u012b\u012d\u012e\u016b\233\300" +
		"\312\346\347\351\u0106\u0120\u012b\u012d\u012e\u016b\233\300\312\313\315\316\346" +
		"\347\351\u0104\u0106\u010c\u010d\u010e\u0110\u0111\u0115\u0120\u012b\u012d\u012e" +
		"\u0152\u0153\u0156\u0159\u016b\u0180\233\300\312\313\316\346\347\351\u0104\u0106" +
		"\u010c\u010e\u0111\u0120\u012b\u012d\u012e\u0153\u016b\233\300\312\313\346\347\351" +
		"\u0106\u010c\u0120\u012b\u012d\u012e\u016b\233\300\312\313\316\346\347\351\u0104" +
		"\u0106\u010c\u010e\u0111\u0119\u0120\u012b\u012d\u012e\u0153\u016b\233\300\312\313" +
		"\316\346\347\351\u0104\u0106\u010c\u010e\u0111\u0119\u0120\u012b\u012d\u012e\u0153" +
		"\u016b\233\300\312\313\316\330\346\347\351\u0104\u0106\u010c\u010e\u0111\u0112\u0119" +
		"\u0120\u012b\u012d\u012e\u0153\u016b\233\300\312\313\316\330\346\347\351\u0104\u0106" +
		"\u0108\u010a\u010c\u010e\u0111\u0112\u0119\u0120\u012b\u012d\u012e\u0153\u016b\233" +
		"\300\312\313\316\330\346\347\351\u0104\u0106\u0108\u010a\u010c\u010e\u0111\u0112" +
		"\u0119\u0120\u012b\u012d\u012e\u0153\u016b\233\300\312\313\316\346\347\351\u0104" +
		"\u0106\u010c\u010e\u0111\u0119\u0120\u012b\u012d\u012e\u0153\u016b\233\300\312\313" +
		"\316\330\346\347\351\u0104\u0106\u0108\u010a\u010c\u010e\u0111\u0112\u0119\u0120" +
		"\u012b\u012d\u012e\u0153\u016b\233\300\312\313\316\330\346\347\351\u0104\u0106\u0108" +
		"\u0109\u010a\u010c\u010e\u0111\u0112\u0119\u0120\u012b\u012d\u012e\u0153\u016b\233" +
		"\267\270\300\312\313\316\330\346\347\351\364\u0104\u0106\u0108\u0109\u010a\u010c" +
		"\u010e\u0111\u0112\u0119\u0120\u012b\u012d\u012e\u0153\u016b\u0107\u0148\u0149\u017c" +
		"\u017e\u0107\u0148\u017c\u017e\137\160\233\300\312\313\316\346\347\351\u0104\u0106" +
		"\u010c\u010e\u0111\u0119\u0120\u012b\u012d\u012e\u0153\u016b\137\160\167\233\300" +
		"\312\313\316\346\347\351\u0104\u0106\u010c\u010e\u0111\u0119\u0120\u012b\u012d\u012e" +
		"\u0153\u016b\157\247\234\u0122\26\43\44\73\234\277\377\u0122\u0140\u0142\10\303\u014a" +
		"\26\73\155\224\72\372\u0137\u0160\277\u0140\u0142\277\u0140\u0142\1\6\41\106\116" +
		"\275\53\117\1\6\41\72\106\116\275\372\u011b\u0137\u013e\u013f\u0160\2\13\31\2\13" +
		"\31\233\300\312\313\316\346\347\351\u0104\u0106\u010c\u010e\u0111\u0119\u0120\u012b" +
		"\u012d\u012e\u0153\u016b\u016e\1\6\40\41\106\116\130\156\160\233\275\300\316\346" +
		"\347\351\u0104\u0106\u010e\u0111\u0120\u012b\u012d\u012e\u0153\u016b\3\22\20\101" +
		"\127\262\360\u0132\u016e\125\237\240\341\344\345\u0124\216\233\300\346\347\351\u0106" +
		"\u012b\u012d\u012e\u016b\233\300\312\313\315\316\346\347\351\u0104\u0106\u010c\u010d" +
		"\u010e\u0110\u0111\u0115\u0120\u012b\u012d\u012e\u0152\u0153\u0156\u0159\u016b\u0180" +
		"\137\160\233\300\312\313\316\346\347\351\u0104\u0106\u010c\u010e\u0111\u0119\u0120" +
		"\u012b\u012d\u012e\u0153\u016b\234\26\26\53\53\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(3897,
		"\u019e\u019f\174\174\4\4\60\4\104\4\4\4\176\4\4\u0145\4\4\4\4\4\5\5\5\102\5\5\5\5" +
		"\u0131\5\5\5\5\5\5\124\124\155\155\276\276\276\276\276\276\276\276\276\276\276\276" +
		"\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\233\346\347\351\u012b" +
		"\u012d\u012e\u016b\62\107\u0120\u017c\u017c\u017c\u017c\u0140\u0140\u0140\106\147" +
		"\364\372\u0108\u0137\u0160\u013e\u013f\171\356\56\103\123\142\354\362\370\373\u010b" +
		"\u0135\u0136\u0138\u0165\u0166\u0168\u016f\u0171\u0186\u0187\u0188\u0191\u0198\35" +
		"\177\177\177\177\41\73\117\172\200\200\200\200\363\u0122\u0185\72\116\215\u0109\u011e" +
		"\u0125\u0125\u0125\u0109\6\6\6\125\6\6\125\201\201\201\277\201\6\277\277\277\277" +
		"\277\277\277\277\277\277\42\173\202\202\202\202\u0141\31\53\55\150\203\150\203\203" +
		"\300\150\150\203\300\u0106\u0107\300\300\300\300\300\300\300\150\300\300\u0148\300" +
		"\300\300\300\300\300\300\300\300\300\300\300\u016c\u0148\u0148\300\300\u0148\u0148" +
		"\101\120\122\255\256\260\355\u0143\u0178\u017d\u0192\u0193\u0199\301\301\301\301" +
		"\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\u013a\u0146\u0177\26" +
		"\204\234\204\204\234\204\26\26\74\205\205\205\205\u0123\206\206\206\206\u011c\u011c" +
		"\u019a\43\43\u011d\u011d\u019b\u010a\207\207\207\207\u011a\377\377\377\44\44\u0149" +
		"\u0149\u0149\u0149\u0149\210\210\210\210\u0119\u0119\u017e\u0119\u017e\u017e\u017e" +
		"\u0142\u0142\u0142\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302" +
		"\302\302\302\302\302\302\302\302\302\156\211\156\156\211\211\156\211\156\156\156" +
		"\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\7\7\7\7\7\7\7\7" +
		"\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45" +
		"\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335" +
		"\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111" +
		"\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303" +
		"\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\11\11\11\11\11\11\11" +
		"\11\11\11\11\11\11\12\12\12\12\12\12\12\12\12\12\12\12\12\13\13\13\13\13\13\u0144" +
		"\u011b\36\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304" +
		"\304\304\304\304\304\304\304\304\304\304\10\17\10\17\45\17\57\61\63\10\45\45\75\111" +
		"\45\126\10\10\75\143\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45" +
		"\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252" +
		"\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303" +
		"\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17" +
		"\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\235\45\45\111" +
		"\252\45\212\212\111\266\111\45\303\335\111\45\45\235\235\212\45\111\10\45\303\45" +
		"\303\303\303\303\45\45\303\303\303\235\252\111\111\111\111\45\303\303\u014a\303\10" +
		"\303\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10" +
		"\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126" +
		"\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111" +
		"\45\45\212\45\111\10\375\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111" +
		"\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303" +
		"\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57" +
		"\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212" +
		"\212\111\266\111\45\303\335\111\45\45\212\45\111\10\376\45\303\45\303\303\303\303" +
		"\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303" +
		"\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a" +
		"\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111" +
		"\212\231\236\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\236\236\212" +
		"\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\236\252\111\111\111\111\45" +
		"\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45" +
		"\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10" +
		"\45\45\75\111\45\126\10\10\75\45\126\45\111\212\216\231\45\45\111\252\45\212\212" +
		"\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303" +
		"\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303" +
		"\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111" +
		"\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\217" +
		"\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303" +
		"\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10" +
		"\303\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10" +
		"\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126" +
		"\10\10\75\45\126\45\111\212\220\231\45\45\111\252\45\212\212\111\266\111\45\303\335" +
		"\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111" +
		"\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303" +
		"\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57" +
		"\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\221\231\45\45\111\252\45" +
		"\212\212\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303" +
		"\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303" +
		"\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a" +
		"\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111" +
		"\212\222\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\212\45\111" +
		"\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a" +
		"\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a" +
		"\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45" +
		"\126\10\10\75\45\126\45\111\212\223\231\45\45\111\252\45\212\212\111\266\111\45\303" +
		"\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111" +
		"\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303" +
		"\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45" +
		"\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\45\45\111\252" +
		"\45\212\212\111\266\267\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303" +
		"\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303" +
		"\303\303\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303" +
		"\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45" +
		"\126\45\111\212\231\45\45\111\252\45\212\212\111\266\270\111\45\303\335\111\45\45" +
		"\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45" +
		"\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45" +
		"\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10" +
		"\45\45\75\111\45\126\10\10\75\45\126\45\111\212\224\231\45\45\111\252\45\212\212" +
		"\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303" +
		"\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303" +
		"\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111" +
		"\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\225" +
		"\231\45\45\111\252\45\212\212\111\266\225\111\45\303\335\111\45\45\212\45\111\10" +
		"\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a" +
		"\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a" +
		"\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45" +
		"\126\10\10\75\45\126\45\111\212\226\231\45\45\111\252\45\212\212\111\266\226\111" +
		"\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252" +
		"\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303" +
		"\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17" +
		"\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\45\45\111\252" +
		"\45\212\212\111\266\111\45\303\335\111\45\45\212\361\45\111\10\45\303\45\303\303" +
		"\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303" +
		"\303\303\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303" +
		"\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45" +
		"\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\212" +
		"\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303" +
		"\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45\111" +
		"\u014a\u014a\10\303\111\303\u018a\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63" +
		"\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\237\45\45\111\252\45\212\212" +
		"\111\266\111\45\303\335\341\111\45\45\237\237\212\45\111\10\45\303\45\303\303\303" +
		"\303\45\45\303\303\303\237\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303" +
		"\303\303\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303" +
		"\u018b\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10" +
		"\75\45\126\45\111\212\231\240\45\45\111\252\45\212\212\111\266\111\45\303\335\111" +
		"\45\45\240\240\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\240\252" +
		"\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303" +
		"\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17" +
		"\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\241\45\45\111" +
		"\252\45\212\212\111\266\111\45\303\335\111\45\45\241\241\212\45\111\10\45\303\45" +
		"\303\303\303\303\45\45\303\303\303\241\252\111\111\111\111\45\303\303\u014a\303\10" +
		"\303\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10" +
		"\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126" +
		"\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111" +
		"\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111" +
		"\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303\111" +
		"\45\45\111\u014a\u014a\10\303\111\303\u018c\111\u014a\u014a\111\10\17\10\17\45\17" +
		"\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45" +
		"\212\212\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303" +
		"\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303" +
		"\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\u018d\111" +
		"\u014a\u014a\111\2\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45" +
		"\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\212" +
		"\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303" +
		"\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45\111" +
		"\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\32\45\17\57\61\63\10" +
		"\45\45\75\111\45\32\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111" +
		"\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303" +
		"\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335" +
		"\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10" +
		"\17\10\17\45\17\57\61\63\10\45\45\75\105\111\45\126\10\10\75\45\126\45\111\212\231" +
		"\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45" +
		"\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303" +
		"\303\303\303\303\303\10\303\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303" +
		"\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10" +
		"\137\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335" +
		"\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111" +
		"\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\10\303\335\111\303\303\303" +
		"\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\305\305\305\305\305" +
		"\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\275\u019c\3\64\110" +
		"\33\33\37\65\46\46\46\46\127\144\127\157\157\247\144\274\306\46\343\343\367\46\306" +
		"\u0105\306\306\306\306\u0121\343\306\306\306\46\306\306\u014e\u014e\306\306\306\306" +
		"\306\306\46\306\306\306\46\46\306\306\14\14\14\14\14\307\14\307\307\307\307\307\307" +
		"\307\307\307\307\u014b\307\307\307\307\307\307\307\307\u015d\307\307\307\307\u014b" +
		"\u014b\u017b\307\307\u014b\u014b\112\170\251\263\272\342\371\263\112\u013b\u013c" +
		"\u0163\112\272\112\371\u0197\151\242\242\242\242\213\257\214\214\261\261\175\262" +
		"\130\131\153\132\132\133\133\357\u016d\u018e\134\134\135\135\253\u0130\145\254\160" +
		"\161\245\162\162\243\350\352\u012f\u0126\u0126\u0126\227\163\163\164\164\264\u0133" +
		"\273\u0176\u0164\310\u0103\u0129\u012a\u012c\u0147\u0167\u0169\u016a\u0189\311\311" +
		"\311\311\311\311\u015f\311\311\311\311\312\312\312\312\312\312\312\312\312\312\312" +
		"\313\313\u010c\313\313\313\313\313\313\313\313\313\314\314\314\314\314\314\314\314" +
		"\314\314\314\314\314\314\314\314\314\314\314\314\314\314\314\314\314\314\314\315" +
		"\315\u010d\u0110\u0115\315\315\315\u0115\315\u0152\u0156\u0159\315\315\315\315\u0180" +
		"\315\316\u0104\u010e\u0111\316\316\316\316\u0153\316\316\316\316\316\317\317\317" +
		"\317\u0116\317\317\317\u0116\317\317\u0116\u0116\u015c\317\317\317\317\u0116\317" +
		"\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320" +
		"\321\321\321\321\321\u011f\321\321\321\321\321\321\321\321\u011f\321\321\321\321" +
		"\321\321\321\322\322\322\322\322\322\322\322\322\322\322\u014f\u0151\322\322\322" +
		"\322\322\322\322\322\322\322\322\323\323\323\323\323\323\323\323\323\323\323\323" +
		"\323\323\323\323\323\323\323\323\323\323\323\323\324\324\324\324\324\324\324\324" +
		"\324\324\324\324\324\324\324\324\324\324\324\324\325\325\325\325\325\325\325\325" +
		"\325\325\325\325\325\325\325\325\325\325\325\325\325\325\325\325\326\326\326\326" +
		"\326\326\326\326\326\326\326\326\u0150\326\326\326\326\326\326\326\326\326\326\326" +
		"\326\327\365\366\327\327\327\327\327\327\327\327\u0134\327\327\327\327\327\327\327" +
		"\327\327\327\327\327\327\327\327\327\u014c\u014c\u017a\u014c\u014c\u014d\u0179\u0194" +
		"\u0195\165\165\330\330\330\u0112\u0112\330\330\330\u0112\330\u0112\u0112\u0112\u0112" +
		"\330\330\330\330\u0112\330\166\166\250\166\166\166\166\166\166\166\166\166\166\166" +
		"\166\166\166\166\166\166\166\166\166\244\353\336\u0161\47\70\71\47\337\u0100\u013d" +
		"\337\u0100\u0100\27\27\27\50\115\230\271\113\u0139\u0170\u0184\u0101\u0101\u0101" +
		"\u0102\u0174\u0175\u019d\23\67\136\140\374\76\141\15\15\15\114\15\15\15\114\u015e" +
		"\114\u0172\u0173\114\20\30\54\21\21\21\331\331\331\331\331\331\331\331\331\331\331" +
		"\331\331\331\331\331\331\331\331\331\u018f\16\16\66\16\16\16\154\232\246\332\16\332" +
		"\u0117\332\332\332\u0117\332\u0117\u0117\332\332\332\332\u0117\332\22\40\34\121\152" +
		"\360\u0132\u016e\u0190\146\344\345\u0124\u0127\u0128\u0162\265\333\333\333\333\333" +
		"\333\333\333\333\333\334\334\u010f\u0113\u0114\u0118\334\334\334\u0118\334\u0154" +
		"\u0155\u0157\u0158\u015a\u015b\334\334\334\334\u017f\u0181\u0182\u0183\334\u0196" +
		"\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167" +
		"\167\167\340\51\52\77\100\24\25");

	private static final short[] tmRuleLen = TMLexer.unpack_short(236,
		"\5\4\7\4\3\3\4\4\3\3\1\1\2\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2\1\1\1\1" +
		"\3\10\3\2\3\1\1\1\1\5\3\1\3\1\1\2\2\1\1\1\7\6\6\5\6\5\5\4\2\4\3\3\1\1\2\1\1\1\7\5" +
		"\6\4\4\4\5\5\6\2\1\1\2\1\3\1\5\4\4\3\4\3\3\2\4\3\3\2\3\2\2\1\1\3\2\3\3\4\3\1\2\2" +
		"\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\4\1\4\2\1\3\2\1\3\3\1\5\2\2\3\1\4\2" +
		"\1\3\3\2\2\1\1\1\1\1\2\1\3\3\1\3\3\1\1\5\3\1\3\1\1\1\1\1\1\3\1\1\2\0\2\0\1\0\1\0" +
		"\1\0\1\0\1\0\1\0\3\1\1\0\1\0\3\1\3\1\1\0\2\1\3\1\3\1\1\0\3\1\1\0\3\1\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(236,
		"\114\114\115\115\116\117\120\121\121\122\122\123\124\124\125\126\126\127\127\130" +
		"\130\130\130\130\130\130\130\130\130\130\130\130\131\132\132\132\133\133\133\133" +
		"\134\135\135\136\137\140\140\140\140\141\142\143\144\144\145\145\145\146\146\146" +
		"\147\147\147\147\147\147\147\147\150\150\150\150\150\150\151\152\152\152\153\153" +
		"\153\153\154\154\154\154\154\155\155\156\156\157\157\160\161\161\161\161\161\161" +
		"\161\161\161\161\161\161\161\161\161\161\161\162\163\164\164\165\165\166\166\166" +
		"\167\167\167\170\170\171\171\171\172\172\173\173\173\174\175\175\176\176\176\176" +
		"\176\176\176\176\177\200\200\200\200\201\201\201\202\203\203\203\204\205\205\205" +
		"\206\207\210\210\210\210\211\211\212\212\213\213\213\213\214\214\214\215\215\215" +
		"\215\215\216\217\217\217\217\220\221\221\222\223\224\224\225\225\226\226\227\227" +
		"\230\230\231\231\232\232\233\233\234\234\235\235\236\236\237\237\240\240\241\241" +
		"\242\242\243\243\244\244\245\245\246\246\247\247\250\250\251\251");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'||'",
		"'='",
		"'=='",
		"'!='",
		"'=>'",
		"';'",
		"'.'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'!'",
		"'~'",
		"'&'",
		"'&&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Lbrackets",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lgenerate",
		"Lassert",
		"Lempty",
		"Lnonempty",
		"Lglobal",
		"Lparam",
		"Lflag",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"symref_noargs",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"lexer_directive",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"template_param",
		"directive",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule0",
		"predicate",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsSet",
		"setPrimary",
		"setExpression",
		"annotations",
		"annotation",
		"nonterm_params",
		"nonterm_param",
		"param_ref",
		"symref_args",
		"argument",
		"param_type",
		"param_value",
		"predicate_primary",
		"predicate_expression",
		"expression",
		"map_entry",
		"literal",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"import__optlist",
		"option_optlist",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"lexer_state_list_Comma_separated",
		"identifieropt",
		"implementsopt",
		"inputref_list_Comma_separated",
		"rule0_list_Or_separated",
		"rhsSuffixopt",
		"annotation_list",
		"nonterm_param_list_Comma_separated",
		"argument_list_Comma_separated",
		"argument_list_Comma_separated_opt",
		"map_entry_list_Comma_separated",
		"map_entry_list_Comma_separated_opt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		int input = 76;
		int header = 77;
		int lexer_section = 78;
		int parser_section = 79;
		int parsing_algorithm = 80;
		int import_ = 81;
		int option = 82;
		int identifier = 83;
		int symref = 84;
		int symref_noargs = 85;
		int type = 86;
		int type_part_list = 87;
		int type_part = 88;
		int pattern = 89;
		int lexer_parts = 90;
		int lexer_part = 91;
		int named_pattern = 92;
		int lexeme = 93;
		int lexeme_transition = 94;
		int lexeme_attrs = 95;
		int lexeme_attribute = 96;
		int lexer_directive = 97;
		int state_selector = 98;
		int stateref = 99;
		int lexer_state = 100;
		int grammar_parts = 101;
		int grammar_part = 102;
		int nonterm = 103;
		int nonterm_type = 104;
		int _implements = 105;
		int assoc = 106;
		int template_param = 107;
		int directive = 108;
		int inputref = 109;
		int references = 110;
		int references_cs = 111;
		int rules = 112;
		int rule0 = 113;
		int predicate = 114;
		int rhsPrefix = 115;
		int rhsSuffix = 116;
		int ruleAction = 117;
		int rhsParts = 118;
		int rhsPart = 119;
		int rhsAnnotated = 120;
		int rhsAssignment = 121;
		int rhsOptional = 122;
		int rhsCast = 123;
		int rhsUnordered = 124;
		int rhsClass = 125;
		int rhsPrimary = 126;
		int rhsSet = 127;
		int setPrimary = 128;
		int setExpression = 129;
		int annotations = 130;
		int annotation = 131;
		int nonterm_params = 132;
		int nonterm_param = 133;
		int param_ref = 134;
		int symref_args = 135;
		int argument = 136;
		int param_type = 137;
		int param_value = 138;
		int predicate_primary = 139;
		int predicate_expression = 140;
		int expression = 141;
		int map_entry = 142;
		int literal = 143;
		int name = 144;
		int qualified_id = 145;
		int command = 146;
		int syntax_problem = 147;
		int import__optlist = 148;
		int option_optlist = 149;
		int parsing_algorithmopt = 150;
		int typeopt = 151;
		int lexeme_transitionopt = 152;
		int iconopt = 153;
		int lexeme_attrsopt = 154;
		int commandopt = 155;
		int lexer_state_list_Comma_separated = 156;
		int identifieropt = 157;
		int implementsopt = 158;
		int inputref_list_Comma_separated = 159;
		int rule0_list_Or_separated = 160;
		int rhsSuffixopt = 161;
		int annotation_list = 162;
		int nonterm_param_list_Comma_separated = 163;
		int argument_list_Comma_separated = 164;
		int argument_list_Comma_separated_opt = 165;
		int map_entry_list_Comma_separated = 166;
		int map_entry_list_Comma_separated_opt = 167;
		int expression_list_Comma_separated = 168;
		int expression_list_Comma_separated_opt = 169;
	}

	public interface Rules {
		int lexer_directive_directiveBrackets = 49;  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
		int nonterm_type_nontermTypeAST = 68;  // nonterm_type ::= Lreturns symref_noargs
		int nonterm_type_nontermTypeHint = 69;  // nonterm_type ::= Linline Lclass identifieropt implementsopt
		int nonterm_type_nontermTypeHint2 = 70;  // nonterm_type ::= Lclass identifieropt implementsopt
		int nonterm_type_nontermTypeHint3 = 71;  // nonterm_type ::= Linterface identifieropt implementsopt
		int nonterm_type_nontermTypeHint4 = 72;  // nonterm_type ::= Lvoid
		int nonterm_type_nontermTypeRaw = 73;  // nonterm_type ::= type
		int directive_directivePrio = 82;  // directive ::= '%' assoc references ';'
		int directive_directiveInput = 83;  // directive ::= '%' Linput inputref_list_Comma_separated ';'
		int directive_directiveAssert = 84;  // directive ::= '%' Lassert Lempty rhsSet ';'
		int directive_directiveAssert2 = 85;  // directive ::= '%' Lassert Lnonempty rhsSet ';'
		int directive_directiveSet = 86;  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
		int rhsOptional_rhsQuantifier = 129;  // rhsOptional ::= rhsCast '?'
		int rhsCast_rhsAsLiteral = 132;  // rhsCast ::= rhsClass Las literal
		int rhsPrimary_rhsSymbol = 136;  // rhsPrimary ::= symref
		int rhsPrimary_rhsNested = 137;  // rhsPrimary ::= '(' rules ')'
		int rhsPrimary_rhsList = 138;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		int rhsPrimary_rhsList2 = 139;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		int rhsPrimary_rhsQuantifier = 140;  // rhsPrimary ::= rhsPrimary '*'
		int rhsPrimary_rhsQuantifier2 = 141;  // rhsPrimary ::= rhsPrimary '+'
		int rhsPrimary_rhsIgnored = 142;  // rhsPrimary ::= '$' '(' rules ')'
		int setPrimary_setSymbol = 145;  // setPrimary ::= ID symref
		int setPrimary_setSymbol2 = 146;  // setPrimary ::= symref
		int setPrimary_setCompound = 147;  // setPrimary ::= '(' setExpression ')'
		int setPrimary_setComplement = 148;  // setPrimary ::= '~' setPrimary
		int setExpression_setBinary = 150;  // setExpression ::= setExpression '|' setExpression
		int setExpression_setBinary2 = 151;  // setExpression ::= setExpression '&' setExpression
		int nonterm_param_inlineParameter = 158;  // nonterm_param ::= ID identifier '=' param_value
		int nonterm_param_inlineParameter2 = 159;  // nonterm_param ::= ID identifier
		int predicate_primary_boolPredicate = 170;  // predicate_primary ::= '!' param_ref
		int predicate_primary_boolPredicate2 = 171;  // predicate_primary ::= param_ref
		int predicate_primary_comparePredicate = 172;  // predicate_primary ::= param_ref '==' literal
		int predicate_primary_comparePredicate2 = 173;  // predicate_primary ::= param_ref '!=' literal
		int predicate_expression_predicateBinary = 175;  // predicate_expression ::= predicate_expression '&&' predicate_expression
		int predicate_expression_predicateBinary2 = 176;  // predicate_expression ::= predicate_expression '||' predicate_expression
		int expression_instance = 179;  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
		int expression_array = 180;  // expression ::= '[' expression_list_Comma_separated_opt ']'
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected Span[] tmStack;
	protected Span tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new Span[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new Span();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new Span();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 37) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new Span();
			tmStack[tmHead].symbol = 37;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 37);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.tokenText()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		Span left = new Span();
		left.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		left.symbol = tmRuleSymbol[rule];
		left.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		Span startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		left.line = startsym.line;
		left.offset = startsym.offset;
		left.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(left, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = left;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, left.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(Span tmLeft, int ruleIndex, int ruleLength) {
		switch (ruleIndex) {
			case 0:  // input ::= header import__optlist option_optlist lexer_section parser_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead - 1].value) /* lexer */,
						((List<ITmaGrammarPart>)tmStack[tmHead].value) /* parser */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 1:  // input ::= header import__optlist option_optlist lexer_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead].value) /* lexer */,
						null /* parser */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 2:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						source, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 3:  // header ::= Llanguage name parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 4:  // lexer_section ::= '::' Llexer lexer_parts
				tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value);
				break;
			case 5:  // parser_section ::= '::' Lparser grammar_parts
				tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value);
				break;
			case 6:  // parsing_algorithm ::= Llalr '(' icon ')'
				tmLeft.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 7:  // import_ ::= Limport ID scon ';'
				tmLeft.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // import_ ::= Limport scon ';'
				tmLeft.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 9:  // option ::= ID '=' expression
				tmLeft.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* key */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* syntaxProblem */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 10:  // option ::= syntax_problem
				tmLeft.value = new TmaOption(
						null /* key */,
						null /* value */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 11:  // identifier ::= ID
				tmLeft.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 12:  // symref ::= ID symref_args
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead - 1].value) /* name */,
						((TmaSymrefArgs)tmStack[tmHead].value) /* args */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // symref ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 14:  // symref_noargs ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 15:  // type ::= '(' scon ')'
				{ tmLeft.value = ((String)tmStack[tmHead - 1].value); }
				break;
			case 16:  // type ::= '(' type_part_list ')'
				{ tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); }
				break;
			case 32:  // pattern ::= regexp
				tmLeft.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 33:  // lexer_parts ::= lexer_part
				tmLeft.value = new ArrayList();
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 34:  // lexer_parts ::= lexer_parts lexer_part
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 35:  // lexer_parts ::= lexer_parts syntax_problem
				((List<ITmaLexerPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 40:  // named_pattern ::= ID '=' pattern
				tmLeft.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 41:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* transition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemeAttrs)tmStack[tmHead - 1].value) /* attrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						source, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 42:  // lexeme ::= identifier typeopt ':'
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* transition */,
						null /* priority */,
						null /* attrs */,
						null /* command */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 43:  // lexeme_transition ::= '=>' stateref
				tmLeft.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 44:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				tmLeft.value = new TmaLexemeAttrs(
						((TmaLexemeAttribute)tmStack[tmHead - 1].value) /* kind */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 45:  // lexeme_attribute ::= Lsoft
				tmLeft.value = TmaLexemeAttribute.LSOFT;
				break;
			case 46:  // lexeme_attribute ::= Lclass
				tmLeft.value = TmaLexemeAttribute.LCLASS;
				break;
			case 47:  // lexeme_attribute ::= Lspace
				tmLeft.value = TmaLexemeAttribute.LSPACE;
				break;
			case 48:  // lexeme_attribute ::= Llayout
				tmLeft.value = TmaLexemeAttribute.LLAYOUT;
				break;
			case 49:  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
				tmLeft.value = new TmaDirectiveBrackets(
						((TmaSymref)tmStack[tmHead - 2].value) /* opening */,
						((TmaSymref)tmStack[tmHead - 1].value) /* closing */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 50:  // state_selector ::= '[' lexer_state_list_Comma_separated ']'
				tmLeft.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 51:  // stateref ::= ID
				tmLeft.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 52:  // lexer_state ::= identifier '=>' stateref
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 53:  // lexer_state ::= identifier
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 54:  // grammar_parts ::= grammar_part
				tmLeft.value = new ArrayList();
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 55:  // grammar_parts ::= grammar_parts grammar_part
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 56:  // grammar_parts ::= grammar_parts syntax_problem
				((List<ITmaGrammarPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 60:  // nonterm ::= annotations identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 6].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 61:  // nonterm ::= annotations identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 62:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 63:  // nonterm ::= annotations identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 64:  // nonterm ::= identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 65:  // nonterm ::= identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 66:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 67:  // nonterm ::= identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 68:  // nonterm_type ::= Lreturns symref_noargs
				tmLeft.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 69:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						true /* inline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 70:  // nonterm_type ::= Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 71:  // nonterm_type ::= Linterface identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 72:  // nonterm_type ::= Lvoid
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* _implements */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 73:  // nonterm_type ::= type
				tmLeft.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* typeText */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 74:  // implements ::= ':' references_cs
				tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value);
				break;
			case 75:  // assoc ::= Lleft
				tmLeft.value = TmaAssoc.LLEFT;
				break;
			case 76:  // assoc ::= Lright
				tmLeft.value = TmaAssoc.LRIGHT;
				break;
			case 77:  // assoc ::= Lnonassoc
				tmLeft.value = TmaAssoc.LNONASSOC;
				break;
			case 78:  // template_param ::= '%' Lglobal param_type identifier '=' param_value ';'
				tmLeft.value = new TmaTemplateParam(
						true /* global */,
						((TmaParamType)tmStack[tmHead - 4].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						((ITmaParamValue)tmStack[tmHead - 1].value) /* paramValue */,
						source, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 79:  // template_param ::= '%' Lglobal param_type identifier ';'
				tmLeft.value = new TmaTemplateParam(
						true /* global */,
						((TmaParamType)tmStack[tmHead - 2].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						null /* paramValue */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 80:  // template_param ::= '%' param_type identifier '=' param_value ';'
				tmLeft.value = new TmaTemplateParam(
						false /* global */,
						((TmaParamType)tmStack[tmHead - 4].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						((ITmaParamValue)tmStack[tmHead - 1].value) /* paramValue */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 81:  // template_param ::= '%' param_type identifier ';'
				tmLeft.value = new TmaTemplateParam(
						false /* global */,
						((TmaParamType)tmStack[tmHead - 2].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						null /* paramValue */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 82:  // directive ::= '%' assoc references ';'
				tmLeft.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 83:  // directive ::= '%' Linput inputref_list_Comma_separated ';'
				tmLeft.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 84:  // directive ::= '%' Lassert Lempty rhsSet ';'
				tmLeft.value = new TmaDirectiveAssert(
						TmaDirectiveAssert.TmaKindKind.LEMPTY /* kind */,
						((TmaRhsSet)tmStack[tmHead - 1].value) /* rhsSet */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 85:  // directive ::= '%' Lassert Lnonempty rhsSet ';'
				tmLeft.value = new TmaDirectiveAssert(
						TmaDirectiveAssert.TmaKindKind.LNONEMPTY /* kind */,
						((TmaRhsSet)tmStack[tmHead - 1].value) /* rhsSet */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 86:  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
				tmLeft.value = new TmaDirectiveSet(
						((String)tmStack[tmHead - 3].value) /* name */,
						((TmaRhsSet)tmStack[tmHead - 1].value) /* rhsSet */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 87:  // inputref ::= symref_noargs Lnoeoi
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* reference */,
						true /* noeoi */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 88:  // inputref ::= symref_noargs
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						false /* noeoi */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 89:  // references ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 90:  // references ::= references symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 91:  // references_cs ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 92:  // references_cs ::= references_cs ',' symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 94:  // rule0 ::= predicate rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 4].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 95:  // rule0 ::= predicate rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 3].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 96:  // rule0 ::= predicate rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 3].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 97:  // rule0 ::= predicate rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 98:  // rule0 ::= predicate rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 3].value) /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 99:  // rule0 ::= predicate rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 100:  // rule0 ::= predicate ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 101:  // rule0 ::= predicate rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 1].value) /* predicate */,
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 102:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 103:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 104:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 105:  // rule0 ::= rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 106:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 107:  // rule0 ::= rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 108:  // rule0 ::= ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 109:  // rule0 ::= rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 110:  // rule0 ::= syntax_problem
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						null /* list */,
						null /* action */,
						null /* suffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* error */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 111:  // predicate ::= '[' predicate_expression ']'
				tmLeft.value = ((ITmaPredicateExpression)tmStack[tmHead - 1].value);
				break;
			case 112:  // rhsPrefix ::= annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 113:  // rhsSuffix ::= '%' Lprio symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 114:  // rhsSuffix ::= '%' Lshift symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 115:  // ruleAction ::= '{~' identifier scon '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* action */,
						((String)tmStack[tmHead - 1].value) /* parameter */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 116:  // ruleAction ::= '{~' identifier '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 1].value) /* action */,
						null /* parameter */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 117:  // rhsParts ::= rhsPart
				tmLeft.value = new ArrayList();
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 118:  // rhsParts ::= rhsParts rhsPart
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 119:  // rhsParts ::= rhsParts syntax_problem
				((List<ITmaRhsPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 124:  // rhsAnnotated ::= annotations rhsAssignment
				tmLeft.value = new TmaRhsAnnotated(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 126:  // rhsAssignment ::= identifier '=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 127:  // rhsAssignment ::= identifier '+=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 129:  // rhsOptional ::= rhsCast '?'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 131:  // rhsCast ::= rhsClass Las symref
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaSymref)tmStack[tmHead].value) /* target */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 132:  // rhsCast ::= rhsClass Las literal
				tmLeft.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 133:  // rhsUnordered ::= rhsPart '&' rhsPart
				tmLeft.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 135:  // rhsClass ::= identifier ':' rhsPrimary
				tmLeft.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 136:  // rhsPrimary ::= symref
				tmLeft.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 137:  // rhsPrimary ::= '(' rules ')'
				tmLeft.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 138:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						true /* atLeastOne */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 139:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						false /* atLeastOne */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 140:  // rhsPrimary ::= rhsPrimary '*'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 141:  // rhsPrimary ::= rhsPrimary '+'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 142:  // rhsPrimary ::= '$' '(' rules ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 144:  // rhsSet ::= Lset '(' setExpression ')'
				tmLeft.value = new TmaRhsSet(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* expr */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 145:  // setPrimary ::= ID symref
				tmLeft.value = new TmaSetSymbol(
						((String)tmStack[tmHead - 1].value) /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 146:  // setPrimary ::= symref
				tmLeft.value = new TmaSetSymbol(
						null /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 147:  // setPrimary ::= '(' setExpression ')'
				tmLeft.value = new TmaSetCompound(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 148:  // setPrimary ::= '~' setPrimary
				tmLeft.value = new TmaSetComplement(
						((ITmaSetExpression)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 150:  // setExpression ::= setExpression '|' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.OR /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 151:  // setExpression ::= setExpression '&' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.AMPERSAND /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 152:  // annotations ::= annotation_list
				tmLeft.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 153:  // annotation ::= '@' ID '{' expression '}'
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 154:  // annotation ::= '@' ID
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 155:  // annotation ::= '@' syntax_problem
				tmLeft.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 156:  // nonterm_params ::= '<' nonterm_param_list_Comma_separated '>'
				tmLeft.value = new TmaNontermParams(
						((List<ITmaNontermParam>)tmStack[tmHead - 1].value) /* list */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 158:  // nonterm_param ::= ID identifier '=' param_value
				tmLeft.value = new TmaInlineParameter(
						((String)tmStack[tmHead - 3].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((ITmaParamValue)tmStack[tmHead].value) /* paramValue */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 159:  // nonterm_param ::= ID identifier
				tmLeft.value = new TmaInlineParameter(
						((String)tmStack[tmHead - 1].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* paramValue */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 160:  // param_ref ::= identifier
				tmLeft.value = new TmaParamRef(
						((TmaIdentifier)tmStack[tmHead].value) /* ref */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 161:  // symref_args ::= '<' argument_list_Comma_separated_opt '>'
				tmLeft.value = new TmaSymrefArgs(
						((List<TmaArgument>)tmStack[tmHead - 1].value) /* argList */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 162:  // argument ::= param_ref ':' param_value
				tmLeft.value = new TmaArgument(
						((TmaParamRef)tmStack[tmHead - 2].value) /* name */,
						((ITmaParamValue)tmStack[tmHead].value) /* val */,
						null /* bool */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 163:  // argument ::= '+' param_ref
				tmLeft.value = new TmaArgument(
						((TmaParamRef)tmStack[tmHead].value) /* name */,
						null /* val */,
						TmaArgument.TmaBoolKind.PLUS /* bool */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 164:  // argument ::= '~' param_ref
				tmLeft.value = new TmaArgument(
						((TmaParamRef)tmStack[tmHead].value) /* name */,
						null /* val */,
						TmaArgument.TmaBoolKind.TILDE /* bool */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 165:  // argument ::= param_ref
				tmLeft.value = new TmaArgument(
						((TmaParamRef)tmStack[tmHead].value) /* name */,
						null /* val */,
						null /* bool */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 166:  // param_type ::= Lflag
				tmLeft.value = TmaParamType.LFLAG;
				break;
			case 167:  // param_type ::= Lparam
				tmLeft.value = TmaParamType.LPARAM;
				break;
			case 170:  // predicate_primary ::= '!' param_ref
				tmLeft.value = new TmaBoolPredicate(
						true /* negated */,
						((TmaParamRef)tmStack[tmHead].value) /* paramRef */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 171:  // predicate_primary ::= param_ref
				tmLeft.value = new TmaBoolPredicate(
						false /* negated */,
						((TmaParamRef)tmStack[tmHead].value) /* paramRef */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 172:  // predicate_primary ::= param_ref '==' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaParamRef)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EQUAL_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 173:  // predicate_primary ::= param_ref '!=' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaParamRef)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EXCLAMATION_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 175:  // predicate_expression ::= predicate_expression '&&' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.AMPERSAND_AMPERSAND /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 176:  // predicate_expression ::= predicate_expression '||' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.OR_OR /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 179:  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
				tmLeft.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntry>)tmStack[tmHead - 1].value) /* entries */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 180:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				tmLeft.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 182:  // map_entry ::= ID ':' expression
				tmLeft.value = new TmaMapEntry(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 183:  // literal ::= scon
				tmLeft.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 184:  // literal ::= icon
				tmLeft.value = new TmaLiteral(
						((Integer)tmStack[tmHead].value) /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 185:  // literal ::= Ltrue
				tmLeft.value = new TmaLiteral(
						true /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 186:  // literal ::= Lfalse
				tmLeft.value = new TmaLiteral(
						false /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 187:  // name ::= qualified_id
				tmLeft.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 189:  // qualified_id ::= qualified_id '.' ID
				{ tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); }
				break;
			case 190:  // command ::= code
				tmLeft.value = new TmaCommand(
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 191:  // syntax_problem ::= error
				tmLeft.value = new TmaSyntaxProblem(
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 192:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 193:  // import__optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 194:  // option_optlist ::= option_optlist option
				((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 195:  // option_optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 208:  // lexer_state_list_Comma_separated ::= lexer_state_list_Comma_separated ',' lexer_state
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 209:  // lexer_state_list_Comma_separated ::= lexer_state
				tmLeft.value = new ArrayList();
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 214:  // inputref_list_Comma_separated ::= inputref_list_Comma_separated ',' inputref
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 215:  // inputref_list_Comma_separated ::= inputref
				tmLeft.value = new ArrayList();
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 216:  // rule0_list_Or_separated ::= rule0_list_Or_separated '|' rule0
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 217:  // rule0_list_Or_separated ::= rule0
				tmLeft.value = new ArrayList();
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 220:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 221:  // annotation_list ::= annotation
				tmLeft.value = new ArrayList();
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 222:  // nonterm_param_list_Comma_separated ::= nonterm_param_list_Comma_separated ',' nonterm_param
				((List<ITmaNontermParam>)tmLeft.value).add(((ITmaNontermParam)tmStack[tmHead].value));
				break;
			case 223:  // nonterm_param_list_Comma_separated ::= nonterm_param
				tmLeft.value = new ArrayList();
				((List<ITmaNontermParam>)tmLeft.value).add(((ITmaNontermParam)tmStack[tmHead].value));
				break;
			case 224:  // argument_list_Comma_separated ::= argument_list_Comma_separated ',' argument
				((List<TmaArgument>)tmLeft.value).add(((TmaArgument)tmStack[tmHead].value));
				break;
			case 225:  // argument_list_Comma_separated ::= argument
				tmLeft.value = new ArrayList();
				((List<TmaArgument>)tmLeft.value).add(((TmaArgument)tmStack[tmHead].value));
				break;
			case 228:  // map_entry_list_Comma_separated ::= map_entry_list_Comma_separated ',' map_entry
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 229:  // map_entry_list_Comma_separated ::= map_entry
				tmLeft.value = new ArrayList();
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 232:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 233:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(Span value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(Span value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 414);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 415);
	}
}
