/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(389,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\265\0\266\0\uffc1\uffff\277\0\uff7b" +
		"\uffff\267\0\270\0\uffff\uffff\260\0\257\0\263\0\274\0\uff15\uffff\uff0d\uffff\uffff" +
		"\uffff\uff01\uffff\11\0\uffff\uffff\343\0\ufec5\uffff\uffff\uffff\ufebf\uffff\22" +
		"\0\uffff\uffff\uffff\uffff\uffff\uffff\302\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\12\0\uffff\uffff\uffff\uffff\ufe7f\uffff\uffff\uffff\15\0\20\0\uffff" +
		"\uffff\262\0\ufe79\uffff\236\0\247\0\uffff\uffff\333\0\331\0\246\0\uffff\uffff\ufe15" +
		"\uffff\uffff\uffff\ufe0f\uffff\uffff\uffff\uffff\uffff\5\0\275\0\14\0\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\2\0\ufdd7\uffff\16\0\342\0\uffff\uffff\uffff" +
		"\uffff\237\0\uffff\uffff\240\0\uffff\uffff\337\0\ufdd1\uffff\uffff\uffff\ufdcb\uffff" +
		"\uffff\uffff\13\0\uffff\uffff\uffff\uffff\ufdc5\uffff\ufdbd\uffff\ufdb7\uffff\47" +
		"\0\53\0\54\0\55\0\52\0\17\0\uffff\uffff\0\0\241\0\330\0\21\0\332\0\uffff\uffff\uffff" +
		"\uffff\261\0\uffff\uffff\10\0\uffff\uffff\ufd77\uffff\uffff\uffff\71\0\uffff\uffff" +
		"\uffff\uffff\304\0\uffff\uffff\50\0\51\0\uffff\uffff\uffff\uffff\uffff\uffff\ufd6f" +
		"\uffff\76\0\101\0\102\0\103\0\uffff\uffff\ufd31\uffff\230\0\264\0\336\0\4\0\24\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\70\0\46\0\56\0\uffff\uffff\37\0\40\0\33\0\34" +
		"\0\uffff\uffff\31\0\32\0\36\0\41\0\43\0\42\0\35\0\uffff\uffff\30\0\ufcf1\uffff\uffff" +
		"\uffff\123\0\124\0\125\0\uffff\uffff\uffff\uffff\ufcaf\uffff\234\0\ufc6d\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\ufc21\uffff\ufbe7\uffff\120\0\121\0\uffff\uffff\uffff" +
		"\uffff\77\0\100\0\uffff\uffff\231\0\uffff\uffff\73\0\74\0\72\0\25\0\45\0\uffff\uffff" +
		"\26\0\27\0\ufbad\uffff\ufb65\uffff\uffff\uffff\132\0\uffff\uffff\135\0\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufb5d\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\276\0\uffff\uffff\210\0\uffff\uffff\ufb11\uffff\142\0\uffff\uffff\ufb09\uffff\324" +
		"\0\ufabf\uffff\ufab5\uffff\ufa69\uffff\170\0\173\0\175\0\ufa19\uffff\171\0\uf9c7" +
		"\uffff\uf973\uffff\uffff\uffff\172\0\154\0\153\0\327\0\uffff\uffff\uf91b\uffff\114" +
		"\0\316\0\uf8e1\uffff\uf8db\uffff\uf8d5\uffff\uf889\uffff\uffff\uffff\uf83d\uffff" +
		"\uffff\uffff\uffff\uffff\67\0\44\0\uffff\uffff\306\0\uf7f1\uffff\322\0\134\0\131" +
		"\0\uffff\uffff\243\0\244\0\242\0\245\0\uffff\uffff\130\0\136\0\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uf7ab\uffff\254\0\uffff\uffff\uffff\uffff\uf79f\uffff" +
		"\uffff\uffff\uf753\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\113\0\uf707" +
		"\uffff\160\0\uffff\uffff\uf6b9\uffff\uf6af\uffff\uffff\uffff\147\0\152\0\uf663\uffff" +
		"\uf659\uffff\167\0\151\0\uffff\uffff\201\0\uffff\uffff\214\0\215\0\157\0\174\0\uffff" +
		"\uffff\235\0\uf609\uffff\uffff\uffff\320\0\116\0\117\0\uffff\uffff\uffff\uffff\uf603" +
		"\uffff\uffff\uffff\uf5b7\uffff\uf56b\uffff\uffff\uffff\61\0\310\0\uf51f\uffff\133" +
		"\0\uffff\uffff\127\0\232\0\161\0\162\0\250\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\155\0\uffff\uffff\211\0\uffff\uffff\uffff\uffff\164\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uf4db\uffff\221\0\224\0\uffff\uffff\uffff\uffff\176\0\uf49d\uffff\177\0\143" +
		"\0\156\0\146\0\uf445\uffff\145\0\150\0\uf43b\uffff\203\0\204\0\326\0\115\0\137\0" +
		"\uf3eb\uffff\112\0\111\0\uffff\uffff\107\0\uffff\uffff\uffff\uffff\uf3e5\uffff\uffff" +
		"\uffff\312\0\uf399\uffff\uffff\uffff\252\0\253\0\uf357\uffff\uf34f\uffff\uffff\uffff" +
		"\163\0\216\0\uffff\uffff\223\0\220\0\uffff\uffff\217\0\uffff\uffff\144\0\uffff\uffff" +
		"\110\0\106\0\105\0\uffff\uffff\63\0\64\0\65\0\66\0\uffff\uffff\314\0\57\0\126\0\uffff" +
		"\uffff\222\0\uf347\uffff\uf33f\uffff\140\0\104\0\62\0\213\0\212\0\uffff\uffff\uffff" +
		"\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(3270,
		"\54\uffff\10\301\45\301\46\301\56\301\57\301\60\301\61\301\62\301\63\301\64\301\65" +
		"\301\66\301\67\301\70\301\71\301\72\301\73\301\74\301\75\301\76\301\77\301\100\301" +
		"\101\301\102\301\103\301\104\301\105\301\106\301\uffff\ufffe\2\uffff\3\uffff\23\uffff" +
		"\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100" +
		"\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\47\uffff\50\uffff\51\uffff\24\345\uffff\ufffe\31\uffff\0\23\6\23\10\23\11" +
		"\23\17\23\21\23\24\23\25\23\26\23\27\23\30\23\32\23\33\23\34\23\36\23\41\23\43\23" +
		"\44\23\45\23\46\23\52\23\53\23\55\23\56\23\57\23\60\23\61\23\62\23\63\23\64\23\65" +
		"\23\66\23\67\23\70\23\71\23\72\23\73\23\74\23\75\23\76\23\77\23\100\23\101\23\102" +
		"\23\103\23\104\23\105\23\106\23\110\23\uffff\ufffe\25\uffff\104\uffff\17\303\uffff" +
		"\ufffe\20\uffff\17\273\25\273\26\273\104\273\uffff\ufffe\54\uffff\10\300\45\300\46" +
		"\300\56\300\57\300\60\300\61\300\62\300\63\300\64\300\65\300\66\300\67\300\70\300" +
		"\71\300\72\300\73\300\74\300\75\300\76\300\77\300\100\300\101\300\102\300\103\300" +
		"\104\300\105\300\106\300\uffff\ufffe\21\uffff\24\344\uffff\ufffe\2\uffff\3\uffff" +
		"\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77" +
		"\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\47" +
		"\uffff\50\uffff\32\335\uffff\ufffe\10\uffff\0\3\uffff\ufffe\31\uffff\13\21\22\21" +
		"\35\21\6\23\11\23\17\23\21\23\25\23\26\23\27\23\32\23\33\23\34\23\36\23\41\23\43" +
		"\23\44\23\45\23\46\23\52\23\53\23\55\23\56\23\57\23\60\23\61\23\62\23\63\23\64\23" +
		"\65\23\66\23\67\23\70\23\71\23\72\23\73\23\74\23\75\23\76\23\77\23\100\23\101\23" +
		"\102\23\103\23\104\23\105\23\106\23\110\23\uffff\ufffe\21\uffff\32\334\uffff\ufffe" +
		"\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77" +
		"\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\26" +
		"\341\uffff\ufffe\10\uffff\0\1\uffff\ufffe\21\uffff\26\340\uffff\ufffe\104\uffff\17" +
		"\303\uffff\ufffe\13\uffff\22\21\25\21\uffff\ufffe\25\uffff\22\305\uffff\ufffe\6\uffff" +
		"\23\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101" +
		"\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\0\6\10\6\uffff\ufffe\16\uffff\21\75\24\75\uffff\ufffe\6\uffff\44" +
		"\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\0\7\uffff\ufffe\44\uffff\22\227\25\227\43\227\46\227\55\227\56\227\57\227" +
		"\60\227\61\227\62\227\63\227\64\227\65\227\66\227\67\227\70\227\71\227\72\227\73" +
		"\227\74\227\75\227\76\227\77\227\100\227\101\227\102\227\103\227\104\227\105\227" +
		"\106\227\uffff\ufffe\1\uffff\0\60\6\60\10\60\23\60\45\60\46\60\56\60\57\60\60\60" +
		"\61\60\62\60\63\60\64\60\65\60\66\60\67\60\70\60\71\60\72\60\73\60\74\60\75\60\76" +
		"\60\77\60\100\60\101\60\102\60\103\60\104\60\105\60\106\60\uffff\ufffe\111\uffff" +
		"\22\233\25\233\43\233\44\233\46\233\55\233\56\233\57\233\60\233\61\233\62\233\63" +
		"\233\64\233\65\233\66\233\67\233\70\233\71\233\72\233\73\233\74\233\75\233\76\233" +
		"\77\233\100\233\101\233\102\233\103\233\104\233\105\233\106\233\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\325\17" +
		"\325\uffff\ufffe\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\7\317\22\317\uffff\ufffe\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\7\317\22\317\uffff\ufffe\16\uffff\0\307\3\307\6\307\10" +
		"\307\23\307\25\307\45\307\46\307\56\307\57\307\60\307\61\307\62\307\63\307\64\307" +
		"\65\307\66\307\67\307\70\307\71\307\72\307\73\307\74\307\75\307\76\307\77\307\100" +
		"\307\101\307\102\307\103\307\104\307\105\307\106\307\110\307\uffff\ufffe\74\uffff" +
		"\17\323\21\323\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45" +
		"\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\110\uffff\11\325\26\325\uffff\ufffe\11\uffff\17\141\26\141\uffff\ufffe" +
		"\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\46\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\325\17\325\26\325\uffff" +
		"\ufffe\6\uffff\11\325\17\325\26\325\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff" +
		"\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101" +
		"\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\110\uffff\11\325\17\325\26\325\uffff\ufffe\41\uffff\6\165" +
		"\11\165\17\165\25\165\26\165\27\165\43\165\44\165\45\165\46\165\52\165\55\165\56" +
		"\165\57\165\60\165\61\165\62\165\63\165\64\165\65\165\66\165\67\165\70\165\71\165" +
		"\72\165\73\165\74\165\75\165\76\165\77\165\100\165\101\165\102\165\103\165\104\165" +
		"\105\165\106\165\110\165\uffff\ufffe\36\uffff\6\200\11\200\17\200\25\200\26\200\27" +
		"\200\41\200\43\200\44\200\45\200\46\200\52\200\55\200\56\200\57\200\60\200\61\200" +
		"\62\200\63\200\64\200\65\200\66\200\67\200\70\200\71\200\72\200\73\200\74\200\75" +
		"\200\76\200\77\200\100\200\101\200\102\200\103\200\104\200\105\200\106\200\110\200" +
		"\uffff\ufffe\53\uffff\6\202\11\202\17\202\25\202\26\202\27\202\36\202\41\202\43\202" +
		"\44\202\45\202\46\202\52\202\55\202\56\202\57\202\60\202\61\202\62\202\63\202\64" +
		"\202\65\202\66\202\67\202\70\202\71\202\72\202\73\202\74\202\75\202\76\202\77\202" +
		"\100\202\101\202\102\202\103\202\104\202\105\202\106\202\110\202\uffff\ufffe\33\uffff" +
		"\34\uffff\6\206\11\206\17\206\25\206\26\206\27\206\36\206\41\206\43\206\44\206\45" +
		"\206\46\206\52\206\53\206\55\206\56\206\57\206\60\206\61\206\62\206\63\206\64\206" +
		"\65\206\66\206\67\206\70\206\71\206\72\206\73\206\74\206\75\206\76\206\77\206\100" +
		"\206\101\206\102\206\103\206\104\206\105\206\106\206\110\206\uffff\ufffe\46\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\317\22\317" +
		"\uffff\ufffe\22\uffff\7\321\uffff\ufffe\22\uffff\7\321\uffff\ufffe\6\uffff\23\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\325\17\325\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11" +
		"\325\17\325\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff" +
		"\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77" +
		"\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\110\uffff\11\325\17\325\uffff\ufffe\3\uffff\0\311\6\311\10\311\23\311\25\311" +
		"\45\311\46\311\56\311\57\311\60\311\61\311\62\311\63\311\64\311\65\311\66\311\67" +
		"\311\70\311\71\311\72\311\73\311\74\311\75\311\76\311\77\311\100\311\101\311\102" +
		"\311\103\311\104\311\105\311\106\311\110\311\uffff\ufffe\14\uffff\15\uffff\12\251" +
		"\24\251\42\251\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\52\uffff" +
		"\55\uffff\110\uffff\11\325\26\325\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\325\26\325\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\325\17" +
		"\325\26\325\uffff\ufffe\6\uffff\11\325\17\325\26\325\uffff\ufffe\6\uffff\25\uffff" +
		"\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\325\17\325\26\325\uffff\ufffe\6" +
		"\uffff\11\325\17\325\26\325\uffff\ufffe\41\uffff\6\166\11\166\17\166\25\166\26\166" +
		"\27\166\43\166\44\166\45\166\46\166\52\166\55\166\56\166\57\166\60\166\61\166\62" +
		"\166\63\166\64\166\65\166\66\166\67\166\70\166\71\166\72\166\73\166\74\166\75\166" +
		"\76\166\77\166\100\166\101\166\102\166\103\166\104\166\105\166\106\166\110\166\uffff" +
		"\ufffe\22\uffff\7\321\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44" +
		"\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\110\uffff\11\325\17\325\uffff\ufffe\6\uffff\23\uffff\25\uffff" +
		"\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\325\17\325\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\325\17" +
		"\325\uffff\ufffe\25\uffff\0\313\6\313\10\313\23\313\45\313\46\313\56\313\57\313\60" +
		"\313\61\313\62\313\63\313\64\313\65\313\66\313\67\313\70\313\71\313\72\313\73\313" +
		"\74\313\75\313\76\313\77\313\100\313\101\313\102\313\103\313\104\313\105\313\106" +
		"\313\110\313\uffff\ufffe\31\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\11\23\26\23\41\23\uffff\ufffe\33\uffff\34\uffff\6\207" +
		"\11\207\17\207\25\207\26\207\27\207\36\207\41\207\43\207\44\207\45\207\46\207\52" +
		"\207\53\207\55\207\56\207\57\207\60\207\61\207\62\207\63\207\64\207\65\207\66\207" +
		"\67\207\70\207\71\207\72\207\73\207\74\207\75\207\76\207\77\207\100\207\101\207\102" +
		"\207\103\207\104\207\105\207\106\207\110\207\uffff\ufffe\6\uffff\11\325\17\325\26" +
		"\325\uffff\ufffe\41\205\6\205\11\205\17\205\25\205\26\205\27\205\43\205\44\205\45" +
		"\205\46\205\52\205\55\205\56\205\57\205\60\205\61\205\62\205\63\205\64\205\65\205" +
		"\66\205\67\205\70\205\71\205\72\205\73\205\74\205\75\205\76\205\77\205\100\205\101" +
		"\205\102\205\103\205\104\205\105\205\106\205\110\205\uffff\ufffe\21\uffff\7\122\uffff" +
		"\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106" +
		"\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff" +
		"\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff" +
		"\11\325\17\325\uffff\ufffe\110\uffff\0\315\6\315\10\315\23\315\45\315\46\315\56\315" +
		"\57\315\60\315\61\315\62\315\63\315\64\315\65\315\66\315\67\315\70\315\71\315\72" +
		"\315\73\315\74\315\75\315\76\315\77\315\100\315\101\315\102\315\103\315\104\315\105" +
		"\315\106\315\uffff\ufffe\12\256\42\uffff\24\256\uffff\ufffe\12\255\42\255\24\255" +
		"\uffff\ufffe\11\225\41\uffff\26\225\uffff\ufffe\11\226\41\226\26\226\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(171,
		"\0\2\4\25\44\44\44\73\103\107\114\117\123\124\125\127\150\155\171\204\233\242\313" +
		"\330\347\352\363\372\u0101\u0104\u0105\u010a\u010d\u0112\u011d\u0120\u0135\u014d" +
		"\u0166\u01bc\u01c9\u01d6\u01dc\u01dd\u01de\u01e0\u01f5\u024c\u02a6\u02fd\u0354\u03ae" +
		"\u0405\u045c\u04b3\u050a\u0561\u05b8\u060f\u0666\u06bd\u0714\u076b\u07c7\u0821\u087b" +
		"\u08d2\u0929\u0980\u09d8\u0a2f\u0a86\u0a86\u0a97\u0a98\u0a99\u0a9a\u0a9c\u0a9e\u0aa0" +
		"\u0aa1\u0aa3\u0aa4\u0aa6\u0ace\u0af4\u0b01\u0b06\u0b08\u0b0c\u0b0e\u0b0f\u0b11\u0b13" +
		"\u0b15\u0b16\u0b17\u0b18\u0b1a\u0b1c\u0b1d\u0b1f\u0b21\u0b22\u0b24\u0b26\u0b2a\u0b2d" +
		"\u0b2e\u0b30\u0b32\u0b33\u0b35\u0b37\u0b38\u0b42\u0b4c\u0b57\u0b62\u0b6d\u0b80\u0b8f" +
		"\u0b9b\u0bab\u0bbb\u0bcd\u0be1\u0bf5\u0c05\u0c19\u0c2e\u0c33\u0c37\u0c4a\u0c5d\u0c71" +
		"\u0c73\u0c7b\u0c7e\u0c80\u0c81\u0c85\u0c88\u0c8b\u0c91\u0c93\u0ca0\u0ca0\u0ca3\u0ca6" +
		"\u0cb7\u0cd0\u0cd1\u0cd3\u0cd4\u0cd5\u0cd6\u0cd7\u0cd8\u0cdb\u0cde\u0cdf\u0cf2\u0cf3" +
		"\u0cf4\u0cf5\u0cf6\u0cf7\u0cf8\u0cf9\u0cfa");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(3322,
		"\u0181\u0182\152\224\1\6\22\31\42\52\76\104\105\141\153\273\377\u0114\u012b\u0131" +
		"\u0132\1\6\31\52\70\76\104\105\141\273\352\u0114\u012b\u0131\u0132\75\124\133\163" +
		"\235\276\311\313\314\340\341\343\376\u0100\u0106\u0109\u010a\u010e\u0122\u0124\u0125" +
		"\u0148\u0158\162\245\246\251\342\344\345\u0126\25\46\47\101\306\u0140\u0164\u017a" +
		"\u017b\374\u015f\u0160\45\122\303\363\372\372\147\264\37\41\74\144\253\266\272\305" +
		"\363\u0120\u0121\u0123\u0154\u0156\u0157\u015c\u016f\21\153\212\222\261\27\63\64" +
		"\113\150\153\212\222\261\266\332\u0151\57\111\155\303\310\325\336\337\u0108\u011b" +
		"\u0141\1\6\52\75\76\124\141\153\212\222\235\261\273\276\340\341\343\u0100\u0106\u0122" +
		"\u0124\u0125\u0158\30\150\153\212\222\261\374\20\33\35\123\153\162\212\222\235\246" +
		"\251\261\276\300\301\311\314\325\340\341\343\345\376\u0100\u0101\u0102\u0103\u0104" +
		"\u0106\u010a\u010b\u0112\u0122\u0124\u0125\u0129\u013b\u013c\u0158\u0167\u0169\67" +
		"\114\116\205\212\222\261\375\u013a\u0140\u0161\u0164\u0174\235\276\311\314\340\341" +
		"\343\376\u0100\u0106\u010a\u0122\u0124\u0125\u0158\366\377\u0138\10\54\153\162\212" +
		"\222\251\261\u013d\63\65\153\212\222\261\332\153\212\222\261\324\u0143\u0178\324" +
		"\u0143\u0178\303\153\212\222\261\321\275\u0133\u0135\u0101\u013b\u013c\u0167\u0169" +
		"\153\212\222\261\315\u010f\u0140\u014b\u0164\u017a\u017b\374\u015f\u0160\235\276" +
		"\311\314\325\340\341\343\376\u0100\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0122" +
		"\u0124\u0125\u0158\133\153\163\171\212\222\235\261\276\310\311\314\340\341\343\376" +
		"\u0100\u0106\u010a\u0112\u0122\u0124\u0125\u0158\1\6\25\47\52\76\124\141\161\163" +
		"\235\273\276\314\340\341\343\376\u0100\u0106\u010a\u0122\u0124\u0125\u0158\1\2\6" +
		"\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142\146\153\161\163" +
		"\170\177\200\201\212\222\225\231\232\235\236\240\241\242\261\272\273\275\276\277" +
		"\311\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104" +
		"\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137" +
		"\u013b\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\6\31\52\76\104\105\141\273\u0114" +
		"\u012b\u0131\u0132\1\6\31\52\76\104\105\141\273\u0114\u012b\u0131\u0132\1\6\52\76" +
		"\141\273\376\323\3\23\235\276\311\314\325\340\341\343\376\u0100\u0102\u0103\u0104" +
		"\u0106\u010a\u010b\u0112\u0122\u0124\u0125\u0158\1\2\6\13\22\25\31\34\40\47\52\66" +
		"\75\76\104\105\107\120\121\124\133\141\142\146\153\161\163\170\177\200\201\212\222" +
		"\225\231\232\235\236\240\241\242\261\272\273\275\276\277\311\314\325\333\340\341" +
		"\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112" +
		"\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158" +
		"\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124" +
		"\133\141\142\146\153\161\162\163\170\177\200\201\212\222\225\231\232\235\236\240" +
		"\241\242\246\251\261\272\273\275\276\277\311\314\325\333\340\341\343\345\350\356" +
		"\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119" +
		"\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167" +
		"\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142" +
		"\146\153\161\163\170\177\200\201\212\222\225\231\232\235\236\240\241\242\261\272" +
		"\273\274\275\276\277\311\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101" +
		"\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b" +
		"\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25" +
		"\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142\146\153\161\163\170\177" +
		"\200\201\212\222\225\231\232\235\236\240\241\242\261\272\273\274\275\276\277\311" +
		"\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106" +
		"\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b" +
		"\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\104\105\107\121\124\133\141\142\146\153\161\162\163\170\177\200\201\212\222\225" +
		"\231\232\235\236\240\241\242\246\251\261\272\273\275\276\277\311\314\325\333\340" +
		"\341\343\345\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b" +
		"\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d" +
		"\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107" +
		"\121\124\133\141\142\146\153\160\161\163\170\177\200\201\212\222\225\231\232\235" +
		"\236\240\241\242\261\272\273\275\276\277\311\314\325\333\340\341\343\350\356\367" +
		"\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c" +
		"\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167\u0169" +
		"\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142\146" +
		"\153\160\161\163\170\177\200\201\212\222\225\231\232\235\236\240\241\242\261\272" +
		"\273\275\276\277\311\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101" +
		"\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b" +
		"\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25" +
		"\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142\146\153\160\161\163\170" +
		"\177\200\201\212\222\225\231\232\235\236\240\241\242\261\272\273\275\276\277\311" +
		"\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106" +
		"\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b" +
		"\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\104\105\107\121\124\133\141\142\146\153\160\161\163\170\177\200\201\212\222\225" +
		"\231\232\235\236\240\241\242\261\272\273\275\276\277\311\314\325\333\340\341\343" +
		"\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114" +
		"\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161" +
		"\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133" +
		"\141\142\146\153\160\161\163\170\177\200\201\212\222\225\231\232\235\236\240\241" +
		"\242\261\272\273\275\276\277\311\314\325\333\340\341\343\350\356\367\370\371\376" +
		"\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124" +
		"\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1" +
		"\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142\146\153\161" +
		"\163\170\177\200\201\212\222\225\231\232\235\236\240\241\242\261\270\272\273\275" +
		"\276\277\311\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103" +
		"\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135" +
		"\u0137\u013b\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47" +
		"\52\66\75\76\104\105\107\121\124\133\141\142\146\153\161\163\170\177\200\201\212" +
		"\222\225\231\232\235\236\240\241\242\261\270\272\273\275\276\277\311\314\325\333" +
		"\340\341\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b" +
		"\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d" +
		"\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107" +
		"\121\124\133\141\142\146\153\161\163\170\177\200\201\212\222\225\231\232\235\236" +
		"\240\241\242\261\270\272\273\275\276\277\311\314\325\333\340\341\343\350\356\367" +
		"\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c" +
		"\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167\u0169" +
		"\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142\146" +
		"\153\161\163\170\177\200\201\212\222\225\231\232\235\236\240\241\242\261\270\272" +
		"\273\275\276\277\311\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101" +
		"\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b" +
		"\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25" +
		"\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142\146\153\161\163\170\177" +
		"\200\201\212\222\225\231\232\235\236\240\241\242\261\265\272\273\275\276\277\311" +
		"\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106" +
		"\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b" +
		"\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\104\105\107\121\124\133\141\142\146\153\161\163\170\177\200\201\212\222\225\231" +
		"\232\235\236\240\241\242\261\272\273\275\276\277\311\314\325\333\340\341\343\350" +
		"\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114" +
		"\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0159" +
		"\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124" +
		"\133\141\142\146\153\161\162\163\170\177\200\201\212\222\225\231\232\235\236\237" +
		"\240\241\242\246\251\261\272\273\275\276\277\311\314\325\333\340\341\343\345\350" +
		"\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114" +
		"\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0159" +
		"\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124" +
		"\133\141\142\146\153\161\162\163\170\177\200\201\212\222\225\231\232\235\236\240" +
		"\241\242\246\251\261\272\273\275\276\277\311\314\325\333\340\341\343\345\350\356" +
		"\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119" +
		"\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167" +
		"\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142" +
		"\146\153\161\162\163\170\177\200\201\212\222\225\231\232\235\236\240\241\242\246" +
		"\251\261\272\273\275\276\277\311\314\325\333\340\341\343\345\350\356\367\370\371" +
		"\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122" +
		"\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167\u0169\u016b" +
		"\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\141\142\146\153\161" +
		"\163\170\177\200\201\212\222\225\231\232\235\236\240\241\242\261\272\273\275\276" +
		"\277\311\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103" +
		"\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135" +
		"\u0137\u013b\u013c\u013d\u0158\u0159\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34" +
		"\40\47\52\66\75\76\104\105\107\121\124\133\141\142\146\153\161\163\170\177\200\201" +
		"\212\222\225\231\232\235\236\240\241\242\261\272\273\275\276\277\311\314\325\333" +
		"\340\341\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b" +
		"\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d" +
		"\u0158\u0159\u0161\u0167\u0169\u016b\0\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104" +
		"\105\107\121\124\133\141\142\146\153\161\163\170\177\200\201\212\222\225\231\232" +
		"\235\236\240\241\242\261\272\273\275\276\277\311\314\325\333\340\341\343\350\356" +
		"\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119" +
		"\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167" +
		"\u0169\u016b\1\2\6\13\20\22\25\31\34\40\47\52\66\75\76\104\105\107\115\121\124\133" +
		"\141\142\146\153\161\163\170\177\200\201\212\222\225\231\232\235\236\240\241\242" +
		"\261\272\273\275\276\277\311\314\325\333\340\341\343\350\356\367\370\371\376\u0100" +
		"\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125" +
		"\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\2\6\13" +
		"\22\25\31\34\40\44\47\52\66\75\76\104\105\107\121\124\133\141\142\146\153\161\163" +
		"\170\177\200\201\212\222\225\231\232\235\236\240\241\242\261\272\273\275\276\277" +
		"\311\314\325\333\340\341\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104" +
		"\u0106\u010a\u010b\u0112\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137" +
		"\u013b\u013c\u013d\u0158\u0161\u0167\u0169\u016b\1\2\6\13\22\25\31\34\40\47\52\66" +
		"\75\76\77\104\105\107\121\124\133\141\142\146\153\161\163\170\177\200\201\212\222" +
		"\225\231\232\235\236\240\241\242\261\272\273\275\276\277\311\314\325\333\340\341" +
		"\343\350\356\367\370\371\376\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112" +
		"\u0114\u0119\u011c\u0122\u0124\u0125\u012b\u0133\u0135\u0137\u013b\u013c\u013d\u0158" +
		"\u0161\u0167\u0169\u016b\235\276\311\314\340\341\343\376\u0100\u0106\u010a\u0112" +
		"\u0122\u0124\u0125\u0158\u015b\233\0\0\25\47\46\101\20\115\3\3\23\25\25\47\31\75" +
		"\107\121\124\133\163\170\201\231\235\236\241\242\275\276\277\311\314\325\333\340" +
		"\341\343\371\376\u0100\u0102\u0104\u0106\u010a\u010b\u0112\u0119\u0122\u0124\u0125" +
		"\u0133\u0135\u0158\1\6\31\52\76\104\105\141\235\273\276\311\314\325\340\341\343\376" +
		"\u0100\u0101\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0114\u0122\u0124\u0125\u012b" +
		"\u013b\u013c\u013d\u0158\u0167\u0169\146\177\225\232\240\272\356\367\370\u011c\u0137" +
		"\u0161\u016b\123\162\246\251\345\153\212\153\212\222\261\152\224\75\75\124\75\124" +
		"\75\124\264\u0129\u0159\75\124\75\124\121\200\350\121\201\133\133\163\133\163\162" +
		"\246\251\345\336\337\u011b\160\133\163\133\163\225\225\356\232\u0137\u011c\235\276" +
		"\340\341\343\u0100\u0122\u0124\u0125\u0158\235\276\340\341\343\u0100\u0122\u0124" +
		"\u0125\u0158\235\276\340\341\343\u0100\u0106\u0122\u0124\u0125\u0158\235\276\340" +
		"\341\343\u0100\u0106\u0122\u0124\u0125\u0158\235\276\340\341\343\u0100\u0106\u0122" +
		"\u0124\u0125\u0158\235\276\311\313\314\340\341\343\376\u0100\u0106\u0109\u010a\u010e" +
		"\u0122\u0124\u0125\u0148\u0158\235\276\311\314\340\341\343\376\u0100\u0106\u010a" +
		"\u0122\u0124\u0125\u0158\235\276\311\340\341\343\u0100\u0106\u0122\u0124\u0125\u0158" +
		"\235\276\311\314\340\341\343\376\u0100\u0106\u010a\u0112\u0122\u0124\u0125\u0158" +
		"\235\276\311\314\340\341\343\376\u0100\u0106\u010a\u0112\u0122\u0124\u0125\u0158" +
		"\235\276\311\314\325\340\341\343\376\u0100\u0106\u010a\u010b\u0112\u0122\u0124\u0125" +
		"\u0158\235\276\311\314\325\340\341\343\376\u0100\u0102\u0104\u0106\u010a\u010b\u0112" +
		"\u0122\u0124\u0125\u0158\235\276\311\314\325\340\341\343\376\u0100\u0102\u0104\u0106" +
		"\u010a\u010b\u0112\u0122\u0124\u0125\u0158\235\276\311\314\340\341\343\376\u0100" +
		"\u0106\u010a\u0112\u0122\u0124\u0125\u0158\235\276\311\314\325\340\341\343\376\u0100" +
		"\u0102\u0104\u0106\u010a\u010b\u0112\u0122\u0124\u0125\u0158\235\276\311\314\325" +
		"\340\341\343\376\u0100\u0102\u0103\u0104\u0106\u010a\u010b\u0112\u0122\u0124\u0125" +
		"\u0158\u0101\u013b\u013c\u0167\u0169\u0101\u013b\u0167\u0169\133\163\235\276\310" +
		"\311\314\340\341\343\376\u0100\u0106\u010a\u0112\u0122\u0124\u0125\u0158\133\163" +
		"\235\276\310\311\314\340\341\343\376\u0100\u0106\u010a\u0112\u0122\u0124\u0125\u0158" +
		"\133\163\171\235\276\310\311\314\340\341\343\376\u0100\u0106\u010a\u0112\u0122\u0124" +
		"\u0125\u0158\162\251\31\107\236\275\371\u0119\u0133\u0135\10\54\u013d\31\107\270" +
		"\31\104\105\u012b\275\u0133\u0135\275\u0133\u0135\1\6\52\76\141\273\66\142\1\6\31" +
		"\52\76\104\105\141\273\u0114\u012b\u0131\u0132\2\13\34\2\13\34\235\276\311\314\340" +
		"\341\343\376\u0100\u0106\u010a\u0112\u0122\u0124\u0125\u0158\u015b\1\6\25\47\52\76" +
		"\124\141\161\163\235\273\276\314\340\341\343\376\u0100\u0106\u010a\u0122\u0124\u0125" +
		"\u0158\3\20\115\123\264\352\u0129\u015b\241\242\333\336\337\u011b\265\235\276\311" +
		"\313\314\340\341\343\376\u0100\u0106\u0109\u010a\u010e\u0122\u0124\u0125\u0148\u0158" +
		"\236\31\31\31\66\66\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(3322,
		"\u0183\u0184\203\203\4\4\41\4\74\4\4\4\4\4\205\4\u0138\4\4\4\4\5\5\5\5\116\5\5\5" +
		"\5\5\u0128\5\5\5\5\120\120\160\160\274\274\274\274\274\274\274\274\274\274\274\274" +
		"\274\274\274\274\274\274\274\235\340\341\343\u0122\u0124\u0125\u0158\44\77\44\77" +
		"\u0106\u0167\u0167\u0167\u0167\u0133\u0133\u0133\76\152\u0102\u012b\u0131\u0132\200" +
		"\350\71\73\117\175\346\355\364\u0105\u012c\u0152\u0153\u0155\u016c\u016d\u016e\u0177" +
		"\u017d\40\206\206\206\206\52\105\107\142\201\207\207\207\207\356\u0119\u016b\104" +
		"\141\224\u0103\u0107\u0117\u011c\u011c\u0146\u011c\u0103\6\6\6\121\6\121\6\210\210" +
		"\210\275\210\6\275\275\275\275\275\275\275\275\275\275\53\202\211\211\211\211\u0134" +
		"\34\66\70\153\212\153\212\212\276\153\153\212\276\u0100\u0101\276\276\276\276\276" +
		"\276\153\276\276\u013b\276\276\276\276\276\276\276\276\276\276\u0159\u013b\u013b" +
		"\276\u013b\u013b\115\143\145\257\260\262\347\u0136\u0163\u0168\u0178\u0179\u017e" +
		"\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\u012d\u0139\u0162\31" +
		"\31\213\236\213\213\236\213\31\106\110\214\214\214\214\u011a\215\215\215\215\u0115" +
		"\u0115\u017f\u0116\u0116\u0180\u0104\216\216\216\216\u0113\371\371\371\u013c\u013c" +
		"\u013c\u013c\u013c\217\217\217\217\u0112\u0112\u0169\u0112\u0169\u0169\u0169\u0135" +
		"\u0135\u0135\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300" +
		"\300\300\300\300\161\220\161\161\220\220\161\220\161\161\161\161\161\161\161\161" +
		"\161\161\161\161\161\161\161\161\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7" +
		"\7\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221" +
		"\233\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54" +
		"\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10" +
		"\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\11\11\11\11" +
		"\11\11\11\11\11\11\11\11\11\12\12\12\12\12\12\12\12\12\12\12\12\12\13\13\13\13\13" +
		"\13\u0137\u0114\22\22\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301" +
		"\301\301\301\301\301\301\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\146" +
		"\137\122\137\10\111\176\221\233\137\137\176\254\137\221\221\176\137\176\54\137\176" +
		"\137\137\221\176\10\137\54\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d" +
		"\54\10\54\54\54\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d" +
		"\u013d\176\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111" +
		"\176\221\233\237\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\237\237" +
		"\221\176\10\137\54\137\54\54\54\137\54\54\54\237\254\176\176\176\137\54\54\u013d" +
		"\54\10\54\54\54\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d" +
		"\u013d\176\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111" +
		"\176\221\233\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10" +
		"\367\137\54\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54" +
		"\54\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176" +
		"\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221" +
		"\233\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\370\137" +
		"\54\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54" +
		"\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10" +
		"\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\233\240" +
		"\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\240\240\221\176\10\137" +
		"\54\137\54\54\54\137\54\54\54\240\254\176\176\176\137\54\54\u013d\54\10\54\54\54" +
		"\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10" +
		"\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\225" +
		"\233\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54" +
		"\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10" +
		"\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10\17" +
		"\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\226\233\137" +
		"\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54\137\54" +
		"\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176" +
		"\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10\17\42\45" +
		"\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\227\233\137\137\176" +
		"\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54\137\54\54\54\137" +
		"\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176\54\54\54" +
		"\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10\17\42\45\54\17\72" +
		"\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\230\233\137\137\176\254\137" +
		"\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54\137\54\54\54\137\54\54" +
		"\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176\54\54\54\10\137" +
		"\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10\17\42\45\54\17\72\45\10\111" +
		"\122\10\10\10\137\137\122\137\10\111\176\221\231\233\137\137\176\254\137\221\221" +
		"\176\137\176\54\137\176\137\137\221\176\10\137\54\137\54\54\54\137\54\54\54\254\176" +
		"\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176\54\54\54\10\137\137\176" +
		"\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10\17\42\45\54\17\72\45\10\111\122\10" +
		"\10\10\137\137\122\137\10\111\176\221\233\137\137\176\254\137\221\221\176\137\176" +
		"\54\137\176\137\137\221\357\176\10\137\54\137\54\54\54\137\54\54\54\254\176\176\176" +
		"\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d" +
		"\10\54\176\u013d\u013d\176\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137" +
		"\137\122\137\10\111\176\221\233\137\137\176\254\137\221\221\176\137\176\54\137\176" +
		"\137\137\221\360\176\10\137\54\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54" +
		"\u013d\54\10\54\54\54\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54" +
		"\176\u013d\u013d\176\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122" +
		"\137\10\111\176\221\233\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137" +
		"\221\361\176\10\137\54\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d" +
		"\54\10\54\54\54\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d" +
		"\u013d\176\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111" +
		"\176\221\233\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\362\176" +
		"\10\137\54\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54" +
		"\54\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176" +
		"\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221" +
		"\233\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\353\176\10\137" +
		"\54\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54" +
		"\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10" +
		"\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\233\137" +
		"\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54\137\54" +
		"\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176" +
		"\54\54\54\10\137\137\176\u013d\u013d\10\54\u0170\176\u013d\u013d\176\10\17\10\17" +
		"\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\233\241\137" +
		"\137\176\254\137\221\221\176\137\176\54\137\333\176\137\137\241\241\221\176\10\137" +
		"\54\137\54\54\54\137\54\54\54\241\254\176\176\176\137\54\54\u013d\54\10\54\54\54" +
		"\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\u0171\176\u013d\u013d" +
		"\176\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176" +
		"\221\233\242\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\242\242\221" +
		"\176\10\137\54\137\54\54\54\137\54\54\54\242\254\176\176\176\137\54\54\u013d\54\10" +
		"\54\54\54\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d" +
		"\176\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176" +
		"\221\233\243\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\243\243\221" +
		"\176\10\137\54\137\54\54\54\137\54\54\54\243\254\176\176\176\137\54\54\u013d\54\10" +
		"\54\54\54\54\54\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d" +
		"\176\10\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176" +
		"\221\233\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137" +
		"\54\137\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54" +
		"\10\137\176\54\54\54\10\137\137\176\u013d\u013d\10\54\u0172\176\u013d\u013d\176\10" +
		"\17\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\233" +
		"\137\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54\137" +
		"\54\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137" +
		"\176\54\54\54\10\137\137\176\u013d\u013d\10\54\u0173\176\u013d\u013d\176\2\10\17" +
		"\10\17\42\45\54\17\72\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\233\137" +
		"\137\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54\137\54" +
		"\54\54\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176" +
		"\54\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10\17\35\42" +
		"\45\54\17\72\45\10\111\122\10\10\10\137\35\137\122\137\10\111\176\221\233\137\137" +
		"\176\254\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54\137\54\54\54" +
		"\137\54\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176\54" +
		"\54\54\10\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10\17\42\45\54" +
		"\17\72\75\45\10\111\122\10\10\10\137\137\122\137\10\111\176\221\233\137\137\176\254" +
		"\137\221\221\176\137\176\54\137\176\137\137\221\176\10\137\54\137\54\54\54\137\54" +
		"\54\54\254\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176\54\54\54\10" +
		"\137\137\176\u013d\u013d\10\54\176\u013d\u013d\176\10\17\10\17\42\45\54\17\72\45" +
		"\10\111\122\10\133\10\10\137\137\122\137\10\111\176\221\233\137\137\176\254\137\221" +
		"\221\176\137\176\54\137\176\137\137\221\176\10\137\54\137\54\54\54\137\54\54\54\254" +
		"\176\176\176\137\54\54\u013d\54\10\54\54\54\54\54\10\137\176\54\54\54\10\137\137" +
		"\176\u013d\u013d\10\54\176\u013d\u013d\176\302\302\302\302\302\302\302\302\302\302" +
		"\302\302\302\302\302\302\302\273\u0181\3\46\101\100\134\36\36\23\24\43\47\50\102" +
		"\55\123\55\147\123\162\162\251\147\270\303\55\335\335\55\303\377\303\303\303\335" +
		"\303\303\303\55\303\303\u0141\u0141\303\303\303\303\55\303\303\303\55\55\303\14\14" +
		"\56\14\14\56\56\14\304\14\304\304\304\304\304\304\304\304\304\u013e\304\304\304\304" +
		"\304\304\304\u014c\304\304\304\56\u013e\u013e\u0166\304\u013e\u013e\177\253\265\271" +
		"\334\365\265\u012e\u012f\u0150\271\365\u017c\154\244\244\244\244\222\261\223\223" +
		"\263\263\204\264\124\125\156\126\126\127\127\351\u015a\u0174\130\130\131\131\150" +
		"\255\u0127\151\256\163\164\247\165\165\245\342\344\u0126\u011d\u011d\u011d\232\166" +
		"\166\167\167\266\267\u012a\272\u0161\u0151\305\375\u0120\u0121\u0123\u013a\u0154" +
		"\u0156\u0157\u016f\306\306\306\306\306\306\306\306\306\306\307\307\307\307\307\307" +
		"\u0145\307\307\307\307\310\310\310\310\310\310\310\310\310\310\310\311\311\311\311" +
		"\311\311\311\311\311\311\311\312\312\312\312\312\312\312\312\312\312\312\312\312" +
		"\312\312\312\312\312\312\313\313\u0109\u010e\313\313\313\u010e\313\313\u0148\313" +
		"\313\313\313\314\376\u010a\314\314\314\314\314\314\314\314\314\315\315\315\u010f" +
		"\315\315\315\u010f\315\315\u010f\u014b\315\315\315\315\316\316\316\316\316\316\316" +
		"\316\316\316\316\316\316\316\316\316\317\317\317\317\u0118\317\317\317\317\317\317" +
		"\317\u0118\317\317\317\317\317\320\320\320\320\320\320\320\320\320\320\u0142\u0144" +
		"\320\320\320\320\320\320\320\320\321\321\321\321\321\321\321\321\321\321\321\321" +
		"\321\321\321\321\321\321\321\321\322\322\322\322\322\322\322\322\322\322\322\322" +
		"\322\322\322\322\323\323\323\323\323\323\323\323\323\323\323\323\323\323\323\323" +
		"\323\323\323\323\324\324\324\324\324\324\324\324\324\324\324\u0143\324\324\324\324" +
		"\324\324\324\324\324\u013f\u013f\u0165\u013f\u013f\u0140\u0164\u017a\u017b\170\170" +
		"\325\325\u0108\u010b\u010b\325\325\325\u010b\325\325\u010b\u010b\325\325\325\325" +
		"\171\171\171\171\171\171\171\171\171\171\171\171\171\171\171\171\171\171\171\172" +
		"\172\252\172\172\172\172\172\172\172\172\172\172\172\172\172\172\172\172\172\246" +
		"\345\57\57\331\372\u0130\u014e\372\372\32\32\32\60\140\363\61\135\136\u015c\373\373" +
		"\373\374\u015f\u0160\u0182\26\103\132\173\366\112\174\15\15\62\15\15\62\62\15\15" +
		"\u014d\62\u015d\u015e\20\33\67\21\21\21\326\326\326\326\326\326\326\326\326\326\326" +
		"\326\326\326\326\326\u0175\16\16\51\51\16\16\157\16\234\250\327\16\327\u0110\327" +
		"\327\327\u0110\327\327\u0110\327\327\327\327\25\37\144\155\352\u0129\u015b\u0176" +
		"\336\337\u011b\u011e\u011f\u014f\354\330\330\u010c\u010d\u0111\330\330\330\u0111" +
		"\330\330\u0147\u0149\u014a\330\330\330\u016a\330\332\63\64\65\113\114\27\30");

	private static final short[] tmRuleLen = TMLexer.unpack_short(230,
		"\5\4\4\3\7\4\3\3\4\1\2\4\3\1\2\3\1\1\2\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1" +
		"\2\2\1\1\1\1\3\10\3\2\3\1\1\1\1\5\3\1\3\1\3\1\1\2\2\1\1\1\7\6\6\5\6\5\5\4\2\4\3\3" +
		"\1\1\2\1\1\1\7\5\4\4\1\3\2\1\2\1\3\1\1\3\4\3\3\2\3\2\2\1\1\3\3\2\2\3\3\4\3\1\2\2" +
		"\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\4\4\2\1\3\2\1\3\3\1\1\2\5\2\2\3\1\3" +
		"\3\3\1\1\1\1\1\1\2\1\3\3\1\3\3\1\1\5\3\1\3\1\1\1\1\1\3\1\1\3\1\1\1\0\1\0\1\0\1\0" +
		"\1\0\1\0\1\0\1\0\1\0\1\0\1\0\3\1\3\1\3\1\1\0\3\1\1\0\3\1\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(230,
		"\112\112\112\112\113\113\114\115\116\117\117\120\120\121\121\122\122\123\124\124" +
		"\125\126\126\127\127\130\130\130\130\130\130\130\130\130\130\130\130\130\131\132" +
		"\132\132\133\133\133\133\134\135\135\136\137\140\140\140\140\141\142\143\143\144" +
		"\145\145\146\146\146\147\147\147\150\150\150\150\150\150\150\150\151\151\151\151" +
		"\151\151\152\153\153\153\154\154\155\155\156\156\157\160\160\161\161\162\163\163" +
		"\164\164\164\164\164\164\164\164\164\165\166\166\166\167\167\170\170\171\171\171" +
		"\172\172\172\173\173\174\174\174\175\175\176\176\176\177\200\200\201\201\201\201" +
		"\201\201\201\201\202\202\202\202\203\203\203\204\205\205\206\206\206\207\210\211" +
		"\211\212\213\213\213\213\214\214\215\215\215\215\216\216\216\217\217\217\217\217" +
		"\220\221\221\221\221\222\222\223\224\224\225\226\227\227\230\230\231\231\232\232" +
		"\233\233\234\234\235\235\236\236\237\237\240\240\241\241\242\242\243\243\244\244" +
		"\245\245\246\246\247\247\250\250\251\251");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'||'",
		"'='",
		"'=='",
		"'!='",
		"'=>'",
		"';'",
		"'.'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'!'",
		"'~'",
		"'&'",
		"'&&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Lbrackets",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lparam",
		"Lstring",
		"Lbool",
		"Lint",
		"Lsymbol",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"imports",
		"import_",
		"options",
		"option",
		"identifier",
		"symref",
		"symref_noargs",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"lexer_directive",
		"state_selector",
		"state_list",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"nonterm_param",
		"directive",
		"inputs",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule_list",
		"rule0",
		"predicate",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"setPrimary",
		"setExpression",
		"annotations",
		"annotation_list",
		"annotation",
		"nonterm_params",
		"param_ref",
		"symref_args",
		"keyval_arg",
		"param_type",
		"param_value",
		"predicate_primary",
		"predicate_expression",
		"expression",
		"map_entry",
		"literal",
		"expression_list",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"importsopt",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"identifieropt",
		"implementsopt",
		"Lnoeoiopt",
		"rhsSuffixopt",
		"param_ref_list_Comma_separated",
		"param_value_list_Comma_separated",
		"keyval_arg_list_Comma_separated",
		"keyval_arg_list_Comma_separated_opt",
		"map_entry_list_Comma_separated",
		"map_entry_list_Comma_separated_opt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 74;
		static final int header = 75;
		static final int lexer_section = 76;
		static final int parser_section = 77;
		static final int parsing_algorithm = 78;
		static final int imports = 79;
		static final int import_ = 80;
		static final int options = 81;
		static final int option = 82;
		static final int identifier = 83;
		static final int symref = 84;
		static final int symref_noargs = 85;
		static final int type = 86;
		static final int type_part_list = 87;
		static final int type_part = 88;
		static final int pattern = 89;
		static final int lexer_parts = 90;
		static final int lexer_part = 91;
		static final int named_pattern = 92;
		static final int lexeme = 93;
		static final int lexeme_transition = 94;
		static final int lexeme_attrs = 95;
		static final int lexeme_attribute = 96;
		static final int lexer_directive = 97;
		static final int state_selector = 98;
		static final int state_list = 99;
		static final int stateref = 100;
		static final int lexer_state = 101;
		static final int grammar_parts = 102;
		static final int grammar_part = 103;
		static final int nonterm = 104;
		static final int nonterm_type = 105;
		static final int _implements = 106;
		static final int assoc = 107;
		static final int nonterm_param = 108;
		static final int directive = 109;
		static final int inputs = 110;
		static final int inputref = 111;
		static final int references = 112;
		static final int references_cs = 113;
		static final int rules = 114;
		static final int rule_list = 115;
		static final int rule0 = 116;
		static final int predicate = 117;
		static final int rhsPrefix = 118;
		static final int rhsSuffix = 119;
		static final int ruleAction = 120;
		static final int rhsParts = 121;
		static final int rhsPart = 122;
		static final int rhsAnnotated = 123;
		static final int rhsAssignment = 124;
		static final int rhsOptional = 125;
		static final int rhsCast = 126;
		static final int rhsUnordered = 127;
		static final int rhsClass = 128;
		static final int rhsPrimary = 129;
		static final int setPrimary = 130;
		static final int setExpression = 131;
		static final int annotations = 132;
		static final int annotation_list = 133;
		static final int annotation = 134;
		static final int nonterm_params = 135;
		static final int param_ref = 136;
		static final int symref_args = 137;
		static final int keyval_arg = 138;
		static final int param_type = 139;
		static final int param_value = 140;
		static final int predicate_primary = 141;
		static final int predicate_expression = 142;
		static final int expression = 143;
		static final int map_entry = 144;
		static final int literal = 145;
		static final int expression_list = 146;
		static final int name = 147;
		static final int qualified_id = 148;
		static final int command = 149;
		static final int syntax_problem = 150;
		static final int importsopt = 151;
		static final int parsing_algorithmopt = 152;
		static final int typeopt = 153;
		static final int lexeme_transitionopt = 154;
		static final int iconopt = 155;
		static final int lexeme_attrsopt = 156;
		static final int commandopt = 157;
		static final int identifieropt = 158;
		static final int implementsopt = 159;
		static final int Lnoeoiopt = 160;
		static final int rhsSuffixopt = 161;
		static final int param_ref_list_Comma_separated = 162;
		static final int param_value_list_Comma_separated = 163;
		static final int keyval_arg_list_Comma_separated = 164;
		static final int keyval_arg_list_Comma_separated_opt = 165;
		static final int map_entry_list_Comma_separated = 166;
		static final int map_entry_list_Comma_separated_opt = 167;
		static final int expression_list_Comma_separated = 168;
		static final int expression_list_Comma_separated_opt = 169;
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 37) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 37;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 37);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 0:  // input ::= header importsopt options lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 4].value), ((List<TmaImport>)tmStack[tmHead - 3].value), ((List<TmaOption>)tmStack[tmHead - 2].value), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 1:  // input ::= header importsopt options lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)tmStack[tmHead - 1].value), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 2:  // input ::= header importsopt lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 3:  // input ::= header importsopt lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 2].value), ((List<TmaImport>)tmStack[tmHead - 1].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 4:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 5].value), ((TmaName)tmStack[tmHead - 3].value), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 5:  // header ::= Llanguage name parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 2].value), ((TmaName)null), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 6:  // lexer_section ::= '::' Llexer lexer_parts
				 tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value); 
				break;
			case 7:  // parser_section ::= '::' Lparser grammar_parts
				 tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value); 
				break;
			case 8:  // parsing_algorithm ::= Llalr '(' icon ')'
				 tmLeft.value = new TmaParsingAlgorithm(((Integer)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 9:  // imports ::= import_
				 tmLeft.value = new ArrayList<TmaImport>(16); ((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 10:  // imports ::= imports import_
				 ((List<TmaImport>)tmStack[tmHead - 1].value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 11:  // import_ ::= Limport ID scon ';'
				 tmLeft.value = new TmaImport(((String)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 12:  // import_ ::= Limport scon ';'
				 tmLeft.value = new TmaImport(((String)null), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 13:  // options ::= option
				 tmLeft.value = new ArrayList<TmaOption>(16); ((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 14:  // options ::= options option
				 ((List<TmaOption>)tmStack[tmHead - 1].value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 15:  // option ::= ID '=' expression
				 tmLeft.value = new TmaOption(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 16:  // option ::= syntax_problem
				 tmLeft.value = new TmaOption(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 17:  // identifier ::= ID
				 tmLeft.value = new TmaIdentifier(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 18:  // symref ::= ID symref_args
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead - 1].value), ((TmaSymrefArgs)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 19:  // symref ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), ((TmaSymrefArgs)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 20:  // symref_noargs ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 21:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 22:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 38:  // pattern ::= regexp
				 tmLeft.value = new TmaPattern(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 39:  // lexer_parts ::= lexer_part
				 tmLeft.value = new ArrayList<ITmaLexerPart>(64); ((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 40:  // lexer_parts ::= lexer_parts lexer_part
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 41:  // lexer_parts ::= lexer_parts syntax_problem
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 46:  // named_pattern ::= ID '=' pattern
				 tmLeft.value = new TmaNamedPattern(((String)tmStack[tmHead - 2].value), ((TmaPattern)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 47:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 7].value), ((String)tmStack[tmHead - 6].value), ((TmaPattern)tmStack[tmHead - 4].value), ((TmaStateref)tmStack[tmHead - 3].value), ((Integer)tmStack[tmHead - 2].value), ((TmaLexemeAttrs)tmStack[tmHead - 1].value), ((TmaCommand)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 48:  // lexeme ::= identifier typeopt ':'
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), ((TmaPattern)null), ((TmaStateref)null), ((Integer)null), ((TmaLexemeAttrs)null), ((TmaCommand)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 49:  // lexeme_transition ::= '=>' stateref
				 tmLeft.value = ((TmaStateref)tmStack[tmHead].value); 
				break;
			case 50:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				 tmLeft.value = ((TmaLexemeAttrs)tmStack[tmHead - 1].value); 
				break;
			case 51:  // lexeme_attribute ::= Lsoft
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSOFT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 52:  // lexeme_attribute ::= Lclass
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LCLASS, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 53:  // lexeme_attribute ::= Lspace
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSPACE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 54:  // lexeme_attribute ::= Llayout
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LLAYOUT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 55:  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
				 tmLeft.value = new TmaDirectiveBrackets(((TmaSymref)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 56:  // state_selector ::= '[' state_list ']'
				 tmLeft.value = new TmaStateSelector(((List<TmaLexerState>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 57:  // state_list ::= lexer_state
				 tmLeft.value = new ArrayList<Integer>(4); ((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 58:  // state_list ::= state_list ',' lexer_state
				 ((List<TmaLexerState>)tmStack[tmHead - 2].value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 59:  // stateref ::= ID
				 tmLeft.value = new TmaStateref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 60:  // lexer_state ::= identifier '=>' stateref
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaStateref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 61:  // lexer_state ::= identifier
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead].value), ((TmaStateref)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 62:  // grammar_parts ::= grammar_part
				 tmLeft.value = new ArrayList<ITmaGrammarPart>(64); ((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 63:  // grammar_parts ::= grammar_parts grammar_part
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 64:  // grammar_parts ::= grammar_parts syntax_problem
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 68:  // nonterm ::= annotations identifier nonterm_params nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 6].value), ((TmaIdentifier)tmStack[tmHead - 5].value), ((TmaNontermParams)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 69:  // nonterm ::= annotations identifier nonterm_params '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 70:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)null), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 71:  // nonterm ::= annotations identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 4].value), ((TmaIdentifier)tmStack[tmHead - 3].value), ((TmaNontermParams)null), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 72:  // nonterm ::= identifier nonterm_params nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 5].value), ((TmaNontermParams)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 73:  // nonterm ::= identifier nonterm_params '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 74:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)null), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 75:  // nonterm ::= identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 3].value), ((TmaNontermParams)null), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 76:  // nonterm_type ::= Lreturns symref_noargs
				 tmLeft.value = new TmaNontermTypeAST(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 77:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(true, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 78:  // nonterm_type ::= Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 79:  // nonterm_type ::= Linterface identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LINTERFACE, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 80:  // nonterm_type ::= Lvoid
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LVOID, null, null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 81:  // nonterm_type ::= type
				 tmLeft.value = new TmaNontermTypeRaw(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 82:  // implements ::= ':' references_cs
				 tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value); 
				break;
			case 83:  // assoc ::= Lleft
				 tmLeft.value = TmaAssoc.LLEFT; 
				break;
			case 84:  // assoc ::= Lright
				 tmLeft.value = TmaAssoc.LRIGHT; 
				break;
			case 85:  // assoc ::= Lnonassoc
				 tmLeft.value = TmaAssoc.LNONASSOC; 
				break;
			case 86:  // nonterm_param ::= '%' Lparam identifier param_type '=' param_value ';'
				 tmLeft.value = new TmaNontermParam(((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaParamType)tmStack[tmHead - 3].value), ((ITmaParamValue)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 87:  // nonterm_param ::= '%' Lparam identifier param_type ';'
				 tmLeft.value = new TmaNontermParam(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaParamType)tmStack[tmHead - 1].value), ((ITmaParamValue)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 88:  // directive ::= '%' assoc references ';'
				 tmLeft.value = new TmaDirectivePrio(((TmaAssoc)tmStack[tmHead - 2].value), ((List<TmaSymref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 89:  // directive ::= '%' Linput inputs ';'
				 tmLeft.value = new TmaDirectiveInput(((List<TmaInputref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 90:  // inputs ::= inputref
				 tmLeft.value = new ArrayList<TmaInputref>(); ((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 91:  // inputs ::= inputs ',' inputref
				 ((List<TmaInputref>)tmStack[tmHead - 2].value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 92:  // inputref ::= symref_noargs Lnoeoiopt
				 tmLeft.value = new TmaInputref(((TmaSymref)tmStack[tmHead - 1].value), ((String)tmStack[tmHead].value) != null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 93:  // references ::= symref_noargs
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 94:  // references ::= references symref_noargs
				 ((List<TmaSymref>)tmStack[tmHead - 1].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 95:  // references_cs ::= symref_noargs
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 96:  // references_cs ::= references_cs ',' symref_noargs
				 ((List<TmaSymref>)tmStack[tmHead - 2].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 98:  // rule_list ::= rule0
				 tmLeft.value = new ArrayList<TmaRule0>(); ((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 99:  // rule_list ::= rule_list '|' rule0
				 ((List<TmaRule0>)tmStack[tmHead - 2].value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 100:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 3].value), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 101:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 102:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 103:  // rule0 ::= rhsPrefix rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 1].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 104:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 105:  // rule0 ::= rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 106:  // rule0 ::= ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 107:  // rule0 ::= rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 108:  // rule0 ::= syntax_problem
				 tmLeft.value = new TmaRule0(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 109:  // predicate ::= '[' predicate_expression ']'
				 tmLeft.value = ((ITmaPredicateExpression)tmStack[tmHead - 1].value); 
				break;
			case 110:  // rhsPrefix ::= predicate annotations ':'
				 tmLeft.value = new TmaRhsPrefix(((ITmaPredicateExpression)tmStack[tmHead - 2].value), ((TmaAnnotations)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 111:  // rhsPrefix ::= annotations ':'
				 tmLeft.value = new TmaRhsPrefix(((ITmaPredicateExpression)null), ((TmaAnnotations)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 112:  // rhsPrefix ::= predicate ':'
				 tmLeft.value = new TmaRhsPrefix(((ITmaPredicateExpression)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 113:  // rhsSuffix ::= '%' Lprio symref_noargs
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LPRIO, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 114:  // rhsSuffix ::= '%' Lshift symref_noargs
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LSHIFT, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 115:  // ruleAction ::= '{~' identifier scon '}'
				 tmLeft.value = new TmaRuleAction(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 116:  // ruleAction ::= '{~' identifier '}'
				 tmLeft.value = new TmaRuleAction(((TmaIdentifier)tmStack[tmHead - 1].value), ((String)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 117:  // rhsParts ::= rhsPart
				 tmLeft.value = new ArrayList<ITmaRhsPart>(); ((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 118:  // rhsParts ::= rhsParts rhsPart
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 119:  // rhsParts ::= rhsParts syntax_problem
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 124:  // rhsAnnotated ::= annotations rhsAssignment
				 tmLeft.value = new TmaRhsAnnotated(((TmaAnnotations)tmStack[tmHead - 1].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 126:  // rhsAssignment ::= identifier '=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), false, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 127:  // rhsAssignment ::= identifier '+=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), true, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 129:  // rhsOptional ::= rhsCast '?'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_OPTIONAL, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 131:  // rhsCast ::= rhsClass Las symref
				 tmLeft.value = new TmaRhsCast(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 132:  // rhsCast ::= rhsClass Las literal
				 tmLeft.value = new TmaRhsAsLiteral(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 133:  // rhsUnordered ::= rhsPart '&' rhsPart
				 tmLeft.value = new TmaRhsUnordered(((ITmaRhsPart)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 135:  // rhsClass ::= identifier ':' rhsPrimary
				 tmLeft.value = new TmaRhsClass(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 136:  // rhsPrimary ::= symref
				 tmLeft.value = new TmaRhsSymbol(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 137:  // rhsPrimary ::= '(' rules ')'
				 tmLeft.value = new TmaRhsNested(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 138:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), true, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 139:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), false, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 140:  // rhsPrimary ::= rhsPrimary '*'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ZEROORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 141:  // rhsPrimary ::= rhsPrimary '+'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ONEORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 142:  // rhsPrimary ::= '$' '(' rules ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 143:  // rhsPrimary ::= Lset '(' setExpression ')'
				 tmLeft.value = new TmaRhsSet(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 144:  // setPrimary ::= ID symref
				 tmLeft.value = new TmaSetSymbol(((String)tmStack[tmHead - 1].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 145:  // setPrimary ::= symref
				 tmLeft.value = new TmaSetSymbol(((String)null), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 146:  // setPrimary ::= '(' setExpression ')'
				 tmLeft.value = new TmaSetCompound(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 147:  // setPrimary ::= '~' setPrimary
				 tmLeft.value = new TmaSetComplement(((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 149:  // setExpression ::= setExpression '|' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.OR, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 150:  // setExpression ::= setExpression '&' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.AMPERSAND, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 151:  // annotations ::= annotation_list
				 tmLeft.value = new TmaAnnotations(((List<TmaAnnotation>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 152:  // annotation_list ::= annotation
				 tmLeft.value = new ArrayList<TmaAnnotation>(); ((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 153:  // annotation_list ::= annotation_list annotation
				 ((List<TmaAnnotation>)tmStack[tmHead - 1].value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 154:  // annotation ::= '@' ID '{' expression '}'
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead - 3].value), ((ITmaExpression)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 155:  // annotation ::= '@' ID
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead].value), ((ITmaExpression)null), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 156:  // annotation ::= '@' syntax_problem
				 tmLeft.value = new TmaAnnotation(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 157:  // nonterm_params ::= '<' param_ref_list_Comma_separated '>'
				 tmLeft.value = new TmaNontermParams(((List<TmaIdentifier>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 159:  // symref_args ::= '<' param_value_list_Comma_separated '>'
				 tmLeft.value = new TmaSymrefArgs(((List<ITmaParamValue>)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 160:  // symref_args ::= '<' keyval_arg_list_Comma_separated_opt '>'
				 tmLeft.value = new TmaSymrefArgs(null, ((List<TmaKeyvalArg>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 161:  // keyval_arg ::= param_ref ':' param_value
				 tmLeft.value = new TmaKeyvalArg(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaParamValue)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 162:  // param_type ::= Lint
				 tmLeft.value = TmaParamType.LINT; 
				break;
			case 163:  // param_type ::= Lstring
				 tmLeft.value = TmaParamType.LSTRING; 
				break;
			case 164:  // param_type ::= Lbool
				 tmLeft.value = TmaParamType.LBOOL; 
				break;
			case 165:  // param_type ::= Lsymbol
				 tmLeft.value = TmaParamType.LSYMBOL; 
				break;
			case 168:  // predicate_primary ::= '!' param_ref
				 tmLeft.value = new TmaBoolPredicate(true, ((TmaIdentifier)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 169:  // predicate_primary ::= param_ref
				 tmLeft.value = new TmaBoolPredicate(false, ((TmaIdentifier)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 170:  // predicate_primary ::= param_ref '==' literal
				 tmLeft.value = new TmaComparePredicate(((TmaIdentifier)tmStack[tmHead - 2].value), TmaComparePredicate.TmaKindKind.EQUAL_EQUAL, ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 171:  // predicate_primary ::= param_ref '!=' literal
				 tmLeft.value = new TmaComparePredicate(((TmaIdentifier)tmStack[tmHead - 2].value), TmaComparePredicate.TmaKindKind.EXCLAMATION_EQUAL, ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 173:  // predicate_expression ::= predicate_expression '&&' predicate_expression
				 tmLeft.value = new TmaPredicateBinary(((ITmaPredicateExpression)tmStack[tmHead - 2].value), TmaPredicateBinary.TmaKindKind.AMPERSAND_AMPERSAND, ((ITmaPredicateExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 174:  // predicate_expression ::= predicate_expression '||' predicate_expression
				 tmLeft.value = new TmaPredicateBinary(((ITmaPredicateExpression)tmStack[tmHead - 2].value), TmaPredicateBinary.TmaKindKind.OR_OR, ((ITmaPredicateExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 177:  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
				 tmLeft.value = new TmaInstance(((TmaName)tmStack[tmHead - 3].value), ((List<TmaMapEntry>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 178:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				 tmLeft.value = new TmaArray(((List<ITmaExpression>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 180:  // map_entry ::= ID ':' expression
				 tmLeft.value = new TmaMapEntry(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 181:  // literal ::= scon
				 tmLeft.value = new TmaLiteral(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 182:  // literal ::= icon
				 tmLeft.value = new TmaLiteral(((Integer)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 183:  // literal ::= Ltrue
				 tmLeft.value = new TmaLiteral(Boolean.TRUE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 184:  // literal ::= Lfalse
				 tmLeft.value = new TmaLiteral(Boolean.FALSE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 185:  // expression_list ::= expression
				 tmLeft.value = new ArrayList(); ((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 186:  // expression_list ::= expression_list ',' expression
				 ((List<ITmaExpression>)tmStack[tmHead - 2].value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 187:  // name ::= qualified_id
				 tmLeft.value = new TmaName(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 189:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 190:  // command ::= code
				 tmLeft.value = new TmaCommand(source, tmLeft.line, tmStack[tmHead].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 191:  // syntax_problem ::= error
				 tmLeft.value = new TmaSyntaxProblem(source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 214:  // param_ref_list_Comma_separated ::= param_ref_list_Comma_separated ',' param_ref
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 215:  // param_ref_list_Comma_separated ::= param_ref
				tmLeft.value = new ArrayList();
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 216:  // param_value_list_Comma_separated ::= param_value_list_Comma_separated ',' param_value
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 217:  // param_value_list_Comma_separated ::= param_value
				tmLeft.value = new ArrayList();
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 218:  // keyval_arg_list_Comma_separated ::= keyval_arg_list_Comma_separated ',' keyval_arg
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 219:  // keyval_arg_list_Comma_separated ::= keyval_arg
				tmLeft.value = new ArrayList();
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 222:  // map_entry_list_Comma_separated ::= map_entry_list_Comma_separated ',' map_entry
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 223:  // map_entry_list_Comma_separated ::= map_entry
				tmLeft.value = new ArrayList();
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 226:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 227:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 387);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 388);
	}
}
