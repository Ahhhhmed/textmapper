/**
 * Copyright 2002-2015 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.Span;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(416,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\321\0\322\0\uffbd\uffff\331\0\uff73" +
		"\uffff\323\0\324\0\uffff\uffff\304\0\303\0\307\0\326\0\uff0b\uffff\uff03\uffff\ufef7" +
		"\uffff\311\0\ufeb7\uffff\uffff\uffff\ufeb1\uffff\20\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\332\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\0\0\uffff\uffff\306" +
		"\0\uffff\uffff\uffff\uffff\17\0\256\0\ufe71\uffff\ufe69\uffff\uffff\uffff\260\0\ufe63" +
		"\uffff\uffff\uffff\uffff\uffff\7\0\327\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\ufe27\uffff\4\0\16\0\310\0\265\0\266\0\uffff\uffff\uffff\uffff\263\0\uffff" +
		"\uffff\ufe21\uffff\uffff\uffff\315\0\ufe1b\uffff\uffff\uffff\14\0\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\2\0\22\0\273\0\264\0\272\0\257\0\uffff\uffff\uffff" +
		"\uffff\305\0\uffff\uffff\12\0\13\0\uffff\uffff\uffff\uffff\ufe15\uffff\ufe0d\uffff" +
		"\ufe07\uffff\45\0\51\0\52\0\53\0\50\0\15\0\uffff\uffff\320\0\314\0\6\0\uffff\uffff" +
		"\ufdc3\uffff\uffff\uffff\67\0\uffff\uffff\uffff\uffff\334\0\uffff\uffff\46\0\47\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufdbb\uffff\74\0\77\0\100\0\101\0\ufd79\uffff" +
		"\uffff\uffff\243\0\uffff\uffff\uffff\uffff\uffff\uffff\70\0\44\0\54\0\uffff\uffff" +
		"\35\0\36\0\31\0\32\0\uffff\uffff\27\0\30\0\34\0\37\0\41\0\40\0\33\0\uffff\uffff\26" +
		"\0\ufd35\uffff\uffff\uffff\121\0\122\0\123\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\271\0\270\0\uffff\uffff\uffff\uffff\ufcef\uffff\247\0\ufca9\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\ufc59\uffff\ufc1b\uffff\116\0\117\0\uffff\uffff\uffff\uffff\75" +
		"\0\76\0\242\0\uffff\uffff\uffff\uffff\71\0\72\0\66\0\23\0\43\0\uffff\uffff\24\0\25" +
		"\0\ufbdd\uffff\ufb91\uffff\uffff\uffff\136\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\141\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufb89" +
		"\uffff\uffff\uffff\uffff\uffff\ufb39\uffff\uffff\uffff\330\0\uffff\uffff\222\0\ufad5" +
		"\uffff\uffff\uffff\146\0\ufacd\uffff\ufa7f\uffff\352\0\ufa31\uffff\ufa27\uffff\uf9d7" +
		"\uffff\202\0\205\0\207\0\uf983\uffff\203\0\uf92d\uffff\uf8d5\uffff\231\0\uffff\uffff" +
		"\204\0\170\0\167\0\uf879\uffff\uffff\uffff\251\0\253\0\uf83b\uffff\112\0\346\0\uf7fd" +
		"\uffff\uf7f7\uffff\uf7f1\uffff\uf7a1\uffff\uffff\uffff\uf751\uffff\uffff\uffff\uffff" +
		"\uffff\65\0\42\0\uffff\uffff\336\0\uf701\uffff\137\0\131\0\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\130\0\142\0\uffff\uffff\127\0\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uf6b7\uffff\300\0\uffff\uffff\uffff\uffff\uf6ab\uffff" +
		"\uffff\uffff\uf65b\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uf60b\uffff" +
		"\111\0\uf5b9\uffff\uf56b\uffff\uf561\uffff\157\0\uf511\uffff\uf507\uffff\uffff\uffff" +
		"\163\0\166\0\uf4b7\uffff\uf4ad\uffff\201\0\165\0\uffff\uffff\213\0\uffff\uffff\226" +
		"\0\227\0\172\0\206\0\uf459\uffff\uffff\uffff\252\0\uf451\uffff\uffff\uffff\350\0" +
		"\114\0\115\0\uffff\uffff\uffff\uffff\uf44b\uffff\uffff\uffff\uf3fb\uffff\uf3ab\uffff" +
		"\uffff\uffff\57\0\340\0\uf35b\uffff\135\0\uffff\uffff\132\0\133\0\uffff\uffff\125" +
		"\0\uffff\uffff\245\0\173\0\174\0\274\0\uffff\uffff\uffff\uffff\uffff\uffff\171\0" +
		"\uffff\uffff\223\0\uffff\uffff\uffff\uffff\176\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uf313\uffff\234\0\237\0\uffff\uffff\uffff\uffff\210\0\uf2d1\uffff\211\0\145\0\uf275" +
		"\uffff\uf26b\uffff\153\0\156\0\uf21b\uffff\155\0\162\0\uf211\uffff\161\0\164\0\uf207" +
		"\uffff\215\0\216\0\uffff\uffff\250\0\113\0\143\0\uf1b3\uffff\110\0\107\0\uffff\uffff" +
		"\105\0\uffff\uffff\uffff\uffff\uf1ad\uffff\uffff\uffff\342\0\uf15d\uffff\134\0\uffff" +
		"\uffff\126\0\276\0\277\0\uf117\uffff\uf10f\uffff\uffff\uffff\175\0\230\0\uffff\uffff" +
		"\236\0\233\0\uffff\uffff\232\0\uffff\uffff\152\0\uf107\uffff\151\0\154\0\160\0\254" +
		"\0\uffff\uffff\106\0\104\0\103\0\uffff\uffff\61\0\62\0\63\0\64\0\uffff\uffff\344" +
		"\0\55\0\124\0\uffff\uffff\235\0\uf0fd\uffff\uf0f5\uffff\150\0\144\0\102\0\60\0\225" +
		"\0\224\0\uffff\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(3856,
		"\11\1\46\1\47\1\55\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1" +
		"\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111" +
		"\1\uffff\ufffe\2\uffff\3\uffff\24\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\50\uffff\51\uffff" +
		"\52\uffff\25\313\uffff\ufffe\32\uffff\0\21\7\21\11\21\12\21\20\21\22\21\25\21\26" +
		"\21\27\21\30\21\31\21\34\21\35\21\37\21\42\21\44\21\45\21\46\21\47\21\53\21\54\21" +
		"\56\21\57\21\60\21\61\21\62\21\63\21\64\21\65\21\66\21\67\21\70\21\71\21\72\21\73" +
		"\21\74\21\75\21\76\21\77\21\100\21\101\21\102\21\103\21\104\21\105\21\106\21\107" +
		"\21\110\21\111\21\113\21\uffff\ufffe\26\uffff\107\uffff\20\333\uffff\ufffe\21\uffff" +
		"\20\325\26\325\27\325\107\325\uffff\ufffe\55\uffff\11\5\46\5\47\5\57\5\60\5\61\5" +
		"\62\5\63\5\64\5\65\5\66\5\67\5\70\5\71\5\72\5\73\5\74\5\75\5\76\5\77\5\100\5\101" +
		"\5\102\5\103\5\104\5\105\5\106\5\107\5\110\5\111\5\uffff\ufffe\22\uffff\25\312\uffff" +
		"\ufffe\35\uffff\41\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\33\262\uffff\ufffe\23\uffff\22\267\33" +
		"\267\uffff\ufffe\22\uffff\33\261\uffff\ufffe\47\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\27\317\uffff\ufffe\11" +
		"\uffff\0\3\uffff\ufffe\22\uffff\27\316\uffff\ufffe\107\uffff\20\333\uffff\ufffe\14" +
		"\uffff\23\17\26\17\uffff\ufffe\26\uffff\23\335\uffff\ufffe\7\uffff\24\uffff\46\uffff" +
		"\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\0\10\11\10\uffff\ufffe\17\uffff\22\73\25\73\uffff\ufffe\7\uffff" +
		"\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104" +
		"\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\0\11\uffff\ufffe\45\uffff\23\244\26\244\44\244" +
		"\47\244\56\244\57\244\60\244\61\244\62\244\63\244\64\244\65\244\66\244\67\244\70" +
		"\244\71\244\72\244\73\244\74\244\75\244\76\244\77\244\100\244\101\244\102\244\103" +
		"\244\104\244\105\244\106\244\107\244\110\244\111\244\uffff\ufffe\1\uffff\0\56\7\56" +
		"\11\56\24\56\46\56\47\56\57\56\60\56\61\56\62\56\63\56\64\56\65\56\66\56\67\56\70" +
		"\56\71\56\72\56\73\56\74\56\75\56\76\56\77\56\100\56\101\56\102\56\103\56\104\56" +
		"\105\56\106\56\107\56\110\56\111\56\uffff\ufffe\114\uffff\23\246\26\246\44\246\45" +
		"\246\47\246\56\246\57\246\60\246\61\246\62\246\63\246\64\246\65\246\66\246\67\246" +
		"\70\246\71\246\72\246\73\246\74\246\75\246\76\246\77\246\100\246\101\246\102\246" +
		"\103\246\104\246\105\246\106\246\107\246\110\246\111\246\uffff\ufffe\7\uffff\24\uffff" +
		"\26\uffff\30\uffff\44\uffff\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12" +
		"\353\20\353\uffff\ufffe\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\10\347\23\347\uffff\ufffe\47\uffff\111" +
		"\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101" +
		"\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\10\347\23\347\uffff\ufffe\17\uffff\0\337\3\337\7\337\11\337\24\337\26\337" +
		"\46\337\47\337\57\337\60\337\61\337\62\337\63\337\64\337\65\337\66\337\67\337\70" +
		"\337\71\337\72\337\73\337\74\337\75\337\76\337\77\337\100\337\101\337\102\337\103" +
		"\337\104\337\105\337\106\337\107\337\110\337\111\337\113\337\uffff\ufffe\77\uffff" +
		"\20\140\22\140\uffff\ufffe\7\uffff\24\uffff\26\uffff\30\uffff\44\uffff\45\uffff\46" +
		"\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\113\uffff\12\353\27\353\uffff\ufffe\32\uffff\14\17\23" +
		"\17\36\17\7\21\12\21\20\21\26\21\27\21\30\21\34\21\35\21\37\21\42\21\44\21\45\21" +
		"\46\21\47\21\53\21\54\21\56\21\57\21\60\21\61\21\62\21\63\21\64\21\65\21\66\21\67" +
		"\21\70\21\71\21\72\21\73\21\74\21\75\21\76\21\77\21\100\21\101\21\102\21\103\21\104" +
		"\21\105\21\106\21\107\21\110\21\111\21\113\21\uffff\ufffe\12\uffff\20\147\27\147" +
		"\uffff\ufffe\7\uffff\26\uffff\30\uffff\44\uffff\45\uffff\47\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\113\uffff\12\353\20\353\27\353\uffff\ufffe\7\uffff\26\uffff\30\uffff\44\uffff\45" +
		"\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20\353\27\353\uffff\ufffe\7\uffff\12" +
		"\353\20\353\27\353\uffff\ufffe\7\uffff\26\uffff\30\uffff\44\uffff\45\uffff\46\uffff" +
		"\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20\353\27\353\uffff\ufffe\42\uffff\7" +
		"\177\12\177\20\177\26\177\27\177\30\177\44\177\45\177\46\177\47\177\53\177\56\177" +
		"\57\177\60\177\61\177\62\177\63\177\64\177\65\177\66\177\67\177\70\177\71\177\72" +
		"\177\73\177\74\177\75\177\76\177\77\177\100\177\101\177\102\177\103\177\104\177\105" +
		"\177\106\177\107\177\110\177\111\177\113\177\uffff\ufffe\37\uffff\7\212\12\212\20" +
		"\212\26\212\27\212\30\212\42\212\44\212\45\212\46\212\47\212\53\212\56\212\57\212" +
		"\60\212\61\212\62\212\63\212\64\212\65\212\66\212\67\212\70\212\71\212\72\212\73" +
		"\212\74\212\75\212\76\212\77\212\100\212\101\212\102\212\103\212\104\212\105\212" +
		"\106\212\107\212\110\212\111\212\113\212\uffff\ufffe\54\uffff\7\214\12\214\20\214" +
		"\26\214\27\214\30\214\37\214\42\214\44\214\45\214\46\214\47\214\53\214\56\214\57" +
		"\214\60\214\61\214\62\214\63\214\64\214\65\214\66\214\67\214\70\214\71\214\72\214" +
		"\73\214\74\214\75\214\76\214\77\214\100\214\101\214\102\214\103\214\104\214\105\214" +
		"\106\214\107\214\110\214\111\214\113\214\uffff\ufffe\34\uffff\35\uffff\7\220\12\220" +
		"\20\220\26\220\27\220\30\220\37\220\42\220\44\220\45\220\46\220\47\220\53\220\54" +
		"\220\56\220\57\220\60\220\61\220\62\220\63\220\64\220\65\220\66\220\67\220\70\220" +
		"\71\220\72\220\73\220\74\220\75\220\76\220\77\220\100\220\101\220\102\220\103\220" +
		"\104\220\105\220\106\220\107\220\110\220\111\220\113\220\uffff\ufffe\47\uffff\111" +
		"\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101" +
		"\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\22\17\33\17\uffff\ufffe\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\10\347\23\347\uffff\ufffe\23\uffff" +
		"\10\351\uffff\ufffe\23\uffff\10\351\uffff\ufffe\7\uffff\24\uffff\26\uffff\30\uffff" +
		"\44\uffff\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20\353\uffff" +
		"\ufffe\7\uffff\24\uffff\26\uffff\30\uffff\44\uffff\45\uffff\46\uffff\47\uffff\111" +
		"\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101" +
		"\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\113\uffff\12\353\20\353\uffff\ufffe\7\uffff\24\uffff\26\uffff\30" +
		"\uffff\44\uffff\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20" +
		"\353\uffff\ufffe\3\uffff\0\341\7\341\11\341\24\341\26\341\46\341\47\341\57\341\60" +
		"\341\61\341\62\341\63\341\64\341\65\341\66\341\67\341\70\341\71\341\72\341\73\341" +
		"\74\341\75\341\76\341\77\341\100\341\101\341\102\341\103\341\104\341\105\341\106" +
		"\341\107\341\110\341\111\341\113\341\uffff\ufffe\15\uffff\16\uffff\13\275\25\275" +
		"\43\275\uffff\ufffe\7\uffff\26\uffff\30\uffff\44\uffff\45\uffff\46\uffff\47\uffff" +
		"\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\53\uffff\56\uffff\113\uffff\12\353\27\353\uffff\ufffe\7\uffff\24\uffff" +
		"\26\uffff\30\uffff\44\uffff\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12" +
		"\353\27\353\uffff\ufffe\7\uffff\24\uffff\26\uffff\30\uffff\44\uffff\45\uffff\46\uffff" +
		"\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20\353\27\353\uffff\ufffe\7\uffff\26" +
		"\uffff\30\uffff\44\uffff\45\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20" +
		"\353\27\353\uffff\ufffe\7\uffff\12\353\20\353\27\353\uffff\ufffe\7\uffff\26\uffff" +
		"\30\uffff\44\uffff\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20" +
		"\353\27\353\uffff\ufffe\7\uffff\12\353\20\353\27\353\uffff\ufffe\7\uffff\26\uffff" +
		"\30\uffff\44\uffff\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20" +
		"\353\27\353\uffff\ufffe\7\uffff\12\353\20\353\27\353\uffff\ufffe\42\uffff\7\200\12" +
		"\200\20\200\26\200\27\200\30\200\44\200\45\200\46\200\47\200\53\200\56\200\57\200" +
		"\60\200\61\200\62\200\63\200\64\200\65\200\66\200\67\200\70\200\71\200\72\200\73" +
		"\200\74\200\75\200\76\200\77\200\100\200\101\200\102\200\103\200\104\200\105\200" +
		"\106\200\107\200\110\200\111\200\113\200\uffff\ufffe\14\uffff\22\255\33\255\uffff" +
		"\ufffe\23\uffff\10\351\uffff\ufffe\7\uffff\24\uffff\26\uffff\30\uffff\44\uffff\45" +
		"\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20\353\uffff\ufffe\7\uffff" +
		"\24\uffff\26\uffff\30\uffff\44\uffff\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\113\uffff\12\353\20\353\uffff\ufffe\7\uffff\24\uffff\26\uffff\30\uffff\44\uffff" +
		"\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104" +
		"\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20\353\uffff\ufffe" +
		"\26\uffff\0\343\7\343\11\343\24\343\46\343\47\343\57\343\60\343\61\343\62\343\63" +
		"\343\64\343\65\343\66\343\67\343\70\343\71\343\72\343\73\343\74\343\75\343\76\343" +
		"\77\343\100\343\101\343\102\343\103\343\104\343\105\343\106\343\107\343\110\343\111" +
		"\343\113\343\uffff\ufffe\32\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\12\21\27\21\42\21\uffff\ufffe" +
		"\34\uffff\35\uffff\7\221\12\221\20\221\26\221\27\221\30\221\37\221\42\221\44\221" +
		"\45\221\46\221\47\221\53\221\54\221\56\221\57\221\60\221\61\221\62\221\63\221\64" +
		"\221\65\221\66\221\67\221\70\221\71\221\72\221\73\221\74\221\75\221\76\221\77\221" +
		"\100\221\101\221\102\221\103\221\104\221\105\221\106\221\107\221\110\221\111\221" +
		"\113\221\uffff\ufffe\7\uffff\12\353\20\353\27\353\uffff\ufffe\7\uffff\26\uffff\30" +
		"\uffff\44\uffff\45\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20" +
		"\353\27\353\uffff\ufffe\7\uffff\12\353\20\353\27\353\uffff\ufffe\7\uffff\12\353\20" +
		"\353\27\353\uffff\ufffe\42\217\7\217\12\217\20\217\26\217\27\217\30\217\44\217\45" +
		"\217\46\217\47\217\53\217\56\217\57\217\60\217\61\217\62\217\63\217\64\217\65\217" +
		"\66\217\67\217\70\217\71\217\72\217\73\217\74\217\75\217\76\217\77\217\100\217\101" +
		"\217\102\217\103\217\104\217\105\217\106\217\107\217\110\217\111\217\113\217\uffff" +
		"\ufffe\22\uffff\10\120\uffff\ufffe\7\uffff\24\uffff\26\uffff\30\uffff\44\uffff\45" +
		"\uffff\46\uffff\47\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\113\uffff\12\353\20\353\uffff\ufffe\113\uffff" +
		"\0\345\7\345\11\345\24\345\46\345\47\345\57\345\60\345\61\345\62\345\63\345\64\345" +
		"\65\345\66\345\67\345\70\345\71\345\72\345\73\345\74\345\75\345\76\345\77\345\100" +
		"\345\101\345\102\345\103\345\104\345\105\345\106\345\107\345\110\345\111\345\uffff" +
		"\ufffe\13\302\43\uffff\25\302\uffff\ufffe\13\301\43\301\25\301\uffff\ufffe\7\uffff" +
		"\12\353\20\353\27\353\uffff\ufffe\12\240\42\uffff\27\240\uffff\ufffe\12\241\42\241" +
		"\27\241\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(172,
		"\0\2\4\25\44\44\44\44\103\113\115\122\125\134\135\136\140\166\173\206\217\246\255" +
		"\332\347\372\375\u0106\u010c\u0113\u0118\u0119\u011e\u0121\u0128\u0133\u0136\u014f" +
		"\u016a\u0184\u01e3\u01f0\u01fd\u0203\u0204\u0205\u0206\u0222\u0282\u02e5\u0345\u03a5" +
		"\u0408\u0468\u04c8\u0528\u0588\u05e8\u0648\u06a8\u0708\u0768\u07c9\u082a\u088a\u08ea" +
		"\u094f\u09b2\u0a15\u0a75\u0ad5\u0b35\u0b96\u0bf6\u0c56\u0c56\u0c6b\u0c6c\u0c6d\u0c6e" +
		"\u0c6f\u0c70\u0c71\u0c72\u0c74\u0c75\u0c76\u0ca6\u0ccc\u0cdd\u0ce2\u0ce4\u0ce8\u0cea" +
		"\u0ceb\u0ced\u0cef\u0cf1\u0cf2\u0cf3\u0cf4\u0cf6\u0cf7\u0cf9\u0cfb\u0cfd\u0cfe\u0d00" +
		"\u0d02\u0d06\u0d09\u0d0a\u0d0c\u0d0e\u0d0f\u0d11\u0d13\u0d14\u0d1e\u0d28\u0d33\u0d3e" +
		"\u0d4a\u0d65\u0d78\u0d86\u0d9a\u0dae\u0dc4\u0ddc\u0df4\u0e08\u0e20\u0e39\u0e55\u0e5a" +
		"\u0e5e\u0e74\u0e8a\u0ea1\u0ea2\u0ea4\u0ea6\u0eb0\u0eb1\u0eb2\u0eb5\u0eb7\u0eb9\u0ebd" +
		"\u0ec0\u0ec3\u0ec9\u0eca\u0ecb\u0ecc\u0ecd\u0ecf\u0edc\u0edf\u0ee2\u0ef7\u0f11\u0f13" +
		"\u0f14\u0f15\u0f16\u0f17\u0f18\u0f1b\u0f1e\u0f39");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(3897,
		"\u019c\u019d\147\215\1\6\36\41\61\72\106\116\150\275\372\u0105\u011c\u0137\u013e" +
		"\u013f\u0160\1\6\41\55\72\106\116\275\360\372\u011c\u0137\u013e\u013f\u0160\105\130" +
		"\137\160\233\300\313\314\316\317\346\347\351\u0104\u0106\u010b\u010d\u010e\u010f" +
		"\u0111\u0112\u0116\u012b\u012d\u012e\u0153\u0154\u0157\u015a\u016b\u0180\157\243" +
		"\244\250\350\352\353\u012f\37\64\310\u014d\u0179\u0194\u0195\u0102\u0174\u0175\63" +
		"\126\266\274\306\367\u0121\u0100\u0100\144\262\34\60\104\121\251\264\273\274\311" +
		"\365\366\367\u0129\u012a\u012c\u0134\u0139\u0167\u0169\u016a\u0170\u0189\21\150\203" +
		"\213\257\24\50\76\145\150\203\213\257\264\336\u0164\47\75\152\306\331\344\345\u0124" +
		"\u014e\1\6\41\105\106\116\130\150\203\213\233\257\275\300\346\347\351\u0106\u010b" +
		"\u012b\u012d\u012e\u016b\25\145\150\203\213\257\u0102\20\30\32\127\150\157\203\213" +
		"\233\244\250\257\300\302\304\313\314\317\331\346\347\351\353\u0104\u0106\u0107\u0108" +
		"\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u012b\u012d\u012e\u0132\u0148\u0149" +
		"\u0154\u016b\u017c\u017e\54\77\102\176\203\213\257\u0103\u0147\u014d\u0176\u0179" +
		"\u018e\233\300\313\314\317\346\347\351\u0104\u0106\u010b\u010d\u010f\u0112\u012b" +
		"\u012d\u012e\u0154\u016b\374\u0105\u0145\10\150\157\203\213\250\257\303\u014a\51" +
		"\150\203\213\257\336\150\203\213\257\327\u0150\u0192\26\73\327\u0150\u0192\306\150" +
		"\203\213\257\324\277\u0140\u0142\26\73\u0107\u0148\u0149\u017c\u017e\150\203\213" +
		"\257\320\u0117\u014d\u015d\u0179\u0194\u0195\u0102\u0174\u0175\233\300\313\314\317" +
		"\331\346\347\351\u0104\u0106\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a" +
		"\u012b\u012d\u012e\u0154\u016b\137\150\160\165\203\213\233\257\300\313\314\317\346" +
		"\347\351\u0104\u0106\u010b\u010d\u010f\u0112\u011a\u012b\u012d\u012e\u0154\u016b" +
		"\1\6\37\41\106\116\130\156\160\233\275\300\317\346\347\351\u0104\u0106\u010b\u010f" +
		"\u0112\u012b\u012d\u012e\u0154\u016b\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\156\160\166\170\171\172\203\213\216\222\227\230" +
		"\233\234\236\237\240\257\271\273\275\277\300\301\313\314\317\331\335\341\346\347" +
		"\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f" +
		"\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148" +
		"\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\6\41\72\106\116\275\372" +
		"\u011c\u0137\u013e\u013f\u0160\1\6\41\72\106\116\275\372\u011c\u0137\u013e\u013f" +
		"\u0160\1\6\41\106\116\275\u0104\326\22\233\267\270\300\313\314\317\331\346\347\351" +
		"\364\u0104\u0106\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u012b\u012d" +
		"\u012e\u0154\u016b\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\124" +
		"\125\130\137\143\150\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236" +
		"\237\240\257\271\273\275\277\300\301\313\314\317\331\335\341\346\347\351\356\363" +
		"\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113" +
		"\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72" +
		"\73\105\106\116\117\125\130\137\143\150\156\157\160\166\170\171\172\203\213\216\222" +
		"\227\230\233\234\236\237\240\244\250\257\271\273\275\277\300\301\313\314\317\331" +
		"\335\341\346\347\351\353\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13" +
		"\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156\160\166" +
		"\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\276\277" +
		"\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106" +
		"\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b" +
		"\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c" +
		"\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137" +
		"\143\150\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257" +
		"\271\273\275\276\277\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375" +
		"\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a" +
		"\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154" +
		"\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\156\157\160\166\170\171\172\203\213\216\222\227" +
		"\230\233\234\236\237\240\244\250\257\271\273\275\277\300\301\313\314\317\331\335" +
		"\341\346\347\351\353\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13" +
		"\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\155\156\160" +
		"\166\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\277" +
		"\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106" +
		"\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b" +
		"\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c" +
		"\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137" +
		"\143\150\155\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236\237\240" +
		"\257\271\273\275\277\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375" +
		"\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a" +
		"\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154" +
		"\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\155\156\160\166\170\171\172\203\213\216\222\227" +
		"\230\233\234\236\237\240\257\271\273\275\277\300\301\313\314\317\331\335\341\346" +
		"\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d" +
		"\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144" +
		"\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36" +
		"\37\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\155\156\160\166\170\171" +
		"\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\277\300\301\313" +
		"\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108" +
		"\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e" +
		"\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185" +
		"\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\155" +
		"\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273" +
		"\275\277\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104" +
		"\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125" +
		"\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176" +
		"\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125" +
		"\130\137\143\150\155\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236" +
		"\237\240\257\271\273\275\277\300\301\313\314\317\331\335\341\346\347\351\356\363" +
		"\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113" +
		"\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72" +
		"\73\105\106\116\117\125\130\137\143\150\156\160\166\170\171\172\203\213\216\222\223" +
		"\227\230\233\234\236\237\240\257\271\273\275\277\300\301\313\314\317\331\335\341" +
		"\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d" +
		"\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144" +
		"\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36" +
		"\37\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156\160\166\170\171\172" +
		"\203\213\216\222\223\227\230\233\234\236\237\240\257\271\273\275\277\300\301\313" +
		"\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108" +
		"\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e" +
		"\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185" +
		"\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\155" +
		"\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273" +
		"\275\277\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104" +
		"\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125" +
		"\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176" +
		"\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125" +
		"\130\137\143\150\155\156\160\166\170\171\172\203\213\216\222\224\227\230\233\234" +
		"\236\237\240\257\271\273\275\277\300\301\313\314\317\331\335\341\346\347\351\356" +
		"\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112" +
		"\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149" +
		"\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44" +
		"\53\72\73\105\106\116\117\125\130\137\143\150\155\156\160\166\170\171\172\203\213" +
		"\216\222\224\227\230\233\234\236\237\240\257\271\273\275\277\300\301\313\314\317" +
		"\331\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13" +
		"\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156\160\166" +
		"\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\263\271\273\275\277" +
		"\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106" +
		"\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b" +
		"\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c" +
		"\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137" +
		"\143\150\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257" +
		"\271\273\275\277\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375\376" +
		"\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c" +
		"\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160" +
		"\u016b\u016c\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\156\157\160\166\170\171\172\203\213\216\222\227" +
		"\230\233\234\235\236\237\240\244\250\257\271\273\275\277\300\301\313\314\317\331" +
		"\335\341\346\347\351\353\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u016c\u0176\u017c\u017e\u0185\1" +
		"\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156" +
		"\157\160\166\170\171\172\203\213\216\222\227\230\233\234\236\237\240\244\250\257" +
		"\271\273\275\277\300\301\313\314\317\331\335\341\346\347\351\353\356\363\372\375" +
		"\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a" +
		"\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154" +
		"\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105" +
		"\106\116\117\125\130\137\143\150\156\157\160\166\170\171\172\203\213\216\222\227" +
		"\230\233\234\236\237\240\244\250\257\271\273\275\277\300\301\313\314\317\331\335" +
		"\341\346\347\351\353\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a" +
		"\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13" +
		"\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137\143\150\156\160\166" +
		"\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\277\300" +
		"\301\313\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107" +
		"\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d" +
		"\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u016c\u0176\u017c" +
		"\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\116\117\125\130\137" +
		"\143\150\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257" +
		"\271\273\275\277\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375\376" +
		"\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c" +
		"\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160" +
		"\u016b\u016c\u0176\u017c\u017e\u0185\0\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73" +
		"\105\106\116\117\125\130\137\143\150\156\160\166\170\171\172\203\213\216\222\227" +
		"\230\233\234\236\237\240\257\271\273\275\277\300\301\313\314\317\331\335\341\346" +
		"\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d" +
		"\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144" +
		"\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185\1\2\6\13\20\26\31\35" +
		"\36\37\41\43\44\53\72\73\101\105\106\116\117\125\130\137\143\150\156\160\166\170" +
		"\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273\275\277\300\301" +
		"\313\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104\u0106\u0107\u0108" +
		"\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125\u012b\u012d\u012e" +
		"\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176\u017c\u017e\u0185" +
		"\1\2\6\13\26\31\35\36\37\41\43\44\53\62\72\73\105\106\116\117\125\130\137\143\150" +
		"\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236\237\240\257\271\273" +
		"\275\277\300\301\313\314\317\331\335\341\346\347\351\356\363\372\375\376\377\u0104" +
		"\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u0122\u0125" +
		"\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a\u0154\u0160\u016b\u0176" +
		"\u017c\u017e\u0185\1\2\6\13\26\31\35\36\37\41\43\44\53\72\73\105\106\107\116\117" +
		"\125\130\137\143\150\156\160\166\170\171\172\203\213\216\222\227\230\233\234\236" +
		"\237\240\257\271\273\275\277\300\301\313\314\317\331\335\341\346\347\351\356\363" +
		"\372\375\376\377\u0104\u0106\u0107\u0108\u0109\u010a\u010b\u010d\u010f\u0112\u0113" +
		"\u011a\u011c\u0122\u0125\u012b\u012d\u012e\u0137\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0154\u0160\u016b\u0176\u017c\u017e\u0185\233\300\313\314\317\346\347\351\u0104" +
		"\u0106\u010b\u010d\u010f\u0112\u011a\u012b\u012d\u012e\u0154\u016b\u016e\231\3\0" +
		"\22\0\37\64\20\101\22\37\26\43\44\73\105\125\130\137\160\166\172\230\233\234\237" +
		"\240\271\277\300\301\313\314\317\331\335\341\346\347\351\377\u0104\u0106\u0108\u010a" +
		"\u010b\u010d\u010f\u0112\u0113\u011a\u0122\u012b\u012d\u012e\u0140\u0142\u0154\u016b" +
		"\1\6\41\106\116\233\275\300\313\314\317\331\346\347\351\u0104\u0106\u0107\u0108\u0109" +
		"\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u011c\u012b\u012d\u012e\u0148\u0149\u014a" +
		"\u0154\u016b\u017c\u017e\72\143\170\216\227\236\273\363\372\375\376\u0125\u0137\u0144" +
		"\u0160\u0176\u0185\127\157\244\250\353\150\203\150\203\213\257\147\215\105\105\130" +
		"\105\130\105\130\262\u0132\u016c\105\130\125\105\130\171\356\125\172\137\137\160" +
		"\137\160\157\244\250\353\344\345\u0124\155\137\160\137\160\216\216\363\227\u0144" +
		"\u0125\233\300\346\347\351\u0106\u012b\u012d\u012e\u016b\233\300\346\347\351\u0106" +
		"\u012b\u012d\u012e\u016b\233\300\346\347\351\u0106\u010b\u012b\u012d\u012e\u016b" +
		"\233\300\346\347\351\u0106\u010b\u012b\u012d\u012e\u016b\233\300\313\346\347\351" +
		"\u0106\u010b\u012b\u012d\u012e\u016b\233\300\313\314\316\317\346\347\351\u0104\u0106" +
		"\u010b\u010d\u010e\u010f\u0111\u0112\u0116\u012b\u012d\u012e\u0153\u0154\u0157\u015a" +
		"\u016b\u0180\233\300\313\314\317\346\347\351\u0104\u0106\u010b\u010d\u010f\u0112" +
		"\u012b\u012d\u012e\u0154\u016b\233\300\313\314\346\347\351\u0106\u010b\u010d\u012b" +
		"\u012d\u012e\u016b\233\300\313\314\317\346\347\351\u0104\u0106\u010b\u010d\u010f" +
		"\u0112\u011a\u012b\u012d\u012e\u0154\u016b\233\300\313\314\317\346\347\351\u0104" +
		"\u0106\u010b\u010d\u010f\u0112\u011a\u012b\u012d\u012e\u0154\u016b\233\300\313\314" +
		"\317\331\346\347\351\u0104\u0106\u010b\u010d\u010f\u0112\u0113\u011a\u012b\u012d" +
		"\u012e\u0154\u016b\233\300\313\314\317\331\346\347\351\u0104\u0106\u0108\u010a\u010b" +
		"\u010d\u010f\u0112\u0113\u011a\u012b\u012d\u012e\u0154\u016b\233\300\313\314\317" +
		"\331\346\347\351\u0104\u0106\u0108\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u012b" +
		"\u012d\u012e\u0154\u016b\233\300\313\314\317\346\347\351\u0104\u0106\u010b\u010d" +
		"\u010f\u0112\u011a\u012b\u012d\u012e\u0154\u016b\233\300\313\314\317\331\346\347" +
		"\351\u0104\u0106\u0108\u010a\u010b\u010d\u010f\u0112\u0113\u011a\u012b\u012d\u012e" +
		"\u0154\u016b\233\300\313\314\317\331\346\347\351\u0104\u0106\u0108\u0109\u010a\u010b" +
		"\u010d\u010f\u0112\u0113\u011a\u012b\u012d\u012e\u0154\u016b\233\267\270\300\313" +
		"\314\317\331\346\347\351\364\u0104\u0106\u0108\u0109\u010a\u010b\u010d\u010f\u0112" +
		"\u0113\u011a\u012b\u012d\u012e\u0154\u016b\u0107\u0148\u0149\u017c\u017e\u0107\u0148" +
		"\u017c\u017e\137\160\233\300\313\314\317\346\347\351\u0104\u0106\u010b\u010d\u010f" +
		"\u0112\u011a\u012b\u012d\u012e\u0154\u016b\137\160\233\300\313\314\317\346\347\351" +
		"\u0104\u0106\u010b\u010d\u010f\u0112\u011a\u012b\u012d\u012e\u0154\u016b\137\160" +
		"\165\233\300\313\314\317\346\347\351\u0104\u0106\u010b\u010d\u010f\u0112\u011a\u012b" +
		"\u012d\u012e\u0154\u016b\234\157\250\234\u0122\26\43\44\73\234\277\377\u0122\u0140" +
		"\u0142\26\26\10\303\u014a\26\73\155\224\72\372\u0137\u0160\277\u0140\u0142\277\u0140" +
		"\u0142\1\6\41\106\116\275\6\6\53\53\53\117\1\6\41\72\106\116\275\372\u011c\u0137" +
		"\u013e\u013f\u0160\2\13\31\2\13\31\233\300\313\314\317\346\347\351\u0104\u0106\u010b" +
		"\u010d\u010f\u0112\u011a\u012b\u012d\u012e\u0154\u016b\u016e\1\6\37\41\106\116\130" +
		"\156\160\233\275\300\317\346\347\351\u0104\u0106\u010b\u010f\u0112\u012b\u012d\u012e" +
		"\u0154\u016b\20\101\127\262\360\u0132\u016e\237\240\341\344\345\u0124\233\300\313" +
		"\314\316\317\346\347\351\u0104\u0106\u010b\u010d\u010e\u010f\u0111\u0112\u0116\u012b" +
		"\u012d\u012e\u0153\u0154\u0157\u015a\u016b\u0180");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(3897,
		"\u019e\u019f\174\174\4\4\60\4\104\4\4\4\176\4\4\u0145\4\4\4\4\4\5\5\5\102\5\5\5\5" +
		"\u0131\5\5\5\5\5\5\124\124\155\155\276\276\276\276\276\276\276\276\276\276\276\276" +
		"\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\233\346\347\351\u012b" +
		"\u012d\u012e\u016b\62\107\u010b\u017c\u017c\u017c\u017c\u0140\u0140\u0140\106\147" +
		"\364\372\u0108\u0137\u0160\u013e\u013f\171\356\56\103\123\142\354\362\370\373\u010c" +
		"\u0135\u0136\u0138\u0165\u0166\u0168\u016f\u0171\u0186\u0187\u0188\u0191\u0198\35" +
		"\177\177\177\177\41\73\117\172\200\200\200\200\363\u0122\u0185\72\116\215\u0109\u011f" +
		"\u0125\u0125\u0125\u0109\6\6\6\125\6\6\125\201\201\201\277\201\6\277\277\277\277" +
		"\277\277\277\277\277\277\42\173\202\202\202\202\u0141\31\53\55\150\203\150\203\203" +
		"\300\150\150\203\300\u0106\u0107\300\300\300\300\300\300\300\150\300\300\u0148\300" +
		"\300\300\300\300\300\300\300\300\300\300\300\u016c\u0148\u0148\300\300\u0148\u0148" +
		"\101\120\122\255\256\260\355\u0143\u0178\u017d\u0192\u0193\u0199\301\301\301\301" +
		"\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\u013a\u0146\u0177\26" +
		"\204\234\204\204\234\204\26\26\74\205\205\205\205\u0123\206\206\206\206\u011d\u011d" +
		"\u019a\43\43\u011e\u011e\u019b\u010a\207\207\207\207\u011b\377\377\377\44\44\u0149" +
		"\u0149\u0149\u0149\u0149\210\210\210\210\u011a\u011a\u017e\u011a\u017e\u017e\u017e" +
		"\u0142\u0142\u0142\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302" +
		"\302\302\302\302\302\302\302\302\302\156\211\156\156\211\211\156\211\156\156\156" +
		"\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\7\7\7\7\7\7\7\7" +
		"\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45" +
		"\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335" +
		"\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111" +
		"\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303" +
		"\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\11\11\11\11\11\11\11" +
		"\11\11\11\11\11\11\12\12\12\12\12\12\12\12\12\12\12\12\12\13\13\13\13\13\13\u0144" +
		"\u011c\36\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304" +
		"\304\304\304\304\304\304\304\304\304\304\10\17\10\17\45\17\57\61\63\10\45\45\75\111" +
		"\45\126\10\10\75\143\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45" +
		"\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252" +
		"\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303" +
		"\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17" +
		"\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\235\45\45\111" +
		"\252\45\212\212\111\266\111\45\303\335\111\45\45\235\235\212\45\111\10\45\303\45" +
		"\303\303\303\303\45\45\303\303\303\235\252\111\111\111\111\45\303\303\u014a\303\10" +
		"\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10" +
		"\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126" +
		"\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111" +
		"\45\45\212\45\111\10\375\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111" +
		"\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303" +
		"\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57" +
		"\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212" +
		"\212\111\266\111\45\303\335\111\45\45\212\45\111\10\376\45\303\45\303\303\303\303" +
		"\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303" +
		"\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a" +
		"\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111" +
		"\212\231\236\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\236\236\212" +
		"\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\236\252\111\111\111\111\45" +
		"\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45\45" +
		"\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10" +
		"\45\45\75\111\45\126\10\10\75\45\126\45\111\212\216\231\45\45\111\252\45\212\212" +
		"\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303" +
		"\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303" +
		"\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a" +
		"\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212" +
		"\217\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\212\45\111\10" +
		"\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a" +
		"\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a" +
		"\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45" +
		"\126\10\10\75\45\126\45\111\212\220\231\45\45\111\252\45\212\212\111\266\111\45\303" +
		"\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111" +
		"\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303" +
		"\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45" +
		"\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\221\231\45\45\111" +
		"\252\45\212\212\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303" +
		"\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303" +
		"\303\303\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303" +
		"\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45" +
		"\126\45\111\212\222\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45" +
		"\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45" +
		"\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45\45" +
		"\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10" +
		"\45\45\75\111\45\126\10\10\75\45\126\45\111\212\223\231\45\45\111\252\45\212\212" +
		"\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303" +
		"\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303" +
		"\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a" +
		"\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212" +
		"\231\45\45\111\252\45\212\212\111\266\267\111\45\303\335\111\45\45\212\45\111\10" +
		"\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a" +
		"\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a" +
		"\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45" +
		"\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\270\111\45\303" +
		"\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111" +
		"\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303" +
		"\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45" +
		"\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\224\231\45\45\111" +
		"\252\45\212\212\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303" +
		"\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303" +
		"\303\303\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303" +
		"\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45" +
		"\126\45\111\212\225\231\45\45\111\252\45\212\212\111\266\225\111\45\303\335\111\45" +
		"\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111" +
		"\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45" +
		"\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63" +
		"\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\226\231\45\45\111\252\45\212\212" +
		"\111\266\226\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45" +
		"\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303" +
		"\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a" +
		"\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212" +
		"\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\212\361\45\111\10" +
		"\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a" +
		"\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a" +
		"\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45" +
		"\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335" +
		"\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111" +
		"\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303" +
		"\111\45\45\111\u014a\u014a\10\303\111\303\u018a\111\u014a\u014a\111\10\17\10\17\45" +
		"\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\237\45\45\111" +
		"\252\45\212\212\111\266\111\45\303\335\341\111\45\45\237\237\212\45\111\10\45\303" +
		"\45\303\303\303\303\45\45\303\303\303\237\252\111\111\111\111\45\303\303\u014a\303" +
		"\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a" +
		"\10\303\111\303\u018b\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75" +
		"\111\45\126\10\10\75\45\126\45\111\212\231\240\45\45\111\252\45\212\212\111\266\111" +
		"\45\303\335\111\45\45\240\240\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303" +
		"\303\240\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303" +
		"\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a" +
		"\111\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212" +
		"\231\241\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\241\241\212\45" +
		"\111\10\45\303\45\303\303\303\303\45\45\303\303\303\241\252\111\111\111\111\45\303" +
		"\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45\45\111" +
		"\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45" +
		"\45\75\111\45\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266" +
		"\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303" +
		"\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111" +
		"\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\u018c\111\u014a\u014a\111\10" +
		"\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126\10\10\75\45\126\45\111\212\231\45" +
		"\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303" +
		"\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303" +
		"\303\303\303\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111" +
		"\303\u018d\111\u014a\u014a\111\2\10\17\10\17\45\17\57\61\63\10\45\45\75\111\45\126" +
		"\10\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111" +
		"\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111" +
		"\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111" +
		"\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\32\45\17\57" +
		"\61\63\10\45\45\75\111\45\32\126\10\10\75\45\126\45\111\212\231\45\45\111\252\45" +
		"\212\212\111\266\111\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303" +
		"\45\45\303\303\303\252\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303" +
		"\303\303\10\335\111\303\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a" +
		"\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75\105\111\45\126\10\10\75\45\126" +
		"\45\111\212\231\45\45\111\252\45\212\212\111\266\111\45\303\335\111\45\45\212\45" +
		"\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252\111\111\111\111\45\303\303" +
		"\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303\303\303\111\45\45\111\u014a" +
		"\u014a\10\303\111\303\111\u014a\u014a\111\10\17\10\17\45\17\57\61\63\10\45\45\75" +
		"\111\45\126\10\137\10\75\45\126\45\111\212\231\45\45\111\252\45\212\212\111\266\111" +
		"\45\303\335\111\45\45\212\45\111\10\45\303\45\303\303\303\303\45\45\303\303\303\252" +
		"\111\111\111\111\45\303\303\u014a\303\10\303\303\303\303\303\303\303\10\335\111\303" +
		"\303\303\111\45\45\111\u014a\u014a\10\303\111\303\111\u014a\u014a\111\305\305\305" +
		"\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\275\22\u019c" +
		"\37\3\64\110\33\33\40\65\46\46\46\46\127\144\127\157\157\250\144\274\306\46\343\343" +
		"\367\46\306\u0105\306\306\306\306\u0121\343\306\306\306\46\306\306\u014e\u014e\306" +
		"\306\306\306\306\306\46\306\306\306\46\46\306\306\14\14\14\14\14\307\14\307\307\307" +
		"\307\307\307\307\307\307\307\u014b\307\307\307\307\307\307\307\307\307\u015e\307" +
		"\307\307\u014b\u014b\u017b\307\307\u014b\u014b\112\170\251\263\272\342\371\263\112" +
		"\u013b\u013c\u0163\112\272\112\371\u0197\151\242\242\242\242\213\257\214\214\261" +
		"\261\175\262\130\131\153\132\132\133\133\357\u016d\u018e\134\134\145\135\135\253" +
		"\u0130\146\254\160\161\245\162\162\243\350\352\u012f\u0126\u0126\u0126\227\163\163" +
		"\164\164\264\265\u0133\273\u0176\u0164\310\310\310\310\310\310\310\310\310\310\311" +
		"\u0103\u0129\u012a\u012c\u0147\u0167\u0169\u016a\u0189\312\312\312\312\312\312\u0152" +
		"\312\312\312\312\313\313\313\313\313\313\313\313\313\313\313\314\314\u010d\314\314" +
		"\314\314\314\314\314\314\314\315\315\315\315\315\315\315\315\315\315\315\315\315" +
		"\315\315\315\315\315\315\315\315\315\315\315\315\315\315\316\316\u010e\u0111\u0116" +
		"\316\316\316\u0116\316\316\u0153\u0157\u015a\316\316\316\u0180\316\317\u0104\u010f" +
		"\u0112\317\317\317\317\317\u0154\317\317\317\317\320\320\320\320\u0117\320\320\320" +
		"\u0117\320\320\320\u0117\u0117\u015d\320\320\320\u0117\320\321\321\321\321\321\321" +
		"\321\321\321\321\321\321\321\321\321\321\321\321\321\321\322\322\322\322\322\u0120" +
		"\322\322\322\322\322\322\322\322\322\u0120\322\322\322\322\322\322\323\323\323\323" +
		"\323\323\323\323\323\323\323\u014f\u0151\323\323\323\323\323\323\323\323\323\323" +
		"\323\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324" +
		"\324\324\324\324\324\325\325\325\325\325\325\325\325\325\325\325\325\325\325\325" +
		"\325\325\325\325\325\326\326\326\326\326\326\326\326\326\326\326\326\326\326\326" +
		"\326\326\326\326\326\326\326\326\326\327\327\327\327\327\327\327\327\327\327\327" +
		"\327\u0150\327\327\327\327\327\327\327\327\327\327\327\327\330\365\366\330\330\330" +
		"\330\330\330\330\330\u0134\330\330\330\330\330\330\330\330\330\330\330\330\330\330" +
		"\330\330\u014c\u014c\u017a\u014c\u014c\u014d\u0179\u0194\u0195\165\165\165\165\165" +
		"\165\165\165\165\165\165\165\165\165\165\165\165\165\165\165\165\165\166\166\331" +
		"\331\331\u0113\u0113\331\331\331\u0113\331\331\u0113\u0113\u0113\u0113\331\331\331" +
		"\u0113\331\167\167\247\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167" +
		"\167\167\167\167\167\336\244\353\337\u0161\47\70\71\47\340\u0100\u013d\340\u0100" +
		"\u0100\50\51\27\27\27\52\115\230\271\113\u0139\u0170\u0184\u0101\u0101\u0101\u0102" +
		"\u0174\u0175\u019d\23\67\136\140\374\24\25\76\77\100\141\15\15\15\114\15\15\15\114" +
		"\u015f\114\u0172\u0173\114\20\30\54\21\21\21\332\332\332\332\332\332\332\332\332" +
		"\332\332\332\332\332\332\332\332\332\332\332\u018f\16\16\66\16\16\16\154\232\246" +
		"\333\16\333\u0118\333\333\333\u0118\333\333\u0118\u0118\333\333\333\u0118\333\34" +
		"\121\152\360\u0132\u016e\u0190\344\345\u0124\u0127\u0128\u0162\334\334\u0110\u0114" +
		"\u0115\u0119\334\334\334\u0119\334\334\u0155\u0156\u0158\u0159\u015b\u015c\334\334" +
		"\334\u017f\u0181\u0182\u0183\334\u0196");

	private static final short[] tmRuleLen = TMLexer.unpack_short(236,
		"\2\0\5\4\2\0\7\4\3\3\4\4\3\3\1\1\2\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2" +
		"\1\1\1\1\3\10\3\2\3\1\1\1\1\5\3\1\3\1\3\1\1\2\2\1\1\1\7\6\6\5\6\5\5\4\2\4\3\3\1\1" +
		"\2\1\1\1\7\5\6\4\4\4\5\5\6\3\1\2\1\1\2\1\3\3\1\1\5\4\4\3\4\3\3\2\4\3\3\2\3\2\2\1" +
		"\1\3\2\3\3\4\3\1\2\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\4\1\4\2\1\3\2\1" +
		"\3\3\2\1\1\5\2\2\3\1\3\1\4\2\1\3\1\1\0\3\3\2\2\1\1\1\1\1\2\1\3\3\1\3\3\1\1\5\3\1" +
		"\3\1\1\0\3\1\1\0\3\1\1\1\1\1\1\3\1\1\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(236,
		"\115\115\116\116\117\117\120\120\121\122\123\124\124\125\125\126\127\127\130\131" +
		"\131\132\132\133\133\133\133\133\133\133\133\133\133\133\133\133\134\135\135\135" +
		"\136\136\136\136\137\140\140\141\142\143\143\143\143\144\145\145\146\147\150\150" +
		"\151\151\151\152\152\152\153\153\153\153\153\153\153\153\154\154\154\154\154\154" +
		"\155\156\156\156\157\157\157\157\160\160\160\160\160\161\161\162\162\163\163\164" +
		"\164\165\165\166\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167" +
		"\167\170\171\172\172\173\173\174\174\174\175\175\175\176\176\177\177\177\200\200" +
		"\201\201\201\202\203\203\204\204\204\204\204\204\204\204\205\206\206\206\206\207" +
		"\207\207\210\210\211\212\212\212\213\213\214\215\215\215\216\217\217\220\220\221" +
		"\222\222\222\222\223\223\224\224\225\225\225\225\226\226\226\227\227\227\227\227" +
		"\230\230\231\231\232\232\233\233\234\235\235\235\235\236\237\237\240\241\242\242" +
		"\243\243\244\244\245\245\246\246\247\247\250\250\251\251\252\252");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"_skip_multiline",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'||'",
		"'='",
		"'=='",
		"'!='",
		"'=>'",
		"';'",
		"'.'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'!'",
		"'~'",
		"'&'",
		"'&&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Lbrackets",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lgenerate",
		"Lassert",
		"Lempty",
		"Lnonempty",
		"Lglobal",
		"Lparam",
		"Lflag",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"import__optlist",
		"input",
		"option_optlist",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"symref_noargs",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"lexer_directive",
		"lexer_state_list_Comma_separated",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"template_param",
		"directive",
		"inputref_list_Comma_separated",
		"inputref",
		"references",
		"references_cs",
		"rule0_list_Or_separated",
		"rules",
		"rule0",
		"predicate",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsSet",
		"setPrimary",
		"setExpression",
		"annotation_list",
		"annotations",
		"annotation",
		"nonterm_param_list_Comma_separated",
		"nonterm_params",
		"nonterm_param",
		"param_ref",
		"argument_list_Comma_separated",
		"argument_list_Comma_separated_opt",
		"symref_args",
		"argument",
		"param_type",
		"param_value",
		"predicate_primary",
		"predicate_expression",
		"expression",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
		"map_entry_list_Comma_separated",
		"map_entry_list_Comma_separated_opt",
		"map_entry",
		"literal",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"identifieropt",
		"implementsopt",
		"rhsSuffixopt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		int import__optlist = 77;
		int input = 78;
		int option_optlist = 79;
		int header = 80;
		int lexer_section = 81;
		int parser_section = 82;
		int parsing_algorithm = 83;
		int import_ = 84;
		int option = 85;
		int identifier = 86;
		int symref = 87;
		int symref_noargs = 88;
		int type = 89;
		int type_part_list = 90;
		int type_part = 91;
		int pattern = 92;
		int lexer_parts = 93;
		int lexer_part = 94;
		int named_pattern = 95;
		int lexeme = 96;
		int lexeme_transition = 97;
		int lexeme_attrs = 98;
		int lexeme_attribute = 99;
		int lexer_directive = 100;
		int lexer_state_list_Comma_separated = 101;
		int state_selector = 102;
		int stateref = 103;
		int lexer_state = 104;
		int grammar_parts = 105;
		int grammar_part = 106;
		int nonterm = 107;
		int nonterm_type = 108;
		int _implements = 109;
		int assoc = 110;
		int template_param = 111;
		int directive = 112;
		int inputref_list_Comma_separated = 113;
		int inputref = 114;
		int references = 115;
		int references_cs = 116;
		int rule0_list_Or_separated = 117;
		int rules = 118;
		int rule0 = 119;
		int predicate = 120;
		int rhsPrefix = 121;
		int rhsSuffix = 122;
		int ruleAction = 123;
		int rhsParts = 124;
		int rhsPart = 125;
		int rhsAnnotated = 126;
		int rhsAssignment = 127;
		int rhsOptional = 128;
		int rhsCast = 129;
		int rhsUnordered = 130;
		int rhsClass = 131;
		int rhsPrimary = 132;
		int rhsSet = 133;
		int setPrimary = 134;
		int setExpression = 135;
		int annotation_list = 136;
		int annotations = 137;
		int annotation = 138;
		int nonterm_param_list_Comma_separated = 139;
		int nonterm_params = 140;
		int nonterm_param = 141;
		int param_ref = 142;
		int argument_list_Comma_separated = 143;
		int argument_list_Comma_separated_opt = 144;
		int symref_args = 145;
		int argument = 146;
		int param_type = 147;
		int param_value = 148;
		int predicate_primary = 149;
		int predicate_expression = 150;
		int expression = 151;
		int expression_list_Comma_separated = 152;
		int expression_list_Comma_separated_opt = 153;
		int map_entry_list_Comma_separated = 154;
		int map_entry_list_Comma_separated_opt = 155;
		int map_entry = 156;
		int literal = 157;
		int name = 158;
		int qualified_id = 159;
		int command = 160;
		int syntax_problem = 161;
		int parsing_algorithmopt = 162;
		int typeopt = 163;
		int lexeme_transitionopt = 164;
		int iconopt = 165;
		int lexeme_attrsopt = 166;
		int commandopt = 167;
		int identifieropt = 168;
		int implementsopt = 169;
		int rhsSuffixopt = 170;
	}

	public interface Rules {
		int lexer_directive_directiveBrackets = 53;  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
		int nonterm_type_nontermTypeAST = 74;  // nonterm_type ::= Lreturns symref_noargs
		int nonterm_type_nontermTypeHint = 75;  // nonterm_type ::= Linline Lclass identifieropt implementsopt
		int nonterm_type_nontermTypeHint2 = 76;  // nonterm_type ::= Lclass identifieropt implementsopt
		int nonterm_type_nontermTypeHint3 = 77;  // nonterm_type ::= Linterface identifieropt implementsopt
		int nonterm_type_nontermTypeHint4 = 78;  // nonterm_type ::= Lvoid
		int nonterm_type_nontermTypeRaw = 79;  // nonterm_type ::= type
		int directive_directivePrio = 88;  // directive ::= '%' assoc references ';'
		int directive_directiveInput = 89;  // directive ::= '%' Linput inputref_list_Comma_separated ';'
		int directive_directiveAssert = 90;  // directive ::= '%' Lassert Lempty rhsSet ';'
		int directive_directiveAssert2 = 91;  // directive ::= '%' Lassert Lnonempty rhsSet ';'
		int directive_directiveSet = 92;  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
		int rhsOptional_rhsQuantifier = 139;  // rhsOptional ::= rhsCast '?'
		int rhsCast_rhsAsLiteral = 142;  // rhsCast ::= rhsClass Las literal
		int rhsPrimary_rhsSymbol = 146;  // rhsPrimary ::= symref
		int rhsPrimary_rhsNested = 147;  // rhsPrimary ::= '(' rules ')'
		int rhsPrimary_rhsList = 148;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		int rhsPrimary_rhsList2 = 149;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		int rhsPrimary_rhsQuantifier = 150;  // rhsPrimary ::= rhsPrimary '*'
		int rhsPrimary_rhsQuantifier2 = 151;  // rhsPrimary ::= rhsPrimary '+'
		int rhsPrimary_rhsIgnored = 152;  // rhsPrimary ::= '$' '(' rules ')'
		int setPrimary_setSymbol = 155;  // setPrimary ::= ID symref
		int setPrimary_setSymbol2 = 156;  // setPrimary ::= symref
		int setPrimary_setCompound = 157;  // setPrimary ::= '(' setExpression ')'
		int setPrimary_setComplement = 158;  // setPrimary ::= '~' setPrimary
		int setExpression_setBinary = 160;  // setExpression ::= setExpression '|' setExpression
		int setExpression_setBinary2 = 161;  // setExpression ::= setExpression '&' setExpression
		int nonterm_param_inlineParameter = 172;  // nonterm_param ::= ID identifier '=' param_value
		int nonterm_param_inlineParameter2 = 173;  // nonterm_param ::= ID identifier
		int predicate_primary_boolPredicate = 188;  // predicate_primary ::= '!' param_ref
		int predicate_primary_boolPredicate2 = 189;  // predicate_primary ::= param_ref
		int predicate_primary_comparePredicate = 190;  // predicate_primary ::= param_ref '==' literal
		int predicate_primary_comparePredicate2 = 191;  // predicate_primary ::= param_ref '!=' literal
		int predicate_expression_predicateBinary = 193;  // predicate_expression ::= predicate_expression '&&' predicate_expression
		int predicate_expression_predicateBinary2 = 194;  // predicate_expression ::= predicate_expression '||' predicate_expression
		int expression_instance = 197;  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
		int expression_array = 198;  // expression ::= '[' expression_list_Comma_separated_opt ']'
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected Span[] tmStack;
	protected Span tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new Span[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new Span();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new Span();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 38) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new Span();
			tmStack[tmHead].symbol = 38;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 38);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.tokenText()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		Span left = new Span();
		left.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		left.symbol = tmRuleSymbol[rule];
		left.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		Span startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		left.line = startsym.line;
		left.offset = startsym.offset;
		left.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(left, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = left;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, left.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(Span tmLeft, int ruleIndex, int ruleLength) {
		switch (ruleIndex) {
			case 0:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 1:  // import__optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 2:  // input ::= header import__optlist option_optlist lexer_section parser_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead - 1].value) /* lexer */,
						((List<ITmaGrammarPart>)tmStack[tmHead].value) /* parser */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 3:  // input ::= header import__optlist option_optlist lexer_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead].value) /* lexer */,
						null /* parser */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 4:  // option_optlist ::= option_optlist option
				((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 5:  // option_optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 6:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						source, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 7:  // header ::= Llanguage name parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // lexer_section ::= '::' Llexer lexer_parts
				tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value);
				break;
			case 9:  // parser_section ::= '::' Lparser grammar_parts
				tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value);
				break;
			case 10:  // parsing_algorithm ::= Llalr '(' icon ')'
				tmLeft.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 11:  // import_ ::= Limport ID scon ';'
				tmLeft.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 12:  // import_ ::= Limport scon ';'
				tmLeft.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // option ::= ID '=' expression
				tmLeft.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* key */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* syntaxProblem */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 14:  // option ::= syntax_problem
				tmLeft.value = new TmaOption(
						null /* key */,
						null /* value */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 15:  // identifier ::= ID
				tmLeft.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 16:  // symref ::= ID symref_args
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead - 1].value) /* name */,
						((TmaSymrefArgs)tmStack[tmHead].value) /* args */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 17:  // symref ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 18:  // symref_noargs ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 19:  // type ::= '(' scon ')'
				{ tmLeft.value = ((String)tmStack[tmHead - 1].value); }
				break;
			case 20:  // type ::= '(' type_part_list ')'
				{ tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); }
				break;
			case 36:  // pattern ::= regexp
				tmLeft.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 37:  // lexer_parts ::= lexer_part
				tmLeft.value = new ArrayList();
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 38:  // lexer_parts ::= lexer_parts lexer_part
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 39:  // lexer_parts ::= lexer_parts syntax_problem
				((List<ITmaLexerPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 44:  // named_pattern ::= ID '=' pattern
				tmLeft.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 45:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* transition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemeAttrs)tmStack[tmHead - 1].value) /* attrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						source, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 46:  // lexeme ::= identifier typeopt ':'
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* transition */,
						null /* priority */,
						null /* attrs */,
						null /* command */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 47:  // lexeme_transition ::= '=>' stateref
				tmLeft.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 48:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				tmLeft.value = new TmaLexemeAttrs(
						((TmaLexemeAttribute)tmStack[tmHead - 1].value) /* kind */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 49:  // lexeme_attribute ::= Lsoft
				tmLeft.value = TmaLexemeAttribute.LSOFT;
				break;
			case 50:  // lexeme_attribute ::= Lclass
				tmLeft.value = TmaLexemeAttribute.LCLASS;
				break;
			case 51:  // lexeme_attribute ::= Lspace
				tmLeft.value = TmaLexemeAttribute.LSPACE;
				break;
			case 52:  // lexeme_attribute ::= Llayout
				tmLeft.value = TmaLexemeAttribute.LLAYOUT;
				break;
			case 53:  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
				tmLeft.value = new TmaDirectiveBrackets(
						((TmaSymref)tmStack[tmHead - 2].value) /* opening */,
						((TmaSymref)tmStack[tmHead - 1].value) /* closing */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 54:  // lexer_state_list_Comma_separated ::= lexer_state_list_Comma_separated ',' lexer_state
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 55:  // lexer_state_list_Comma_separated ::= lexer_state
				tmLeft.value = new ArrayList();
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 56:  // state_selector ::= '[' lexer_state_list_Comma_separated ']'
				tmLeft.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 57:  // stateref ::= ID
				tmLeft.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 58:  // lexer_state ::= identifier '=>' stateref
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 59:  // lexer_state ::= identifier
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 60:  // grammar_parts ::= grammar_part
				tmLeft.value = new ArrayList();
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 61:  // grammar_parts ::= grammar_parts grammar_part
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 62:  // grammar_parts ::= grammar_parts syntax_problem
				((List<ITmaGrammarPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 66:  // nonterm ::= annotations identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 6].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 67:  // nonterm ::= annotations identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 68:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 69:  // nonterm ::= annotations identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 70:  // nonterm ::= identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 71:  // nonterm ::= identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 72:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 73:  // nonterm ::= identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 74:  // nonterm_type ::= Lreturns symref_noargs
				tmLeft.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 75:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						true /* inline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 76:  // nonterm_type ::= Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 77:  // nonterm_type ::= Linterface identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 78:  // nonterm_type ::= Lvoid
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* _implements */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 79:  // nonterm_type ::= type
				tmLeft.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* typeText */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 80:  // implements ::= ':' references_cs
				tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value);
				break;
			case 81:  // assoc ::= Lleft
				tmLeft.value = TmaAssoc.LLEFT;
				break;
			case 82:  // assoc ::= Lright
				tmLeft.value = TmaAssoc.LRIGHT;
				break;
			case 83:  // assoc ::= Lnonassoc
				tmLeft.value = TmaAssoc.LNONASSOC;
				break;
			case 84:  // template_param ::= '%' Lglobal param_type identifier '=' param_value ';'
				tmLeft.value = new TmaTemplateParam(
						true /* global */,
						((TmaParamType)tmStack[tmHead - 4].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						((ITmaParamValue)tmStack[tmHead - 1].value) /* paramValue */,
						source, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 85:  // template_param ::= '%' Lglobal param_type identifier ';'
				tmLeft.value = new TmaTemplateParam(
						true /* global */,
						((TmaParamType)tmStack[tmHead - 2].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						null /* paramValue */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 86:  // template_param ::= '%' param_type identifier '=' param_value ';'
				tmLeft.value = new TmaTemplateParam(
						false /* global */,
						((TmaParamType)tmStack[tmHead - 4].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						((ITmaParamValue)tmStack[tmHead - 1].value) /* paramValue */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 87:  // template_param ::= '%' param_type identifier ';'
				tmLeft.value = new TmaTemplateParam(
						false /* global */,
						((TmaParamType)tmStack[tmHead - 2].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						null /* paramValue */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 88:  // directive ::= '%' assoc references ';'
				tmLeft.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 89:  // directive ::= '%' Linput inputref_list_Comma_separated ';'
				tmLeft.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 90:  // directive ::= '%' Lassert Lempty rhsSet ';'
				tmLeft.value = new TmaDirectiveAssert(
						TmaDirectiveAssert.TmaKindKind.LEMPTY /* kind */,
						((TmaRhsSet)tmStack[tmHead - 1].value) /* rhsSet */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 91:  // directive ::= '%' Lassert Lnonempty rhsSet ';'
				tmLeft.value = new TmaDirectiveAssert(
						TmaDirectiveAssert.TmaKindKind.LNONEMPTY /* kind */,
						((TmaRhsSet)tmStack[tmHead - 1].value) /* rhsSet */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 92:  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
				tmLeft.value = new TmaDirectiveSet(
						((String)tmStack[tmHead - 3].value) /* name */,
						((TmaRhsSet)tmStack[tmHead - 1].value) /* rhsSet */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 93:  // inputref_list_Comma_separated ::= inputref_list_Comma_separated ',' inputref
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 94:  // inputref_list_Comma_separated ::= inputref
				tmLeft.value = new ArrayList();
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 95:  // inputref ::= symref_noargs Lnoeoi
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* reference */,
						true /* noeoi */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 96:  // inputref ::= symref_noargs
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						false /* noeoi */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 97:  // references ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 98:  // references ::= references symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 99:  // references_cs ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 100:  // references_cs ::= references_cs ',' symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 101:  // rule0_list_Or_separated ::= rule0_list_Or_separated '|' rule0
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 102:  // rule0_list_Or_separated ::= rule0
				tmLeft.value = new ArrayList();
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 104:  // rule0 ::= predicate rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 4].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 105:  // rule0 ::= predicate rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 3].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 106:  // rule0 ::= predicate rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 3].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 107:  // rule0 ::= predicate rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 108:  // rule0 ::= predicate rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 3].value) /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 109:  // rule0 ::= predicate rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 110:  // rule0 ::= predicate ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 111:  // rule0 ::= predicate rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((ITmaPredicateExpression)tmStack[tmHead - 1].value) /* predicate */,
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 112:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 113:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 114:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 115:  // rule0 ::= rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 116:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 117:  // rule0 ::= rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 118:  // rule0 ::= ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 119:  // rule0 ::= rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 120:  // rule0 ::= syntax_problem
				tmLeft.value = new TmaRule0(
						null /* predicate */,
						null /* prefix */,
						null /* list */,
						null /* action */,
						null /* suffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* error */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 121:  // predicate ::= '[' predicate_expression ']'
				tmLeft.value = ((ITmaPredicateExpression)tmStack[tmHead - 1].value);
				break;
			case 122:  // rhsPrefix ::= annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 123:  // rhsSuffix ::= '%' Lprio symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 124:  // rhsSuffix ::= '%' Lshift symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 125:  // ruleAction ::= '{~' identifier scon '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* action */,
						((String)tmStack[tmHead - 1].value) /* parameter */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 126:  // ruleAction ::= '{~' identifier '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 1].value) /* action */,
						null /* parameter */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 127:  // rhsParts ::= rhsPart
				tmLeft.value = new ArrayList();
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 128:  // rhsParts ::= rhsParts rhsPart
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 129:  // rhsParts ::= rhsParts syntax_problem
				((List<ITmaRhsPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 134:  // rhsAnnotated ::= annotations rhsAssignment
				tmLeft.value = new TmaRhsAnnotated(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 136:  // rhsAssignment ::= identifier '=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 137:  // rhsAssignment ::= identifier '+=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 139:  // rhsOptional ::= rhsCast '?'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 141:  // rhsCast ::= rhsClass Las symref
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaSymref)tmStack[tmHead].value) /* target */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 142:  // rhsCast ::= rhsClass Las literal
				tmLeft.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 143:  // rhsUnordered ::= rhsPart '&' rhsPart
				tmLeft.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 145:  // rhsClass ::= identifier ':' rhsPrimary
				tmLeft.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 146:  // rhsPrimary ::= symref
				tmLeft.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 147:  // rhsPrimary ::= '(' rules ')'
				tmLeft.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 148:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						true /* atLeastOne */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 149:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						false /* atLeastOne */,
						source, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 150:  // rhsPrimary ::= rhsPrimary '*'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 151:  // rhsPrimary ::= rhsPrimary '+'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 152:  // rhsPrimary ::= '$' '(' rules ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 154:  // rhsSet ::= Lset '(' setExpression ')'
				tmLeft.value = new TmaRhsSet(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* expr */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 155:  // setPrimary ::= ID symref
				tmLeft.value = new TmaSetSymbol(
						((String)tmStack[tmHead - 1].value) /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 156:  // setPrimary ::= symref
				tmLeft.value = new TmaSetSymbol(
						null /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 157:  // setPrimary ::= '(' setExpression ')'
				tmLeft.value = new TmaSetCompound(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* inner */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 158:  // setPrimary ::= '~' setPrimary
				tmLeft.value = new TmaSetComplement(
						((ITmaSetExpression)tmStack[tmHead].value) /* inner */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 160:  // setExpression ::= setExpression '|' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.OR /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 161:  // setExpression ::= setExpression '&' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.AMPERSAND /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 162:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 163:  // annotation_list ::= annotation
				tmLeft.value = new ArrayList();
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 164:  // annotations ::= annotation_list
				tmLeft.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 165:  // annotation ::= '@' ID '{' expression '}'
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 166:  // annotation ::= '@' ID
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 167:  // annotation ::= '@' syntax_problem
				tmLeft.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 168:  // nonterm_param_list_Comma_separated ::= nonterm_param_list_Comma_separated ',' nonterm_param
				((List<ITmaNontermParam>)tmLeft.value).add(((ITmaNontermParam)tmStack[tmHead].value));
				break;
			case 169:  // nonterm_param_list_Comma_separated ::= nonterm_param
				tmLeft.value = new ArrayList();
				((List<ITmaNontermParam>)tmLeft.value).add(((ITmaNontermParam)tmStack[tmHead].value));
				break;
			case 170:  // nonterm_params ::= '<' nonterm_param_list_Comma_separated '>'
				tmLeft.value = new TmaNontermParams(
						((List<ITmaNontermParam>)tmStack[tmHead - 1].value) /* list */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 172:  // nonterm_param ::= ID identifier '=' param_value
				tmLeft.value = new TmaInlineParameter(
						((String)tmStack[tmHead - 3].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((ITmaParamValue)tmStack[tmHead].value) /* paramValue */,
						source, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 173:  // nonterm_param ::= ID identifier
				tmLeft.value = new TmaInlineParameter(
						((String)tmStack[tmHead - 1].value) /* paramType */,
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* paramValue */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 174:  // param_ref ::= identifier
				tmLeft.value = new TmaParamRef(
						((TmaIdentifier)tmStack[tmHead].value) /* ref */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 175:  // argument_list_Comma_separated ::= argument_list_Comma_separated ',' argument
				((List<TmaArgument>)tmLeft.value).add(((TmaArgument)tmStack[tmHead].value));
				break;
			case 176:  // argument_list_Comma_separated ::= argument
				tmLeft.value = new ArrayList();
				((List<TmaArgument>)tmLeft.value).add(((TmaArgument)tmStack[tmHead].value));
				break;
			case 179:  // symref_args ::= '<' argument_list_Comma_separated_opt '>'
				tmLeft.value = new TmaSymrefArgs(
						((List<TmaArgument>)tmStack[tmHead - 1].value) /* argList */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 180:  // argument ::= param_ref ':' param_value
				tmLeft.value = new TmaArgument(
						((TmaParamRef)tmStack[tmHead - 2].value) /* name */,
						((ITmaParamValue)tmStack[tmHead].value) /* val */,
						null /* bool */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 181:  // argument ::= '+' param_ref
				tmLeft.value = new TmaArgument(
						((TmaParamRef)tmStack[tmHead].value) /* name */,
						null /* val */,
						TmaArgument.TmaBoolKind.PLUS /* bool */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 182:  // argument ::= '~' param_ref
				tmLeft.value = new TmaArgument(
						((TmaParamRef)tmStack[tmHead].value) /* name */,
						null /* val */,
						TmaArgument.TmaBoolKind.TILDE /* bool */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 183:  // argument ::= param_ref
				tmLeft.value = new TmaArgument(
						((TmaParamRef)tmStack[tmHead].value) /* name */,
						null /* val */,
						null /* bool */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 184:  // param_type ::= Lflag
				tmLeft.value = TmaParamType.LFLAG;
				break;
			case 185:  // param_type ::= Lparam
				tmLeft.value = TmaParamType.LPARAM;
				break;
			case 188:  // predicate_primary ::= '!' param_ref
				tmLeft.value = new TmaBoolPredicate(
						true /* negated */,
						((TmaParamRef)tmStack[tmHead].value) /* paramRef */,
						source, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 189:  // predicate_primary ::= param_ref
				tmLeft.value = new TmaBoolPredicate(
						false /* negated */,
						((TmaParamRef)tmStack[tmHead].value) /* paramRef */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 190:  // predicate_primary ::= param_ref '==' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaParamRef)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EQUAL_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 191:  // predicate_primary ::= param_ref '!=' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaParamRef)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EXCLAMATION_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 193:  // predicate_expression ::= predicate_expression '&&' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.AMPERSAND_AMPERSAND /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 194:  // predicate_expression ::= predicate_expression '||' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.OR_OR /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 197:  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
				tmLeft.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntry>)tmStack[tmHead - 1].value) /* entries */,
						source, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 198:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				tmLeft.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 200:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 201:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 204:  // map_entry_list_Comma_separated ::= map_entry_list_Comma_separated ',' map_entry
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 205:  // map_entry_list_Comma_separated ::= map_entry
				tmLeft.value = new ArrayList();
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 208:  // map_entry ::= ID ':' expression
				tmLeft.value = new TmaMapEntry(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 209:  // literal ::= scon
				tmLeft.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 210:  // literal ::= icon
				tmLeft.value = new TmaLiteral(
						((Integer)tmStack[tmHead].value) /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 211:  // literal ::= Ltrue
				tmLeft.value = new TmaLiteral(
						true /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 212:  // literal ::= Lfalse
				tmLeft.value = new TmaLiteral(
						false /* value */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 213:  // name ::= qualified_id
				tmLeft.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 215:  // qualified_id ::= qualified_id '.' ID
				{ tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); }
				break;
			case 216:  // command ::= code
				tmLeft.value = new TmaCommand(
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 217:  // syntax_problem ::= error
				tmLeft.value = new TmaSyntaxProblem(
						source, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(Span value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(Span value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 414);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 415);
	}
}
