/**
 * Copyright 2002-2013 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Lexems;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(298,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\251\0\252\0\uffcd\uffff\270\0\26" +
		"\0\253\0\254\0\uffff\uffff\241\0\240\0\250\0\265\0\uff93\uffff\uff8b\uffff\uffff" +
		"\uffff\uff7f\uffff\15\0\uffff\uffff\255\0\uff4f\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\6\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\16\0\uffff" +
		"\uffff\uffff\uffff\uff49\uffff\uffff\uffff\21\0\24\0\uffff\uffff\247\0\uff43\uffff" +
		"\uffff\uffff\uffff\uffff\11\0\266\0\20\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\4\0\uff17\uffff\22\0\256\0\uffff\uffff\uff11\uffff\uffff\uffff\uff0b\uffff" +
		"\uffff\uffff\17\0\uffff\uffff\uff05\uffff\ufefd\uffff\ufef7\uffff\51\0\55\0\56\0" +
		"\54\0\23\0\uffff\uffff\2\0\262\0\263\0\261\0\uffff\uffff\uffff\uffff\244\0\uffff" +
		"\uffff\14\0\25\0\ufec5\uffff\uffff\uffff\103\0\uffff\uffff\uffff\uffff\60\0\uffff" +
		"\uffff\52\0\53\0\uffff\uffff\uffff\uffff\uffff\uffff\ufebd\uffff\110\0\113\0\114" +
		"\0\uffff\uffff\ufe8b\uffff\230\0\257\0\uffff\uffff\10\0\uffff\uffff\uffff\uffff\102" +
		"\0\50\0\57\0\uffff\uffff\41\0\42\0\35\0\36\0\uffff\uffff\33\0\34\0\40\0\43\0\45\0" +
		"\44\0\37\0\uffff\uffff\32\0\ufe5d\uffff\uffff\uffff\131\0\132\0\133\0\uffff\uffff" +
		"\ufe29\uffff\234\0\ufdf5\uffff\uffff\uffff\uffff\uffff\ufdb7\uffff\ufd8b\uffff\127" +
		"\0\130\0\uffff\uffff\111\0\112\0\uffff\uffff\231\0\uffff\uffff\105\0\106\0\104\0" +
		"\27\0\47\0\uffff\uffff\30\0\31\0\ufd5f\uffff\ufd25\uffff\uffff\uffff\136\0\143\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufd1d\uffff\uffff\uffff\uffff\uffff" +
		"\ufcdf\uffff\267\0\uffff\uffff\211\0\uffff\uffff\ufc8f\uffff\150\0\ufc87\uffff\152" +
		"\0\ufc4b\uffff\ufc0d\uffff\171\0\174\0\176\0\ufbcb\uffff\172\0\ufb87\uffff\ufb41" +
		"\uffff\uffff\uffff\ufaf7\uffff\ufac7\uffff\173\0\160\0\157\0\ufa97\uffff\121\0\122" +
		"\0\125\0\126\0\ufa6b\uffff\ufa2d\uffff\uffff\uffff\260\0\46\0\uffff\uffff\62\0\uf9ef" +
		"\uffff\140\0\142\0\135\0\uffff\uffff\134\0\144\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uf9b7\uffff\236\0\uffff\uffff\uf979\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\120\0\uf939\uffff\uf8f9\uffff\155\0\uf8bb\uffff\170" +
		"\0\156\0\uffff\uffff\202\0\uffff\uffff\215\0\216\0\175\0\uf879\uffff\124\0\uffff" +
		"\uffff\uffff\uffff\uf849\uffff\74\0\64\0\uf80b\uffff\137\0\232\0\164\0\165\0\163" +
		"\0\161\0\uffff\uffff\212\0\uffff\uffff\uffff\uffff\235\0\uffff\uffff\uffff\uffff" +
		"\177\0\uf7d5\uffff\200\0\151\0\154\0\uf78b\uffff\204\0\205\0\117\0\116\0\uffff\uffff" +
		"\uffff\uffff\66\0\uf749\uffff\162\0\uffff\uffff\237\0\uffff\uffff\222\0\115\0\76" +
		"\0\77\0\100\0\101\0\uffff\uffff\70\0\72\0\uffff\uffff\uffff\uffff\220\0\uffff\uffff" +
		"\75\0\214\0\213\0\uffff\uffff\uffff\uffff\221\0\223\0\217\0\uffff\uffff\uffff\uffff" +
		"\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(2280,
		"\47\uffff\10\1\40\1\41\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63" +
		"\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\uffff\ufffe\2\uffff\3\uffff\21\uffff\40\uffff" +
		"\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\42\uffff\43\uffff\44\uffff\22\246\uffff\ufffe\23\uffff\70\uffff" +
		"\14\7\uffff\ufffe\15\uffff\14\264\23\264\25\264\70\264\uffff\ufffe\47\uffff\10\0" +
		"\40\0\41\0\50\0\51\0\52\0\53\0\54\0\55\0\56\0\57\0\60\0\61\0\62\0\63\0\64\0\65\0" +
		"\66\0\67\0\70\0\71\0\72\0\uffff\ufffe\17\uffff\22\245\uffff\ufffe\10\uffff\0\5\uffff" +
		"\ufffe\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52" +
		"\uffff\51\uffff\50\uffff\25\243\uffff\ufffe\10\uffff\0\3\uffff\ufffe\17\uffff\25" +
		"\242\uffff\ufffe\70\uffff\14\7\uffff\ufffe\12\uffff\20\25\23\25\uffff\ufffe\23\uffff" +
		"\20\61\uffff\ufffe\21\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\0\12\10\12\uffff\ufffe\13" +
		"\uffff\17\107\22\107\uffff\ufffe\6\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\0\13\uffff" +
		"\ufffe\37\uffff\22\227\41\227\50\227\51\227\52\227\53\227\54\227\55\227\56\227\57" +
		"\227\60\227\61\227\62\227\63\227\64\227\65\227\66\227\67\227\70\227\71\227\72\227" +
		"\uffff\ufffe\1\uffff\0\73\10\73\21\73\40\73\41\73\50\73\51\73\52\73\53\73\54\73\55" +
		"\73\56\73\57\73\60\73\61\73\62\73\63\73\64\73\65\73\66\73\67\73\70\73\71\73\72\73" +
		"\uffff\ufffe\75\uffff\22\233\23\233\36\233\37\233\41\233\50\233\51\233\52\233\53" +
		"\233\54\233\55\233\56\233\57\233\60\233\61\233\62\233\63\233\64\233\65\233\66\233" +
		"\67\233\70\233\71\233\72\233\uffff\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff" +
		"\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff" +
		"\53\uffff\52\uffff\51\uffff\50\uffff\74\uffff\11\153\14\153\uffff\ufffe\41\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\7\123\uffff\ufffe\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\7\123\uffff\ufffe\13\uffff\0\63\3\63" +
		"\10\63\21\63\23\63\40\63\41\63\50\63\51\63\52\63\53\63\54\63\55\63\56\63\57\63\60" +
		"\63\61\63\62\63\63\63\64\63\65\63\66\63\67\63\70\63\71\63\72\63\74\63\uffff\ufffe" +
		"\60\uffff\14\141\17\141\uffff\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff\37" +
		"\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53" +
		"\uffff\52\uffff\51\uffff\50\uffff\74\uffff\11\153\25\153\uffff\ufffe\12\25\20\25" +
		"\33\25\6\26\11\26\14\26\23\26\24\26\25\26\31\26\32\26\34\26\35\26\36\26\37\26\40" +
		"\26\41\26\45\26\46\26\50\26\51\26\52\26\53\26\54\26\55\26\56\26\57\26\60\26\61\26" +
		"\62\26\63\26\64\26\65\26\66\26\67\26\70\26\71\26\72\26\74\26\uffff\ufffe\11\uffff" +
		"\14\147\25\147\uffff\ufffe\6\uffff\23\uffff\24\uffff\36\uffff\37\uffff\41\uffff\72" +
		"\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61" +
		"\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50" +
		"\uffff\74\uffff\11\153\14\153\25\153\uffff\ufffe\6\uffff\23\uffff\24\uffff\36\uffff" +
		"\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff" +
		"\53\uffff\52\uffff\51\uffff\50\uffff\74\uffff\11\153\14\153\25\153\uffff\ufffe\35" +
		"\uffff\6\166\11\166\14\166\23\166\24\166\25\166\36\166\37\166\40\166\41\166\45\166" +
		"\50\166\51\166\52\166\53\166\54\166\55\166\56\166\57\166\60\166\61\166\62\166\63" +
		"\166\64\166\65\166\66\166\67\166\70\166\71\166\72\166\74\166\uffff\ufffe\34\uffff" +
		"\6\201\11\201\14\201\23\201\24\201\25\201\35\201\36\201\37\201\40\201\41\201\45\201" +
		"\50\201\51\201\52\201\53\201\54\201\55\201\56\201\57\201\60\201\61\201\62\201\63" +
		"\201\64\201\65\201\66\201\67\201\70\201\71\201\72\201\74\201\uffff\ufffe\46\uffff" +
		"\6\203\11\203\14\203\23\203\24\203\25\203\34\203\35\203\36\203\37\203\40\203\41\203" +
		"\45\203\50\203\51\203\52\203\53\203\54\203\55\203\56\203\57\203\60\203\61\203\62" +
		"\203\63\203\64\203\65\203\66\203\67\203\70\203\71\203\72\203\74\203\uffff\ufffe\31" +
		"\uffff\32\uffff\6\207\11\207\14\207\23\207\24\207\25\207\34\207\35\207\36\207\37" +
		"\207\40\207\41\207\45\207\46\207\50\207\51\207\52\207\53\207\54\207\55\207\56\207" +
		"\57\207\60\207\61\207\62\207\63\207\64\207\65\207\66\207\67\207\70\207\71\207\72" +
		"\207\74\207\uffff\ufffe\37\uffff\23\224\36\224\41\224\50\224\51\224\52\224\53\224" +
		"\54\224\55\224\56\224\57\224\60\224\61\224\62\224\63\224\64\224\65\224\66\224\67" +
		"\224\70\224\71\224\72\224\uffff\ufffe\37\uffff\23\226\36\226\41\226\50\226\51\226" +
		"\52\226\53\226\54\226\55\226\56\226\57\226\60\226\61\226\62\226\63\226\64\226\65" +
		"\226\66\226\67\226\70\226\71\226\72\226\uffff\ufffe\41\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\7\123\uffff" +
		"\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41\uffff\72" +
		"\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61" +
		"\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50" +
		"\uffff\74\uffff\11\153\14\153\uffff\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff" +
		"\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff" +
		"\53\uffff\52\uffff\51\uffff\50\uffff\74\uffff\11\153\14\153\uffff\ufffe\3\uffff\0" +
		"\65\10\65\21\65\23\65\40\65\41\65\50\65\51\65\52\65\53\65\54\65\55\65\56\65\57\65" +
		"\60\65\61\65\62\65\63\65\64\65\65\65\66\65\67\65\70\65\71\65\72\65\74\65\uffff\ufffe" +
		"\6\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\45\uffff" +
		"\74\uffff\11\153\25\153\uffff\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff\37" +
		"\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53" +
		"\uffff\52\uffff\51\uffff\50\uffff\74\uffff\11\153\14\153\25\153\uffff\ufffe\6\uffff" +
		"\21\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\74\uffff" +
		"\11\153\14\153\25\153\uffff\ufffe\6\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40" +
		"\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52" +
		"\uffff\51\uffff\50\uffff\74\uffff\11\153\14\153\25\153\uffff\ufffe\35\uffff\6\167" +
		"\11\167\14\167\23\167\24\167\25\167\36\167\37\167\40\167\41\167\45\167\50\167\51" +
		"\167\52\167\53\167\54\167\55\167\56\167\57\167\60\167\61\167\62\167\63\167\64\167" +
		"\65\167\66\167\67\167\70\167\71\167\72\167\74\167\uffff\ufffe\37\uffff\23\225\36" +
		"\225\41\225\50\225\51\225\52\225\53\225\54\225\55\225\56\225\57\225\60\225\61\225" +
		"\62\225\63\225\64\225\65\225\66\225\67\225\70\225\71\225\72\225\uffff\ufffe\6\uffff" +
		"\21\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\74\uffff" +
		"\11\153\14\153\uffff\ufffe\23\uffff\0\67\10\67\21\67\40\67\41\67\50\67\51\67\52\67" +
		"\53\67\54\67\55\67\56\67\57\67\60\67\61\67\62\67\63\67\64\67\65\67\66\67\67\67\70" +
		"\67\71\67\72\67\74\67\uffff\ufffe\31\uffff\32\uffff\6\210\11\210\14\210\23\210\24" +
		"\210\25\210\34\210\35\210\36\210\37\210\40\210\41\210\45\210\46\210\50\210\51\210" +
		"\52\210\53\210\54\210\55\210\56\210\57\210\60\210\61\210\62\210\63\210\64\210\65" +
		"\210\66\210\67\210\70\210\71\210\72\210\74\210\uffff\ufffe\35\206\6\206\11\206\14" +
		"\206\23\206\24\206\25\206\36\206\37\206\40\206\41\206\45\206\50\206\51\206\52\206" +
		"\53\206\54\206\55\206\56\206\57\206\60\206\61\206\62\206\63\206\64\206\65\206\66" +
		"\206\67\206\70\206\71\206\72\206\74\206\uffff\ufffe\74\uffff\0\71\10\71\21\71\40" +
		"\71\41\71\50\71\51\71\52\71\53\71\54\71\55\71\56\71\57\71\60\71\61\71\62\71\63\71" +
		"\64\71\65\71\66\71\67\71\70\71\71\71\72\71\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(142,
		"\0\2\4\17\31\31\31\46\52\56\60\65\71\104\111\112\123\130\154\165\221\235\252\253" +
		"\257\263\272\275\276\303\312\332\361\u0107\u0149\u0151\u0159\u0160\u0161\u0162\u0164" +
		"\u01a8\u01eb\u022e\u0272\u02b5\u02f8\u033b\u037e\u03c1\u0404\u044a\u048e\u04d2\u0515" +
		"\u0558\u059b\u05df\u0622\u0665\u0665\u0672\u0673\u0674\u0675\u0677\u0679\u067b\u067c" +
		"\u067e\u067f\u0681\u069c\u06c2\u06c5\u06c7\u06cb\u06cd\u06ce\u06d0\u06d2\u06d4\u06d5" +
		"\u06d6\u06d7\u06d9\u06da\u06dc\u06de\u06df\u06e1\u06e3\u06e5\u06e6\u06e8\u06e9\u06eb" +
		"\u06ed\u06ed\u06f3\u06f9\u0700\u0707\u0712\u071a\u0726\u0732\u073f\u074e\u075d\u0769" +
		"\u0778\u0788\u078a\u0796\u0799\u07a9\u07bc\u07c8\u07c9\u07d0\u07d8\u07d9\u07da\u07dc" +
		"\u07df\u07e2\u07ef\u0805\u0806\u0808\u0809\u080a\u080b\u080c\u080d\u0810\u0811\u081c" +
		"\u081d\u081e\u081f");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(2079,
		"\u0126\u0127\125\174\1\6\22\40\50\62\114\126\220\237\346\1\6\50\54\62\114\220\237" +
		"\311\346\107\136\204\242\254\256\302\303\326\331\336\337\356\135\213\216\304\25\44" +
		"\45\65\252\330\43\70\77\146\247\70\122\146\231\35\37\60\117\233\236\251\354\355\375" +
		"\u0109\21\126\162\172\226\u011b\27\71\123\126\162\172\226\233\u011d\70\130\146\247" +
		"\376\1\6\50\61\62\101\114\126\162\172\204\220\226\237\242\302\303\331\336\356\30" +
		"\123\126\162\172\226\323\324\370\20\31\33\100\126\135\162\172\204\216\226\242\244" +
		"\254\256\267\302\303\326\331\332\333\334\336\337\344\356\361\204\242\254\256\302" +
		"\303\326\331\336\337\344\356\53\72\74\155\162\172\226\325\330\375\u010e\u0117\u011d" +
		"\320\126\162\172\226\126\162\172\226\126\162\172\226\266\u0100\u011a\266\u0100\u011a" +
		"\247\126\162\172\226\263\126\162\172\226\257\341\u0104\204\242\254\256\267\302\303" +
		"\326\331\332\333\334\336\337\344\356\107\126\136\143\162\172\204\226\241\242\254" +
		"\256\270\271\302\303\326\331\336\337\344\352\356\1\6\25\45\50\62\101\114\134\136" +
		"\204\220\237\242\256\302\303\326\331\336\337\356\1\2\6\13\22\25\32\36\45\50\52\61" +
		"\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220" +
		"\226\236\237\241\242\243\254\256\267\275\302\303\307\315\321\322\324\326\331\332" +
		"\333\334\336\337\344\346\356\372\373\u010e\u0110\u0121\u0122\1\6\50\62\114\220\237" +
		"\346\1\6\50\62\114\220\237\346\1\6\50\62\114\220\237\326\265\3\23\1\2\6\13\22\25" +
		"\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175" +
		"\201\204\206\207\210\216\220\226\236\237\241\242\243\254\256\267\275\302\303\307" +
		"\315\321\322\324\326\331\332\333\334\336\337\344\346\356\372\373\u010e\u0110\u0121" +
		"\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150" +
		"\151\162\172\175\201\204\206\207\210\220\226\236\237\240\241\242\243\254\256\267" +
		"\275\302\303\307\315\321\322\324\326\331\332\333\334\336\337\344\346\356\372\373" +
		"\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126" +
		"\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\240\241\242" +
		"\243\254\256\267\275\302\303\307\315\321\322\324\326\331\332\333\334\336\337\344" +
		"\346\356\372\373\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101" +
		"\107\114\115\126\134\135\136\142\150\151\162\172\175\201\204\206\207\210\216\220" +
		"\226\236\237\241\242\243\254\256\267\275\302\303\307\315\321\322\324\326\331\332" +
		"\333\334\336\337\344\346\356\372\373\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36" +
		"\45\50\52\61\62\76\101\107\114\115\126\133\134\136\142\150\151\162\172\175\201\204" +
		"\206\207\210\220\226\236\237\241\242\243\254\256\267\275\302\303\307\315\321\322" +
		"\324\326\331\332\333\334\336\337\344\346\356\372\373\u010e\u0110\u0121\u0122\1\2" +
		"\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\133\134\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\220\226\236\237\241\242\243\254\256\267\275\302\303" +
		"\307\315\321\322\324\326\331\332\333\334\336\337\344\346\356\372\373\u010e\u0110" +
		"\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\133\134\136" +
		"\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\243\254\256" +
		"\267\275\302\303\307\315\321\322\324\326\331\332\333\334\336\337\344\346\356\372" +
		"\373\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115" +
		"\126\133\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241" +
		"\242\243\254\256\267\275\302\303\307\315\321\322\324\326\331\332\333\334\336\337" +
		"\344\346\356\372\373\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62" +
		"\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\232\236\237\241\242\243\254\256\267\275\302\303\307\315\321\322\324\326\331\332" +
		"\333\334\336\337\344\346\356\372\373\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36" +
		"\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206" +
		"\207\210\220\226\236\237\241\242\243\254\256\267\275\302\303\307\315\321\322\324" +
		"\326\331\332\333\334\336\337\344\346\356\372\373\u010a\u010e\u0110\u0121\u0122\1" +
		"\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142\150\151" +
		"\162\172\175\201\204\205\206\207\210\216\220\226\236\237\241\242\243\254\256\267" +
		"\275\302\303\307\315\321\322\324\326\331\332\333\334\336\337\344\346\356\372\373" +
		"\u010a\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114" +
		"\115\126\134\135\136\142\150\151\162\172\175\201\204\206\207\210\216\220\226\236" +
		"\237\241\242\243\254\256\267\275\302\303\307\315\321\322\324\326\331\332\333\334" +
		"\336\337\344\346\356\372\373\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52" +
		"\61\62\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175\201\204\206\207" +
		"\210\216\220\226\236\237\241\242\243\254\256\267\275\302\303\307\315\321\322\324" +
		"\326\331\332\333\334\336\337\344\346\356\372\373\u010e\u0110\u0121\u0122\1\2\6\13" +
		"\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175" +
		"\201\204\206\207\210\220\226\236\237\241\242\243\254\256\267\275\302\303\307\315" +
		"\321\322\324\326\331\332\333\334\336\337\344\346\356\372\373\u010a\u010e\u0110\u0121" +
		"\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150" +
		"\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\243\254\256\267\275" +
		"\302\303\307\315\321\322\324\326\331\332\333\334\336\337\344\346\356\372\373\u010a" +
		"\u010e\u0110\u0121\u0122\0\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115" +
		"\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242" +
		"\243\254\256\267\275\302\303\307\315\321\322\324\326\331\332\333\334\336\337\344" +
		"\346\356\372\373\u010e\u0110\u0121\u0122\1\2\6\13\20\22\25\32\36\45\50\52\61\62\73" +
		"\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\236\237\241\242\243\254\256\267\275\302\303\307\315\321\322\324\326\331\332\333" +
		"\334\336\337\344\346\356\372\373\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\42" +
		"\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206" +
		"\207\210\220\226\236\237\241\242\243\254\256\267\275\302\303\307\315\321\322\324" +
		"\326\331\332\333\334\336\337\344\346\356\372\373\u010e\u0110\u0121\u0122\1\2\6\13" +
		"\22\25\32\36\45\50\52\61\62\63\76\101\107\114\115\126\134\136\142\150\151\162\172" +
		"\175\201\204\206\207\210\220\226\236\237\241\242\243\254\256\267\275\302\303\307" +
		"\315\321\322\324\326\331\332\333\334\336\337\344\346\356\372\373\u010e\u0110\u0121" +
		"\u0122\204\242\254\256\302\303\326\331\336\337\344\356\u010c\202\0\0\25\45\44\65" +
		"\20\73\3\3\23\25\25\45\61\76\101\107\136\142\151\204\207\210\241\242\254\256\267" +
		"\275\302\303\324\326\331\332\334\336\337\344\356\1\6\50\62\114\175\201\204\206\220" +
		"\236\237\242\243\254\256\267\302\303\315\321\322\326\331\332\333\334\336\337\344" +
		"\346\356\372\373\u010e\u0110\u0121\u0122\100\135\216\126\162\126\162\172\226\125" +
		"\174\61\61\101\61\101\61\101\231\361\u010a\61\101\76\150\307\76\151\107\107\136\107" +
		"\136\135\216\133\107\136\175\175\315\201\372\204\242\302\303\331\356\204\242\302" +
		"\303\331\356\204\242\302\303\331\336\356\204\242\302\303\331\336\356\204\242\254" +
		"\256\302\303\326\331\336\337\356\204\242\254\302\303\331\336\356\204\242\254\256" +
		"\302\303\326\331\336\337\344\356\204\242\254\256\302\303\326\331\336\337\344\356" +
		"\204\242\254\256\267\302\303\326\331\336\337\344\356\204\242\254\256\267\302\303" +
		"\326\331\332\334\336\337\344\356\204\242\254\256\267\302\303\326\331\332\334\336" +
		"\337\344\356\204\242\254\256\302\303\326\331\336\337\344\356\204\242\254\256\267" +
		"\302\303\326\331\332\334\336\337\344\356\204\242\254\256\267\302\303\326\331\332" +
		"\333\334\336\337\344\356\u0110\u0122\204\242\254\256\302\303\326\331\336\337\344" +
		"\356\107\136\241\107\136\204\241\242\254\256\271\302\303\326\331\336\337\344\356" +
		"\107\136\143\204\241\242\254\256\270\271\302\303\326\331\336\337\344\352\356\204" +
		"\242\254\256\302\303\326\331\336\337\344\356\243\1\6\50\62\114\220\237\1\6\50\62" +
		"\114\220\237\346\6\52\70\146\2\13\32\2\13\32\204\242\254\256\302\303\326\331\336" +
		"\337\344\356\u010c\1\6\25\45\50\62\101\114\134\136\204\220\237\242\256\302\303\326" +
		"\331\336\337\356\3\20\73\100\231\311\361\u010c\207\210\275\232\204\242\254\256\302" +
		"\303\326\331\336\337\356\u0110\52\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(2079,
		"\u0128\u0129\153\153\4\4\37\60\4\4\4\155\4\4\4\5\5\5\74\5\5\5\5\360\5\133\133\240" +
		"\240\240\240\240\240\240\240\240\240\240\204\302\303\356\42\63\42\63\336\373\62\111" +
		"\125\111\332\112\150\112\307\55\57\75\147\314\316\335\u0107\u0108\u0110\u0112\36" +
		"\156\156\156\156\u0121\50\115\151\157\157\157\157\315\u0122\113\174\113\333\333\6" +
		"\6\6\76\6\76\6\160\160\160\241\6\160\6\241\241\241\241\241\241\51\152\161\161\161" +
		"\161\366\367\u010d\32\52\54\126\162\126\162\162\242\126\162\242\331\242\242\242\242" +
		"\242\242\242\242\242\242\242\242\242\242\u010a\243\243\243\243\243\243\243\243\243" +
		"\243\243\243\73\116\120\224\225\227\306\371\374\u0111\u011a\u011e\u0123\363\163\163" +
		"\163\163\164\164\164\164\165\165\165\165\347\347\u011f\350\350\u0120\334\166\166" +
		"\166\166\345\167\167\167\167\344\344\344\244\244\244\244\244\244\244\244\244\244" +
		"\244\244\244\244\244\244\134\170\134\134\170\170\134\170\134\134\134\134\134\134" +
		"\134\134\134\134\134\134\134\134\134\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7" +
		"\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121" +
		"\171\171\10\10\245\10\121\121\10\171\10\10\121\245\10\245\245\245\121\245\245\221" +
		"\10\10\10\121\245\245\245\10\245\245\245\245\10\245\10\10\10\10\10\10\11\11\11\11" +
		"\11\11\11\11\12\12\12\12\12\12\12\12\13\13\13\13\13\13\13\372\346\22\22\10\17\10" +
		"\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\205\121\121\221\121\171" +
		"\171\10\10\245\10\121\121\205\10\171\10\10\121\245\10\245\245\245\121\245\245\221" +
		"\10\10\10\121\245\245\245\10\245\245\245\245\10\245\10\10\10\10\10\10\10\17\10\17" +
		"\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10" +
		"\10\245\10\121\121\10\171\10\10\321\121\245\10\245\245\245\121\245\245\221\10\10" +
		"\10\121\245\245\245\10\245\245\245\245\10\245\10\10\10\10\10\10\10\17\10\17\40\43" +
		"\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\245" +
		"\10\121\121\10\171\10\10\322\121\245\10\245\245\245\121\245\245\221\10\10\10\121" +
		"\245\245\245\10\245\245\245\245\10\245\10\10\10\10\10\10\10\17\10\17\40\43\17\56" +
		"\43\10\70\77\10\121\77\121\10\146\171\202\206\121\121\221\121\171\171\10\10\245\10" +
		"\121\121\206\10\171\10\10\121\245\10\245\245\245\121\245\245\221\10\10\10\121\245" +
		"\245\245\10\245\245\245\245\10\245\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10" +
		"\70\77\10\121\77\121\10\146\171\175\202\121\121\221\121\171\171\10\10\245\10\121" +
		"\121\10\171\10\10\121\245\10\245\245\245\121\245\245\221\10\10\10\121\245\245\245" +
		"\10\245\245\245\245\10\245\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77" +
		"\10\121\77\121\10\146\171\176\202\121\121\221\121\171\171\10\10\245\10\121\121\10" +
		"\171\10\10\121\245\10\245\245\245\121\245\245\221\10\10\10\121\245\245\245\10\245" +
		"\245\245\245\10\245\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121" +
		"\77\121\10\146\171\177\202\121\121\221\121\171\171\10\10\245\10\121\121\10\171\10" +
		"\10\121\245\10\245\245\245\121\245\245\221\10\10\10\121\245\245\245\10\245\245\245" +
		"\245\10\245\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10" +
		"\146\171\200\202\121\121\221\121\171\171\10\10\245\10\121\121\10\171\10\10\121\245" +
		"\10\245\245\245\121\245\245\221\10\10\10\121\245\245\245\10\245\245\245\245\10\245" +
		"\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202" +
		"\121\121\221\121\171\171\10\10\245\10\121\121\10\171\312\10\10\121\245\10\245\245" +
		"\245\121\245\245\221\10\10\10\121\245\245\245\10\245\245\245\245\10\245\10\10\10" +
		"\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121" +
		"\221\121\171\171\10\10\245\10\121\121\10\171\10\10\121\245\10\245\245\245\121\245" +
		"\245\221\10\10\10\121\245\245\245\10\245\245\245\245\10\245\10\10\u0113\10\10\10" +
		"\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\207\121\121" +
		"\221\121\171\171\10\10\245\275\10\121\121\207\10\171\10\10\121\245\10\245\245\245" +
		"\121\245\245\221\10\10\10\121\245\245\245\10\245\245\245\245\10\245\10\10\u0114\10" +
		"\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\210\121" +
		"\121\221\121\171\171\10\10\245\10\121\121\210\10\171\10\10\121\245\10\245\245\245" +
		"\121\245\245\221\10\10\10\121\245\245\245\10\245\245\245\245\10\245\10\10\10\10\10" +
		"\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\211\121\121" +
		"\221\121\171\171\10\10\245\10\121\121\211\10\171\10\10\121\245\10\245\245\245\121" +
		"\245\245\221\10\10\10\121\245\245\245\10\245\245\245\245\10\245\10\10\10\10\10\10" +
		"\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121" +
		"\171\171\10\10\245\10\121\121\10\171\10\10\121\245\10\245\245\245\121\245\245\221" +
		"\10\10\10\121\245\245\245\10\245\245\245\245\10\245\10\10\u0115\10\10\10\10\10\17" +
		"\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171" +
		"\10\10\245\10\121\121\10\171\10\10\121\245\10\245\245\245\121\245\245\221\10\10\10" +
		"\121\245\245\245\10\245\245\245\245\10\245\10\10\u0116\10\10\10\10\2\10\17\10\17" +
		"\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10" +
		"\10\245\10\121\121\10\171\10\10\121\245\10\245\245\245\121\245\245\221\10\10\10\121" +
		"\245\245\245\10\245\245\245\245\10\245\10\10\10\10\10\10\10\17\10\17\33\40\43\17" +
		"\56\43\10\70\77\10\33\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\245" +
		"\10\121\121\10\171\10\10\121\245\10\245\245\245\121\245\245\221\10\10\10\121\245" +
		"\245\245\10\245\245\245\245\10\245\10\10\10\10\10\10\10\17\10\17\40\43\17\56\61\43" +
		"\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\245\10\121\121" +
		"\10\171\10\10\121\245\10\245\245\245\121\245\245\221\10\10\10\121\245\245\245\10" +
		"\245\245\245\245\10\245\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10" +
		"\107\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\245\10\121\121\10\171" +
		"\10\10\121\245\10\245\245\245\121\245\245\221\10\10\10\121\245\245\245\10\245\245" +
		"\245\245\10\245\10\10\10\10\10\10\246\246\246\246\246\246\246\246\246\246\246\246" +
		"\246\237\u0126\3\44\65\64\110\34\34\23\24\41\45\46\66\100\122\100\135\135\216\122" +
		"\247\277\277\323\247\247\247\247\277\247\247\370\247\247\376\376\247\247\247\247" +
		"\14\14\14\14\14\232\235\250\276\14\317\14\250\327\250\250\250\250\250\232\364\365" +
		"\250\250\250\250\250\250\250\250\u0105\250\235\u010f\317\u011b\u0124\u011b\127\212" +
		"\212\172\226\173\173\230\230\154\231\101\102\131\103\103\104\104\310\u010b\u0117" +
		"\105\105\123\222\357\124\223\136\137\214\140\140\213\304\201\141\141\233\234\362" +
		"\236\u010e\251\325\354\355\375\u0109\252\252\252\252\252\252\253\253\253\253\253" +
		"\u0102\253\254\254\254\254\254\254\254\255\255\255\255\255\255\255\255\255\255\255" +
		"\256\326\337\256\256\256\256\256\257\257\257\341\257\257\341\257\257\341\u0104\257" +
		"\260\260\260\260\260\260\260\260\260\260\260\260\261\261\261\261\351\261\261\261" +
		"\261\261\261\261\261\262\262\262\262\262\262\262\262\262\377\u0101\262\262\262\262" +
		"\263\263\263\263\263\263\263\263\263\263\263\263\263\263\263\264\264\264\264\264" +
		"\264\264\264\264\264\264\264\265\265\265\265\265\265\265\265\265\265\265\265\265" +
		"\265\265\266\266\266\266\266\266\266\266\266\266\u0100\266\266\266\266\266\u011c" +
		"\u0125\267\267\267\267\267\267\267\267\267\267\267\267\142\142\324\143\143\270\143" +
		"\270\270\270\352\270\270\270\270\270\270\270\270\144\144\217\144\144\144\144\144" +
		"\217\144\144\144\144\144\144\144\144\217\144\271\271\271\271\271\271\271\271\271" +
		"\271\271\271\330\u0127\26\67\106\145\305\320\15\15\15\15\15\15\15\u0106\27\71\114" +
		"\220\20\31\53\21\21\21\272\272\272\272\272\272\272\272\272\272\272\272\u0118\16\16" +
		"\47\47\16\16\132\16\203\215\273\16\16\273\342\273\273\342\273\273\342\273\25\35\117" +
		"\130\311\361\u010c\u0119\300\301\353\313\274\274\340\343\274\274\343\274\274\u0103" +
		"\274\u011d\72\30");

	private static final short[] lapg_rlen = TMLexer.unpack_short(185,
		"\1\0\5\4\4\3\1\0\7\4\3\3\4\1\2\4\3\1\2\3\1\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2" +
		"\1\1\2\2\1\1\1\3\1\0\1\0\1\0\1\0\1\0\10\3\2\3\1\1\1\1\3\1\3\1\3\1\1\2\2\1\1\6\5\5" +
		"\4\2\1\0\3\2\2\1\1\1\1\1\4\4\1\3\1\0\2\1\2\1\3\1\1\3\1\0\3\2\2\1\1\3\4\3\3\3\1\2" +
		"\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\3\1\6\4\3\1\2\1\1\1\2\5\2\2\3\1\3" +
		"\1\1\1\0\5\1\0\3\1\1\1\1\1\1\3\3\5\1\1\1\1\1\3\1\1");

	private static final short[] lapg_rlex = TMLexer.unpack_short(185,
		"\200\200\76\76\76\76\201\201\77\77\100\101\102\103\103\104\104\105\105\106\106\107" +
		"\110\111\111\112\112\113\113\113\113\113\113\113\113\113\113\113\113\113\114\115" +
		"\115\115\116\116\116\117\202\202\203\203\204\204\205\205\206\206\120\120\121\122" +
		"\123\123\123\123\124\125\125\126\127\127\130\130\130\131\131\132\132\132\132\133" +
		"\207\207\133\133\133\133\133\134\134\134\135\135\136\136\210\210\137\140\140\141" +
		"\141\142\143\143\211\211\144\144\144\144\144\145\145\145\146\146\147\147\147\150" +
		"\150\150\151\151\152\152\152\153\153\154\154\154\155\156\156\157\157\157\157\157" +
		"\157\212\212\157\157\160\161\161\161\162\163\163\164\164\164\165\166\166\167\167" +
		"\213\213\167\214\214\167\167\170\170\170\170\171\171\172\172\173\173\173\174\175" +
		"\175\176\177");

	protected static final String[] lapg_syms = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'='",
		"'=>'",
		"';'",
		"'.'",
		"'..'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"'(?!'",
		"')'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"imports",
		"import_",
		"options",
		"option",
		"identifier",
		"symref",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexem_transition",
		"lexem_attrs",
		"lexem_attribute",
		"state_selector",
		"state_list",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"assoc",
		"directive",
		"inputs",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule_list",
		"rule0",
		"rhsPrefix",
		"rhsSuffix",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsBracketsPair",
		"rhsAnnotations",
		"annotations",
		"annotation_list",
		"annotation",
		"negative_la",
		"negative_la_clause",
		"expression",
		"literal",
		"expression_list",
		"map_entries",
		"map_separator",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"importsopt",
		"parsing_algorithmopt",
		"typeopt",
		"lexem_transitionopt",
		"iconopt",
		"lexem_attrsopt",
		"commandopt",
		"identifieropt",
		"Lnoeoiopt",
		"rhsSuffixopt",
		"rhsBracketsPair_list",
		"map_entriesopt",
		"expression_listopt",
	};

	public interface Tokens extends Lexems {
		// non-terminals
		public static final int input = 62;
		public static final int header = 63;
		public static final int lexer_section = 64;
		public static final int parser_section = 65;
		public static final int parsing_algorithm = 66;
		public static final int imports = 67;
		public static final int import_ = 68;
		public static final int options = 69;
		public static final int option = 70;
		public static final int identifier = 71;
		public static final int symref = 72;
		public static final int type = 73;
		public static final int type_part_list = 74;
		public static final int type_part = 75;
		public static final int pattern = 76;
		public static final int lexer_parts = 77;
		public static final int lexer_part = 78;
		public static final int named_pattern = 79;
		public static final int lexeme = 80;
		public static final int lexem_transition = 81;
		public static final int lexem_attrs = 82;
		public static final int lexem_attribute = 83;
		public static final int state_selector = 84;
		public static final int state_list = 85;
		public static final int stateref = 86;
		public static final int lexer_state = 87;
		public static final int grammar_parts = 88;
		public static final int grammar_part = 89;
		public static final int nonterm = 90;
		public static final int nonterm_type = 91;
		public static final int assoc = 92;
		public static final int directive = 93;
		public static final int inputs = 94;
		public static final int inputref = 95;
		public static final int references = 96;
		public static final int references_cs = 97;
		public static final int rules = 98;
		public static final int rule_list = 99;
		public static final int rule0 = 100;
		public static final int rhsPrefix = 101;
		public static final int rhsSuffix = 102;
		public static final int rhsParts = 103;
		public static final int rhsPart = 104;
		public static final int rhsAnnotated = 105;
		public static final int rhsAssignment = 106;
		public static final int rhsOptional = 107;
		public static final int rhsCast = 108;
		public static final int rhsUnordered = 109;
		public static final int rhsClass = 110;
		public static final int rhsPrimary = 111;
		public static final int rhsBracketsPair = 112;
		public static final int rhsAnnotations = 113;
		public static final int annotations = 114;
		public static final int annotation_list = 115;
		public static final int annotation = 116;
		public static final int negative_la = 117;
		public static final int negative_la_clause = 118;
		public static final int expression = 119;
		public static final int literal = 120;
		public static final int expression_list = 121;
		public static final int map_entries = 122;
		public static final int map_separator = 123;
		public static final int name = 124;
		public static final int qualified_id = 125;
		public static final int command = 126;
		public static final int syntax_problem = 127;
		public static final int importsopt = 128;
		public static final int parsing_algorithmopt = 129;
		public static final int typeopt = 130;
		public static final int lexem_transitionopt = 131;
		public static final int iconopt = 132;
		public static final int lexem_attrsopt = 133;
		public static final int commandopt = 134;
		public static final int identifieropt = 135;
		public static final int Lnoeoiopt = 136;
		public static final int rhsSuffixopt = 137;
		public static final int rhsBracketsPair_list = 138;
		public static final int map_entriesopt = 139;
		public static final int expression_listopt = 140;
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int lapg_symbols_ok = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				lapg_symbols_ok++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (lapg_symbols_ok >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (lapg_symbols_ok <= 1) {
						tmNext = tmLexer.next();
					}
					lapg_symbols_ok = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (lapg_symbols_ok >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 32) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 32;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 32);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", lapg_syms[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol lapg_gg = new LapgSymbol();
		lapg_gg.value = (lapg_rlen[rule] != 0) ? tmStack[tmHead + 1 - lapg_rlen[rule]].value : null;
		lapg_gg.symbol = lapg_rlex[rule];
		lapg_gg.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + lapg_syms[lapg_rlex[rule]]);
		}
		LapgSymbol startsym = (lapg_rlen[rule] != 0) ? tmStack[tmHead + 1 - lapg_rlen[rule]] : tmNext;
		lapg_gg.line = startsym.line;
		lapg_gg.offset = startsym.offset;
		lapg_gg.endoffset = (lapg_rlen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(lapg_gg, rule, lapg_rlen[rule]);
		for (int e = lapg_rlen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = lapg_gg;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, lapg_gg.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol lapg_gg, int rule, int ruleLength) {
		switch (rule) {
			case 2:  // input ::= header importsopt options lexer_section parser_section
				 lapg_gg.value = new TmaInput(((TmaHeader)tmStack[tmHead - 4].value), ((List<TmaImport>)tmStack[tmHead - 3].value), ((List<TmaOption>)tmStack[tmHead - 2].value), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 3:  // input ::= header importsopt options lexer_section
				 lapg_gg.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)tmStack[tmHead - 1].value), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 4:  // input ::= header importsopt lexer_section parser_section
				 lapg_gg.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 5:  // input ::= header importsopt lexer_section
				 lapg_gg.value = new TmaInput(((TmaHeader)tmStack[tmHead - 2].value), ((List<TmaImport>)tmStack[tmHead - 1].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 8:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				 lapg_gg.value = new TmaHeader(((TmaName)tmStack[tmHead - 3].value), ((TmaName)tmStack[tmHead - 5].value), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value),  source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 9:  // header ::= Llanguage name parsing_algorithmopt ';'
				 lapg_gg.value = new TmaHeader(((TmaName)null), ((TmaName)tmStack[tmHead - 2].value), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value),  source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 10:  // lexer_section ::= '::' Llexer lexer_parts
				 lapg_gg.value = ((List<ITmaLexerPart>)tmStack[tmHead].value); 
				break;
			case 11:  // parser_section ::= '::' Lparser grammar_parts
				 lapg_gg.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value); 
				break;
			case 12:  // parsing_algorithm ::= Llalr '(' icon ')'
				 lapg_gg.value = new TmaParsingAlgorithm(((Integer)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 13:  // imports ::= import_
				 lapg_gg.value = new ArrayList<TmaImport>(16); ((List<TmaImport>)lapg_gg.value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 14:  // imports ::= imports import_
				 ((List<TmaImport>)tmStack[tmHead - 1].value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 15:  // import_ ::= Limport ID scon ';'
				 lapg_gg.value = new TmaImport(((String)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 16:  // import_ ::= Limport scon ';'
				 lapg_gg.value = new TmaImport(((String)null), ((String)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 17:  // options ::= option
				 lapg_gg.value = new ArrayList<TmaOption>(16); ((List<TmaOption>)lapg_gg.value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 18:  // options ::= options option
				 ((List<TmaOption>)tmStack[tmHead - 1].value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 19:  // option ::= ID '=' expression
				 lapg_gg.value = new TmaOption(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 20:  // option ::= syntax_problem
				 lapg_gg.value = new TmaOption(((TmaSyntaxProblem)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 21:  // identifier ::= ID
				 lapg_gg.value = new TmaIdentifier(((String)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 22:  // symref ::= ID
				 lapg_gg.value = new TmaSymref(((String)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 23:  // type ::= '(' scon ')'
				 lapg_gg.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 24:  // type ::= '(' type_part_list ')'
				 lapg_gg.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 40:  // pattern ::= regexp
				 lapg_gg.value = new TmaPattern(((String)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 41:  // lexer_parts ::= lexer_part
				 lapg_gg.value = new ArrayList<ITmaLexerPart>(64); ((List<ITmaLexerPart>)lapg_gg.value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 42:  // lexer_parts ::= lexer_parts lexer_part
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 43:  // lexer_parts ::= lexer_parts syntax_problem
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 47:  // named_pattern ::= ID '=' pattern
				 lapg_gg.value = new TmaNamedPattern(((String)tmStack[tmHead - 2].value), ((TmaPattern)tmStack[tmHead].value), source, lapg_gg.line, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 58:  // lexeme ::= identifier typeopt ':' pattern lexem_transitionopt iconopt lexem_attrsopt commandopt
				 lapg_gg.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 7].value), ((String)tmStack[tmHead - 6].value), ((TmaPattern)tmStack[tmHead - 4].value), ((TmaStateref)tmStack[tmHead - 3].value), ((Integer)tmStack[tmHead - 2].value), ((TmaLexemAttrs)tmStack[tmHead - 1].value), ((TmaCommand)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 59:  // lexeme ::= identifier typeopt ':'
				 lapg_gg.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), ((TmaPattern)null), ((TmaStateref)null), ((Integer)null), ((TmaLexemAttrs)null), ((TmaCommand)null), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 60:  // lexem_transition ::= '=>' stateref
				 lapg_gg.value = ((TmaStateref)tmStack[tmHead].value); 
				break;
			case 61:  // lexem_attrs ::= '(' lexem_attribute ')'
				 lapg_gg.value = ((TmaLexemAttrs)tmStack[tmHead - 1].value); 
				break;
			case 62:  // lexem_attribute ::= Lsoft
				 lapg_gg.value = new TmaLexemAttrs(TmaLexemAttribute.LSOFT, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 63:  // lexem_attribute ::= Lclass
				 lapg_gg.value = new TmaLexemAttrs(TmaLexemAttribute.LCLASS, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 64:  // lexem_attribute ::= Lspace
				 lapg_gg.value = new TmaLexemAttrs(TmaLexemAttribute.LSPACE, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 65:  // lexem_attribute ::= Llayout
				 lapg_gg.value = new TmaLexemAttrs(TmaLexemAttribute.LLAYOUT, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 66:  // state_selector ::= '[' state_list ']'
				 lapg_gg.value = new TmaStateSelector(((List<TmaLexerState>)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 67:  // state_list ::= lexer_state
				 lapg_gg.value = new ArrayList<Integer>(4); ((List<TmaLexerState>)lapg_gg.value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 68:  // state_list ::= state_list ',' lexer_state
				 ((List<TmaLexerState>)tmStack[tmHead - 2].value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 69:  // stateref ::= ID
				 lapg_gg.value = new TmaStateref(((String)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 70:  // lexer_state ::= identifier '=>' stateref
				 lapg_gg.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaStateref)tmStack[tmHead].value), source, lapg_gg.line, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 71:  // lexer_state ::= identifier
				 lapg_gg.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead].value), ((TmaStateref)null), source, lapg_gg.line, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 72:  // grammar_parts ::= grammar_part
				 lapg_gg.value = new ArrayList<ITmaGrammarPart>(64); ((List<ITmaGrammarPart>)lapg_gg.value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 73:  // grammar_parts ::= grammar_parts grammar_part
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 74:  // grammar_parts ::= grammar_parts syntax_problem
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 77:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				 lapg_gg.value = new TmaNonterm(((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), ((TmaAnnotations)tmStack[tmHead - 5].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 78:  // nonterm ::= annotations identifier '::=' rules ';'
				 lapg_gg.value = new TmaNonterm(((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), ((TmaAnnotations)tmStack[tmHead - 4].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 79:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				 lapg_gg.value = new TmaNonterm(((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), ((TmaAnnotations)null), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 80:  // nonterm ::= identifier '::=' rules ';'
				 lapg_gg.value = new TmaNonterm(((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), ((TmaAnnotations)null), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 81:  // nonterm_type ::= Lreturns symref
				 lapg_gg.value = new TmaNontermTypeAST(((TmaSymref)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 84:  // nonterm_type ::= Linline Lclass identifieropt
				 lapg_gg.value = new TmaNontermTypeHint(TmaNontermTypeHint.Kind.INLINE_CLASS, ((TmaIdentifier)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 85:  // nonterm_type ::= Lclass identifieropt
				 lapg_gg.value = new TmaNontermTypeHint(TmaNontermTypeHint.Kind.CLASS, ((TmaIdentifier)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 86:  // nonterm_type ::= Linterface identifieropt
				 lapg_gg.value = new TmaNontermTypeHint(TmaNontermTypeHint.Kind.INTERFACE, ((TmaIdentifier)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 87:  // nonterm_type ::= Lvoid
				 lapg_gg.value = new TmaNontermTypeHint(TmaNontermTypeHint.Kind.VOID, null, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 88:  // nonterm_type ::= type
				 lapg_gg.value = new TmaNontermTypeRaw(((String)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 89:  // assoc ::= Lleft
				 lapg_gg.value = TmaAssoc.LLEFT; 
				break;
			case 90:  // assoc ::= Lright
				 lapg_gg.value = TmaAssoc.LRIGHT; 
				break;
			case 91:  // assoc ::= Lnonassoc
				 lapg_gg.value = TmaAssoc.LNONASSOC; 
				break;
			case 92:  // directive ::= '%' assoc references ';'
				 lapg_gg.value = new TmaDirectivePrio(((List<TmaSymref>)tmStack[tmHead - 1].value), ((TmaAssoc)tmStack[tmHead - 2].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 93:  // directive ::= '%' Linput inputs ';'
				 lapg_gg.value = new TmaDirectiveInput(((List<TmaInputref>)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 94:  // inputs ::= inputref
				 lapg_gg.value = new ArrayList<TmaInputref>(); ((List<TmaInputref>)lapg_gg.value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 95:  // inputs ::= inputs ',' inputref
				 ((List<TmaInputref>)tmStack[tmHead - 2].value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 98:  // inputref ::= symref Lnoeoiopt
				 lapg_gg.value = new TmaInputref(((TmaSymref)tmStack[tmHead - 1].value), ((String)tmStack[tmHead].value) != null, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 99:  // references ::= symref
				 lapg_gg.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)lapg_gg.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 100:  // references ::= references symref
				 ((List<TmaSymref>)tmStack[tmHead - 1].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 101:  // references_cs ::= symref
				 lapg_gg.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)lapg_gg.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 102:  // references_cs ::= references_cs ',' symref
				 ((List<TmaSymref>)tmStack[tmHead - 2].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 104:  // rule_list ::= rule0
				 lapg_gg.value = new ArrayList<TmaRule0>(); ((List<TmaRule0>)lapg_gg.value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 105:  // rule_list ::= rule_list '|' rule0
				 ((List<TmaRule0>)tmStack[tmHead - 2].value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 108:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				 lapg_gg.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 109:  // rule0 ::= rhsPrefix rhsSuffixopt
				 lapg_gg.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 1].value), ((List<ITmaRhsPart>)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 110:  // rule0 ::= rhsParts rhsSuffixopt
				 lapg_gg.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 111:  // rule0 ::= rhsSuffixopt
				 lapg_gg.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 112:  // rule0 ::= syntax_problem
				 lapg_gg.value = new TmaRule0(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 113:  // rhsPrefix ::= '[' annotations ']'
				 lapg_gg.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 1].value), null, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 114:  // rhsPrefix ::= '[' annotations identifier ']'
				 lapg_gg.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 2].value), ((TmaIdentifier)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 115:  // rhsPrefix ::= '[' identifier ']'
				 lapg_gg.value = new TmaRhsPrefix(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 116:  // rhsSuffix ::= '%' Lprio symref
				 lapg_gg.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LPRIO, ((TmaSymref)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 117:  // rhsSuffix ::= '%' Lshift symref
				 lapg_gg.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LSHIFT, ((TmaSymref)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 118:  // rhsParts ::= rhsPart
				 lapg_gg.value = new ArrayList<ITmaRhsPart>(); ((List<ITmaRhsPart>)lapg_gg.value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 119:  // rhsParts ::= rhsParts rhsPart
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 120:  // rhsParts ::= rhsParts syntax_problem
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 125:  // rhsAnnotated ::= rhsAnnotations rhsAssignment
				 lapg_gg.value = new TmaRhsAnnotated(((TmaRhsAnnotations)tmStack[tmHead - 1].value), ((ITmaRhsPart)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 127:  // rhsAssignment ::= identifier '=' rhsOptional
				 lapg_gg.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), false, ((ITmaRhsPart)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 128:  // rhsAssignment ::= identifier '+=' rhsOptional
				 lapg_gg.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), true, ((ITmaRhsPart)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 130:  // rhsOptional ::= rhsCast '?'
				 lapg_gg.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_OPTIONAL, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 132:  // rhsCast ::= rhsClass Las symref
				 lapg_gg.value = new TmaRhsCast(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 133:  // rhsCast ::= rhsClass Las literal
				 lapg_gg.value = new TmaRhsAsLiteral(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaLiteral)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 134:  // rhsUnordered ::= rhsPart '&' rhsPart
				 lapg_gg.value = new TmaRhsUnordered(((ITmaRhsPart)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 136:  // rhsClass ::= identifier ':' rhsPrimary
				 lapg_gg.value = new TmaRhsClass(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 137:  // rhsPrimary ::= symref
				 lapg_gg.value = new TmaRhsSymbol(((TmaSymref)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 138:  // rhsPrimary ::= '(' rules ')'
				 lapg_gg.value = new TmaRhsNested(((List<TmaRule0>)tmStack[tmHead - 1].value), source, lapg_gg.line, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 139:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				 lapg_gg.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), true, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 140:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				 lapg_gg.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), false, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 141:  // rhsPrimary ::= rhsPrimary '*'
				 lapg_gg.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ZEROORMORE, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 142:  // rhsPrimary ::= rhsPrimary '+'
				 lapg_gg.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ONEORMORE, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 143:  // rhsBracketsPair_list ::= rhsBracketsPair_list ',' rhsBracketsPair
				((List<TmaRhsBracketsPair>)lapg_gg.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 144:  // rhsBracketsPair_list ::= rhsBracketsPair
				lapg_gg.value = new ArrayList();
				((List<TmaRhsBracketsPair>)lapg_gg.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 145:  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list ')'
				 lapg_gg.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 3].value), ((List<TmaRhsBracketsPair>)tmStack[tmHead - 1].value), source, lapg_gg.line, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 146:  // rhsPrimary ::= '$' '(' rules ')'
				 lapg_gg.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 1].value), ((List<TmaRhsBracketsPair>)null), source, lapg_gg.line, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 147:  // rhsBracketsPair ::= symref '..' symref
				 lapg_gg.value = new TmaRhsBracketsPair(((TmaSymref)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, lapg_gg.line, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 148:  // rhsAnnotations ::= annotation_list
				 lapg_gg.value = new TmaRhsAnnotations(null, ((List<TmaAnnotation>)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 149:  // rhsAnnotations ::= negative_la annotation_list
				 lapg_gg.value = new TmaRhsAnnotations(((TmaNegativeLa)tmStack[tmHead - 1].value), ((List<TmaAnnotation>)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 150:  // rhsAnnotations ::= negative_la
				 lapg_gg.value = new TmaRhsAnnotations(((TmaNegativeLa)tmStack[tmHead].value), null, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 151:  // annotations ::= annotation_list
				 lapg_gg.value = new TmaAnnotations(((List<TmaAnnotation>)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 152:  // annotation_list ::= annotation
				 lapg_gg.value = new ArrayList<TmaAnnotation>(); ((List<TmaAnnotation>)lapg_gg.value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 153:  // annotation_list ::= annotation_list annotation
				 ((List<TmaAnnotation>)tmStack[tmHead - 1].value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 154:  // annotation ::= '@' ID '{' expression '}'
				 lapg_gg.value = new TmaAnnotation(((String)tmStack[tmHead - 3].value), ((ITmaExpression)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 155:  // annotation ::= '@' ID
				 lapg_gg.value = new TmaAnnotation(((String)tmStack[tmHead].value), ((ITmaExpression)null), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 156:  // annotation ::= '@' syntax_problem
				 lapg_gg.value = new TmaAnnotation(((TmaSyntaxProblem)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 157:  // negative_la ::= '(?!' negative_la_clause ')'
				 lapg_gg.value = new TmaNegativeLa(((List<TmaSymref>)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 158:  // negative_la_clause ::= symref
				 lapg_gg.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)lapg_gg.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 159:  // negative_la_clause ::= negative_la_clause '|' symref
				 ((List<TmaSymref>)tmStack[tmHead - 2].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 164:  // expression ::= Lnew name '(' map_entriesopt ')'
				 lapg_gg.value = new TmaInstance(((TmaName)tmStack[tmHead - 3].value), ((List<TmaMapEntriesItem>)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 167:  // expression ::= '[' expression_listopt ']'
				 lapg_gg.value = new TmaArray(((List<ITmaExpression>)tmStack[tmHead - 1].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 169:  // literal ::= scon
				 lapg_gg.value = new TmaLiteral(((String)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 170:  // literal ::= icon
				 lapg_gg.value = new TmaLiteral(((Integer)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 171:  // literal ::= Ltrue
				 lapg_gg.value = new TmaLiteral(Boolean.TRUE, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 172:  // literal ::= Lfalse
				 lapg_gg.value = new TmaLiteral(Boolean.FALSE, source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 173:  // expression_list ::= expression
				 lapg_gg.value = new ArrayList(); ((List<ITmaExpression>)lapg_gg.value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 174:  // expression_list ::= expression_list ',' expression
				 ((List<ITmaExpression>)tmStack[tmHead - 2].value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 175:  // map_entries ::= ID map_separator expression
				 lapg_gg.value = new ArrayList<TmaMapEntriesItem>(); ((List<TmaMapEntriesItem>)lapg_gg.value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, lapg_gg.offset, lapg_gg.endoffset)); 
				break;
			case 176:  // map_entries ::= map_entries ',' ID map_separator expression
				 ((List<TmaMapEntriesItem>)tmStack[tmHead - 4].value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmStack[tmHead - 2].offset, lapg_gg.endoffset)); 
				break;
			case 180:  // name ::= qualified_id
				 lapg_gg.value = new TmaName(((String)tmStack[tmHead].value), source, lapg_gg.line, lapg_gg.offset, lapg_gg.endoffset); 
				break;
			case 182:  // qualified_id ::= qualified_id '.' ID
				 lapg_gg.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 183:  // command ::= code
				 lapg_gg.value = new TmaCommand(source, tmStack[tmHead].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 184:  // syntax_problem ::= error
				 lapg_gg.value = new TmaSyntaxProblem(source, lapg_gg.offset, lapg_gg.endoffset); 
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 296);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 297);
	}
}
