/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.Span;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(415,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\277\0\300\0\uffb9\uffff\311\0\uff6b" +
		"\uffff\301\0\302\0\uffff\uffff\272\0\271\0\275\0\306\0\ufeff\uffff\ufef7\uffff\uffff" +
		"\uffff\ufeeb\uffff\11\0\uffff\uffff\355\0\ufea7\uffff\uffff\uffff\ufea1\uffff\22" +
		"\0\uffff\uffff\uffff\uffff\uffff\uffff\314\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\12\0\uffff\uffff\uffff\uffff\ufe59\uffff\uffff\uffff\15\0\20\0\uffff" +
		"\uffff\274\0\ufe53\uffff\250\0\261\0\uffff\uffff\345\0\343\0\260\0\uffff\uffff\ufe4b" +
		"\uffff\uffff\uffff\ufe45\uffff\uffff\uffff\uffff\uffff\5\0\307\0\14\0\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\2\0\ufe05\uffff\16\0\354\0\uffff\uffff\uffff" +
		"\uffff\251\0\uffff\uffff\252\0\uffff\uffff\351\0\ufdff\uffff\uffff\uffff\ufdf9\uffff" +
		"\uffff\uffff\13\0\uffff\uffff\uffff\uffff\ufdf3\uffff\ufdeb\uffff\ufde5\uffff\47" +
		"\0\53\0\54\0\55\0\52\0\17\0\uffff\uffff\0\0\24\0\253\0\342\0\21\0\344\0\uffff\uffff" +
		"\uffff\uffff\273\0\uffff\uffff\10\0\uffff\uffff\ufd9d\uffff\uffff\uffff\71\0\uffff" +
		"\uffff\uffff\uffff\316\0\uffff\uffff\50\0\51\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\ufd95\uffff\76\0\101\0\102\0\103\0\uffff\uffff\ufd4f\uffff\242\0\276\0\350\0\4\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\70\0\46\0\56\0\uffff\uffff\37\0\40\0\33\0\34" +
		"\0\uffff\uffff\31\0\32\0\36\0\41\0\43\0\42\0\35\0\uffff\uffff\30\0\ufd07\uffff\uffff" +
		"\uffff\123\0\124\0\125\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufcbd\uffff" +
		"\246\0\ufc73\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufc1f\uffff\ufbdd\uffff\120" +
		"\0\121\0\uffff\uffff\uffff\uffff\77\0\100\0\uffff\uffff\243\0\uffff\uffff\73\0\74" +
		"\0\72\0\25\0\45\0\uffff\uffff\26\0\27\0\ufb9b\uffff\ufb4b\uffff\uffff\uffff\135\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\140\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\ufb43\uffff\uffff\uffff\uffff\uffff\ufaef\uffff\uffff\uffff\310" +
		"\0\uffff\uffff\221\0\uffff\uffff\ufa87\uffff\145\0\ufa7f\uffff\ufa2d\uffff\336\0" +
		"\uf9db\uffff\uf9d1\uffff\uf97d\uffff\201\0\204\0\206\0\uf925\uffff\202\0\uf8cb\uffff" +
		"\uf86f\uffff\230\0\uffff\uffff\203\0\167\0\166\0\341\0\uffff\uffff\uf80f\uffff\114" +
		"\0\330\0\uf7cd\uffff\uf7c7\uffff\uf7c1\uffff\uf76d\uffff\uffff\uffff\uf719\uffff" +
		"\uffff\uffff\uffff\uffff\67\0\44\0\uffff\uffff\320\0\uf6c5\uffff\334\0\137\0\131" +
		"\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\255\0\256\0\254\0\257\0\uffff" +
		"\uffff\130\0\141\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uf677\uffff\266" +
		"\0\uffff\uffff\uffff\uffff\uf66b\uffff\uffff\uffff\uf617\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\113\0\uf5c3\uffff\uf56d\uffff\uf51b\uffff\uf511\uffff" +
		"\156\0\uf4bd\uffff\uf4b3\uffff\uffff\uffff\162\0\165\0\uf45f\uffff\uf455\uffff\200" +
		"\0\164\0\uffff\uffff\212\0\uffff\uffff\225\0\226\0\171\0\205\0\uffff\uffff\247\0" +
		"\uf3fd\uffff\uffff\uffff\332\0\116\0\117\0\uffff\uffff\uffff\uffff\uf3f7\uffff\uffff" +
		"\uffff\uf3a3\uffff\uf34f\uffff\uffff\uffff\61\0\322\0\uf2fb\uffff\136\0\uffff\uffff" +
		"\132\0\133\0\uffff\uffff\127\0\244\0\172\0\173\0\262\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\170\0\uffff\uffff\222\0\uffff\uffff\uffff\uffff\175\0\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uf2af\uffff\233\0\236\0\uffff\uffff\uffff\uffff\207\0\uf269\uffff\210" +
		"\0\146\0\uf209\uffff\uf1ff\uffff\152\0\155\0\uf1ab\uffff\154\0\161\0\uf1a1\uffff" +
		"\160\0\163\0\uf197\uffff\214\0\215\0\340\0\115\0\142\0\uf13f\uffff\112\0\111\0\uffff" +
		"\uffff\107\0\uffff\uffff\uffff\uffff\uf139\uffff\uffff\uffff\324\0\uf0e5\uffff\134" +
		"\0\uffff\uffff\264\0\265\0\uf09b\uffff\uf093\uffff\uffff\uffff\174\0\227\0\uffff" +
		"\uffff\235\0\232\0\uffff\uffff\231\0\uffff\uffff\151\0\uf08b\uffff\150\0\153\0\157" +
		"\0\uffff\uffff\110\0\106\0\105\0\uffff\uffff\63\0\64\0\65\0\66\0\uffff\uffff\326" +
		"\0\57\0\126\0\uffff\uffff\234\0\uf081\uffff\uf079\uffff\147\0\143\0\104\0\62\0\224" +
		"\0\223\0\uffff\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(3980,
		"\54\uffff\10\313\45\313\46\313\56\313\57\313\60\313\61\313\62\313\63\313\64\313\65" +
		"\313\66\313\67\313\70\313\71\313\72\313\73\313\74\313\75\313\76\313\77\313\100\313" +
		"\101\313\102\313\103\313\104\313\105\313\106\313\107\313\110\313\111\313\112\313" +
		"\uffff\ufffe\2\uffff\3\uffff\23\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\47\uffff\50\uffff\51\uffff\24\357\uffff\ufffe\31\uffff\0\23\6\23\10\23\11\23\17" +
		"\23\21\23\24\23\25\23\26\23\27\23\30\23\33\23\34\23\36\23\41\23\43\23\44\23\45\23" +
		"\46\23\52\23\53\23\55\23\56\23\57\23\60\23\61\23\62\23\63\23\64\23\65\23\66\23\67" +
		"\23\70\23\71\23\72\23\73\23\74\23\75\23\76\23\77\23\100\23\101\23\102\23\103\23\104" +
		"\23\105\23\106\23\107\23\110\23\111\23\112\23\114\23\uffff\ufffe\25\uffff\110\uffff" +
		"\17\315\uffff\ufffe\20\uffff\17\305\25\305\26\305\110\305\uffff\ufffe\54\uffff\10" +
		"\312\45\312\46\312\56\312\57\312\60\312\61\312\62\312\63\312\64\312\65\312\66\312" +
		"\67\312\70\312\71\312\72\312\73\312\74\312\75\312\76\312\77\312\100\312\101\312\102" +
		"\312\103\312\104\312\105\312\106\312\107\312\110\312\111\312\112\312\uffff\ufffe" +
		"\21\uffff\24\356\uffff\ufffe\2\uffff\3\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\47\uffff\50\uffff\32\347\uffff\ufffe\10\uffff\0\3\uffff\ufffe\22\21\21\24\32\24" +
		"\uffff\ufffe\21\uffff\32\346\uffff\ufffe\46\uffff\112\uffff\111\uffff\110\uffff\107" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\26\353\uffff" +
		"\ufffe\10\uffff\0\1\uffff\ufffe\21\uffff\26\352\uffff\ufffe\110\uffff\17\315\uffff" +
		"\ufffe\13\uffff\22\21\25\21\uffff\ufffe\25\uffff\22\317\uffff\ufffe\6\uffff\23\uffff" +
		"\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104" +
		"\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\0\6\10\6\uffff\ufffe\16\uffff\21\75" +
		"\24\75\uffff\ufffe\6\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\0\7\uffff\ufffe\44\uffff\22\241\25\241\43\241\46\241\55\241\56\241\57\241\60\241" +
		"\61\241\62\241\63\241\64\241\65\241\66\241\67\241\70\241\71\241\72\241\73\241\74" +
		"\241\75\241\76\241\77\241\100\241\101\241\102\241\103\241\104\241\105\241\106\241" +
		"\107\241\110\241\111\241\112\241\uffff\ufffe\1\uffff\0\60\6\60\10\60\23\60\45\60" +
		"\46\60\56\60\57\60\60\60\61\60\62\60\63\60\64\60\65\60\66\60\67\60\70\60\71\60\72" +
		"\60\73\60\74\60\75\60\76\60\77\60\100\60\101\60\102\60\103\60\104\60\105\60\106\60" +
		"\107\60\110\60\111\60\112\60\uffff\ufffe\115\uffff\22\245\25\245\43\245\44\245\46" +
		"\245\55\245\56\245\57\245\60\245\61\245\62\245\63\245\64\245\65\245\66\245\67\245" +
		"\70\245\71\245\72\245\73\245\74\245\75\245\76\245\77\245\100\245\101\245\102\245" +
		"\103\245\104\245\105\245\106\245\107\245\110\245\111\245\112\245\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\114\uffff\11\337\17\337\uffff\ufffe\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\7\331\22\331\uffff\ufffe\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\331\22\331" +
		"\uffff\ufffe\16\uffff\0\321\3\321\6\321\10\321\23\321\25\321\45\321\46\321\56\321" +
		"\57\321\60\321\61\321\62\321\63\321\64\321\65\321\66\321\67\321\70\321\71\321\72" +
		"\321\73\321\74\321\75\321\76\321\77\321\100\321\101\321\102\321\103\321\104\321\105" +
		"\321\106\321\107\321\110\321\111\321\112\321\114\321\uffff\ufffe\100\uffff\17\335" +
		"\21\335\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff" +
		"\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\26\337\uffff\ufffe" +
		"\31\uffff\13\21\22\21\35\21\6\23\11\23\17\23\25\23\26\23\27\23\33\23\34\23\36\23" +
		"\41\23\43\23\44\23\45\23\46\23\52\23\53\23\55\23\56\23\57\23\60\23\61\23\62\23\63" +
		"\23\64\23\65\23\66\23\67\23\70\23\71\23\72\23\73\23\74\23\75\23\76\23\77\23\100\23" +
		"\101\23\102\23\103\23\104\23\105\23\106\23\107\23\110\23\111\23\112\23\114\23\uffff" +
		"\ufffe\11\uffff\17\144\26\144\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff" +
		"\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\17\337\26\337\uffff" +
		"\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\46\uffff\112\uffff\111\uffff\110" +
		"\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100" +
		"\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\55\uffff\114\uffff\11\337\17\337\26\337\uffff\ufffe\6\uffff\11\337\17\337" +
		"\26\337\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff" +
		"\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\17\337\26\337\uffff\ufffe\41" +
		"\uffff\6\176\11\176\17\176\25\176\26\176\27\176\43\176\44\176\45\176\46\176\52\176" +
		"\55\176\56\176\57\176\60\176\61\176\62\176\63\176\64\176\65\176\66\176\67\176\70" +
		"\176\71\176\72\176\73\176\74\176\75\176\76\176\77\176\100\176\101\176\102\176\103" +
		"\176\104\176\105\176\106\176\107\176\110\176\111\176\112\176\114\176\uffff\ufffe" +
		"\36\uffff\6\211\11\211\17\211\25\211\26\211\27\211\41\211\43\211\44\211\45\211\46" +
		"\211\52\211\55\211\56\211\57\211\60\211\61\211\62\211\63\211\64\211\65\211\66\211" +
		"\67\211\70\211\71\211\72\211\73\211\74\211\75\211\76\211\77\211\100\211\101\211\102" +
		"\211\103\211\104\211\105\211\106\211\107\211\110\211\111\211\112\211\114\211\uffff" +
		"\ufffe\53\uffff\6\213\11\213\17\213\25\213\26\213\27\213\36\213\41\213\43\213\44" +
		"\213\45\213\46\213\52\213\55\213\56\213\57\213\60\213\61\213\62\213\63\213\64\213" +
		"\65\213\66\213\67\213\70\213\71\213\72\213\73\213\74\213\75\213\76\213\77\213\100" +
		"\213\101\213\102\213\103\213\104\213\105\213\106\213\107\213\110\213\111\213\112" +
		"\213\114\213\uffff\ufffe\33\uffff\34\uffff\6\217\11\217\17\217\25\217\26\217\27\217" +
		"\36\217\41\217\43\217\44\217\45\217\46\217\52\217\53\217\55\217\56\217\57\217\60" +
		"\217\61\217\62\217\63\217\64\217\65\217\66\217\67\217\70\217\71\217\72\217\73\217" +
		"\74\217\75\217\76\217\77\217\100\217\101\217\102\217\103\217\104\217\105\217\106" +
		"\217\107\217\110\217\111\217\112\217\114\217\uffff\ufffe\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\7\331\22\331\uffff\ufffe\22\uffff\7\333\uffff\ufffe\22\uffff\7\333\uffff" +
		"\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112" +
		"\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\17\337\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\114\uffff\11\337\17\337\uffff\ufffe\6\uffff\23\uffff\25\uffff" +
		"\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114" +
		"\uffff\11\337\17\337\uffff\ufffe\3\uffff\0\323\6\323\10\323\23\323\25\323\45\323" +
		"\46\323\56\323\57\323\60\323\61\323\62\323\63\323\64\323\65\323\66\323\67\323\70" +
		"\323\71\323\72\323\73\323\74\323\75\323\76\323\77\323\100\323\101\323\102\323\103" +
		"\323\104\323\105\323\106\323\107\323\110\323\111\323\112\323\114\323\uffff\ufffe" +
		"\14\uffff\15\uffff\12\263\24\263\42\263\uffff\ufffe\6\uffff\25\uffff\27\uffff\43" +
		"\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\52\uffff\55\uffff\114" +
		"\uffff\11\337\26\337\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff" +
		"\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104" +
		"\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\26\337\uffff" +
		"\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112" +
		"\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\17\337\26\337\uffff\ufffe\6" +
		"\uffff\25\uffff\27\uffff\43\uffff\44\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\114\uffff\11\337\17\337\26\337\uffff\ufffe\6\uffff\11\337\17\337\26\337" +
		"\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff" +
		"\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\114\uffff\11\337\17\337\26\337\uffff\ufffe\6\uffff\11" +
		"\337\17\337\26\337\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff" +
		"\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\17\337\26\337\uffff" +
		"\ufffe\6\uffff\11\337\17\337\26\337\uffff\ufffe\41\uffff\6\177\11\177\17\177\25\177" +
		"\26\177\27\177\43\177\44\177\45\177\46\177\52\177\55\177\56\177\57\177\60\177\61" +
		"\177\62\177\63\177\64\177\65\177\66\177\67\177\70\177\71\177\72\177\73\177\74\177" +
		"\75\177\76\177\77\177\100\177\101\177\102\177\103\177\104\177\105\177\106\177\107" +
		"\177\110\177\111\177\112\177\114\177\uffff\ufffe\22\uffff\7\333\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\114\uffff\11\337\17\337\uffff\ufffe\6\uffff\23\uffff\25\uffff" +
		"\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114" +
		"\uffff\11\337\17\337\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff" +
		"\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104" +
		"\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\17\337\uffff" +
		"\ufffe\25\uffff\0\325\6\325\10\325\23\325\45\325\46\325\56\325\57\325\60\325\61\325" +
		"\62\325\63\325\64\325\65\325\66\325\67\325\70\325\71\325\72\325\73\325\74\325\75" +
		"\325\76\325\77\325\100\325\101\325\102\325\103\325\104\325\105\325\106\325\107\325" +
		"\110\325\111\325\112\325\114\325\uffff\ufffe\31\uffff\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\11\23\26\23\41\23\uffff\ufffe\33\uffff\34\uffff\6\220\11\220\17\220\25" +
		"\220\26\220\27\220\36\220\41\220\43\220\44\220\45\220\46\220\52\220\53\220\55\220" +
		"\56\220\57\220\60\220\61\220\62\220\63\220\64\220\65\220\66\220\67\220\70\220\71" +
		"\220\72\220\73\220\74\220\75\220\76\220\77\220\100\220\101\220\102\220\103\220\104" +
		"\220\105\220\106\220\107\220\110\220\111\220\112\220\114\220\uffff\ufffe\6\uffff" +
		"\11\337\17\337\26\337\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45" +
		"\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\17\337\26\337\uffff" +
		"\ufffe\6\uffff\11\337\17\337\26\337\uffff\ufffe\6\uffff\11\337\17\337\26\337\uffff" +
		"\ufffe\41\216\6\216\11\216\17\216\25\216\26\216\27\216\43\216\44\216\45\216\46\216" +
		"\52\216\55\216\56\216\57\216\60\216\61\216\62\216\63\216\64\216\65\216\66\216\67" +
		"\216\70\216\71\216\72\216\73\216\74\216\75\216\76\216\77\216\100\216\101\216\102" +
		"\216\103\216\104\216\105\216\106\216\107\216\110\216\111\216\112\216\114\216\uffff" +
		"\ufffe\21\uffff\7\122\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44" +
		"\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\337\17" +
		"\337\uffff\ufffe\114\uffff\0\327\6\327\10\327\23\327\45\327\46\327\56\327\57\327" +
		"\60\327\61\327\62\327\63\327\64\327\65\327\66\327\67\327\70\327\71\327\72\327\73" +
		"\327\74\327\75\327\76\327\77\327\100\327\101\327\102\327\103\327\104\327\105\327" +
		"\106\327\107\327\110\327\111\327\112\327\uffff\ufffe\12\270\42\uffff\24\270\uffff" +
		"\ufffe\12\267\42\267\24\267\uffff\ufffe\6\uffff\11\337\17\337\26\337\uffff\ufffe" +
		"\11\237\41\uffff\26\237\uffff\ufffe\11\240\41\240\26\240\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(176,
		"\0\2\4\25\44\44\44\103\113\117\124\127\134\135\136\140\164\171\205\216\245\254\331" +
		"\346\371\374\u0105\u010c\u0113\u0116\u0117\u011c\u011f\u0124\u012f\u0132\u014b\u0166" +
		"\u0181\u01dc\u01e9\u01f6\u01fc\u01fd\u01fe\u0200\u021c\u0278\u02d7\u0333\u038f\u03ee" +
		"\u044a\u04a6\u0502\u055e\u05ba\u0616\u0672\u06ce\u072a\u0786\u07e2\u083e\u089a\u08f6" +
		"\u0952\u09b3\u0a12\u0a71\u0acd\u0b29\u0b85\u0be2\u0c3e\u0c9a\u0c9a\u0caf\u0cb0\u0cb1" +
		"\u0cb2\u0cb4\u0cb6\u0cb8\u0cb9\u0cbb\u0cbc\u0cbe\u0cea\u0d10\u0d21\u0d26\u0d28\u0d2c" +
		"\u0d2e\u0d2f\u0d31\u0d33\u0d35\u0d36\u0d37\u0d38\u0d3a\u0d3c\u0d3d\u0d3f\u0d41\u0d42" +
		"\u0d44\u0d46\u0d4a\u0d4d\u0d4e\u0d50\u0d52\u0d53\u0d55\u0d57\u0d58\u0d62\u0d6c\u0d77" +
		"\u0d82\u0d8e\u0da9\u0dbc\u0dca\u0dde\u0df2\u0e08\u0e20\u0e38\u0e4c\u0e64\u0e7d\u0e99" +
		"\u0e9e\u0ea2\u0eb8\u0ece\u0ee5\u0ee7\u0eef\u0ef2\u0ef4\u0ef5\u0ef9\u0efc\u0eff\u0f05" +
		"\u0f07\u0f14\u0f14\u0f17\u0f1a\u0f2f\u0f4a\u0f4b\u0f4d\u0f4e\u0f4f\u0f50\u0f51\u0f52" +
		"\u0f55\u0f58\u0f59\u0f74\u0f75\u0f76\u0f77\u0f78\u0f79\u0f7a\u0f7b\u0f7c");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(3964,
		"\u019b\u019c\153\224\1\6\22\31\42\52\76\104\105\142\154\300\u0109\u0120\u013a\u0140" +
		"\u0141\1\6\31\52\70\76\104\105\142\300\361\u0120\u013a\u0140\u0141\75\124\133\164" +
		"\237\303\316\317\321\322\347\350\352\u0108\u010a\u0110\u0111\u0112\u0113\u0115\u0116" +
		"\u011a\u012e\u0130\u0131\u0155\u0156\u0159\u015c\u016c\u0180\163\247\250\253\351" +
		"\353\354\u0132\25\46\47\101\314\u014f\u0179\u0193\u0194\u0106\u0174\u0175\45\122" +
		"\272\311\375\u0104\u0104\150\266\37\41\74\145\255\270\277\313\367\370\375\u012c\u012d" +
		"\u012f\u0137\u0168\u016a\u016b\u0171\u0188\21\154\212\222\263\27\63\64\113\151\154" +
		"\212\222\263\270\341\u0165\57\111\156\311\334\345\346\u0127\u0150\1\6\52\75\76\124" +
		"\142\154\212\222\237\263\300\303\347\350\352\u010a\u0110\u012e\u0130\u0131\u016c" +
		"\30\151\154\212\222\263\u0106\20\33\35\123\154\163\212\222\237\250\253\263\303\305" +
		"\307\316\317\322\334\347\350\352\354\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111" +
		"\u0113\u0116\u0117\u011e\u012e\u0130\u0131\u0135\u014a\u014b\u0156\u016c\u017c\u017e" +
		"\67\114\116\205\212\222\263\u0107\u0149\u014f\u0176\u0179\u018d\237\303\316\317\322" +
		"\347\350\352\u0108\u010a\u0110\u0111\u0113\u0116\u012e\u0130\u0131\u0156\u016c\u0100" +
		"\u0109\u0147\10\154\163\212\222\253\263\306\u014c\63\65\154\212\222\263\341\154\212" +
		"\222\263\332\u0152\u0191\332\u0152\u0191\311\154\212\222\263\327\302\u0142\u0144" +
		"\u010b\u014a\u014b\u017c\u017e\154\212\222\263\323\u011b\u014f\u015f\u0179\u0193" +
		"\u0194\u0106\u0174\u0175\237\303\316\317\322\334\347\350\352\u0108\u010a\u010c\u010d" +
		"\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u012e\u0130\u0131\u0156\u016c\133\154" +
		"\164\172\212\222\237\263\303\316\317\322\347\350\352\u0108\u010a\u0110\u0111\u0113" +
		"\u0116\u011e\u012e\u0130\u0131\u0156\u016c\1\6\25\47\52\76\124\142\162\164\237\300" +
		"\303\322\347\350\352\u0108\u010a\u0110\u0113\u0116\u012e\u0130\u0131\u0156\u016c" +
		"\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162" +
		"\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302" +
		"\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b" +
		"\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130" +
		"\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184" +
		"\1\6\31\52\76\104\105\142\300\u0120\u013a\u0140\u0141\1\6\31\52\76\104\105\142\300" +
		"\u0120\u013a\u0140\u0141\1\6\52\76\142\300\u0108\331\3\23\237\273\274\303\316\317" +
		"\322\334\347\350\352\366\u0108\u010a\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117" +
		"\u011e\u012e\u0130\u0131\u0156\u016c\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105" +
		"\107\120\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233" +
		"\234\237\240\242\243\244\263\277\300\302\303\304\316\317\322\334\342\347\350\352" +
		"\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113" +
		"\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a" +
		"\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66" +
		"\75\76\104\105\107\121\124\133\142\143\147\154\162\163\164\171\177\200\201\212\222" +
		"\225\231\233\234\237\240\242\243\244\250\253\263\277\300\302\303\304\316\317\322" +
		"\334\342\347\350\352\354\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d" +
		"\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a" +
		"\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13" +
		"\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162\164\171" +
		"\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\301\302\303" +
		"\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b" +
		"\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130" +
		"\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184" +
		"\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162" +
		"\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\301" +
		"\302\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a" +
		"\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e" +
		"\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e" +
		"\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\163\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\250" +
		"\253\263\277\300\302\303\304\316\317\322\334\342\347\350\352\354\357\365\u0101\u0102" +
		"\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120" +
		"\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c" +
		"\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124" +
		"\133\142\143\147\154\161\162\164\171\177\200\201\212\222\225\231\233\234\237\240" +
		"\242\243\244\263\277\300\302\303\304\316\317\322\334\342\347\350\352\357\365\u0101" +
		"\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e" +
		"\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156" +
		"\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107" +
		"\121\124\133\142\143\147\154\161\162\164\171\177\200\201\212\222\225\231\233\234" +
		"\237\240\242\243\244\263\277\300\302\303\304\316\317\322\334\342\347\350\352\357" +
		"\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116" +
		"\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b" +
		"\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\104\105\107\121\124\133\142\143\147\154\161\162\164\171\177\200\201\212\222\225" +
		"\231\233\234\237\240\242\243\244\263\277\300\302\303\304\316\317\322\334\342\347" +
		"\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111" +
		"\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146" +
		"\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47" +
		"\52\66\75\76\104\105\107\121\124\133\142\143\147\154\161\162\164\171\177\200\201" +
		"\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302\303\304\316\317\322" +
		"\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e" +
		"\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142" +
		"\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25" +
		"\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\161\162\164\171" +
		"\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302\303\304" +
		"\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c" +
		"\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131" +
		"\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1" +
		"\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\161" +
		"\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300" +
		"\302\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a" +
		"\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e" +
		"\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e" +
		"\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\164\171\177\200\201\212\222\225\231\232\233\234\237\240\242\243\244\263" +
		"\277\300\302\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108" +
		"\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128" +
		"\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c" +
		"\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143" +
		"\147\154\162\164\171\177\200\201\212\222\225\231\232\233\234\237\240\242\243\244" +
		"\263\277\300\302\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103" +
		"\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125" +
		"\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176" +
		"\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133" +
		"\142\143\147\154\161\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242" +
		"\243\244\263\277\300\302\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102" +
		"\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120" +
		"\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c" +
		"\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124" +
		"\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242" +
		"\243\244\263\275\277\300\302\303\304\316\317\322\334\342\347\350\352\357\365\u0101" +
		"\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e" +
		"\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156" +
		"\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107" +
		"\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233\234\237" +
		"\240\242\243\244\263\275\277\300\302\303\304\316\317\322\334\342\347\350\352\357" +
		"\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116" +
		"\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b" +
		"\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\104\105\107\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231" +
		"\233\234\237\240\242\243\244\263\275\277\300\302\303\304\316\317\322\334\342\347" +
		"\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111" +
		"\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146" +
		"\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47" +
		"\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162\164\171\177\200\201\212" +
		"\222\225\231\233\234\237\240\242\243\244\263\275\277\300\302\303\304\316\317\322" +
		"\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e" +
		"\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142" +
		"\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25" +
		"\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162\164\171\177" +
		"\200\201\212\222\225\231\233\234\237\240\242\243\244\263\267\277\300\302\303\304" +
		"\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c" +
		"\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131" +
		"\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1" +
		"\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162" +
		"\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302" +
		"\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b" +
		"\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130" +
		"\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u016d\u0176\u017c\u017e" +
		"\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\163\164\171\177\200\201\212\222\225\231\233\234\237\240\241\242\243\244" +
		"\250\253\263\277\300\302\303\304\316\317\322\334\342\347\350\352\354\357\365\u0101" +
		"\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e" +
		"\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156" +
		"\u016c\u016d\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105" +
		"\107\121\124\133\142\143\147\154\162\163\164\171\177\200\201\212\222\225\231\233" +
		"\234\237\240\242\243\244\250\253\263\277\300\302\303\304\316\317\322\334\342\347" +
		"\350\352\354\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110" +
		"\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144" +
		"\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34" +
		"\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162\163\164\171\177\200" +
		"\201\212\222\225\231\233\234\237\240\242\243\244\250\253\263\277\300\302\303\304" +
		"\316\317\322\334\342\347\350\352\354\357\365\u0101\u0102\u0103\u0108\u010a\u010b" +
		"\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130" +
		"\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184" +
		"\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162" +
		"\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302" +
		"\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b" +
		"\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130" +
		"\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u016d\u0176\u017c\u017e" +
		"\u0184\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277" +
		"\300\302\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108" +
		"\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128" +
		"\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c\u016d\u0176" +
		"\u017c\u017e\u0184\0\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133" +
		"\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243" +
		"\244\263\277\300\302\303\304\316\317\322\334\342\347\350\352\357\365\u0101\u0102" +
		"\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120" +
		"\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c\u0156\u016c" +
		"\u0176\u017c\u017e\u0184\1\2\6\13\20\22\25\31\34\40\47\52\66\75\76\104\105\107\115" +
		"\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233\234\237" +
		"\240\242\243\244\263\277\300\302\303\304\316\317\322\334\342\347\350\352\357\365" +
		"\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117" +
		"\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a\u014b\u014c" +
		"\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\44\47\52\66\75\76\104" +
		"\105\107\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233" +
		"\234\237\240\242\243\244\263\277\300\302\303\304\316\317\322\334\342\347\350\352" +
		"\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0111\u0113" +
		"\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144\u0146\u014a" +
		"\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\1\2\6\13\22\25\31\34\40\47\52\66" +
		"\75\76\77\104\105\107\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222" +
		"\225\231\233\234\237\240\242\243\244\263\277\300\302\303\304\316\317\322\334\342" +
		"\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110" +
		"\u0111\u0113\u0116\u0117\u011e\u0120\u0125\u0128\u012e\u0130\u0131\u013a\u0142\u0144" +
		"\u0146\u014a\u014b\u014c\u0156\u016c\u0176\u017c\u017e\u0184\237\303\316\317\322" +
		"\347\350\352\u0108\u010a\u0110\u0111\u0113\u0116\u011e\u012e\u0130\u0131\u0156\u016c" +
		"\u016f\235\0\0\25\47\46\101\20\115\3\3\23\25\25\47\31\75\107\121\124\133\164\171" +
		"\201\233\237\240\243\244\302\303\304\316\317\322\334\342\347\350\352\u0103\u0108" +
		"\u010a\u010c\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0125\u012e\u0130\u0131\u0142" +
		"\u0144\u0156\u016c\1\6\52\76\142\237\300\303\316\317\322\334\347\350\352\u0108\u010a" +
		"\u010b\u010c\u010d\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u0120\u012e\u0130\u0131" +
		"\u014a\u014b\u014c\u0156\u016c\u017c\u017e\31\104\105\147\177\225\234\242\277\365" +
		"\u0101\u0102\u0128\u013a\u0146\u0176\u0184\123\163\250\253\354\154\212\154\212\222" +
		"\263\153\224\75\75\124\75\124\75\124\266\u0135\u016d\75\124\75\124\121\200\357\121" +
		"\201\133\133\164\133\164\163\250\253\354\345\346\u0127\161\133\164\133\164\225\225" +
		"\365\234\u0146\u0128\237\303\347\350\352\u010a\u012e\u0130\u0131\u016c\237\303\347" +
		"\350\352\u010a\u012e\u0130\u0131\u016c\237\303\347\350\352\u010a\u0110\u012e\u0130" +
		"\u0131\u016c\237\303\347\350\352\u010a\u0110\u012e\u0130\u0131\u016c\237\303\316" +
		"\347\350\352\u010a\u0110\u012e\u0130\u0131\u016c\237\303\316\317\321\322\347\350" +
		"\352\u0108\u010a\u0110\u0111\u0112\u0113\u0115\u0116\u011a\u012e\u0130\u0131\u0155" +
		"\u0156\u0159\u015c\u016c\u0180\237\303\316\317\322\347\350\352\u0108\u010a\u0110" +
		"\u0111\u0113\u0116\u012e\u0130\u0131\u0156\u016c\237\303\316\317\347\350\352\u010a" +
		"\u0110\u0111\u012e\u0130\u0131\u016c\237\303\316\317\322\347\350\352\u0108\u010a" +
		"\u0110\u0111\u0113\u0116\u011e\u012e\u0130\u0131\u0156\u016c\237\303\316\317\322" +
		"\347\350\352\u0108\u010a\u0110\u0111\u0113\u0116\u011e\u012e\u0130\u0131\u0156\u016c" +
		"\237\303\316\317\322\334\347\350\352\u0108\u010a\u0110\u0111\u0113\u0116\u0117\u011e" +
		"\u012e\u0130\u0131\u0156\u016c\237\303\316\317\322\334\347\350\352\u0108\u010a\u010c" +
		"\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u012e\u0130\u0131\u0156\u016c\237\303" +
		"\316\317\322\334\347\350\352\u0108\u010a\u010c\u010e\u0110\u0111\u0113\u0116\u0117" +
		"\u011e\u012e\u0130\u0131\u0156\u016c\237\303\316\317\322\347\350\352\u0108\u010a" +
		"\u0110\u0111\u0113\u0116\u011e\u012e\u0130\u0131\u0156\u016c\237\303\316\317\322" +
		"\334\347\350\352\u0108\u010a\u010c\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u012e" +
		"\u0130\u0131\u0156\u016c\237\303\316\317\322\334\347\350\352\u0108\u010a\u010c\u010d" +
		"\u010e\u0110\u0111\u0113\u0116\u0117\u011e\u012e\u0130\u0131\u0156\u016c\237\273" +
		"\274\303\316\317\322\334\347\350\352\366\u0108\u010a\u010c\u010d\u010e\u0110\u0111" +
		"\u0113\u0116\u0117\u011e\u012e\u0130\u0131\u0156\u016c\u010b\u014a\u014b\u017c\u017e" +
		"\u010b\u014a\u017c\u017e\133\164\237\303\316\317\322\347\350\352\u0108\u010a\u0110" +
		"\u0111\u0113\u0116\u011e\u012e\u0130\u0131\u0156\u016c\133\164\237\303\316\317\322" +
		"\347\350\352\u0108\u010a\u0110\u0111\u0113\u0116\u011e\u012e\u0130\u0131\u0156\u016c" +
		"\133\164\172\237\303\316\317\322\347\350\352\u0108\u010a\u0110\u0111\u0113\u0116" +
		"\u011e\u012e\u0130\u0131\u0156\u016c\163\253\31\107\240\302\u0103\u0125\u0142\u0144" +
		"\10\306\u014c\31\107\275\31\104\105\u013a\302\u0142\u0144\302\u0142\u0144\1\6\52" +
		"\76\142\300\66\143\1\6\31\52\76\104\105\142\300\u0120\u013a\u0140\u0141\2\13\34\2" +
		"\13\34\237\303\316\317\322\347\350\352\u0108\u010a\u0110\u0111\u0113\u0116\u011e" +
		"\u012e\u0130\u0131\u0156\u016c\u016f\1\6\25\47\52\76\124\142\162\164\237\300\303" +
		"\322\347\350\352\u0108\u010a\u0110\u0113\u0116\u012e\u0130\u0131\u0156\u016c\3\20" +
		"\115\123\266\361\u0135\u016f\243\244\342\345\346\u0127\267\237\303\316\317\321\322" +
		"\347\350\352\u0108\u010a\u0110\u0111\u0112\u0113\u0115\u0116\u011a\u012e\u0130\u0131" +
		"\u0155\u0156\u0159\u015c\u016c\u0180\240\31\31\31\66\66\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(3964,
		"\u019d\u019e\203\203\4\4\41\4\74\4\4\4\4\4\205\4\u0147\4\4\4\4\5\5\5\5\116\5\5\5" +
		"\5\5\u0134\5\5\5\5\120\120\161\161\301\301\301\301\301\301\301\301\301\301\301\301" +
		"\301\301\301\301\301\301\301\301\301\301\301\301\301\301\301\237\347\350\352\u012e" +
		"\u0130\u0131\u016c\44\77\44\77\u0110\u017c\u017c\u017c\u017c\u0142\u0142\u0142\76" +
		"\153\366\u010c\u013a\u0140\u0141\200\357\71\73\117\176\355\364\376\u010f\u0138\u0139" +
		"\u013b\u0166\u0167\u0169\u0170\u0185\u0186\u0187\u0190\u0197\40\206\206\206\206\52" +
		"\105\107\143\201\207\207\207\207\365\u0125\u0184\104\142\224\u010d\u0123\u0128\u0128" +
		"\u0128\u010d\6\6\6\121\6\121\6\210\210\210\302\210\6\302\302\302\302\302\302\302" +
		"\302\302\302\53\202\211\211\211\211\u0143\34\66\70\154\212\154\212\212\303\154\154" +
		"\212\303\u010a\u010b\303\303\303\303\303\303\303\154\303\303\u014a\303\303\303\303" +
		"\303\303\303\303\303\303\303\303\u016d\u014a\u014a\303\303\u014a\u014a\115\144\146" +
		"\261\262\264\356\u0145\u0178\u017d\u0191\u0192\u0198\304\304\304\304\304\304\304" +
		"\304\304\304\304\304\304\304\304\304\304\304\304\u013c\u0148\u0177\31\213\240\213" +
		"\213\240\213\31\31\106\110\214\214\214\214\u0126\215\215\215\215\u0121\u0121\u0199" +
		"\u0122\u0122\u019a\u010e\216\216\216\216\u011f\u0103\u0103\u0103\u014b\u014b\u014b" +
		"\u014b\u014b\217\217\217\217\u011e\u011e\u017e\u011e\u017e\u017e\u017e\u0144\u0144" +
		"\u0144\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305" +
		"\305\305\305\305\305\305\162\220\162\162\220\220\162\220\162\162\162\162\162\162" +
		"\162\162\162\162\162\162\162\162\162\162\162\162\162\7\7\7\7\7\7\7\7\7\7\7\7\7\7" +
		"\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140" +
		"\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272\140\135\306\140" +
		"\135\140\140\221\135\10\140\306\140\306\306\306\306\140\306\306\306\256\135\135\135" +
		"\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135" +
		"\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\11\11\11\11\11\11\11\11\11" +
		"\11\11\11\11\12\12\12\12\12\12\12\12\12\12\12\12\12\13\13\13\13\13\13\u0146\u0120" +
		"\22\22\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307" +
		"\307\307\307\307\307\307\307\307\307\10\17\10\17\42\45\54\17\72\45\10\111\122\10" +
		"\135\135\140\147\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272" +
		"\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\306\140\306\306\306" +
		"\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135" +
		"\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17\10" +
		"\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235\241" +
		"\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\241\241\221\135" +
		"\10\140\306\140\306\306\306\306\140\306\306\306\241\256\135\135\135\140\306\306\u014c" +
		"\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c" +
		"\u014c\10\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10" +
		"\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272\140" +
		"\135\306\140\135\140\140\221\135\10\u0101\140\306\140\306\306\306\306\140\306\306" +
		"\306\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140" +
		"\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17" +
		"\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235" +
		"\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\u0102" +
		"\140\306\140\306\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c\306" +
		"\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c\u014c" +
		"\10\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135" +
		"\140\140\122\140\10\111\135\221\235\242\140\140\135\256\140\221\221\135\272\140\135" +
		"\306\140\135\140\140\242\242\221\135\10\140\306\140\306\306\306\306\140\306\306\306" +
		"\242\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140" +
		"\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17" +
		"\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\225" +
		"\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140" +
		"\306\140\306\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c\306\10" +
		"\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c\u014c\10" +
		"\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135" +
		"\140\140\122\140\10\111\135\221\226\235\140\140\135\256\140\221\221\135\272\140\135" +
		"\306\140\135\140\140\221\135\10\140\306\140\306\306\306\306\140\306\306\306\256\135" +
		"\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135\306\306" +
		"\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17\10\17\42\45" +
		"\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\227\235\140\140" +
		"\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306" +
		"\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c\306\10\306\306\306" +
		"\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135" +
		"\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122" +
		"\140\10\111\135\221\230\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135" +
		"\140\140\221\135\10\140\306\140\306\306\306\306\140\306\306\306\256\135\135\135\140" +
		"\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140" +
		"\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45" +
		"\10\111\122\10\135\135\140\140\122\140\10\111\135\221\231\235\140\140\135\256\140" +
		"\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\306" +
		"\140\306\306\306\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306" +
		"\306\10\140\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c" +
		"\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135" +
		"\221\232\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221" +
		"\135\10\140\306\140\306\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c" +
		"\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c" +
		"\u014c\10\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10" +
		"\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272\273" +
		"\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\306\140\306\306\306" +
		"\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135" +
		"\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17\10" +
		"\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235\140" +
		"\140\135\256\140\221\221\135\272\274\140\135\306\140\135\140\140\221\135\10\140\306" +
		"\140\306\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c\306\10\306" +
		"\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c\u014c\10\306" +
		"\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140" +
		"\140\122\140\10\111\135\221\233\235\140\140\135\256\140\221\221\135\272\140\135\306" +
		"\140\135\140\140\221\135\10\140\306\140\306\306\306\306\140\306\306\306\256\135\135" +
		"\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306" +
		"\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54" +
		"\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256" +
		"\140\221\221\135\272\140\135\306\140\135\140\140\221\371\135\10\140\306\140\306\306" +
		"\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306" +
		"\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c" +
		"\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10" +
		"\111\135\221\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140" +
		"\221\372\135\10\140\306\140\306\306\306\306\140\306\306\306\256\135\135\135\140\306" +
		"\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140" +
		"\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10" +
		"\111\122\10\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221" +
		"\135\272\140\135\306\140\135\140\140\221\373\135\10\140\306\140\306\306\306\306\140" +
		"\306\306\306\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306" +
		"\10\140\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135" +
		"\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221" +
		"\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\374\135" +
		"\10\140\306\140\306\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c" +
		"\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c" +
		"\u014c\10\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10" +
		"\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272\140" +
		"\135\306\140\135\140\140\221\362\135\10\140\306\140\306\306\306\306\140\306\306\306" +
		"\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135" +
		"\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17\10" +
		"\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235\140" +
		"\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140" +
		"\306\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c\306\10\306\306" +
		"\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306" +
		"\u0189\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140" +
		"\140\122\140\10\111\135\221\235\243\140\140\135\256\140\221\221\135\272\140\135\306" +
		"\140\342\135\140\140\243\243\221\135\10\140\306\140\306\306\306\306\140\306\306\306" +
		"\243\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140" +
		"\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\u018a\135\u014c\u014c\135" +
		"\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221" +
		"\235\244\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\244\244" +
		"\221\135\10\140\306\140\306\306\306\306\140\306\306\306\244\256\135\135\135\140\306" +
		"\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140" +
		"\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10" +
		"\111\122\10\135\135\140\140\122\140\10\111\135\221\235\245\140\140\135\256\140\221" +
		"\221\135\272\140\135\306\140\135\140\140\245\245\221\135\10\140\306\140\306\306\306" +
		"\306\140\306\306\306\245\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306" +
		"\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c" +
		"\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10" +
		"\111\135\221\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140" +
		"\221\135\10\140\306\140\306\306\306\306\140\306\306\306\256\135\135\135\140\306\306" +
		"\u014c\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135" +
		"\u014c\u014c\10\306\306\u018b\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10" +
		"\111\122\10\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221" +
		"\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\306\140\306" +
		"\306\306\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10" +
		"\140\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\u018c\135\u014c\u014c" +
		"\135\2\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111" +
		"\135\221\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221" +
		"\135\10\140\306\140\306\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c" +
		"\306\10\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c" +
		"\u014c\10\306\306\135\u014c\u014c\135\10\17\10\17\35\42\45\54\17\72\45\10\111\122" +
		"\10\135\135\140\35\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135" +
		"\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\306\140\306\306" +
		"\306\256\135\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140" +
		"\135\306\306\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\10\17" +
		"\10\17\42\45\54\17\72\75\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221" +
		"\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140" +
		"\306\140\306\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014c\306\10" +
		"\306\306\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014c\u014c\10" +
		"\306\306\135\u014c\u014c\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\133\135" +
		"\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272\140\135" +
		"\306\140\135\140\140\221\135\10\140\306\140\306\306\306\306\140\306\306\306\256\135" +
		"\135\135\140\306\306\u014c\306\10\306\306\306\306\306\306\306\10\140\135\306\306" +
		"\306\135\140\140\135\u014c\u014c\10\306\306\135\u014c\u014c\135\310\310\310\310\310" +
		"\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\300\u019b\3\46\101" +
		"\100\134\36\36\23\24\43\47\50\102\55\123\55\150\123\163\163\253\150\275\311\55\344" +
		"\344\55\311\u0109\311\311\311\311\344\311\311\311\55\311\311\u0150\u0150\311\311" +
		"\311\311\311\311\55\311\311\311\55\55\311\311\14\14\14\14\14\312\14\312\312\312\312" +
		"\312\312\312\312\312\312\u014d\312\312\312\312\312\312\312\312\312\u0160\312\312" +
		"\312\u014d\u014d\u017b\312\312\u014d\u014d\56\56\56\177\255\267\276\343\377\267\u013d" +
		"\u013e\u0164\56\276\377\u0196\155\246\246\246\246\222\263\223\223\265\265\204\266" +
		"\124\125\157\126\126\127\127\360\u016e\u018d\130\130\131\131\151\257\u0133\152\260" +
		"\164\165\251\166\166\247\351\353\u0132\u0129\u0129\u0129\234\167\167\170\170\270" +
		"\271\u0136\277\u0176\u0165\313\u0107\u012c\u012d\u012f\u0149\u0168\u016a\u016b\u0188" +
		"\314\314\314\314\314\314\314\314\314\314\315\315\315\315\315\315\u0154\315\315\315" +
		"\315\316\316\316\316\316\316\316\316\316\316\316\317\317\u0111\317\317\317\317\317" +
		"\317\317\317\317\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320" +
		"\320\320\320\320\320\320\320\320\320\320\320\321\321\u0112\u0115\u011a\321\321\321" +
		"\u011a\321\321\u0155\u0159\u015c\321\321\321\u0180\321\322\u0108\u0113\u0116\322" +
		"\322\322\322\322\u0156\322\322\322\322\323\323\323\323\u011b\323\323\323\u011b\323" +
		"\323\323\u011b\u011b\u015f\323\323\323\u011b\323\324\324\324\324\324\324\324\324" +
		"\324\324\324\324\324\324\324\324\324\324\324\324\325\325\325\325\325\u0124\325\325" +
		"\325\325\325\325\325\325\325\u0124\325\325\325\325\325\325\326\326\326\326\326\326" +
		"\326\326\326\326\326\u0151\u0153\326\326\326\326\326\326\326\326\326\326\326\327" +
		"\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327" +
		"\327\327\327\330\330\330\330\330\330\330\330\330\330\330\330\330\330\330\330\330" +
		"\330\330\330\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331\331" +
		"\331\331\331\331\331\331\331\332\332\332\332\332\332\332\332\332\332\332\332\u0152" +
		"\332\332\332\332\332\332\332\332\332\332\332\332\333\367\370\333\333\333\333\333" +
		"\333\333\333\u0137\333\333\333\333\333\333\333\333\333\333\333\333\333\333\333\333" +
		"\u014e\u014e\u017a\u014e\u014e\u014f\u0179\u0193\u0194\171\171\334\334\334\u0117" +
		"\u0117\334\334\334\u0117\334\334\u0117\u0117\u0117\u0117\334\334\334\u0117\334\172" +
		"\172\172\172\172\172\172\172\172\172\172\172\172\172\172\172\172\172\172\172\172" +
		"\172\173\173\254\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173" +
		"\173\173\173\173\250\354\57\57\340\u0104\u013f\u0162\u0104\u0104\32\32\32\60\141" +
		"\375\61\136\137\u0171\u0105\u0105\u0105\u0106\u0174\u0175\u019c\26\103\132\174\u0100" +
		"\112\175\15\15\62\15\15\62\62\15\15\u0161\62\u0172\u0173\20\33\67\21\21\21\335\335" +
		"\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\u018e\16" +
		"\16\51\51\16\16\160\16\236\252\336\16\336\u011c\336\336\336\u011c\336\336\u011c\u011c" +
		"\336\336\336\u011c\336\25\37\145\156\361\u0135\u016f\u018f\345\346\u0127\u012a\u012b" +
		"\u0163\363\337\337\u0114\u0118\u0119\u011d\337\337\337\u011d\337\337\u0157\u0158" +
		"\u015a\u015b\u015d\u015e\337\337\337\u017f\u0181\u0182\u0183\337\u0195\341\63\64" +
		"\65\113\114\27\30");

	private static final short[] tmRuleLen = TMLexer.unpack_short(240,
		"\5\4\4\3\7\4\3\3\4\1\2\4\3\1\2\3\1\1\2\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1" +
		"\2\2\1\1\1\1\3\10\3\2\3\1\1\1\1\5\3\1\3\1\3\1\1\2\2\1\1\1\7\6\6\5\6\5\5\4\2\4\3\3" +
		"\1\1\2\1\1\1\7\5\4\4\5\5\6\1\3\2\1\2\1\3\1\1\3\5\4\4\3\4\3\3\2\4\3\3\2\3\2\2\1\1" +
		"\3\2\3\3\4\3\1\2\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\4\1\4\2\1\3\2\1\3" +
		"\3\1\1\2\5\2\2\3\1\3\3\3\1\1\1\1\1\1\2\1\3\3\1\3\3\1\1\5\3\1\3\1\1\1\1\1\3\1\1\3" +
		"\1\1\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\3\1\3\1\3\1\1\0\3\1\1\0\3\1\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(240,
		"\116\116\116\116\117\117\120\121\122\123\123\124\124\125\125\126\126\127\130\130" +
		"\131\132\132\133\133\134\134\134\134\134\134\134\134\134\134\134\134\134\135\136" +
		"\136\136\137\137\137\137\140\141\141\142\143\144\144\144\144\145\146\147\147\150" +
		"\151\151\152\152\152\153\153\153\154\154\154\154\154\154\154\154\155\155\155\155" +
		"\155\155\156\157\157\157\160\160\161\161\161\161\161\162\162\163\164\164\165\165" +
		"\166\167\167\170\170\170\170\170\170\170\170\170\170\170\170\170\170\170\170\170" +
		"\171\172\173\173\174\174\175\175\175\176\176\176\177\177\200\200\200\201\201\202" +
		"\202\202\203\204\204\205\205\205\205\205\205\205\205\206\207\207\207\207\210\210" +
		"\210\211\212\212\213\213\213\214\215\216\216\217\220\220\220\220\221\221\222\222" +
		"\222\222\223\223\223\224\224\224\224\224\225\226\226\226\226\227\227\230\231\231" +
		"\232\233\234\234\235\235\236\236\237\237\240\240\241\241\242\242\243\243\244\244" +
		"\245\245\246\246\247\247\250\250\251\251\252\252\253\253\254\254\255\255\256\256");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'||'",
		"'='",
		"'=='",
		"'!='",
		"'=>'",
		"';'",
		"'.'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'!'",
		"'~'",
		"'&'",
		"'&&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Lbrackets",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lgenerate",
		"Lassert",
		"Lempty",
		"Lnonempty",
		"Lparam",
		"Lstring",
		"Lbool",
		"Lint",
		"Lsymbol",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"imports",
		"import_",
		"options",
		"option",
		"identifier",
		"symref",
		"symref_noargs",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"lexer_directive",
		"state_selector",
		"state_list",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"nonterm_param",
		"directive",
		"inputs",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule_list",
		"rule0",
		"predicate",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsSet",
		"setPrimary",
		"setExpression",
		"annotations",
		"annotation_list",
		"annotation",
		"nonterm_params",
		"param_ref",
		"symref_args",
		"keyval_arg",
		"param_type",
		"param_value",
		"predicate_primary",
		"predicate_expression",
		"expression",
		"map_entry",
		"literal",
		"expression_list",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"importsopt",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"identifieropt",
		"implementsopt",
		"Lnoeoiopt",
		"rhsSuffixopt",
		"param_ref_list_Comma_separated",
		"param_value_list_Comma_separated",
		"keyval_arg_list_Comma_separated",
		"keyval_arg_list_Comma_separated_opt",
		"map_entry_list_Comma_separated",
		"map_entry_list_Comma_separated_opt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 78;
		static final int header = 79;
		static final int lexer_section = 80;
		static final int parser_section = 81;
		static final int parsing_algorithm = 82;
		static final int imports = 83;
		static final int import_ = 84;
		static final int options = 85;
		static final int option = 86;
		static final int identifier = 87;
		static final int symref = 88;
		static final int symref_noargs = 89;
		static final int type = 90;
		static final int type_part_list = 91;
		static final int type_part = 92;
		static final int pattern = 93;
		static final int lexer_parts = 94;
		static final int lexer_part = 95;
		static final int named_pattern = 96;
		static final int lexeme = 97;
		static final int lexeme_transition = 98;
		static final int lexeme_attrs = 99;
		static final int lexeme_attribute = 100;
		static final int lexer_directive = 101;
		static final int state_selector = 102;
		static final int state_list = 103;
		static final int stateref = 104;
		static final int lexer_state = 105;
		static final int grammar_parts = 106;
		static final int grammar_part = 107;
		static final int nonterm = 108;
		static final int nonterm_type = 109;
		static final int _implements = 110;
		static final int assoc = 111;
		static final int nonterm_param = 112;
		static final int directive = 113;
		static final int inputs = 114;
		static final int inputref = 115;
		static final int references = 116;
		static final int references_cs = 117;
		static final int rules = 118;
		static final int rule_list = 119;
		static final int rule0 = 120;
		static final int predicate = 121;
		static final int rhsPrefix = 122;
		static final int rhsSuffix = 123;
		static final int ruleAction = 124;
		static final int rhsParts = 125;
		static final int rhsPart = 126;
		static final int rhsAnnotated = 127;
		static final int rhsAssignment = 128;
		static final int rhsOptional = 129;
		static final int rhsCast = 130;
		static final int rhsUnordered = 131;
		static final int rhsClass = 132;
		static final int rhsPrimary = 133;
		static final int rhsSet = 134;
		static final int setPrimary = 135;
		static final int setExpression = 136;
		static final int annotations = 137;
		static final int annotation_list = 138;
		static final int annotation = 139;
		static final int nonterm_params = 140;
		static final int param_ref = 141;
		static final int symref_args = 142;
		static final int keyval_arg = 143;
		static final int param_type = 144;
		static final int param_value = 145;
		static final int predicate_primary = 146;
		static final int predicate_expression = 147;
		static final int expression = 148;
		static final int map_entry = 149;
		static final int literal = 150;
		static final int expression_list = 151;
		static final int name = 152;
		static final int qualified_id = 153;
		static final int command = 154;
		static final int syntax_problem = 155;
		static final int importsopt = 156;
		static final int parsing_algorithmopt = 157;
		static final int typeopt = 158;
		static final int lexeme_transitionopt = 159;
		static final int iconopt = 160;
		static final int lexeme_attrsopt = 161;
		static final int commandopt = 162;
		static final int identifieropt = 163;
		static final int implementsopt = 164;
		static final int Lnoeoiopt = 165;
		static final int rhsSuffixopt = 166;
		static final int param_ref_list_Comma_separated = 167;
		static final int param_value_list_Comma_separated = 168;
		static final int keyval_arg_list_Comma_separated = 169;
		static final int keyval_arg_list_Comma_separated_opt = 170;
		static final int map_entry_list_Comma_separated = 171;
		static final int map_entry_list_Comma_separated_opt = 172;
		static final int expression_list_Comma_separated = 173;
		static final int expression_list_Comma_separated_opt = 174;
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected Span[] tmStack;
	protected Span tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new Span[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new Span();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new Span();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 37) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new Span();
			tmStack[tmHead].symbol = 37;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 37);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.tokenText()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		Span left = new Span();
		left.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		left.symbol = tmRuleSymbol[rule];
		left.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		Span startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		left.line = startsym.line;
		left.offset = startsym.offset;
		left.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(left, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = left;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, left.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(Span tmLeft, int ruleIndex, int ruleLength) {
		switch (ruleIndex) {
			case 0:  // input ::= header importsopt options lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 4].value), ((List<TmaImport>)tmStack[tmHead - 3].value), ((List<TmaOption>)tmStack[tmHead - 2].value), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 1:  // input ::= header importsopt options lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)tmStack[tmHead - 1].value), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 2:  // input ::= header importsopt lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 3:  // input ::= header importsopt lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 2].value), ((List<TmaImport>)tmStack[tmHead - 1].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 4:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 5].value), ((TmaName)tmStack[tmHead - 3].value), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 5:  // header ::= Llanguage name parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 2].value), ((TmaName)null), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 6:  // lexer_section ::= '::' Llexer lexer_parts
				 tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value); 
				break;
			case 7:  // parser_section ::= '::' Lparser grammar_parts
				 tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value); 
				break;
			case 8:  // parsing_algorithm ::= Llalr '(' icon ')'
				 tmLeft.value = new TmaParsingAlgorithm(((Integer)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 9:  // imports ::= import_
				 tmLeft.value = new ArrayList<TmaImport>(16); ((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 10:  // imports ::= imports import_
				 ((List<TmaImport>)tmStack[tmHead - 1].value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 11:  // import_ ::= Limport ID scon ';'
				 tmLeft.value = new TmaImport(((String)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 12:  // import_ ::= Limport scon ';'
				 tmLeft.value = new TmaImport(((String)null), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 13:  // options ::= option
				 tmLeft.value = new ArrayList<TmaOption>(16); ((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 14:  // options ::= options option
				 ((List<TmaOption>)tmStack[tmHead - 1].value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 15:  // option ::= ID '=' expression
				 tmLeft.value = new TmaOption(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 16:  // option ::= syntax_problem
				 tmLeft.value = new TmaOption(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 17:  // identifier ::= ID
				 tmLeft.value = new TmaIdentifier(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 18:  // symref ::= ID symref_args
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead - 1].value), ((TmaSymrefArgs)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 19:  // symref ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), ((TmaSymrefArgs)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 20:  // symref_noargs ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 21:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 22:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 38:  // pattern ::= regexp
				 tmLeft.value = new TmaPattern(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 39:  // lexer_parts ::= lexer_part
				 tmLeft.value = new ArrayList<ITmaLexerPart>(64); ((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 40:  // lexer_parts ::= lexer_parts lexer_part
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 41:  // lexer_parts ::= lexer_parts syntax_problem
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 46:  // named_pattern ::= ID '=' pattern
				 tmLeft.value = new TmaNamedPattern(((String)tmStack[tmHead - 2].value), ((TmaPattern)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 47:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 7].value), ((String)tmStack[tmHead - 6].value), ((TmaPattern)tmStack[tmHead - 4].value), ((TmaStateref)tmStack[tmHead - 3].value), ((Integer)tmStack[tmHead - 2].value), ((TmaLexemeAttrs)tmStack[tmHead - 1].value), ((TmaCommand)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 48:  // lexeme ::= identifier typeopt ':'
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), ((TmaPattern)null), ((TmaStateref)null), ((Integer)null), ((TmaLexemeAttrs)null), ((TmaCommand)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 49:  // lexeme_transition ::= '=>' stateref
				 tmLeft.value = ((TmaStateref)tmStack[tmHead].value); 
				break;
			case 50:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				 tmLeft.value = ((TmaLexemeAttrs)tmStack[tmHead - 1].value); 
				break;
			case 51:  // lexeme_attribute ::= Lsoft
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSOFT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 52:  // lexeme_attribute ::= Lclass
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LCLASS, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 53:  // lexeme_attribute ::= Lspace
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSPACE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 54:  // lexeme_attribute ::= Llayout
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LLAYOUT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 55:  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
				 tmLeft.value = new TmaDirectiveBrackets(((TmaSymref)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 56:  // state_selector ::= '[' state_list ']'
				 tmLeft.value = new TmaStateSelector(((List<TmaLexerState>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 57:  // state_list ::= lexer_state
				 tmLeft.value = new ArrayList<Integer>(4); ((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 58:  // state_list ::= state_list ',' lexer_state
				 ((List<TmaLexerState>)tmStack[tmHead - 2].value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 59:  // stateref ::= ID
				 tmLeft.value = new TmaStateref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 60:  // lexer_state ::= identifier '=>' stateref
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaStateref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 61:  // lexer_state ::= identifier
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead].value), ((TmaStateref)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 62:  // grammar_parts ::= grammar_part
				 tmLeft.value = new ArrayList<ITmaGrammarPart>(64); ((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 63:  // grammar_parts ::= grammar_parts grammar_part
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 64:  // grammar_parts ::= grammar_parts syntax_problem
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 68:  // nonterm ::= annotations identifier nonterm_params nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 6].value), ((TmaIdentifier)tmStack[tmHead - 5].value), ((TmaNontermParams)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 69:  // nonterm ::= annotations identifier nonterm_params '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 70:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)null), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 71:  // nonterm ::= annotations identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 4].value), ((TmaIdentifier)tmStack[tmHead - 3].value), ((TmaNontermParams)null), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 72:  // nonterm ::= identifier nonterm_params nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 5].value), ((TmaNontermParams)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 73:  // nonterm ::= identifier nonterm_params '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 74:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)null), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 75:  // nonterm ::= identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 3].value), ((TmaNontermParams)null), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 76:  // nonterm_type ::= Lreturns symref_noargs
				 tmLeft.value = new TmaNontermTypeAST(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 77:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(true, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 78:  // nonterm_type ::= Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 79:  // nonterm_type ::= Linterface identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LINTERFACE, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 80:  // nonterm_type ::= Lvoid
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LVOID, null, null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 81:  // nonterm_type ::= type
				 tmLeft.value = new TmaNontermTypeRaw(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 82:  // implements ::= ':' references_cs
				 tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value); 
				break;
			case 83:  // assoc ::= Lleft
				 tmLeft.value = TmaAssoc.LLEFT; 
				break;
			case 84:  // assoc ::= Lright
				 tmLeft.value = TmaAssoc.LRIGHT; 
				break;
			case 85:  // assoc ::= Lnonassoc
				 tmLeft.value = TmaAssoc.LNONASSOC; 
				break;
			case 86:  // nonterm_param ::= '%' Lparam identifier param_type '=' param_value ';'
				 tmLeft.value = new TmaNontermParam(((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaParamType)tmStack[tmHead - 3].value), ((ITmaParamValue)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 87:  // nonterm_param ::= '%' Lparam identifier param_type ';'
				 tmLeft.value = new TmaNontermParam(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaParamType)tmStack[tmHead - 1].value), ((ITmaParamValue)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 88:  // directive ::= '%' assoc references ';'
				 tmLeft.value = new TmaDirectivePrio(((TmaAssoc)tmStack[tmHead - 2].value), ((List<TmaSymref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 89:  // directive ::= '%' Linput inputs ';'
				 tmLeft.value = new TmaDirectiveInput(((List<TmaInputref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 90:  // directive ::= '%' Lassert Lempty rhsSet ';'
				 tmLeft.value = new TmaDirectiveAssert(TmaDirectiveAssert.TmaKindKind.LEMPTY, ((ITmaRhsPart)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 91:  // directive ::= '%' Lassert Lnonempty rhsSet ';'
				 tmLeft.value = new TmaDirectiveAssert(TmaDirectiveAssert.TmaKindKind.LNONEMPTY, ((ITmaRhsPart)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 92:  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
				 tmLeft.value = new TmaDirectiveSet(((String)tmStack[tmHead - 3].value), ((ITmaRhsPart)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 93:  // inputs ::= inputref
				 tmLeft.value = new ArrayList<TmaInputref>(); ((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 94:  // inputs ::= inputs ',' inputref
				 ((List<TmaInputref>)tmStack[tmHead - 2].value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 95:  // inputref ::= symref_noargs Lnoeoiopt
				 tmLeft.value = new TmaInputref(((TmaSymref)tmStack[tmHead - 1].value), ((String)tmStack[tmHead].value) != null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 96:  // references ::= symref_noargs
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 97:  // references ::= references symref_noargs
				 ((List<TmaSymref>)tmStack[tmHead - 1].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 98:  // references_cs ::= symref_noargs
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 99:  // references_cs ::= references_cs ',' symref_noargs
				 ((List<TmaSymref>)tmStack[tmHead - 2].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 101:  // rule_list ::= rule0
				 tmLeft.value = new ArrayList<TmaRule0>(); ((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 102:  // rule_list ::= rule_list '|' rule0
				 ((List<TmaRule0>)tmStack[tmHead - 2].value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 103:  // rule0 ::= predicate rhsPrefix rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)tmStack[tmHead - 4].value), ((TmaRhsPrefix)tmStack[tmHead - 3].value), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 104:  // rule0 ::= predicate rhsPrefix rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)tmStack[tmHead - 3].value), ((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 105:  // rule0 ::= predicate rhsPrefix ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)tmStack[tmHead - 3].value), ((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 106:  // rule0 ::= predicate rhsPrefix rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)tmStack[tmHead - 2].value), ((TmaRhsPrefix)tmStack[tmHead - 1].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 107:  // rule0 ::= predicate rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)tmStack[tmHead - 3].value), ((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 108:  // rule0 ::= predicate rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)tmStack[tmHead - 2].value), ((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 109:  // rule0 ::= predicate ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)tmStack[tmHead - 2].value), ((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 110:  // rule0 ::= predicate rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)tmStack[tmHead - 1].value), ((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 111:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)null), ((TmaRhsPrefix)tmStack[tmHead - 3].value), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 112:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)null), ((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 113:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)null), ((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 114:  // rule0 ::= rhsPrefix rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)null), ((TmaRhsPrefix)tmStack[tmHead - 1].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 115:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)null), ((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 116:  // rule0 ::= rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)null), ((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 117:  // rule0 ::= ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)null), ((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 118:  // rule0 ::= rhsSuffixopt
				 tmLeft.value = new TmaRule0(((ITmaPredicateExpression)null), ((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 119:  // rule0 ::= syntax_problem
				 tmLeft.value = new TmaRule0(null, null, null, null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 120:  // predicate ::= '[' predicate_expression ']'
				 tmLeft.value = ((ITmaPredicateExpression)tmStack[tmHead - 1].value); 
				break;
			case 121:  // rhsPrefix ::= annotations ':'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 122:  // rhsSuffix ::= '%' Lprio symref_noargs
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LPRIO, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 123:  // rhsSuffix ::= '%' Lshift symref_noargs
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LSHIFT, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 124:  // ruleAction ::= '{~' identifier scon '}'
				 tmLeft.value = new TmaRuleAction(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 125:  // ruleAction ::= '{~' identifier '}'
				 tmLeft.value = new TmaRuleAction(((TmaIdentifier)tmStack[tmHead - 1].value), ((String)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 126:  // rhsParts ::= rhsPart
				 tmLeft.value = new ArrayList<ITmaRhsPart>(); ((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 127:  // rhsParts ::= rhsParts rhsPart
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 128:  // rhsParts ::= rhsParts syntax_problem
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 133:  // rhsAnnotated ::= annotations rhsAssignment
				 tmLeft.value = new TmaRhsAnnotated(((TmaAnnotations)tmStack[tmHead - 1].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 135:  // rhsAssignment ::= identifier '=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), false, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 136:  // rhsAssignment ::= identifier '+=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), true, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 138:  // rhsOptional ::= rhsCast '?'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 140:  // rhsCast ::= rhsClass Las symref
				 tmLeft.value = new TmaRhsCast(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 141:  // rhsCast ::= rhsClass Las literal
				 tmLeft.value = new TmaRhsAsLiteral(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 142:  // rhsUnordered ::= rhsPart '&' rhsPart
				 tmLeft.value = new TmaRhsUnordered(((ITmaRhsPart)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 144:  // rhsClass ::= identifier ':' rhsPrimary
				 tmLeft.value = new TmaRhsClass(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 145:  // rhsPrimary ::= symref
				 tmLeft.value = new TmaRhsSymbol(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 146:  // rhsPrimary ::= '(' rules ')'
				 tmLeft.value = new TmaRhsNested(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 147:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), true, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 148:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), false, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 149:  // rhsPrimary ::= rhsPrimary '*'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.TmaQuantifierKind.MULT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 150:  // rhsPrimary ::= rhsPrimary '+'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.TmaQuantifierKind.PLUS, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 151:  // rhsPrimary ::= '$' '(' rules ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 153:  // rhsSet ::= Lset '(' setExpression ')'
				 tmLeft.value = new TmaRhsSet(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 154:  // setPrimary ::= ID symref
				 tmLeft.value = new TmaSetSymbol(((String)tmStack[tmHead - 1].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 155:  // setPrimary ::= symref
				 tmLeft.value = new TmaSetSymbol(((String)null), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 156:  // setPrimary ::= '(' setExpression ')'
				 tmLeft.value = new TmaSetCompound(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 157:  // setPrimary ::= '~' setPrimary
				 tmLeft.value = new TmaSetComplement(((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 159:  // setExpression ::= setExpression '|' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.OR, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 160:  // setExpression ::= setExpression '&' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.AMPERSAND, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 161:  // annotations ::= annotation_list
				 tmLeft.value = new TmaAnnotations(((List<TmaAnnotation>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 162:  // annotation_list ::= annotation
				 tmLeft.value = new ArrayList<TmaAnnotation>(); ((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 163:  // annotation_list ::= annotation_list annotation
				 ((List<TmaAnnotation>)tmStack[tmHead - 1].value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 164:  // annotation ::= '@' ID '{' expression '}'
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead - 3].value), ((ITmaExpression)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 165:  // annotation ::= '@' ID
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead].value), ((ITmaExpression)null), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 166:  // annotation ::= '@' syntax_problem
				 tmLeft.value = new TmaAnnotation(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 167:  // nonterm_params ::= '<' param_ref_list_Comma_separated '>'
				 tmLeft.value = new TmaNontermParams(((List<TmaIdentifier>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 169:  // symref_args ::= '<' param_value_list_Comma_separated '>'
				 tmLeft.value = new TmaSymrefArgs(((List<ITmaParamValue>)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 170:  // symref_args ::= '<' keyval_arg_list_Comma_separated_opt '>'
				 tmLeft.value = new TmaSymrefArgs(null, ((List<TmaKeyvalArg>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 171:  // keyval_arg ::= param_ref ':' param_value
				 tmLeft.value = new TmaKeyvalArg(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaParamValue)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 172:  // param_type ::= Lint
				 tmLeft.value = TmaParamType.LINT; 
				break;
			case 173:  // param_type ::= Lstring
				 tmLeft.value = TmaParamType.LSTRING; 
				break;
			case 174:  // param_type ::= Lbool
				 tmLeft.value = TmaParamType.LBOOL; 
				break;
			case 175:  // param_type ::= Lsymbol
				 tmLeft.value = TmaParamType.LSYMBOL; 
				break;
			case 178:  // predicate_primary ::= '!' param_ref
				 tmLeft.value = new TmaBoolPredicate(true, ((TmaIdentifier)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 179:  // predicate_primary ::= param_ref
				 tmLeft.value = new TmaBoolPredicate(false, ((TmaIdentifier)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 180:  // predicate_primary ::= param_ref '==' literal
				 tmLeft.value = new TmaComparePredicate(((TmaIdentifier)tmStack[tmHead - 2].value), TmaComparePredicate.TmaKindKind.EQUAL_EQUAL, ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 181:  // predicate_primary ::= param_ref '!=' literal
				 tmLeft.value = new TmaComparePredicate(((TmaIdentifier)tmStack[tmHead - 2].value), TmaComparePredicate.TmaKindKind.EXCLAMATION_EQUAL, ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 183:  // predicate_expression ::= predicate_expression '&&' predicate_expression
				 tmLeft.value = new TmaPredicateBinary(((ITmaPredicateExpression)tmStack[tmHead - 2].value), TmaPredicateBinary.TmaKindKind.AMPERSAND_AMPERSAND, ((ITmaPredicateExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 184:  // predicate_expression ::= predicate_expression '||' predicate_expression
				 tmLeft.value = new TmaPredicateBinary(((ITmaPredicateExpression)tmStack[tmHead - 2].value), TmaPredicateBinary.TmaKindKind.OR_OR, ((ITmaPredicateExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 187:  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
				 tmLeft.value = new TmaInstance(((TmaName)tmStack[tmHead - 3].value), ((List<TmaMapEntry>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 188:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				 tmLeft.value = new TmaArray(((List<ITmaExpression>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 190:  // map_entry ::= ID ':' expression
				 tmLeft.value = new TmaMapEntry(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 191:  // literal ::= scon
				 tmLeft.value = new TmaLiteral(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 192:  // literal ::= icon
				 tmLeft.value = new TmaLiteral(((Integer)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 193:  // literal ::= Ltrue
				 tmLeft.value = new TmaLiteral(Boolean.TRUE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 194:  // literal ::= Lfalse
				 tmLeft.value = new TmaLiteral(Boolean.FALSE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 195:  // expression_list ::= expression
				 tmLeft.value = new ArrayList(); ((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 196:  // expression_list ::= expression_list ',' expression
				 ((List<ITmaExpression>)tmStack[tmHead - 2].value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 197:  // name ::= qualified_id
				 tmLeft.value = new TmaName(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 199:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 200:  // command ::= code
				 tmLeft.value = new TmaCommand(source, tmLeft.line, tmStack[tmHead].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 201:  // syntax_problem ::= error
				 tmLeft.value = new TmaSyntaxProblem(source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 224:  // param_ref_list_Comma_separated ::= param_ref_list_Comma_separated ',' param_ref
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 225:  // param_ref_list_Comma_separated ::= param_ref
				tmLeft.value = new ArrayList();
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 226:  // param_value_list_Comma_separated ::= param_value_list_Comma_separated ',' param_value
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 227:  // param_value_list_Comma_separated ::= param_value
				tmLeft.value = new ArrayList();
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 228:  // keyval_arg_list_Comma_separated ::= keyval_arg_list_Comma_separated ',' keyval_arg
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 229:  // keyval_arg_list_Comma_separated ::= keyval_arg
				tmLeft.value = new ArrayList();
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 232:  // map_entry_list_Comma_separated ::= map_entry_list_Comma_separated ',' map_entry
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 233:  // map_entry_list_Comma_separated ::= map_entry
				tmLeft.value = new ArrayList();
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 236:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 237:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(Span value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(Span value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 413);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 414);
	}
}
