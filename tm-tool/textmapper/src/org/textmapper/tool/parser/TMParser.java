/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(298,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\246\0\247\0\uffcd\uffff\265\0\26" +
		"\0\250\0\251\0\uffff\uffff\236\0\235\0\245\0\262\0\uff93\uffff\uff8b\uffff\uffff" +
		"\uffff\uff7f\uffff\15\0\uffff\uffff\252\0\uff4f\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\6\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\16\0\uffff" +
		"\uffff\uffff\uffff\uff49\uffff\uffff\uffff\21\0\24\0\uffff\uffff\244\0\uff43\uffff" +
		"\uffff\uffff\uffff\uffff\11\0\263\0\20\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\4\0\uff17\uffff\22\0\253\0\uffff\uffff\uff11\uffff\uffff\uffff\uff0b\uffff" +
		"\uffff\uffff\17\0\uffff\uffff\uff05\uffff\ufefd\uffff\ufef7\uffff\51\0\55\0\56\0" +
		"\54\0\23\0\uffff\uffff\2\0\257\0\260\0\256\0\uffff\uffff\uffff\uffff\241\0\uffff" +
		"\uffff\14\0\25\0\ufec5\uffff\uffff\uffff\103\0\uffff\uffff\uffff\uffff\60\0\uffff" +
		"\uffff\52\0\53\0\uffff\uffff\uffff\uffff\uffff\uffff\ufebd\uffff\110\0\113\0\114" +
		"\0\uffff\uffff\ufe8b\uffff\230\0\254\0\uffff\uffff\10\0\uffff\uffff\uffff\uffff\102" +
		"\0\50\0\57\0\uffff\uffff\41\0\42\0\35\0\36\0\uffff\uffff\33\0\34\0\40\0\43\0\45\0" +
		"\44\0\37\0\uffff\uffff\32\0\ufe59\uffff\uffff\uffff\134\0\135\0\136\0\uffff\uffff" +
		"\ufe25\uffff\234\0\ufdf1\uffff\uffff\uffff\uffff\uffff\ufdb5\uffff\ufd87\uffff\131" +
		"\0\132\0\uffff\uffff\111\0\112\0\uffff\uffff\231\0\uffff\uffff\105\0\106\0\104\0" +
		"\27\0\47\0\uffff\uffff\30\0\31\0\ufd59\uffff\ufd1f\uffff\uffff\uffff\141\0\146\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufd17\uffff\uffff\uffff\ufcdb\uffff" +
		"\264\0\uffff\uffff\214\0\uffff\uffff\ufc8d\uffff\153\0\ufc85\uffff\155\0\ufc4b\uffff" +
		"\ufc0f\uffff\174\0\177\0\201\0\ufbcf\uffff\175\0\ufb8d\uffff\ufb49\uffff\uffff\uffff" +
		"\176\0\163\0\162\0\ufb01\uffff\121\0\122\0\ufad3\uffff\ufacd\uffff\ufac7\uffff\ufa8b" +
		"\uffff\uffff\uffff\255\0\46\0\uffff\uffff\62\0\ufa4f\uffff\143\0\145\0\140\0\uffff" +
		"\uffff\137\0\147\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\ufa17\uffff\uf9db\uffff\uffff\uffff\uffff\uffff\uffff\uffff\120\0\uf99d\uffff" +
		"\uf95f\uffff\160\0\uf923\uffff\173\0\161\0\uffff\uffff\205\0\uffff\uffff\220\0\221" +
		"\0\200\0\uf8e3\uffff\uffff\uffff\124\0\127\0\130\0\uffff\uffff\uffff\uffff\uf8dd" +
		"\uffff\74\0\64\0\uf8a1\uffff\142\0\232\0\167\0\170\0\166\0\164\0\uffff\uffff\215" +
		"\0\uffff\uffff\uffff\uffff\uffff\uffff\202\0\uf86b\uffff\203\0\154\0\157\0\uf823" +
		"\uffff\207\0\210\0\126\0\150\0\uf7e3\uffff\117\0\116\0\uffff\uffff\uffff\uffff\66" +
		"\0\uf7dd\uffff\165\0\uffff\uffff\uffff\uffff\225\0\uffff\uffff\115\0\76\0\77\0\100" +
		"\0\101\0\uffff\uffff\70\0\72\0\uffff\uffff\uffff\uffff\223\0\uffff\uffff\151\0\75" +
		"\0\217\0\216\0\uffff\uffff\uffff\uffff\224\0\226\0\222\0\uffff\uffff\uffff\uffff" +
		"\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(2132,
		"\46\uffff\10\1\37\1\40\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62" +
		"\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\uffff\ufffe\2\uffff\3\uffff\21\uffff\37\uffff" +
		"\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\47\uffff\41\uffff\42\uffff\43\uffff\22\243\uffff\ufffe\23\uffff\67\uffff" +
		"\14\7\uffff\ufffe\15\uffff\14\261\23\261\24\261\67\261\uffff\ufffe\46\uffff\10\0" +
		"\37\0\40\0\47\0\50\0\51\0\52\0\53\0\54\0\55\0\56\0\57\0\60\0\61\0\62\0\63\0\64\0" +
		"\65\0\66\0\67\0\70\0\71\0\uffff\ufffe\17\uffff\22\242\uffff\ufffe\10\uffff\0\5\uffff" +
		"\ufffe\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\50\uffff\47\uffff\24\240\uffff\ufffe\10\uffff\0\3\uffff\ufffe\17\uffff\24" +
		"\237\uffff\ufffe\67\uffff\14\7\uffff\ufffe\12\uffff\20\25\23\25\uffff\ufffe\23\uffff" +
		"\20\61\uffff\ufffe\21\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\0\12\10\12\uffff\ufffe\13" +
		"\uffff\17\107\22\107\uffff\ufffe\6\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\0\13\uffff" +
		"\ufffe\36\uffff\22\227\23\227\35\227\40\227\47\227\50\227\51\227\52\227\53\227\54" +
		"\227\55\227\56\227\57\227\60\227\61\227\62\227\63\227\64\227\65\227\66\227\67\227" +
		"\70\227\71\227\uffff\ufffe\1\uffff\0\73\10\73\21\73\37\73\40\73\47\73\50\73\51\73" +
		"\52\73\53\73\54\73\55\73\56\73\57\73\60\73\61\73\62\73\63\73\64\73\65\73\66\73\67" +
		"\73\70\73\71\73\uffff\ufffe\74\uffff\22\233\23\233\35\233\36\233\40\233\47\233\50" +
		"\233\51\233\52\233\53\233\54\233\55\233\56\233\57\233\60\233\61\233\62\233\63\233" +
		"\64\233\65\233\66\233\67\233\70\233\71\233\uffff\ufffe\6\uffff\21\uffff\23\uffff" +
		"\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff" +
		"\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\156\14\156\uffff\ufffe" +
		"\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\47\uffff\7\123\20\123\uffff\ufffe\40\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\7\123\20\123\uffff\ufffe" +
		"\13\uffff\0\63\3\63\10\63\21\63\23\63\37\63\40\63\47\63\50\63\51\63\52\63\53\63\54" +
		"\63\55\63\56\63\57\63\60\63\61\63\62\63\63\63\64\63\65\63\66\63\67\63\70\63\71\63" +
		"\73\63\uffff\ufffe\57\uffff\14\144\17\144\uffff\ufffe\6\uffff\21\uffff\23\uffff\35" +
		"\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53" +
		"\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\156\24\156\uffff\ufffe\12" +
		"\25\20\25\32\25\6\26\11\26\14\26\23\26\24\26\30\26\31\26\33\26\34\26\35\26\36\26" +
		"\37\26\40\26\44\26\45\26\47\26\50\26\51\26\52\26\53\26\54\26\55\26\56\26\57\26\60" +
		"\26\61\26\62\26\63\26\64\26\65\26\66\26\67\26\70\26\71\26\73\26\uffff\ufffe\11\uffff" +
		"\14\152\24\152\uffff\ufffe\6\uffff\23\uffff\35\uffff\36\uffff\40\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73" +
		"\uffff\11\156\14\156\24\156\uffff\ufffe\6\uffff\23\uffff\35\uffff\36\uffff\37\uffff" +
		"\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\47\uffff\73\uffff\11\156\14\156\24\156\uffff\ufffe\34\uffff\6\171\11\171" +
		"\14\171\23\171\24\171\35\171\36\171\37\171\40\171\44\171\47\171\50\171\51\171\52" +
		"\171\53\171\54\171\55\171\56\171\57\171\60\171\61\171\62\171\63\171\64\171\65\171" +
		"\66\171\67\171\70\171\71\171\73\171\uffff\ufffe\33\uffff\6\204\11\204\14\204\23\204" +
		"\24\204\34\204\35\204\36\204\37\204\40\204\44\204\47\204\50\204\51\204\52\204\53" +
		"\204\54\204\55\204\56\204\57\204\60\204\61\204\62\204\63\204\64\204\65\204\66\204" +
		"\67\204\70\204\71\204\73\204\uffff\ufffe\45\uffff\6\206\11\206\14\206\23\206\24\206" +
		"\33\206\34\206\35\206\36\206\37\206\40\206\44\206\47\206\50\206\51\206\52\206\53" +
		"\206\54\206\55\206\56\206\57\206\60\206\61\206\62\206\63\206\64\206\65\206\66\206" +
		"\67\206\70\206\71\206\73\206\uffff\ufffe\30\uffff\31\uffff\6\212\11\212\14\212\23" +
		"\212\24\212\33\212\34\212\35\212\36\212\37\212\40\212\44\212\45\212\47\212\50\212" +
		"\51\212\52\212\53\212\54\212\55\212\56\212\57\212\60\212\61\212\62\212\63\212\64" +
		"\212\65\212\66\212\67\212\70\212\71\212\73\212\uffff\ufffe\40\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\7\123\20" +
		"\123\uffff\ufffe\20\uffff\7\125\uffff\ufffe\20\uffff\7\125\uffff\ufffe\6\uffff\21" +
		"\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\156\14\156" +
		"\uffff\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff" +
		"\73\uffff\11\156\14\156\uffff\ufffe\3\uffff\0\65\10\65\21\65\23\65\37\65\40\65\47" +
		"\65\50\65\51\65\52\65\53\65\54\65\55\65\56\65\57\65\60\65\61\65\62\65\63\65\64\65" +
		"\65\65\66\65\67\65\70\65\71\65\73\65\uffff\ufffe\6\uffff\23\uffff\35\uffff\36\uffff" +
		"\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\47\uffff\44\uffff\73\uffff\11\156\24\156\uffff\ufffe\6\uffff\21" +
		"\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\156\14\156" +
		"\24\156\uffff\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff" +
		"\47\uffff\73\uffff\11\156\14\156\24\156\uffff\ufffe\6\uffff\23\uffff\35\uffff\36" +
		"\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52" +
		"\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\156\14\156\24\156\uffff\ufffe\34\uffff" +
		"\6\172\11\172\14\172\23\172\24\172\35\172\36\172\37\172\40\172\44\172\47\172\50\172" +
		"\51\172\52\172\53\172\54\172\55\172\56\172\57\172\60\172\61\172\62\172\63\172\64" +
		"\172\65\172\66\172\67\172\70\172\71\172\73\172\uffff\ufffe\20\uffff\7\125\uffff\ufffe" +
		"\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff" +
		"\11\156\14\156\uffff\ufffe\23\uffff\0\67\10\67\21\67\37\67\40\67\47\67\50\67\51\67" +
		"\52\67\53\67\54\67\55\67\56\67\57\67\60\67\61\67\62\67\63\67\64\67\65\67\66\67\67" +
		"\67\70\67\71\67\73\67\uffff\ufffe\30\uffff\31\uffff\6\213\11\213\14\213\23\213\24" +
		"\213\33\213\34\213\35\213\36\213\37\213\40\213\44\213\45\213\47\213\50\213\51\213" +
		"\52\213\53\213\54\213\55\213\56\213\57\213\60\213\61\213\62\213\63\213\64\213\65" +
		"\213\66\213\67\213\70\213\71\213\73\213\uffff\ufffe\34\211\6\211\11\211\14\211\23" +
		"\211\24\211\35\211\36\211\37\211\40\211\44\211\47\211\50\211\51\211\52\211\53\211" +
		"\54\211\55\211\56\211\57\211\60\211\61\211\62\211\63\211\64\211\65\211\66\211\67" +
		"\211\70\211\71\211\73\211\uffff\ufffe\17\uffff\7\133\uffff\ufffe\73\uffff\0\71\10" +
		"\71\21\71\37\71\40\71\47\71\50\71\51\71\52\71\53\71\54\71\55\71\56\71\57\71\60\71" +
		"\61\71\62\71\63\71\64\71\65\71\66\71\67\71\70\71\71\71\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(140,
		"\0\2\4\17\31\31\31\46\52\56\57\64\70\103\110\111\123\133\157\170\224\240\241\245" +
		"\251\260\263\264\271\300\320\344\372\u013c\u0144\u014c\u0153\u0154\u0155\u0157\u019b" +
		"\u01de\u0221\u0265\u02a8\u02eb\u032e\u0371\u03b4\u03f7\u043d\u0481\u04c5\u0508\u054b" +
		"\u058e\u05d2\u0615\u0658\u0658\u0665\u0666\u0667\u0668\u066a\u066c\u066e\u066f\u0671" +
		"\u0672\u0674\u068f\u06b5\u06b8\u06ba\u06be\u06c0\u06c1\u06c3\u06c5\u06c7\u06c8\u06c9" +
		"\u06ca\u06cc\u06cd\u06cf\u06d1\u06d2\u06d4\u06d6\u06d8\u06db\u06dc\u06de\u06df\u06e1" +
		"\u06e3\u06e4\u06ea\u06f0\u06f7\u06fe\u0709\u0711\u071d\u0729\u0736\u0745\u0754\u0760" +
		"\u076f\u077f\u0781\u0790\u079f\u07af\u07b6\u07be\u07bf\u07c0\u07c2\u07c5\u07c8\u07d5" +
		"\u07eb\u07ec\u07ee\u07ef\u07f0\u07f1\u07f2\u07f3\u07f6\u07f9\u07fa\u0805\u0806\u0807" +
		"\u0808");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(2056,
		"\u0126\u0127\125\174\1\6\22\40\50\62\114\126\220\237\341\1\6\50\54\62\114\220\237" +
		"\306\341\107\136\204\242\253\255\277\300\323\324\331\332\354\135\213\216\301\25\44" +
		"\45\65\251\43\70\77\146\246\70\122\146\231\35\37\60\117\233\236\250\352\353\371\u0108" +
		"\21\126\162\172\226\u011a\27\71\123\126\162\172\226\233\u0105\u011c\70\130\146\246" +
		"\275\276\345\372\1\6\50\61\62\101\114\126\162\172\204\220\226\237\242\277\300\324" +
		"\331\354\30\123\126\162\172\226\320\321\366\20\31\33\100\126\135\162\172\204\216" +
		"\226\242\243\253\255\266\277\300\323\324\325\326\327\331\332\337\354\357\53\72\74" +
		"\155\162\172\226\322\371\u010d\u0116\u011c\315\126\162\172\226\126\162\172\226\126" +
		"\162\172\226\265\374\u0119\265\374\u0119\246\126\162\172\226\262\126\162\172\226" +
		"\256\334\u0100\204\242\253\255\266\277\300\323\324\325\326\327\331\332\337\354\107" +
		"\126\136\143\162\172\204\226\241\242\253\255\277\300\323\324\331\332\337\354\1\6" +
		"\25\45\50\62\101\114\134\136\204\220\237\242\255\277\300\323\324\331\332\354\1\2" +
		"\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172" +
		"\175\201\204\206\207\210\220\226\236\237\241\242\253\255\266\272\277\300\304\312" +
		"\316\317\321\323\324\325\326\327\331\332\337\341\346\354\370\u010d\u010e\u0110\u0121" +
		"\u0122\1\6\50\62\114\220\237\341\1\6\50\62\114\220\237\341\1\6\50\62\114\220\237" +
		"\323\264\3\23\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135" +
		"\136\142\150\151\162\172\175\201\204\206\207\210\216\220\226\236\237\241\242\253" +
		"\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341\346" +
		"\354\370\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101" +
		"\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236" +
		"\237\240\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327" +
		"\331\332\337\341\346\354\370\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45" +
		"\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207" +
		"\210\220\226\236\237\240\241\242\253\255\266\272\277\300\304\312\316\317\321\323" +
		"\324\325\326\327\331\332\337\341\346\354\370\u010d\u010e\u0110\u0121\u0122\1\2\6" +
		"\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\216\220\226\236\237\241\242\253\255\266\272\277\300" +
		"\304\312\316\317\321\323\324\325\326\327\331\332\337\341\346\354\370\u010d\u010e" +
		"\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\133" +
		"\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\253" +
		"\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341\346" +
		"\354\370\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101" +
		"\107\114\115\126\133\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327" +
		"\331\332\337\341\346\354\370\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45" +
		"\50\52\61\62\76\101\107\114\115\126\133\134\136\142\150\151\162\172\175\201\204\206" +
		"\207\210\220\226\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323" +
		"\324\325\326\327\331\332\337\341\346\354\370\u010d\u010e\u0110\u0121\u0122\1\2\6" +
		"\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\133\134\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\220\226\236\237\241\242\253\255\266\272\277\300\304" +
		"\312\316\317\321\323\324\325\326\327\331\332\337\341\346\354\370\u010d\u010e\u0110" +
		"\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142" +
		"\150\151\162\172\175\201\204\206\207\210\220\226\232\236\237\241\242\253\255\266" +
		"\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341\346\354\370" +
		"\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114" +
		"\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241" +
		"\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337" +
		"\341\346\354\370\u0109\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52" +
		"\61\62\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175\201\204\205\206" +
		"\207\210\216\220\226\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321" +
		"\323\324\325\326\327\331\332\337\341\346\354\370\u0109\u010d\u010e\u0110\u0121\u0122" +
		"\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142\150\151" +
		"\162\172\175\201\204\206\207\210\216\220\226\236\237\241\242\253\255\266\272\277" +
		"\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341\346\354\370\u010d\u010e" +
		"\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134" +
		"\135\136\142\150\151\162\172\175\201\204\206\207\210\216\220\226\236\237\241\242" +
		"\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341" +
		"\346\354\370\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45\50\52\61\62\76" +
		"\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327" +
		"\331\332\337\341\346\354\370\u0109\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32" +
		"\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204" +
		"\206\207\210\220\226\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321" +
		"\323\324\325\326\327\331\332\337\341\346\354\370\u0109\u010d\u010e\u0110\u0121\u0122" +
		"\0\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151" +
		"\162\172\175\201\204\206\207\210\220\226\236\237\241\242\253\255\266\272\277\300" +
		"\304\312\316\317\321\323\324\325\326\327\331\332\337\341\346\354\370\u010d\u010e" +
		"\u0110\u0121\u0122\1\2\6\13\20\22\25\32\36\45\50\52\61\62\73\76\101\107\114\115\126" +
		"\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\253" +
		"\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327\331\332\337\341\346" +
		"\354\370\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\42\45\50\52\61\62\76" +
		"\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323\324\325\326\327" +
		"\331\332\337\341\346\354\370\u010d\u010e\u0110\u0121\u0122\1\2\6\13\22\25\32\36\45" +
		"\50\52\61\62\63\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206" +
		"\207\210\220\226\236\237\241\242\253\255\266\272\277\300\304\312\316\317\321\323" +
		"\324\325\326\327\331\332\337\341\346\354\370\u010d\u010e\u0110\u0121\u0122\204\242" +
		"\253\255\277\300\323\324\331\332\337\354\u010b\202\0\0\25\45\44\65\20\73\3\3\23\25" +
		"\25\45\61\76\101\107\136\142\151\204\207\210\241\242\253\255\266\272\277\300\321" +
		"\323\324\325\327\331\332\337\354\1\6\50\62\114\175\201\204\206\220\236\237\242\253" +
		"\255\266\277\300\312\316\317\323\324\325\326\327\331\332\337\341\346\354\370\u010d" +
		"\u010e\u0110\u0121\u0122\100\135\216\126\162\126\162\172\226\125\174\61\61\101\61" +
		"\101\61\101\231\357\u0109\61\101\76\150\304\76\151\107\107\136\107\136\135\216\275" +
		"\276\345\133\107\136\175\175\312\201\370\346\204\242\277\300\324\354\204\242\277" +
		"\300\324\354\204\242\277\300\324\331\354\204\242\277\300\324\331\354\204\242\253" +
		"\255\277\300\323\324\331\332\354\204\242\253\277\300\324\331\354\204\242\253\255" +
		"\277\300\323\324\331\332\337\354\204\242\253\255\277\300\323\324\331\332\337\354" +
		"\204\242\253\255\266\277\300\323\324\331\332\337\354\204\242\253\255\266\277\300" +
		"\323\324\325\327\331\332\337\354\204\242\253\255\266\277\300\323\324\325\327\331" +
		"\332\337\354\204\242\253\255\277\300\323\324\331\332\337\354\204\242\253\255\266" +
		"\277\300\323\324\325\327\331\332\337\354\204\242\253\255\266\277\300\323\324\325" +
		"\326\327\331\332\337\354\u010e\u0122\107\136\204\241\242\253\255\277\300\323\324" +
		"\331\332\337\354\107\136\204\241\242\253\255\277\300\323\324\331\332\337\354\107" +
		"\136\143\204\241\242\253\255\277\300\323\324\331\332\337\354\1\6\50\62\114\220\237" +
		"\1\6\50\62\114\220\237\341\6\52\70\146\2\13\32\2\13\32\204\242\253\255\277\300\323" +
		"\324\331\332\337\354\u010b\1\6\25\45\50\62\101\114\134\136\204\220\237\242\255\277" +
		"\300\323\324\331\332\354\3\20\73\100\231\306\357\u010b\207\210\272\275\276\345\232" +
		"\204\242\253\255\277\300\323\324\331\332\354\u010e\52\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(2056,
		"\u0128\u0129\153\153\4\4\37\60\4\4\4\155\4\4\4\5\5\5\74\5\5\5\5\356\5\133\133\240" +
		"\240\240\240\240\240\240\240\240\240\240\204\277\300\354\42\63\42\63\331\62\111\125" +
		"\111\325\112\150\112\304\55\57\75\147\311\313\330\u0106\u0107\u010e\u0111\36\156" +
		"\156\156\156\u0121\50\115\151\157\157\157\157\312\u0110\u0122\113\174\113\326\346" +
		"\346\346\326\6\6\6\76\6\76\6\160\160\160\241\6\160\6\241\241\241\241\241\241\51\152" +
		"\161\161\161\161\364\365\u010c\32\52\54\126\162\126\162\162\242\126\162\242\324\242" +
		"\242\242\242\242\242\242\242\242\242\242\242\242\242\u0109\73\116\120\224\225\227" +
		"\303\367\u010f\u0119\u011e\u0123\361\163\163\163\163\164\164\164\164\165\165\165" +
		"\165\342\342\u011f\343\343\u0120\327\166\166\166\166\340\167\167\167\167\337\337" +
		"\337\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\134\170\134" +
		"\134\170\170\134\170\134\134\134\134\134\134\134\134\134\134\134\134\7\7\7\7\7\7" +
		"\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121" +
		"\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244" +
		"\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244" +
		"\10\10\10\10\10\10\11\11\11\11\11\11\11\11\12\12\12\12\12\12\12\12\13\13\13\13\13" +
		"\13\13\370\341\22\22\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171" +
		"\202\205\121\121\221\121\171\171\10\10\244\10\121\121\205\10\171\10\10\121\244\244" +
		"\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244\10" +
		"\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202" +
		"\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\316\121\244\244\244\244" +
		"\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244\10\10\10\10" +
		"\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221" +
		"\121\171\171\10\10\244\10\121\121\10\171\10\10\317\121\244\244\244\244\121\244\244" +
		"\221\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244\10\10\10\10\10\10\10\17" +
		"\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\206\121\121\221\121\171" +
		"\171\10\10\244\10\121\121\206\10\171\10\10\121\244\244\244\244\121\244\244\221\10" +
		"\10\10\121\244\244\244\10\244\244\244\244\10\10\244\10\10\10\10\10\10\10\17\10\17" +
		"\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\175\202\121\121\221\121\171\171" +
		"\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121" +
		"\244\244\244\10\244\244\244\244\10\10\244\10\10\10\10\10\10\10\17\10\17\40\43\17" +
		"\56\43\10\70\77\10\121\77\121\10\146\171\176\202\121\121\221\121\171\171\10\10\244" +
		"\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244" +
		"\244\10\244\244\244\244\10\10\244\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10" +
		"\70\77\10\121\77\121\10\146\171\177\202\121\121\221\121\171\171\10\10\244\10\121" +
		"\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10" +
		"\244\244\244\244\10\10\244\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77" +
		"\10\121\77\121\10\146\171\200\202\121\121\221\121\171\171\10\10\244\10\121\121\10" +
		"\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244" +
		"\244\244\10\10\244\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77" +
		"\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\307\10\10" +
		"\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244" +
		"\10\10\244\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10" +
		"\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244" +
		"\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244\10" +
		"\u0112\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171" +
		"\202\207\121\121\221\121\171\171\10\10\244\272\10\121\121\207\10\171\10\10\121\244" +
		"\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244" +
		"\10\u0113\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146" +
		"\171\202\210\121\121\221\121\171\171\10\10\244\10\121\121\210\10\171\10\10\121\244" +
		"\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244" +
		"\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202" +
		"\211\121\121\221\121\171\171\10\10\244\10\121\121\211\10\171\10\10\121\244\244\244" +
		"\244\121\244\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244\10\10" +
		"\10\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121" +
		"\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244" +
		"\244\221\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244\10\u0114\10\10\10" +
		"\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221" +
		"\121\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221" +
		"\10\10\10\121\244\244\244\10\244\244\244\244\10\10\244\10\u0115\10\10\10\10\10\2" +
		"\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121" +
		"\171\171\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10" +
		"\10\10\121\244\244\244\10\244\244\244\244\10\10\244\10\10\10\10\10\10\10\17\10\17" +
		"\33\40\43\17\56\43\10\70\77\10\33\121\77\121\10\146\171\202\121\121\221\121\171\171" +
		"\10\10\244\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121" +
		"\244\244\244\10\244\244\244\244\10\10\244\10\10\10\10\10\10\10\17\10\17\40\43\17" +
		"\56\61\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244" +
		"\10\121\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244" +
		"\244\10\244\244\244\244\10\10\244\10\10\10\10\10\10\10\17\10\17\40\43\17\56\43\10" +
		"\70\77\10\107\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121" +
		"\121\10\171\10\10\121\244\244\244\244\121\244\244\221\10\10\10\121\244\244\244\10" +
		"\244\244\244\244\10\10\244\10\10\10\10\10\10\245\245\245\245\245\245\245\245\245" +
		"\245\245\245\245\237\u0126\3\44\65\64\110\34\34\23\24\41\45\46\66\100\122\100\135" +
		"\135\216\122\246\274\274\320\246\246\246\246\274\246\246\366\246\246\372\372\246" +
		"\246\246\246\14\14\14\14\14\232\235\247\273\14\314\14\247\247\247\247\247\247\232" +
		"\362\363\247\247\247\247\247\247\247\247\u0101\u0104\247\235\314\u011a\u011d\u0124" +
		"\u011a\127\212\212\172\226\173\173\230\230\154\231\101\102\131\103\103\104\104\305" +
		"\u010a\u0116\105\105\123\222\355\124\223\136\137\214\140\140\213\301\347\347\347" +
		"\201\141\141\233\234\360\236\u010d\u0105\250\322\352\353\371\u0108\251\251\251\251" +
		"\251\251\252\252\252\252\252\376\252\253\253\253\253\253\253\253\254\254\254\254" +
		"\254\254\254\254\254\254\254\255\323\332\255\255\255\255\255\256\256\256\334\256" +
		"\256\334\256\256\334\u0100\256\257\257\257\257\257\257\257\257\257\257\257\257\260" +
		"\260\260\260\344\260\260\260\260\260\260\260\260\261\261\261\261\261\261\261\261" +
		"\261\373\375\261\261\261\261\262\262\262\262\262\262\262\262\262\262\262\262\262" +
		"\262\262\263\263\263\263\263\263\263\263\263\263\263\263\264\264\264\264\264\264" +
		"\264\264\264\264\264\264\264\264\264\265\265\265\265\265\265\265\265\265\265\374" +
		"\265\265\265\265\265\u011b\u0125\142\142\266\321\266\266\266\266\266\266\266\266" +
		"\266\266\266\143\143\143\143\143\143\143\143\143\143\143\143\143\143\143\144\144" +
		"\217\144\144\144\144\144\144\144\144\144\144\144\144\144\u0127\26\67\106\145\302" +
		"\315\15\15\15\15\15\15\15\u0102\27\71\114\220\20\31\53\21\21\21\267\267\267\267\267" +
		"\267\267\267\267\267\267\267\u0117\16\16\47\47\16\16\132\16\203\215\270\16\16\270" +
		"\335\270\270\335\270\270\335\270\25\35\117\130\306\357\u010b\u0118\275\276\345\350" +
		"\351\u0103\310\271\271\333\336\271\271\336\271\271\377\271\u011c\72\30");

	private static final short[] tmRuleLen = TMLexer.unpack_short(182,
		"\1\0\5\4\4\3\1\0\7\4\3\3\4\1\2\4\3\1\2\3\1\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2" +
		"\1\1\2\2\1\1\1\3\1\0\1\0\1\0\1\0\1\0\10\3\2\3\1\1\1\1\3\1\3\1\3\1\1\2\2\1\1\6\5\5" +
		"\4\2\1\0\1\0\4\3\3\1\1\2\1\1\1\4\4\1\3\1\0\2\1\2\1\3\1\1\3\1\0\3\2\2\1\1\3\4\3\3" +
		"\3\1\2\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\3\1\6\4\3\1\1\2\5\2\2\1\1\1" +
		"\0\5\1\0\3\1\1\1\1\1\1\3\3\5\1\1\1\1\1\3\1\1");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(182,
		"\175\175\75\75\75\75\176\176\76\76\77\100\101\102\102\103\103\104\104\105\105\106" +
		"\107\110\110\111\111\112\112\112\112\112\112\112\112\112\112\112\112\112\113\114" +
		"\114\114\115\115\115\116\177\177\200\200\201\201\202\202\203\203\117\117\120\121" +
		"\122\122\122\122\123\124\124\125\126\126\127\127\127\130\130\131\131\131\131\132" +
		"\204\204\205\205\132\132\132\132\132\133\134\134\134\135\135\136\136\206\206\137" +
		"\140\140\141\141\142\143\143\207\207\144\144\144\144\144\145\145\145\146\146\147" +
		"\147\147\150\150\150\151\151\152\152\152\153\153\154\154\154\155\156\156\157\157" +
		"\157\157\157\157\210\210\157\157\160\161\162\162\163\163\163\164\164\211\211\164" +
		"\212\212\164\164\165\165\165\165\166\166\167\167\170\170\170\171\172\172\173\174");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'='",
		"'=>'",
		"';'",
		"'.'",
		"'..'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"imports",
		"import_",
		"options",
		"option",
		"identifier",
		"symref",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"state_selector",
		"state_list",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"directive",
		"inputs",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule_list",
		"rule0",
		"rhsPrefix",
		"rhsSuffix",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsBracketsPair",
		"annotations",
		"annotation_list",
		"annotation",
		"expression",
		"literal",
		"expression_list",
		"map_entries",
		"map_separator",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"importsopt",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"identifieropt",
		"implementsopt",
		"Lnoeoiopt",
		"rhsSuffixopt",
		"rhsBracketsPair_list_Comma_separated",
		"map_entriesopt",
		"expression_listopt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 61;
		static final int header = 62;
		static final int lexer_section = 63;
		static final int parser_section = 64;
		static final int parsing_algorithm = 65;
		static final int imports = 66;
		static final int import_ = 67;
		static final int options = 68;
		static final int option = 69;
		static final int identifier = 70;
		static final int symref = 71;
		static final int type = 72;
		static final int type_part_list = 73;
		static final int type_part = 74;
		static final int pattern = 75;
		static final int lexer_parts = 76;
		static final int lexer_part = 77;
		static final int named_pattern = 78;
		static final int lexeme = 79;
		static final int lexeme_transition = 80;
		static final int lexeme_attrs = 81;
		static final int lexeme_attribute = 82;
		static final int state_selector = 83;
		static final int state_list = 84;
		static final int stateref = 85;
		static final int lexer_state = 86;
		static final int grammar_parts = 87;
		static final int grammar_part = 88;
		static final int nonterm = 89;
		static final int nonterm_type = 90;
		static final int _implements = 91;
		static final int assoc = 92;
		static final int directive = 93;
		static final int inputs = 94;
		static final int inputref = 95;
		static final int references = 96;
		static final int references_cs = 97;
		static final int rules = 98;
		static final int rule_list = 99;
		static final int rule0 = 100;
		static final int rhsPrefix = 101;
		static final int rhsSuffix = 102;
		static final int rhsParts = 103;
		static final int rhsPart = 104;
		static final int rhsAnnotated = 105;
		static final int rhsAssignment = 106;
		static final int rhsOptional = 107;
		static final int rhsCast = 108;
		static final int rhsUnordered = 109;
		static final int rhsClass = 110;
		static final int rhsPrimary = 111;
		static final int rhsBracketsPair = 112;
		static final int annotations = 113;
		static final int annotation_list = 114;
		static final int annotation = 115;
		static final int expression = 116;
		static final int literal = 117;
		static final int expression_list = 118;
		static final int map_entries = 119;
		static final int map_separator = 120;
		static final int name = 121;
		static final int qualified_id = 122;
		static final int command = 123;
		static final int syntax_problem = 124;
		static final int importsopt = 125;
		static final int parsing_algorithmopt = 126;
		static final int typeopt = 127;
		static final int lexeme_transitionopt = 128;
		static final int iconopt = 129;
		static final int lexeme_attrsopt = 130;
		static final int commandopt = 131;
		static final int identifieropt = 132;
		static final int implementsopt = 133;
		static final int Lnoeoiopt = 134;
		static final int rhsSuffixopt = 135;
		static final int rhsBracketsPair_list_Comma_separated = 136;
		static final int map_entriesopt = 137;
		static final int expression_listopt = 138;
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 31) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 31;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 31);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 2:  // input ::= header importsopt options lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 4].value), ((List<TmaImport>)tmStack[tmHead - 3].value), ((List<TmaOption>)tmStack[tmHead - 2].value), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 3:  // input ::= header importsopt options lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)tmStack[tmHead - 1].value), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 4:  // input ::= header importsopt lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 5:  // input ::= header importsopt lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 2].value), ((List<TmaImport>)tmStack[tmHead - 1].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 8:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 5].value), ((TmaName)tmStack[tmHead - 3].value), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 9:  // header ::= Llanguage name parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 2].value), ((TmaName)null), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 10:  // lexer_section ::= '::' Llexer lexer_parts
				 tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value); 
				break;
			case 11:  // parser_section ::= '::' Lparser grammar_parts
				 tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value); 
				break;
			case 12:  // parsing_algorithm ::= Llalr '(' icon ')'
				 tmLeft.value = new TmaParsingAlgorithm(((Integer)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 13:  // imports ::= import_
				 tmLeft.value = new ArrayList<TmaImport>(16); ((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 14:  // imports ::= imports import_
				 ((List<TmaImport>)tmStack[tmHead - 1].value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 15:  // import_ ::= Limport ID scon ';'
				 tmLeft.value = new TmaImport(((String)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 16:  // import_ ::= Limport scon ';'
				 tmLeft.value = new TmaImport(((String)null), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 17:  // options ::= option
				 tmLeft.value = new ArrayList<TmaOption>(16); ((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 18:  // options ::= options option
				 ((List<TmaOption>)tmStack[tmHead - 1].value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 19:  // option ::= ID '=' expression
				 tmLeft.value = new TmaOption(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 20:  // option ::= syntax_problem
				 tmLeft.value = new TmaOption(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 21:  // identifier ::= ID
				 tmLeft.value = new TmaIdentifier(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 22:  // symref ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 23:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 24:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 40:  // pattern ::= regexp
				 tmLeft.value = new TmaPattern(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 41:  // lexer_parts ::= lexer_part
				 tmLeft.value = new ArrayList<ITmaLexerPart>(64); ((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 42:  // lexer_parts ::= lexer_parts lexer_part
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 43:  // lexer_parts ::= lexer_parts syntax_problem
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 47:  // named_pattern ::= ID '=' pattern
				 tmLeft.value = new TmaNamedPattern(((String)tmStack[tmHead - 2].value), ((TmaPattern)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 58:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 7].value), ((String)tmStack[tmHead - 6].value), ((TmaPattern)tmStack[tmHead - 4].value), ((TmaStateref)tmStack[tmHead - 3].value), ((Integer)tmStack[tmHead - 2].value), ((TmaLexemeAttrs)tmStack[tmHead - 1].value), ((TmaCommand)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 59:  // lexeme ::= identifier typeopt ':'
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), ((TmaPattern)null), ((TmaStateref)null), ((Integer)null), ((TmaLexemeAttrs)null), ((TmaCommand)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 60:  // lexeme_transition ::= '=>' stateref
				 tmLeft.value = ((TmaStateref)tmStack[tmHead].value); 
				break;
			case 61:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				 tmLeft.value = ((TmaLexemeAttrs)tmStack[tmHead - 1].value); 
				break;
			case 62:  // lexeme_attribute ::= Lsoft
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSOFT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 63:  // lexeme_attribute ::= Lclass
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LCLASS, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 64:  // lexeme_attribute ::= Lspace
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSPACE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 65:  // lexeme_attribute ::= Llayout
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LLAYOUT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 66:  // state_selector ::= '[' state_list ']'
				 tmLeft.value = new TmaStateSelector(((List<TmaLexerState>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 67:  // state_list ::= lexer_state
				 tmLeft.value = new ArrayList<Integer>(4); ((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 68:  // state_list ::= state_list ',' lexer_state
				 ((List<TmaLexerState>)tmStack[tmHead - 2].value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 69:  // stateref ::= ID
				 tmLeft.value = new TmaStateref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 70:  // lexer_state ::= identifier '=>' stateref
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaStateref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 71:  // lexer_state ::= identifier
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead].value), ((TmaStateref)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 72:  // grammar_parts ::= grammar_part
				 tmLeft.value = new ArrayList<ITmaGrammarPart>(64); ((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 73:  // grammar_parts ::= grammar_parts grammar_part
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 74:  // grammar_parts ::= grammar_parts syntax_problem
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 77:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 78:  // nonterm ::= annotations identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 4].value), ((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 79:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 80:  // nonterm ::= identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 81:  // nonterm_type ::= Lreturns symref
				 tmLeft.value = new TmaNontermTypeAST(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 86:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(true, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 87:  // nonterm_type ::= Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 88:  // nonterm_type ::= Linterface identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LINTERFACE, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 89:  // nonterm_type ::= Lvoid
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LVOID, null, null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 90:  // nonterm_type ::= type
				 tmLeft.value = new TmaNontermTypeRaw(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 91:  // implements ::= ':' references_cs
				 tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value); 
				break;
			case 92:  // assoc ::= Lleft
				 tmLeft.value = TmaAssoc.LLEFT; 
				break;
			case 93:  // assoc ::= Lright
				 tmLeft.value = TmaAssoc.LRIGHT; 
				break;
			case 94:  // assoc ::= Lnonassoc
				 tmLeft.value = TmaAssoc.LNONASSOC; 
				break;
			case 95:  // directive ::= '%' assoc references ';'
				 tmLeft.value = new TmaDirectivePrio(((TmaAssoc)tmStack[tmHead - 2].value), ((List<TmaSymref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 96:  // directive ::= '%' Linput inputs ';'
				 tmLeft.value = new TmaDirectiveInput(((List<TmaInputref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 97:  // inputs ::= inputref
				 tmLeft.value = new ArrayList<TmaInputref>(); ((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 98:  // inputs ::= inputs ',' inputref
				 ((List<TmaInputref>)tmStack[tmHead - 2].value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 101:  // inputref ::= symref Lnoeoiopt
				 tmLeft.value = new TmaInputref(((TmaSymref)tmStack[tmHead - 1].value), ((String)tmStack[tmHead].value) != null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 102:  // references ::= symref
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 103:  // references ::= references symref
				 ((List<TmaSymref>)tmStack[tmHead - 1].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 104:  // references_cs ::= symref
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 105:  // references_cs ::= references_cs ',' symref
				 ((List<TmaSymref>)tmStack[tmHead - 2].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 107:  // rule_list ::= rule0
				 tmLeft.value = new ArrayList<TmaRule0>(); ((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 108:  // rule_list ::= rule_list '|' rule0
				 ((List<TmaRule0>)tmStack[tmHead - 2].value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 111:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 112:  // rule0 ::= rhsPrefix rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 1].value), ((List<ITmaRhsPart>)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 113:  // rule0 ::= rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 114:  // rule0 ::= rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 115:  // rule0 ::= syntax_problem
				 tmLeft.value = new TmaRule0(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 116:  // rhsPrefix ::= '[' annotations ']'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 117:  // rhsPrefix ::= '[' annotations identifier ']'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 2].value), ((TmaIdentifier)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 118:  // rhsPrefix ::= '[' identifier ']'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 119:  // rhsSuffix ::= '%' Lprio symref
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LPRIO, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 120:  // rhsSuffix ::= '%' Lshift symref
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LSHIFT, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 121:  // rhsParts ::= rhsPart
				 tmLeft.value = new ArrayList<ITmaRhsPart>(); ((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 122:  // rhsParts ::= rhsParts rhsPart
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 123:  // rhsParts ::= rhsParts syntax_problem
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 128:  // rhsAnnotated ::= annotations rhsAssignment
				 tmLeft.value = new TmaRhsAnnotated(((TmaAnnotations)tmStack[tmHead - 1].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 130:  // rhsAssignment ::= identifier '=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), false, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 131:  // rhsAssignment ::= identifier '+=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), true, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 133:  // rhsOptional ::= rhsCast '?'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_OPTIONAL, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 135:  // rhsCast ::= rhsClass Las symref
				 tmLeft.value = new TmaRhsCast(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 136:  // rhsCast ::= rhsClass Las literal
				 tmLeft.value = new TmaRhsAsLiteral(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 137:  // rhsUnordered ::= rhsPart '&' rhsPart
				 tmLeft.value = new TmaRhsUnordered(((ITmaRhsPart)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 139:  // rhsClass ::= identifier ':' rhsPrimary
				 tmLeft.value = new TmaRhsClass(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 140:  // rhsPrimary ::= symref
				 tmLeft.value = new TmaRhsSymbol(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 141:  // rhsPrimary ::= '(' rules ')'
				 tmLeft.value = new TmaRhsNested(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 142:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), true, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 143:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), false, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 144:  // rhsPrimary ::= rhsPrimary '*'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ZEROORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 145:  // rhsPrimary ::= rhsPrimary '+'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ONEORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 146:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair_list_Comma_separated ',' rhsBracketsPair
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 147:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair
				tmLeft.value = new ArrayList();
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 148:  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 3].value), ((List<TmaRhsBracketsPair>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 149:  // rhsPrimary ::= '$' '(' rules ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 1].value), ((List<TmaRhsBracketsPair>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 150:  // rhsBracketsPair ::= symref '..' symref
				 tmLeft.value = new TmaRhsBracketsPair(((TmaSymref)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 151:  // annotations ::= annotation_list
				 tmLeft.value = new TmaAnnotations(((List<TmaAnnotation>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 152:  // annotation_list ::= annotation
				 tmLeft.value = new ArrayList<TmaAnnotation>(); ((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 153:  // annotation_list ::= annotation_list annotation
				 ((List<TmaAnnotation>)tmStack[tmHead - 1].value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 154:  // annotation ::= '@' ID '{' expression '}'
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead - 3].value), ((ITmaExpression)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 155:  // annotation ::= '@' ID
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead].value), ((ITmaExpression)null), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 156:  // annotation ::= '@' syntax_problem
				 tmLeft.value = new TmaAnnotation(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 161:  // expression ::= Lnew name '(' map_entriesopt ')'
				 tmLeft.value = new TmaInstance(((TmaName)tmStack[tmHead - 3].value), ((List<TmaMapEntriesItem>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 164:  // expression ::= '[' expression_listopt ']'
				 tmLeft.value = new TmaArray(((List<ITmaExpression>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 166:  // literal ::= scon
				 tmLeft.value = new TmaLiteral(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 167:  // literal ::= icon
				 tmLeft.value = new TmaLiteral(((Integer)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 168:  // literal ::= Ltrue
				 tmLeft.value = new TmaLiteral(Boolean.TRUE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 169:  // literal ::= Lfalse
				 tmLeft.value = new TmaLiteral(Boolean.FALSE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 170:  // expression_list ::= expression
				 tmLeft.value = new ArrayList(); ((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 171:  // expression_list ::= expression_list ',' expression
				 ((List<ITmaExpression>)tmStack[tmHead - 2].value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 172:  // map_entries ::= ID map_separator expression
				 tmLeft.value = new ArrayList<TmaMapEntriesItem>(); ((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 173:  // map_entries ::= map_entries ',' ID map_separator expression
				 ((List<TmaMapEntriesItem>)tmStack[tmHead - 4].value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmLeft.endoffset)); 
				break;
			case 177:  // name ::= qualified_id
				 tmLeft.value = new TmaName(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 179:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 180:  // command ::= code
				 tmLeft.value = new TmaCommand(source, tmLeft.line, tmStack[tmHead].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 181:  // syntax_problem ::= error
				 tmLeft.value = new TmaSyntaxProblem(source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 296);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 297);
	}
}
