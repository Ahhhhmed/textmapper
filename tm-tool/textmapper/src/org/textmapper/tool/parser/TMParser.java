/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(323,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\226\0\227\0\uffcd\uffff\245\0\22" +
		"\0\230\0\231\0\uffff\uffff\222\0\221\0\225\0\242\0\uff93\uffff\uff8b\uffff\uffff" +
		"\uffff\uff7f\uffff\11\0\uffff\uffff\232\0\uff4f\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\250\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\12\0\uffff" +
		"\uffff\uffff\uffff\uff49\uffff\uffff\uffff\15\0\20\0\uffff\uffff\224\0\uff43\uffff" +
		"\uffff\uffff\uffff\uffff\5\0\243\0\14\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\2\0\uff17\uffff\16\0\233\0\uffff\uffff\uff11\uffff\uffff\uffff\uff0b\uffff" +
		"\uffff\uffff\13\0\uffff\uffff\uff05\uffff\ufefd\uffff\ufef7\uffff\45\0\51\0\52\0" +
		"\50\0\17\0\uffff\uffff\0\0\237\0\240\0\236\0\uffff\uffff\uffff\uffff\223\0\uffff" +
		"\uffff\10\0\21\0\ufec5\uffff\uffff\uffff\65\0\uffff\uffff\uffff\uffff\252\0\uffff" +
		"\uffff\46\0\47\0\uffff\uffff\uffff\uffff\uffff\uffff\ufebd\uffff\72\0\75\0\76\0\uffff" +
		"\uffff\ufe8b\uffff\214\0\234\0\uffff\uffff\4\0\uffff\uffff\uffff\uffff\64\0\44\0" +
		"\53\0\uffff\uffff\35\0\36\0\31\0\32\0\uffff\uffff\27\0\30\0\34\0\37\0\41\0\40\0\33" +
		"\0\uffff\uffff\26\0\ufe57\uffff\uffff\uffff\112\0\113\0\114\0\uffff\uffff\ufe23\uffff" +
		"\220\0\ufded\uffff\uffff\uffff\uffff\uffff\ufdaf\uffff\ufd81\uffff\107\0\110\0\uffff" +
		"\uffff\73\0\74\0\uffff\uffff\215\0\uffff\uffff\67\0\70\0\66\0\23\0\43\0\uffff\uffff" +
		"\24\0\25\0\ufd53\uffff\ufd19\uffff\uffff\uffff\117\0\122\0\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\ufd11\uffff\uffff\uffff\uffff\uffff\ufcd3\uffff\uffff\uffff\244\0\uffff" +
		"\uffff\172\0\uffff\uffff\ufc81\uffff\127\0\ufc79\uffff\272\0\ufc3b\uffff\ufc31\uffff" +
		"\ufbf1\uffff\152\0\155\0\157\0\ufbad\uffff\153\0\ufb67\uffff\ufb1f\uffff\uffff\uffff" +
		"\154\0\141\0\140\0\ufad3\uffff\103\0\264\0\ufaa5\uffff\ufa9f\uffff\ufa99\uffff\ufa5b" +
		"\uffff\uffff\uffff\235\0\42\0\uffff\uffff\254\0\ufa1d\uffff\270\0\121\0\116\0\uffff" +
		"\uffff\115\0\123\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uf9e5\uffff\uffff" +
		"\uffff\uf9a5\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\102\0\uf965\uffff" +
		"\uf925\uffff\uf91b\uffff\uffff\uffff\134\0\137\0\uf8db\uffff\uf8d1\uffff\151\0\136" +
		"\0\uffff\uffff\163\0\uffff\uffff\176\0\177\0\142\0\156\0\uf88d\uffff\uffff\uffff" +
		"\266\0\105\0\106\0\uffff\uffff\uffff\uffff\uf887\uffff\56\0\256\0\uf849\uffff\120" +
		"\0\216\0\143\0\144\0\173\0\uffff\uffff\uffff\uffff\146\0\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uf813\uffff\204\0\207\0\uffff\uffff\uffff\uffff\160\0\uf7e3\uffff\161" +
		"\0\130\0\133\0\uf797\uffff\132\0\135\0\uf78d\uffff\165\0\166\0\104\0\124\0\uf749" +
		"\uffff\101\0\100\0\uffff\uffff\uffff\uffff\260\0\uf743\uffff\uffff\uffff\145\0\uffff" +
		"\uffff\201\0\uffff\uffff\206\0\203\0\uffff\uffff\202\0\uffff\uffff\131\0\uffff\uffff" +
		"\77\0\60\0\61\0\62\0\63\0\uffff\uffff\262\0\54\0\uffff\uffff\uffff\uffff\275\0\uffff" +
		"\uffff\205\0\uf70f\uffff\uf707\uffff\125\0\57\0\175\0\174\0\uffff\uffff\uffff\uffff" +
		"\200\0\212\0\274\0\uffff\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(2302,
		"\50\uffff\10\247\41\247\42\247\52\247\53\247\54\247\55\247\56\247\57\247\60\247\61" +
		"\247\62\247\63\247\64\247\65\247\66\247\67\247\70\247\71\247\72\247\73\247\74\247" +
		"\uffff\ufffe\2\uffff\3\uffff\21\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\43\uffff\44\uffff" +
		"\45\uffff\22\301\uffff\ufffe\23\uffff\72\uffff\14\251\uffff\ufffe\15\uffff\14\241" +
		"\23\241\24\241\72\241\uffff\ufffe\50\uffff\10\246\41\246\42\246\52\246\53\246\54" +
		"\246\55\246\56\246\57\246\60\246\61\246\62\246\63\246\64\246\65\246\66\246\67\246" +
		"\70\246\71\246\72\246\73\246\74\246\uffff\ufffe\17\uffff\22\300\uffff\ufffe\10\uffff" +
		"\0\3\uffff\ufffe\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\24\277\uffff\ufffe\10\uffff\0\1\uffff\ufffe\17" +
		"\uffff\24\276\uffff\ufffe\72\uffff\14\251\uffff\ufffe\12\uffff\20\21\23\21\uffff" +
		"\ufffe\23\uffff\20\253\uffff\ufffe\21\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72" +
		"\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61" +
		"\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\0\6\10\6\uffff" +
		"\ufffe\13\uffff\17\71\22\71\uffff\ufffe\6\uffff\40\uffff\41\uffff\42\uffff\74\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\0\7\uffff\ufffe\40\uffff\20\213\23\213\37\213\42\213\51\213\52\213\53\213\54\213" +
		"\55\213\56\213\57\213\60\213\61\213\62\213\63\213\64\213\65\213\66\213\67\213\70" +
		"\213\71\213\72\213\73\213\74\213\uffff\ufffe\1\uffff\0\55\10\55\21\55\41\55\42\55" +
		"\52\55\53\55\54\55\55\55\56\55\57\55\60\55\61\55\62\55\63\55\64\55\65\55\66\55\67" +
		"\55\70\55\71\55\72\55\73\55\74\55\uffff\ufffe\77\uffff\20\217\23\217\37\217\40\217" +
		"\42\217\51\217\52\217\53\217\54\217\55\217\56\217\57\217\60\217\61\217\62\217\63" +
		"\217\64\217\65\217\66\217\67\217\70\217\71\217\72\217\73\217\74\217\uffff\ufffe\6" +
		"\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72" +
		"\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61" +
		"\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\76" +
		"\uffff\11\273\14\273\uffff\ufffe\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\7\265\20\265\uffff\ufffe\42\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff" +
		"\52\uffff\7\265\20\265\uffff\ufffe\13\uffff\0\255\3\255\10\255\21\255\23\255\41\255" +
		"\42\255\52\255\53\255\54\255\55\255\56\255\57\255\60\255\61\255\62\255\63\255\64" +
		"\255\65\255\66\255\67\255\70\255\71\255\72\255\73\255\74\255\76\255\uffff\ufffe\62" +
		"\uffff\14\271\17\271\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff" +
		"\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff" +
		"\53\uffff\52\uffff\51\uffff\76\uffff\11\273\24\273\uffff\ufffe\12\21\20\21\33\21" +
		"\6\22\11\22\14\22\23\22\24\22\25\22\31\22\32\22\34\22\36\22\37\22\40\22\41\22\42" +
		"\22\46\22\47\22\51\22\52\22\53\22\54\22\55\22\56\22\57\22\60\22\61\22\62\22\63\22" +
		"\64\22\65\22\66\22\67\22\70\22\71\22\72\22\73\22\74\22\76\22\uffff\ufffe\11\uffff" +
		"\14\126\24\126\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\42\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52" +
		"\uffff\51\uffff\76\uffff\11\273\14\273\24\273\uffff\ufffe\6\uffff\11\273\14\273\24" +
		"\273\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52" +
		"\uffff\51\uffff\76\uffff\11\273\14\273\24\273\uffff\ufffe\36\uffff\6\147\11\147\14" +
		"\147\23\147\24\147\25\147\37\147\40\147\41\147\42\147\46\147\51\147\52\147\53\147" +
		"\54\147\55\147\56\147\57\147\60\147\61\147\62\147\63\147\64\147\65\147\66\147\67" +
		"\147\70\147\71\147\72\147\73\147\74\147\76\147\uffff\ufffe\34\uffff\6\162\11\162" +
		"\14\162\23\162\24\162\25\162\36\162\37\162\40\162\41\162\42\162\46\162\51\162\52" +
		"\162\53\162\54\162\55\162\56\162\57\162\60\162\61\162\62\162\63\162\64\162\65\162" +
		"\66\162\67\162\70\162\71\162\72\162\73\162\74\162\76\162\uffff\ufffe\47\uffff\6\164" +
		"\11\164\14\164\23\164\24\164\25\164\34\164\36\164\37\164\40\164\41\164\42\164\46" +
		"\164\51\164\52\164\53\164\54\164\55\164\56\164\57\164\60\164\61\164\62\164\63\164" +
		"\64\164\65\164\66\164\67\164\70\164\71\164\72\164\73\164\74\164\76\164\uffff\ufffe" +
		"\31\uffff\32\uffff\6\170\11\170\14\170\23\170\24\170\25\170\34\170\36\170\37\170" +
		"\40\170\41\170\42\170\46\170\47\170\51\170\52\170\53\170\54\170\55\170\56\170\57" +
		"\170\60\170\61\170\62\170\63\170\64\170\65\170\66\170\67\170\70\170\71\170\72\170" +
		"\73\170\74\170\76\170\uffff\ufffe\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\7\265\20\265\uffff\ufffe\20\uffff" +
		"\7\267\uffff\ufffe\20\uffff\7\267\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff" +
		"\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\76\uffff\11\273\14\273\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\76\uffff\11\273\14\273\uffff\ufffe\3\uffff\0\257\10\257\21\257\23\257\41\257\42" +
		"\257\52\257\53\257\54\257\55\257\56\257\57\257\60\257\61\257\62\257\63\257\64\257" +
		"\65\257\66\257\67\257\70\257\71\257\72\257\73\257\74\257\76\257\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\46\uffff\51\uffff" +
		"\76\uffff\11\273\24\273\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41" +
		"\uffff\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54" +
		"\uffff\53\uffff\52\uffff\51\uffff\76\uffff\11\273\14\273\24\273\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\76\uffff" +
		"\11\273\14\273\24\273\uffff\ufffe\6\uffff\11\273\14\273\24\273\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\76\uffff" +
		"\11\273\14\273\24\273\uffff\ufffe\6\uffff\11\273\14\273\24\273\uffff\ufffe\36\uffff" +
		"\6\150\11\150\14\150\23\150\24\150\25\150\37\150\40\150\41\150\42\150\46\150\51\150" +
		"\52\150\53\150\54\150\55\150\56\150\57\150\60\150\61\150\62\150\63\150\64\150\65" +
		"\150\66\150\67\150\70\150\71\150\72\150\73\150\74\150\76\150\uffff\ufffe\20\uffff" +
		"\7\267\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff" +
		"\52\uffff\51\uffff\76\uffff\11\273\14\273\uffff\ufffe\23\uffff\0\261\10\261\21\261" +
		"\41\261\42\261\52\261\53\261\54\261\55\261\56\261\57\261\60\261\61\261\62\261\63" +
		"\261\64\261\65\261\66\261\67\261\70\261\71\261\72\261\73\261\74\261\76\261\uffff" +
		"\ufffe\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54" +
		"\uffff\53\uffff\52\uffff\11\22\24\22\36\22\uffff\ufffe\31\uffff\32\uffff\6\171\11" +
		"\171\14\171\23\171\24\171\25\171\34\171\36\171\37\171\40\171\41\171\42\171\46\171" +
		"\47\171\51\171\52\171\53\171\54\171\55\171\56\171\57\171\60\171\61\171\62\171\63" +
		"\171\64\171\65\171\66\171\67\171\70\171\71\171\72\171\73\171\74\171\76\171\uffff" +
		"\ufffe\6\uffff\11\273\14\273\24\273\uffff\ufffe\36\167\6\167\11\167\14\167\23\167" +
		"\24\167\25\167\37\167\40\167\41\167\42\167\46\167\51\167\52\167\53\167\54\167\55" +
		"\167\56\167\57\167\60\167\61\167\62\167\63\167\64\167\65\167\66\167\67\167\70\167" +
		"\71\167\72\167\73\167\74\167\76\167\uffff\ufffe\17\uffff\7\111\uffff\ufffe\76\uffff" +
		"\0\263\10\263\21\263\41\263\42\263\52\263\53\263\54\263\55\263\56\263\57\263\60\263" +
		"\61\263\62\263\63\263\64\263\65\263\66\263\67\263\70\263\71\263\72\263\73\263\74" +
		"\263\uffff\ufffe\11\210\36\uffff\24\210\uffff\ufffe\11\211\36\211\24\211\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(146,
		"\0\2\4\20\32\32\32\53\57\63\70\75\101\114\121\122\134\145\162\170\233\251\264\267" +
		"\273\277\306\311\312\317\324\337\360\u0103\u0119\u0161\u0169\u0171\u0178\u0179\u017a" +
		"\u017c\u018d\u01d7\u0220\u0269\u02b3\u02fc\u0345\u038e\u03d7\u0420\u0469\u04b5\u04ff" +
		"\u0549\u0592\u05db\u0624\u066e\u06b7\u0700\u0700\u070d\u070e\u070f\u0710\u0712\u0714" +
		"\u0716\u0717\u0719\u071a\u071c\u0737\u0764\u0767\u0769\u076d\u076f\u0770\u0772\u0774" +
		"\u0776\u0777\u0778\u0779\u077b\u077c\u077e\u0780\u0781\u0783\u0785\u0787\u078a\u078b" +
		"\u078d\u078e\u0790\u0792\u0793\u0799\u079f\u07a6\u07ad\u07bc\u07c7\u07cf\u07db\u07e7" +
		"\u07f5\u0805\u0815\u0821\u0831\u0842\u0847\u084b\u084d\u085b\u0869\u0878\u087f\u0887" +
		"\u0888\u0889\u088b\u088e\u0891\u089e\u08b4\u08b5\u08b7\u08b8\u08b9\u08ba\u08bb\u08bc" +
		"\u08bf\u08c2\u08c3\u08d2\u08d3\u08d4\u08d5");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(2261,
		"\u013f\u0140\125\174\1\6\22\40\50\62\114\126\220\237\324\347\1\6\50\54\62\114\220" +
		"\237\310\347\107\136\204\241\254\256\257\301\302\323\325\333\334\335\341\363\u010c" +
		"\135\213\216\303\25\44\45\65\252\u0105\u011f\u0134\u0135\43\70\77\146\247\70\122" +
		"\146\231\35\37\60\117\233\236\251\361\362\377\u0117\21\126\162\172\226\u0130\27\71" +
		"\123\126\162\172\226\233\u0114\u0132\70\130\146\247\270\277\300\354\u0106\1\6\50" +
		"\61\62\101\114\126\162\172\220\226\237\30\123\126\162\172\226\20\31\33\100\126\135" +
		"\162\172\204\216\226\241\243\245\254\257\270\301\302\323\325\326\327\330\331\333" +
		"\335\336\345\363\366\u0100\u0101\u0122\u0124\53\72\74\155\162\172\226\322\377\u0105" +
		"\u011b\u011f\u012c\u0132\204\241\254\257\301\302\323\325\333\335\363\317\324\375" +
		"\126\162\172\226\126\162\172\226\126\162\172\226\267\u0108\u012f\267\u0108\u012f" +
		"\247\126\162\172\226\264\326\u0100\u0101\u0122\u0124\126\162\172\226\260\342\u0105" +
		"\u010f\u011f\u0134\u0135\204\241\254\257\270\301\302\323\325\327\330\331\333\335" +
		"\336\345\363\107\126\136\143\162\172\204\226\241\254\257\301\302\323\325\333\335" +
		"\345\363\1\6\25\45\50\62\101\114\134\136\204\220\237\241\257\301\302\323\325\333" +
		"\335\363\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150" +
		"\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\254\257\270\274\301" +
		"\302\306\314\320\321\323\325\326\327\330\331\333\335\336\345\347\355\363\374\u0100" +
		"\u0101\u0102\u011b\u011d\u0122\u0124\u0126\u013a\u013b\1\6\50\62\114\220\237\347" +
		"\1\6\50\62\114\220\237\347\1\6\50\62\114\220\237\323\266\3\23\204\241\254\257\270" +
		"\301\302\323\325\327\330\331\333\335\336\345\363\1\2\6\13\22\25\32\36\45\50\52\61" +
		"\62\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175\201\204\206\207\210" +
		"\216\220\226\236\237\241\242\254\257\270\274\301\302\306\314\320\321\323\325\326" +
		"\327\330\331\333\335\336\345\347\355\363\374\u0100\u0101\u0102\u011b\u011d\u0122" +
		"\u0124\u0126\u013a\u013b\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126" +
		"\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\240\241\242" +
		"\254\257\270\274\301\302\306\314\320\321\323\325\326\327\330\331\333\335\336\345" +
		"\347\355\363\374\u0100\u0101\u0102\u011b\u011d\u0122\u0124\u0126\u013a\u013b\1\2" +
		"\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172" +
		"\175\201\204\206\207\210\220\226\236\237\240\241\242\254\257\270\274\301\302\306" +
		"\314\320\321\323\325\326\327\330\331\333\335\336\345\347\355\363\374\u0100\u0101" +
		"\u0102\u011b\u011d\u0122\u0124\u0126\u013a\u013b\1\2\6\13\22\25\32\36\45\50\52\61" +
		"\62\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175\201\204\206\207\210" +
		"\216\220\226\236\237\241\242\254\257\270\274\301\302\306\314\320\321\323\325\326" +
		"\327\330\331\333\335\336\345\347\355\363\374\u0100\u0101\u0102\u011b\u011d\u0122" +
		"\u0124\u0126\u013a\u013b\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126" +
		"\133\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242" +
		"\254\257\270\274\301\302\306\314\320\321\323\325\326\327\330\331\333\335\336\345" +
		"\347\355\363\374\u0100\u0101\u0102\u011b\u011d\u0122\u0124\u0126\u013a\u013b\1\2" +
		"\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\133\134\136\142\150\151\162" +
		"\172\175\201\204\206\207\210\220\226\236\237\241\242\254\257\270\274\301\302\306" +
		"\314\320\321\323\325\326\327\330\331\333\335\336\345\347\355\363\374\u0100\u0101" +
		"\u0102\u011b\u011d\u0122\u0124\u0126\u013a\u013b\1\2\6\13\22\25\32\36\45\50\52\61" +
		"\62\76\101\107\114\115\126\133\134\136\142\150\151\162\172\175\201\204\206\207\210" +
		"\220\226\236\237\241\242\254\257\270\274\301\302\306\314\320\321\323\325\326\327" +
		"\330\331\333\335\336\345\347\355\363\374\u0100\u0101\u0102\u011b\u011d\u0122\u0124" +
		"\u0126\u013a\u013b\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\133" +
		"\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\254" +
		"\257\270\274\301\302\306\314\320\321\323\325\326\327\330\331\333\335\336\345\347" +
		"\355\363\374\u0100\u0101\u0102\u011b\u011d\u0122\u0124\u0126\u013a\u013b\1\2\6\13" +
		"\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175" +
		"\201\204\206\207\210\220\226\232\236\237\241\242\254\257\270\274\301\302\306\314" +
		"\320\321\323\325\326\327\330\331\333\335\336\345\347\355\363\374\u0100\u0101\u0102" +
		"\u011b\u011d\u0122\u0124\u0126\u013a\u013b\1\2\6\13\22\25\32\36\45\50\52\61\62\76" +
		"\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226" +
		"\236\237\241\242\254\257\270\274\301\302\306\314\320\321\323\325\326\327\330\331" +
		"\333\335\336\345\347\355\363\374\u0100\u0101\u0102\u0118\u011b\u011d\u0122\u0124" +
		"\u0126\u013a\u013b\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134" +
		"\135\136\142\150\151\162\172\175\201\204\205\206\207\210\216\220\226\236\237\241" +
		"\242\254\257\270\274\301\302\306\314\320\321\323\325\326\327\330\331\333\335\336" +
		"\345\347\355\363\374\u0100\u0101\u0102\u0118\u011b\u011d\u0122\u0124\u0126\u013a" +
		"\u013b\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142" +
		"\150\151\162\172\175\201\204\206\207\210\216\220\226\236\237\241\242\254\257\270" +
		"\274\301\302\306\314\320\321\323\325\326\327\330\331\333\335\336\345\347\355\363" +
		"\374\u0100\u0101\u0102\u011b\u011d\u0122\u0124\u0126\u013a\u013b\1\2\6\13\22\25\32" +
		"\36\45\50\52\61\62\76\101\107\114\115\126\134\135\136\142\150\151\162\172\175\201" +
		"\204\206\207\210\216\220\226\236\237\241\242\254\257\270\274\301\302\306\314\320" +
		"\321\323\325\326\327\330\331\333\335\336\345\347\355\363\374\u0100\u0101\u0102\u011b" +
		"\u011d\u0122\u0124\u0126\u013a\u013b\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107" +
		"\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237" +
		"\241\242\254\257\270\274\301\302\306\314\320\321\323\325\326\327\330\331\333\335" +
		"\336\345\347\355\363\374\u0100\u0101\u0102\u0118\u011b\u011d\u0122\u0124\u0126\u013a" +
		"\u013b\1\2\6\13\22\25\32\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150" +
		"\151\162\172\175\201\204\206\207\210\220\226\236\237\241\242\254\257\270\274\301" +
		"\302\306\314\320\321\323\325\326\327\330\331\333\335\336\345\347\355\363\374\u0100" +
		"\u0101\u0102\u0118\u011b\u011d\u0122\u0124\u0126\u013a\u013b\0\1\2\6\13\22\25\32" +
		"\36\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204" +
		"\206\207\210\220\226\236\237\241\242\254\257\270\274\301\302\306\314\320\321\323" +
		"\325\326\327\330\331\333\335\336\345\347\355\363\374\u0100\u0101\u0102\u011b\u011d" +
		"\u0122\u0124\u0126\u013a\u013b\1\2\6\13\20\22\25\32\36\45\50\52\61\62\73\76\101\107" +
		"\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210\220\226\236\237" +
		"\241\242\254\257\270\274\301\302\306\314\320\321\323\325\326\327\330\331\333\335" +
		"\336\345\347\355\363\374\u0100\u0101\u0102\u011b\u011d\u0122\u0124\u0126\u013a\u013b" +
		"\1\2\6\13\22\25\32\36\42\45\50\52\61\62\76\101\107\114\115\126\134\136\142\150\151" +
		"\162\172\175\201\204\206\207\210\220\226\236\237\241\242\254\257\270\274\301\302" +
		"\306\314\320\321\323\325\326\327\330\331\333\335\336\345\347\355\363\374\u0100\u0101" +
		"\u0102\u011b\u011d\u0122\u0124\u0126\u013a\u013b\1\2\6\13\22\25\32\36\45\50\52\61" +
		"\62\63\76\101\107\114\115\126\134\136\142\150\151\162\172\175\201\204\206\207\210" +
		"\220\226\236\237\241\242\254\257\270\274\301\302\306\314\320\321\323\325\326\327" +
		"\330\331\333\335\336\345\347\355\363\374\u0100\u0101\u0102\u011b\u011d\u0122\u0124" +
		"\u0126\u013a\u013b\204\241\254\257\301\302\323\325\333\335\345\363\u011a\202\0\0" +
		"\25\45\44\65\20\73\3\3\23\25\25\45\61\76\101\107\136\142\151\204\207\210\241\242" +
		"\254\257\270\274\301\302\323\325\327\331\333\335\336\345\363\1\6\50\62\114\175\201" +
		"\204\206\220\236\237\241\254\257\270\301\302\314\320\321\323\325\326\327\330\331" +
		"\333\335\336\345\347\355\363\374\u0100\u0101\u0102\u011b\u011d\u0122\u0124\u0126" +
		"\u013a\u013b\100\135\216\126\162\126\162\172\226\125\174\61\61\101\61\101\61\101" +
		"\231\366\u0118\61\101\76\150\306\76\151\107\107\136\107\136\135\216\277\300\354\133" +
		"\107\136\175\175\314\201\374\355\204\241\301\302\325\363\204\241\301\302\325\363" +
		"\204\241\301\302\325\333\363\204\241\301\302\325\333\363\204\241\254\256\257\301" +
		"\302\323\325\333\334\335\341\363\u010c\204\241\254\257\301\302\323\325\333\335\363" +
		"\204\241\254\301\302\325\333\363\204\241\254\257\301\302\323\325\333\335\345\363" +
		"\204\241\254\257\301\302\323\325\333\335\345\363\204\241\254\257\270\301\302\323" +
		"\325\333\335\336\345\363\204\241\254\257\270\301\302\323\325\327\331\333\335\336" +
		"\345\363\204\241\254\257\270\301\302\323\325\327\331\333\335\336\345\363\204\241" +
		"\254\257\301\302\323\325\333\335\345\363\204\241\254\257\270\301\302\323\325\327" +
		"\331\333\335\336\345\363\204\241\254\257\270\301\302\323\325\327\330\331\333\335" +
		"\336\345\363\326\u0100\u0101\u0122\u0124\326\u0100\u0122\u0124\u011d\u013b\107\136" +
		"\204\241\254\257\301\302\323\325\333\335\345\363\107\136\204\241\254\257\301\302" +
		"\323\325\333\335\345\363\107\136\143\204\241\254\257\301\302\323\325\333\335\345" +
		"\363\1\6\50\62\114\220\237\1\6\50\62\114\220\237\347\6\52\70\146\2\13\32\2\13\32" +
		"\204\241\254\257\301\302\323\325\333\335\345\363\u011a\1\6\25\45\50\62\101\114\134" +
		"\136\204\220\237\241\257\301\302\323\325\333\335\363\3\20\73\100\231\310\366\u011a" +
		"\207\210\274\277\300\354\232\204\241\254\256\257\301\302\323\325\333\334\335\341" +
		"\363\u010c\u011d\52\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(2261,
		"\u0141\u0142\153\153\4\4\37\60\4\4\4\155\4\4\375\4\5\5\5\74\5\5\5\5\365\5\133\133" +
		"\240\240\240\240\240\240\240\240\240\240\240\240\240\240\240\204\301\302\363\42\63" +
		"\42\63\333\u0122\u0122\u0122\u0122\62\111\125\111\327\112\150\112\306\55\57\75\147" +
		"\313\315\332\u0115\u0116\u011d\u0127\36\156\156\156\156\u013a\50\115\151\157\157" +
		"\157\157\314\u0126\u013b\113\174\113\330\352\355\355\355\330\6\6\6\76\6\76\6\160" +
		"\160\160\6\160\6\51\152\161\161\161\161\32\52\54\126\162\126\162\162\241\126\162" +
		"\241\325\326\241\241\241\241\241\241\241\u0100\241\241\241\241\241\241\241\241\u0118" +
		"\u0100\u0100\u0100\u0100\73\116\120\224\225\227\305\373\u011e\u0123\u012f\u0133\u0137" +
		"\u013c\242\242\242\242\242\242\242\242\242\242\242\370\376\u011c\163\163\163\163" +
		"\164\164\164\164\165\165\165\165\350\350\u0138\351\351\u0139\331\166\166\166\166" +
		"\346\u0101\u0101\u0101\u0101\u0101\167\167\167\167\345\345\u0124\345\u0124\u0124" +
		"\u0124\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\243\134\170" +
		"\134\134\170\170\134\170\134\134\134\134\134\134\134\134\134\134\134\7\7\7\7\7\7" +
		"\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121" +
		"\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\244\121" +
		"\244\244\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244\244\244\244\244\10" +
		"\10\244\10\u0102\u0102\10\10\10\u0102\u0102\10\10\10\11\11\11\11\11\11\11\11\12\12" +
		"\12\12\12\12\12\12\13\13\13\13\13\13\13\374\347\22\22\245\245\245\245\245\245\245" +
		"\245\245\245\245\245\245\245\245\245\245\10\17\10\17\40\43\17\56\43\10\70\77\10\121" +
		"\77\121\10\146\171\202\205\121\121\221\121\171\171\10\10\244\10\121\121\205\10\171" +
		"\10\10\244\121\244\244\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244\244" +
		"\244\244\244\10\10\244\10\u0102\u0102\10\10\10\u0102\u0102\10\10\10\10\17\10\17\40" +
		"\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10" +
		"\244\10\121\121\10\171\10\10\320\244\121\244\244\244\121\244\244\221\10\10\10\244" +
		"\244\u0102\244\10\244\244\244\244\244\10\10\244\10\u0102\u0102\10\10\10\u0102\u0102" +
		"\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121" +
		"\221\121\171\171\10\10\244\10\121\121\10\171\10\10\321\244\121\244\244\244\121\244" +
		"\244\221\10\10\10\244\244\u0102\244\10\244\244\244\244\244\10\10\244\10\u0102\u0102" +
		"\10\10\10\u0102\u0102\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121" +
		"\10\146\171\202\206\121\121\221\121\171\171\10\10\244\10\121\121\206\10\171\10\10" +
		"\244\121\244\244\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244\244\244\244" +
		"\244\10\10\244\10\u0102\u0102\10\10\10\u0102\u0102\10\10\10\10\17\10\17\40\43\17" +
		"\56\43\10\70\77\10\121\77\121\10\146\171\175\202\121\121\221\121\171\171\10\10\244" +
		"\10\121\121\10\171\10\10\244\121\244\244\244\121\244\244\221\10\10\10\244\244\u0102" +
		"\244\10\244\244\244\244\244\10\10\244\10\u0102\u0102\10\10\10\u0102\u0102\10\10\10" +
		"\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\176\202\121\121\221" +
		"\121\171\171\10\10\244\10\121\121\10\171\10\10\244\121\244\244\244\121\244\244\221" +
		"\10\10\10\244\244\u0102\244\10\244\244\244\244\244\10\10\244\10\u0102\u0102\10\10" +
		"\10\u0102\u0102\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146" +
		"\171\177\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\244\121\244" +
		"\244\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244\244\244\244\244\10\10" +
		"\244\10\u0102\u0102\10\10\10\u0102\u0102\10\10\10\10\17\10\17\40\43\17\56\43\10\70" +
		"\77\10\121\77\121\10\146\171\200\202\121\121\221\121\171\171\10\10\244\10\121\121" +
		"\10\171\10\10\244\121\244\244\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244" +
		"\244\244\244\244\10\10\244\10\u0102\u0102\10\10\10\u0102\u0102\10\10\10\10\17\10" +
		"\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171" +
		"\10\10\244\10\121\121\10\171\311\10\10\244\121\244\244\244\121\244\244\221\10\10" +
		"\10\244\244\u0102\244\10\244\244\244\244\244\10\10\244\10\u0102\u0102\10\10\10\u0102" +
		"\u0102\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202" +
		"\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\244\121\244\244\244\121" +
		"\244\244\221\10\10\10\244\244\u0102\244\10\244\244\244\244\244\10\10\244\10\u0102" +
		"\u0102\10\u0128\10\10\u0102\u0102\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10" +
		"\121\77\121\10\146\171\202\207\121\121\221\121\171\171\10\10\244\274\10\121\121\207" +
		"\10\171\10\10\244\121\244\244\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244" +
		"\244\244\244\244\10\10\244\10\u0102\u0102\10\u0129\10\10\u0102\u0102\10\10\10\10" +
		"\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\210\121\121\221\121" +
		"\171\171\10\10\244\10\121\121\210\10\171\10\10\244\121\244\244\244\121\244\244\221" +
		"\10\10\10\244\244\u0102\244\10\244\244\244\244\244\10\10\244\10\u0102\u0102\10\10" +
		"\10\u0102\u0102\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146" +
		"\171\202\211\121\121\221\121\171\171\10\10\244\10\121\121\211\10\171\10\10\244\121" +
		"\244\244\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244\244\244\244\244\10" +
		"\10\244\10\u0102\u0102\10\10\10\u0102\u0102\10\10\10\10\17\10\17\40\43\17\56\43\10" +
		"\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121" +
		"\10\171\10\10\244\121\244\244\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244" +
		"\244\244\244\244\10\10\244\10\u0102\u0102\10\u012a\10\10\u0102\u0102\10\10\10\10" +
		"\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171" +
		"\171\10\10\244\10\121\121\10\171\10\10\244\121\244\244\244\121\244\244\221\10\10" +
		"\10\244\244\u0102\244\10\244\244\244\244\244\10\10\244\10\u0102\u0102\10\u012b\10" +
		"\10\u0102\u0102\10\10\10\2\10\17\10\17\40\43\17\56\43\10\70\77\10\121\77\121\10\146" +
		"\171\202\121\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\244\121\244\244" +
		"\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244\244\244\244\244\10\10\244" +
		"\10\u0102\u0102\10\10\10\u0102\u0102\10\10\10\10\17\10\17\33\40\43\17\56\43\10\70" +
		"\77\10\33\121\77\121\10\146\171\202\121\121\221\121\171\171\10\10\244\10\121\121" +
		"\10\171\10\10\244\121\244\244\244\121\244\244\221\10\10\10\244\244\u0102\244\10\244" +
		"\244\244\244\244\10\10\244\10\u0102\u0102\10\10\10\u0102\u0102\10\10\10\10\17\10" +
		"\17\40\43\17\56\61\43\10\70\77\10\121\77\121\10\146\171\202\121\121\221\121\171\171" +
		"\10\10\244\10\121\121\10\171\10\10\244\121\244\244\244\121\244\244\221\10\10\10\244" +
		"\244\u0102\244\10\244\244\244\244\244\10\10\244\10\u0102\u0102\10\10\10\u0102\u0102" +
		"\10\10\10\10\17\10\17\40\43\17\56\43\10\70\77\10\107\121\77\121\10\146\171\202\121" +
		"\121\221\121\171\171\10\10\244\10\121\121\10\171\10\10\244\121\244\244\244\121\244" +
		"\244\221\10\10\10\244\244\u0102\244\10\244\244\244\244\244\10\10\244\10\u0102\u0102" +
		"\10\10\10\u0102\u0102\10\10\10\246\246\246\246\246\246\246\246\246\246\246\246\246" +
		"\237\u013f\3\44\65\64\110\34\34\23\24\41\45\46\66\100\122\100\135\135\216\122\247" +
		"\276\276\247\324\247\247\247\276\247\247\247\247\u0106\u0106\247\247\247\247\247" +
		"\14\14\14\14\14\232\235\250\275\14\316\14\250\250\250\250\250\250\232\371\372\250" +
		"\250\u0103\250\250\250\250\250\250\250\u0110\u0113\250\235\u0103\u0103\u0121\316" +
		"\u0130\u0103\u0103\u0136\u013d\u0130\127\212\212\172\226\173\173\230\230\154\231" +
		"\101\102\131\103\103\104\104\307\u0119\u012c\105\105\123\222\364\124\223\136\137" +
		"\214\140\140\213\303\356\356\356\201\141\141\233\234\367\236\u011b\u0114\251\322" +
		"\361\362\377\u0117\252\252\252\252\252\252\253\253\253\253\253\u010a\253\254\254" +
		"\254\254\254\254\254\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255" +
		"\256\256\334\341\256\256\341\256\256\u010c\256\257\323\335\257\257\257\257\257\260" +
		"\260\260\342\260\260\342\260\260\342\u010f\260\261\261\261\261\261\261\261\261\261" +
		"\261\261\261\262\262\262\262\353\262\262\262\262\262\262\353\262\262\263\263\263" +
		"\263\263\263\263\263\263\u0107\u0109\263\263\263\263\263\264\264\264\264\264\264" +
		"\264\264\264\264\264\264\264\264\264\264\265\265\265\265\265\265\265\265\265\265" +
		"\265\265\266\266\266\266\266\266\266\266\266\266\266\266\266\266\266\266\267\267" +
		"\267\267\267\267\267\267\267\267\u0108\267\267\267\267\267\267\u0104\u0104\u0120" +
		"\u0104\u0104\u0105\u011f\u0134\u0135\u0131\u013e\142\142\270\270\336\336\270\270" +
		"\336\270\270\336\336\270\143\143\143\143\143\143\143\143\143\143\143\143\143\143" +
		"\144\144\217\144\144\144\144\144\144\144\144\144\144\144\144\u0140\26\67\106\145" +
		"\304\317\15\15\15\15\15\15\15\u0111\27\71\114\220\20\31\53\21\21\21\271\271\271\271" +
		"\271\271\271\271\271\271\271\271\u012d\16\16\47\47\16\16\132\16\203\215\272\16\16" +
		"\272\343\272\272\343\272\272\343\272\25\35\117\130\310\366\u011a\u012e\277\300\354" +
		"\357\360\u0112\312\273\273\337\340\344\273\273\344\273\273\u010b\u010d\u010e\273" +
		"\u0125\u0132\72\30");

	private static final short[] tmRuleLen = TMLexer.unpack_short(194,
		"\5\4\4\3\7\4\3\3\4\1\2\4\3\1\2\3\1\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2" +
		"\1\1\1\3\10\3\2\3\1\1\1\1\3\1\3\1\3\1\1\2\2\1\1\6\5\5\4\2\4\3\3\1\1\2\1\1\1\4\4\1" +
		"\3\2\1\2\1\3\1\1\3\4\3\3\2\3\2\2\1\1\2\3\3\4\3\1\2\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3" +
		"\1\3\1\3\6\6\2\2\6\4\4\2\1\3\2\1\3\3\3\1\1\2\5\2\2\1\1\5\3\1\1\1\1\1\1\3\3\5\1\1" +
		"\1\1\1\3\1\1\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\3\1\1\0\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(194,
		"\100\100\100\100\101\101\102\103\104\105\105\106\106\107\107\110\110\111\112\113" +
		"\113\114\114\115\115\115\115\115\115\115\115\115\115\115\115\115\116\117\117\117" +
		"\120\120\120\121\122\122\123\124\125\125\125\125\126\127\127\130\131\131\132\132" +
		"\132\133\133\134\134\134\134\135\135\135\135\135\135\136\137\137\137\140\140\141" +
		"\141\142\143\143\144\144\145\146\146\147\147\147\147\147\147\147\147\147\150\151" +
		"\151\152\152\153\153\153\154\154\154\155\155\156\156\156\157\157\160\160\160\161" +
		"\162\162\163\163\163\163\163\163\163\163\163\164\164\164\164\165\165\165\166\167" +
		"\170\170\171\171\171\172\172\172\172\172\173\173\173\173\174\174\175\175\176\176" +
		"\176\177\200\200\201\202\203\203\204\204\205\205\206\206\207\207\210\210\211\211" +
		"\212\212\213\213\214\214\215\215\216\216\217\217\220\220");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'='",
		"'=>'",
		"';'",
		"'.'",
		"'..'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'~'",
		"'&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"imports",
		"import_",
		"options",
		"option",
		"identifier",
		"symref",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"state_selector",
		"state_list",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"directive",
		"inputs",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule_list",
		"rule0",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"setPrimary",
		"setExpression",
		"rhsBracketsPair",
		"annotations",
		"annotation_list",
		"annotation",
		"expression",
		"literal",
		"expression_list",
		"map_entries",
		"map_separator",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"importsopt",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"identifieropt",
		"implementsopt",
		"Lnoeoiopt",
		"rhsSuffixopt",
		"rhsBracketsPair_list_Comma_separated",
		"map_entriesopt",
		"expression_listopt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 64;
		static final int header = 65;
		static final int lexer_section = 66;
		static final int parser_section = 67;
		static final int parsing_algorithm = 68;
		static final int imports = 69;
		static final int import_ = 70;
		static final int options = 71;
		static final int option = 72;
		static final int identifier = 73;
		static final int symref = 74;
		static final int type = 75;
		static final int type_part_list = 76;
		static final int type_part = 77;
		static final int pattern = 78;
		static final int lexer_parts = 79;
		static final int lexer_part = 80;
		static final int named_pattern = 81;
		static final int lexeme = 82;
		static final int lexeme_transition = 83;
		static final int lexeme_attrs = 84;
		static final int lexeme_attribute = 85;
		static final int state_selector = 86;
		static final int state_list = 87;
		static final int stateref = 88;
		static final int lexer_state = 89;
		static final int grammar_parts = 90;
		static final int grammar_part = 91;
		static final int nonterm = 92;
		static final int nonterm_type = 93;
		static final int _implements = 94;
		static final int assoc = 95;
		static final int directive = 96;
		static final int inputs = 97;
		static final int inputref = 98;
		static final int references = 99;
		static final int references_cs = 100;
		static final int rules = 101;
		static final int rule_list = 102;
		static final int rule0 = 103;
		static final int rhsPrefix = 104;
		static final int rhsSuffix = 105;
		static final int ruleAction = 106;
		static final int rhsParts = 107;
		static final int rhsPart = 108;
		static final int rhsAnnotated = 109;
		static final int rhsAssignment = 110;
		static final int rhsOptional = 111;
		static final int rhsCast = 112;
		static final int rhsUnordered = 113;
		static final int rhsClass = 114;
		static final int rhsPrimary = 115;
		static final int setPrimary = 116;
		static final int setExpression = 117;
		static final int rhsBracketsPair = 118;
		static final int annotations = 119;
		static final int annotation_list = 120;
		static final int annotation = 121;
		static final int expression = 122;
		static final int literal = 123;
		static final int expression_list = 124;
		static final int map_entries = 125;
		static final int map_separator = 126;
		static final int name = 127;
		static final int qualified_id = 128;
		static final int command = 129;
		static final int syntax_problem = 130;
		static final int importsopt = 131;
		static final int parsing_algorithmopt = 132;
		static final int typeopt = 133;
		static final int lexeme_transitionopt = 134;
		static final int iconopt = 135;
		static final int lexeme_attrsopt = 136;
		static final int commandopt = 137;
		static final int identifieropt = 138;
		static final int implementsopt = 139;
		static final int Lnoeoiopt = 140;
		static final int rhsSuffixopt = 141;
		static final int rhsBracketsPair_list_Comma_separated = 142;
		static final int map_entriesopt = 143;
		static final int expression_listopt = 144;
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 33) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 33;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 33);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 0:  // input ::= header importsopt options lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 4].value), ((List<TmaImport>)tmStack[tmHead - 3].value), ((List<TmaOption>)tmStack[tmHead - 2].value), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 1:  // input ::= header importsopt options lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)tmStack[tmHead - 1].value), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 2:  // input ::= header importsopt lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 3:  // input ::= header importsopt lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 2].value), ((List<TmaImport>)tmStack[tmHead - 1].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 4:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 5].value), ((TmaName)tmStack[tmHead - 3].value), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 5:  // header ::= Llanguage name parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 2].value), ((TmaName)null), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 6:  // lexer_section ::= '::' Llexer lexer_parts
				 tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value); 
				break;
			case 7:  // parser_section ::= '::' Lparser grammar_parts
				 tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value); 
				break;
			case 8:  // parsing_algorithm ::= Llalr '(' icon ')'
				 tmLeft.value = new TmaParsingAlgorithm(((Integer)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 9:  // imports ::= import_
				 tmLeft.value = new ArrayList<TmaImport>(16); ((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 10:  // imports ::= imports import_
				 ((List<TmaImport>)tmStack[tmHead - 1].value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 11:  // import_ ::= Limport ID scon ';'
				 tmLeft.value = new TmaImport(((String)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 12:  // import_ ::= Limport scon ';'
				 tmLeft.value = new TmaImport(((String)null), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 13:  // options ::= option
				 tmLeft.value = new ArrayList<TmaOption>(16); ((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 14:  // options ::= options option
				 ((List<TmaOption>)tmStack[tmHead - 1].value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 15:  // option ::= ID '=' expression
				 tmLeft.value = new TmaOption(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 16:  // option ::= syntax_problem
				 tmLeft.value = new TmaOption(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 17:  // identifier ::= ID
				 tmLeft.value = new TmaIdentifier(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 18:  // symref ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 19:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 20:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 36:  // pattern ::= regexp
				 tmLeft.value = new TmaPattern(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 37:  // lexer_parts ::= lexer_part
				 tmLeft.value = new ArrayList<ITmaLexerPart>(64); ((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 38:  // lexer_parts ::= lexer_parts lexer_part
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 39:  // lexer_parts ::= lexer_parts syntax_problem
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 43:  // named_pattern ::= ID '=' pattern
				 tmLeft.value = new TmaNamedPattern(((String)tmStack[tmHead - 2].value), ((TmaPattern)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 44:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 7].value), ((String)tmStack[tmHead - 6].value), ((TmaPattern)tmStack[tmHead - 4].value), ((TmaStateref)tmStack[tmHead - 3].value), ((Integer)tmStack[tmHead - 2].value), ((TmaLexemeAttrs)tmStack[tmHead - 1].value), ((TmaCommand)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 45:  // lexeme ::= identifier typeopt ':'
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), ((TmaPattern)null), ((TmaStateref)null), ((Integer)null), ((TmaLexemeAttrs)null), ((TmaCommand)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 46:  // lexeme_transition ::= '=>' stateref
				 tmLeft.value = ((TmaStateref)tmStack[tmHead].value); 
				break;
			case 47:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				 tmLeft.value = ((TmaLexemeAttrs)tmStack[tmHead - 1].value); 
				break;
			case 48:  // lexeme_attribute ::= Lsoft
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSOFT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 49:  // lexeme_attribute ::= Lclass
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LCLASS, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 50:  // lexeme_attribute ::= Lspace
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSPACE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 51:  // lexeme_attribute ::= Llayout
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LLAYOUT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 52:  // state_selector ::= '[' state_list ']'
				 tmLeft.value = new TmaStateSelector(((List<TmaLexerState>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 53:  // state_list ::= lexer_state
				 tmLeft.value = new ArrayList<Integer>(4); ((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 54:  // state_list ::= state_list ',' lexer_state
				 ((List<TmaLexerState>)tmStack[tmHead - 2].value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 55:  // stateref ::= ID
				 tmLeft.value = new TmaStateref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 56:  // lexer_state ::= identifier '=>' stateref
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaStateref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 57:  // lexer_state ::= identifier
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead].value), ((TmaStateref)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 58:  // grammar_parts ::= grammar_part
				 tmLeft.value = new ArrayList<ITmaGrammarPart>(64); ((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 59:  // grammar_parts ::= grammar_parts grammar_part
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 60:  // grammar_parts ::= grammar_parts syntax_problem
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 63:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 64:  // nonterm ::= annotations identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 4].value), ((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 65:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 66:  // nonterm ::= identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 67:  // nonterm_type ::= Lreturns symref
				 tmLeft.value = new TmaNontermTypeAST(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 68:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(true, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 69:  // nonterm_type ::= Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 70:  // nonterm_type ::= Linterface identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LINTERFACE, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 71:  // nonterm_type ::= Lvoid
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LVOID, null, null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 72:  // nonterm_type ::= type
				 tmLeft.value = new TmaNontermTypeRaw(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 73:  // implements ::= ':' references_cs
				 tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value); 
				break;
			case 74:  // assoc ::= Lleft
				 tmLeft.value = TmaAssoc.LLEFT; 
				break;
			case 75:  // assoc ::= Lright
				 tmLeft.value = TmaAssoc.LRIGHT; 
				break;
			case 76:  // assoc ::= Lnonassoc
				 tmLeft.value = TmaAssoc.LNONASSOC; 
				break;
			case 77:  // directive ::= '%' assoc references ';'
				 tmLeft.value = new TmaDirectivePrio(((TmaAssoc)tmStack[tmHead - 2].value), ((List<TmaSymref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 78:  // directive ::= '%' Linput inputs ';'
				 tmLeft.value = new TmaDirectiveInput(((List<TmaInputref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 79:  // inputs ::= inputref
				 tmLeft.value = new ArrayList<TmaInputref>(); ((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 80:  // inputs ::= inputs ',' inputref
				 ((List<TmaInputref>)tmStack[tmHead - 2].value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 81:  // inputref ::= symref Lnoeoiopt
				 tmLeft.value = new TmaInputref(((TmaSymref)tmStack[tmHead - 1].value), ((String)tmStack[tmHead].value) != null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 82:  // references ::= symref
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 83:  // references ::= references symref
				 ((List<TmaSymref>)tmStack[tmHead - 1].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 84:  // references_cs ::= symref
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 85:  // references_cs ::= references_cs ',' symref
				 ((List<TmaSymref>)tmStack[tmHead - 2].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 87:  // rule_list ::= rule0
				 tmLeft.value = new ArrayList<TmaRule0>(); ((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 88:  // rule_list ::= rule_list '|' rule0
				 ((List<TmaRule0>)tmStack[tmHead - 2].value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 89:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 3].value), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 90:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 91:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 92:  // rule0 ::= rhsPrefix rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 1].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 93:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 94:  // rule0 ::= rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 95:  // rule0 ::= ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 96:  // rule0 ::= rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 97:  // rule0 ::= syntax_problem
				 tmLeft.value = new TmaRule0(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 98:  // rhsPrefix ::= annotations ':'
				 tmLeft.value = new TmaRhsPrefix(((TmaAnnotations)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 99:  // rhsSuffix ::= '%' Lprio symref
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LPRIO, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 100:  // rhsSuffix ::= '%' Lshift symref
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LSHIFT, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 101:  // ruleAction ::= '{~' identifier scon '}'
				 tmLeft.value = new TmaRuleAction(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 102:  // ruleAction ::= '{~' identifier '}'
				 tmLeft.value = new TmaRuleAction(((TmaIdentifier)tmStack[tmHead - 1].value), ((String)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 103:  // rhsParts ::= rhsPart
				 tmLeft.value = new ArrayList<ITmaRhsPart>(); ((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 104:  // rhsParts ::= rhsParts rhsPart
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 105:  // rhsParts ::= rhsParts syntax_problem
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 110:  // rhsAnnotated ::= annotations rhsAssignment
				 tmLeft.value = new TmaRhsAnnotated(((TmaAnnotations)tmStack[tmHead - 1].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 112:  // rhsAssignment ::= identifier '=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), false, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 113:  // rhsAssignment ::= identifier '+=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), true, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 115:  // rhsOptional ::= rhsCast '?'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_OPTIONAL, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 117:  // rhsCast ::= rhsClass Las symref
				 tmLeft.value = new TmaRhsCast(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 118:  // rhsCast ::= rhsClass Las literal
				 tmLeft.value = new TmaRhsAsLiteral(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 119:  // rhsUnordered ::= rhsPart '&' rhsPart
				 tmLeft.value = new TmaRhsUnordered(((ITmaRhsPart)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 121:  // rhsClass ::= identifier ':' rhsPrimary
				 tmLeft.value = new TmaRhsClass(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 122:  // rhsPrimary ::= symref
				 tmLeft.value = new TmaRhsSymbol(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 123:  // rhsPrimary ::= '(' rules ')'
				 tmLeft.value = new TmaRhsNested(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 124:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), true, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 125:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), false, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 126:  // rhsPrimary ::= rhsPrimary '*'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ZEROORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 127:  // rhsPrimary ::= rhsPrimary '+'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.KIND_ONEORMORE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 128:  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 3].value), ((List<TmaRhsBracketsPair>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 129:  // rhsPrimary ::= '$' '(' rules ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 1].value), ((List<TmaRhsBracketsPair>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 130:  // rhsPrimary ::= Lset '(' setExpression ')'
				 tmLeft.value = new TmaRhsSet(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 131:  // setPrimary ::= ID symref
				 tmLeft.value = new TmaSetSymbol(((String)tmStack[tmHead - 1].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 132:  // setPrimary ::= symref
				 tmLeft.value = new TmaSetSymbol(((String)null), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 133:  // setPrimary ::= '(' setExpression ')'
				 tmLeft.value = new TmaSetCompound(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 134:  // setPrimary ::= '~' setPrimary
				 tmLeft.value = new TmaSetComplement(((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 136:  // setExpression ::= setExpression '|' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.OR, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 137:  // setExpression ::= setExpression '&' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.AMPERSAND, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 138:  // rhsBracketsPair ::= symref '..' symref
				 tmLeft.value = new TmaRhsBracketsPair(((TmaSymref)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 139:  // annotations ::= annotation_list
				 tmLeft.value = new TmaAnnotations(((List<TmaAnnotation>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 140:  // annotation_list ::= annotation
				 tmLeft.value = new ArrayList<TmaAnnotation>(); ((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 141:  // annotation_list ::= annotation_list annotation
				 ((List<TmaAnnotation>)tmStack[tmHead - 1].value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 142:  // annotation ::= '@' ID '{' expression '}'
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead - 3].value), ((ITmaExpression)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 143:  // annotation ::= '@' ID
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead].value), ((ITmaExpression)null), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 144:  // annotation ::= '@' syntax_problem
				 tmLeft.value = new TmaAnnotation(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 147:  // expression ::= Lnew name '(' map_entriesopt ')'
				 tmLeft.value = new TmaInstance(((TmaName)tmStack[tmHead - 3].value), ((List<TmaMapEntriesItem>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 148:  // expression ::= '[' expression_listopt ']'
				 tmLeft.value = new TmaArray(((List<ITmaExpression>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 150:  // literal ::= scon
				 tmLeft.value = new TmaLiteral(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 151:  // literal ::= icon
				 tmLeft.value = new TmaLiteral(((Integer)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 152:  // literal ::= Ltrue
				 tmLeft.value = new TmaLiteral(Boolean.TRUE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 153:  // literal ::= Lfalse
				 tmLeft.value = new TmaLiteral(Boolean.FALSE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 154:  // expression_list ::= expression
				 tmLeft.value = new ArrayList(); ((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 155:  // expression_list ::= expression_list ',' expression
				 ((List<ITmaExpression>)tmStack[tmHead - 2].value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 156:  // map_entries ::= ID map_separator expression
				 tmLeft.value = new ArrayList<TmaMapEntriesItem>(); ((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset)); 
				break;
			case 157:  // map_entries ::= map_entries ',' ID map_separator expression
				 ((List<TmaMapEntriesItem>)tmStack[tmHead - 4].value).add(new TmaMapEntriesItem(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmLeft.endoffset)); 
				break;
			case 161:  // name ::= qualified_id
				 tmLeft.value = new TmaName(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 163:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 164:  // command ::= code
				 tmLeft.value = new TmaCommand(source, tmLeft.line, tmStack[tmHead].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 165:  // syntax_problem ::= error
				 tmLeft.value = new TmaSyntaxProblem(source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 188:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair_list_Comma_separated ',' rhsBracketsPair
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 189:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair
				tmLeft.value = new ArrayList();
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 321);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 322);
	}
}
