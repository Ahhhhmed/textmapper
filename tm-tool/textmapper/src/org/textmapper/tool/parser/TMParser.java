/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.Span;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(403,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\271\0\272\0\uffb9\uffff\303\0\uff6b" +
		"\uffff\273\0\274\0\uffff\uffff\264\0\263\0\267\0\300\0\ufeff\uffff\ufef7\uffff\uffff" +
		"\uffff\ufeeb\uffff\11\0\uffff\uffff\347\0\ufea7\uffff\uffff\uffff\ufea1\uffff\22" +
		"\0\uffff\uffff\uffff\uffff\uffff\uffff\306\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\12\0\uffff\uffff\uffff\uffff\ufe59\uffff\uffff\uffff\15\0\20\0\uffff" +
		"\uffff\266\0\ufe53\uffff\242\0\253\0\uffff\uffff\337\0\335\0\252\0\uffff\uffff\ufe4b" +
		"\uffff\uffff\uffff\ufe45\uffff\uffff\uffff\uffff\uffff\5\0\301\0\14\0\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\2\0\ufe05\uffff\16\0\346\0\uffff\uffff\uffff" +
		"\uffff\243\0\uffff\uffff\244\0\uffff\uffff\343\0\ufdff\uffff\uffff\uffff\ufdf9\uffff" +
		"\uffff\uffff\13\0\uffff\uffff\uffff\uffff\ufdf3\uffff\ufdeb\uffff\ufde5\uffff\47" +
		"\0\53\0\54\0\55\0\52\0\17\0\uffff\uffff\0\0\24\0\245\0\334\0\21\0\336\0\uffff\uffff" +
		"\uffff\uffff\265\0\uffff\uffff\10\0\uffff\uffff\ufd9d\uffff\uffff\uffff\71\0\uffff" +
		"\uffff\uffff\uffff\310\0\uffff\uffff\50\0\51\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\ufd95\uffff\76\0\101\0\102\0\103\0\uffff\uffff\ufd4f\uffff\234\0\270\0\342\0\4\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\70\0\46\0\56\0\uffff\uffff\37\0\40\0\33\0\34" +
		"\0\uffff\uffff\31\0\32\0\36\0\41\0\43\0\42\0\35\0\uffff\uffff\30\0\ufd07\uffff\uffff" +
		"\uffff\123\0\124\0\125\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufcbd\uffff" +
		"\240\0\ufc73\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufc1f\uffff\ufbdd\uffff\120" +
		"\0\121\0\uffff\uffff\uffff\uffff\77\0\100\0\uffff\uffff\235\0\uffff\uffff\73\0\74" +
		"\0\72\0\25\0\45\0\uffff\uffff\26\0\27\0\ufb9b\uffff\ufb4b\uffff\uffff\uffff\135\0" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\140\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\ufb43\uffff\uffff\uffff\uffff\uffff\ufaef\uffff\uffff\uffff\302" +
		"\0\uffff\uffff\213\0\uffff\uffff\ufa87\uffff\145\0\uffff\uffff\ufa7f\uffff\330\0" +
		"\ufa2d\uffff\ufa23\uffff\uf9cf\uffff\173\0\176\0\200\0\uf977\uffff\174\0\uf91d\uffff" +
		"\uf8c1\uffff\222\0\uffff\uffff\175\0\157\0\156\0\333\0\uffff\uffff\uf861\uffff\114" +
		"\0\322\0\uf81f\uffff\uf819\uffff\uf813\uffff\uf7bf\uffff\uffff\uffff\uf76b\uffff" +
		"\uffff\uffff\uffff\uffff\67\0\44\0\uffff\uffff\312\0\uf717\uffff\326\0\137\0\131" +
		"\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\247\0\250\0\246\0\251\0\uffff" +
		"\uffff\130\0\141\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uf6c9\uffff\260" +
		"\0\uffff\uffff\uffff\uffff\uf6bd\uffff\uffff\uffff\uf669\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\113\0\uf615\uffff\163\0\uffff\uffff\uf5bf\uffff\uf5b5" +
		"\uffff\uffff\uffff\152\0\155\0\uf561\uffff\uf557\uffff\172\0\154\0\uffff\uffff\204" +
		"\0\uffff\uffff\217\0\220\0\162\0\177\0\uffff\uffff\241\0\uf4ff\uffff\uffff\uffff" +
		"\324\0\116\0\117\0\uffff\uffff\uffff\uffff\uf4f9\uffff\uffff\uffff\uf4a5\uffff\uf451" +
		"\uffff\uffff\uffff\61\0\314\0\uf3fd\uffff\136\0\uffff\uffff\132\0\133\0\uffff\uffff" +
		"\127\0\236\0\164\0\165\0\254\0\uffff\uffff\uffff\uffff\uffff\uffff\160\0\uffff\uffff" +
		"\214\0\uffff\uffff\uffff\uffff\167\0\uffff\uffff\uffff\uffff\uffff\uffff\uf3b1\uffff" +
		"\225\0\230\0\uffff\uffff\uffff\uffff\201\0\uf36b\uffff\202\0\146\0\161\0\151\0\uf30b" +
		"\uffff\150\0\153\0\uf301\uffff\206\0\207\0\332\0\115\0\142\0\uf2a9\uffff\112\0\111" +
		"\0\uffff\uffff\107\0\uffff\uffff\uffff\uffff\uf2a3\uffff\uffff\uffff\316\0\uf24f" +
		"\uffff\134\0\uffff\uffff\256\0\257\0\uf205\uffff\uf1fd\uffff\uffff\uffff\166\0\221" +
		"\0\uffff\uffff\227\0\224\0\uffff\uffff\223\0\uffff\uffff\147\0\uffff\uffff\110\0" +
		"\106\0\105\0\uffff\uffff\63\0\64\0\65\0\66\0\uffff\uffff\320\0\57\0\126\0\uffff\uffff" +
		"\226\0\uf1f5\uffff\uf1ed\uffff\143\0\104\0\62\0\216\0\215\0\uffff\uffff\uffff\uffff" +
		"\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(3608,
		"\54\uffff\10\305\45\305\46\305\56\305\57\305\60\305\61\305\62\305\63\305\64\305\65" +
		"\305\66\305\67\305\70\305\71\305\72\305\73\305\74\305\75\305\76\305\77\305\100\305" +
		"\101\305\102\305\103\305\104\305\105\305\106\305\107\305\110\305\111\305\112\305" +
		"\uffff\ufffe\2\uffff\3\uffff\23\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\47\uffff\50\uffff\51\uffff\24\351\uffff\ufffe\31\uffff\0\23\6\23\10\23\11\23\17" +
		"\23\21\23\24\23\25\23\26\23\27\23\30\23\33\23\34\23\36\23\41\23\43\23\44\23\45\23" +
		"\46\23\52\23\53\23\55\23\56\23\57\23\60\23\61\23\62\23\63\23\64\23\65\23\66\23\67" +
		"\23\70\23\71\23\72\23\73\23\74\23\75\23\76\23\77\23\100\23\101\23\102\23\103\23\104" +
		"\23\105\23\106\23\107\23\110\23\111\23\112\23\114\23\uffff\ufffe\25\uffff\110\uffff" +
		"\17\307\uffff\ufffe\20\uffff\17\277\25\277\26\277\110\277\uffff\ufffe\54\uffff\10" +
		"\304\45\304\46\304\56\304\57\304\60\304\61\304\62\304\63\304\64\304\65\304\66\304" +
		"\67\304\70\304\71\304\72\304\73\304\74\304\75\304\76\304\77\304\100\304\101\304\102" +
		"\304\103\304\104\304\105\304\106\304\107\304\110\304\111\304\112\304\uffff\ufffe" +
		"\21\uffff\24\350\uffff\ufffe\2\uffff\3\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\47\uffff\50\uffff\32\341\uffff\ufffe\10\uffff\0\3\uffff\ufffe\22\21\21\24\32\24" +
		"\uffff\ufffe\21\uffff\32\340\uffff\ufffe\46\uffff\112\uffff\111\uffff\110\uffff\107" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\26\345\uffff" +
		"\ufffe\10\uffff\0\1\uffff\ufffe\21\uffff\26\344\uffff\ufffe\110\uffff\17\307\uffff" +
		"\ufffe\13\uffff\22\21\25\21\uffff\ufffe\25\uffff\22\311\uffff\ufffe\6\uffff\23\uffff" +
		"\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104" +
		"\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\0\6\10\6\uffff\ufffe\16\uffff\21\75" +
		"\24\75\uffff\ufffe\6\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\0\7\uffff\ufffe\44\uffff\22\233\25\233\43\233\46\233\55\233\56\233\57\233\60\233" +
		"\61\233\62\233\63\233\64\233\65\233\66\233\67\233\70\233\71\233\72\233\73\233\74" +
		"\233\75\233\76\233\77\233\100\233\101\233\102\233\103\233\104\233\105\233\106\233" +
		"\107\233\110\233\111\233\112\233\uffff\ufffe\1\uffff\0\60\6\60\10\60\23\60\45\60" +
		"\46\60\56\60\57\60\60\60\61\60\62\60\63\60\64\60\65\60\66\60\67\60\70\60\71\60\72" +
		"\60\73\60\74\60\75\60\76\60\77\60\100\60\101\60\102\60\103\60\104\60\105\60\106\60" +
		"\107\60\110\60\111\60\112\60\uffff\ufffe\115\uffff\22\237\25\237\43\237\44\237\46" +
		"\237\55\237\56\237\57\237\60\237\61\237\62\237\63\237\64\237\65\237\66\237\67\237" +
		"\70\237\71\237\72\237\73\237\74\237\75\237\76\237\77\237\100\237\101\237\102\237" +
		"\103\237\104\237\105\237\106\237\107\237\110\237\111\237\112\237\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\114\uffff\11\331\17\331\uffff\ufffe\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\7\323\22\323\uffff\ufffe\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\323\22\323" +
		"\uffff\ufffe\16\uffff\0\313\3\313\6\313\10\313\23\313\25\313\45\313\46\313\56\313" +
		"\57\313\60\313\61\313\62\313\63\313\64\313\65\313\66\313\67\313\70\313\71\313\72" +
		"\313\73\313\74\313\75\313\76\313\77\313\100\313\101\313\102\313\103\313\104\313\105" +
		"\313\106\313\107\313\110\313\111\313\112\313\114\313\uffff\ufffe\100\uffff\17\327" +
		"\21\327\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff" +
		"\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\331\26\331\uffff\ufffe" +
		"\31\uffff\13\21\22\21\35\21\6\23\11\23\17\23\25\23\26\23\27\23\33\23\34\23\36\23" +
		"\41\23\43\23\44\23\45\23\46\23\52\23\53\23\55\23\56\23\57\23\60\23\61\23\62\23\63" +
		"\23\64\23\65\23\66\23\67\23\70\23\71\23\72\23\73\23\74\23\75\23\76\23\77\23\100\23" +
		"\101\23\102\23\103\23\104\23\105\23\106\23\107\23\110\23\111\23\112\23\114\23\uffff" +
		"\ufffe\11\uffff\17\144\26\144\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff" +
		"\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\331\17\331\26\331\uffff" +
		"\ufffe\6\uffff\11\331\17\331\26\331\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff" +
		"\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\331" +
		"\17\331\26\331\uffff\ufffe\41\uffff\6\170\11\170\17\170\25\170\26\170\27\170\43\170" +
		"\44\170\45\170\46\170\52\170\55\170\56\170\57\170\60\170\61\170\62\170\63\170\64" +
		"\170\65\170\66\170\67\170\70\170\71\170\72\170\73\170\74\170\75\170\76\170\77\170" +
		"\100\170\101\170\102\170\103\170\104\170\105\170\106\170\107\170\110\170\111\170" +
		"\112\170\114\170\uffff\ufffe\36\uffff\6\203\11\203\17\203\25\203\26\203\27\203\41" +
		"\203\43\203\44\203\45\203\46\203\52\203\55\203\56\203\57\203\60\203\61\203\62\203" +
		"\63\203\64\203\65\203\66\203\67\203\70\203\71\203\72\203\73\203\74\203\75\203\76" +
		"\203\77\203\100\203\101\203\102\203\103\203\104\203\105\203\106\203\107\203\110\203" +
		"\111\203\112\203\114\203\uffff\ufffe\53\uffff\6\205\11\205\17\205\25\205\26\205\27" +
		"\205\36\205\41\205\43\205\44\205\45\205\46\205\52\205\55\205\56\205\57\205\60\205" +
		"\61\205\62\205\63\205\64\205\65\205\66\205\67\205\70\205\71\205\72\205\73\205\74" +
		"\205\75\205\76\205\77\205\100\205\101\205\102\205\103\205\104\205\105\205\106\205" +
		"\107\205\110\205\111\205\112\205\114\205\uffff\ufffe\33\uffff\34\uffff\6\211\11\211" +
		"\17\211\25\211\26\211\27\211\36\211\41\211\43\211\44\211\45\211\46\211\52\211\53" +
		"\211\55\211\56\211\57\211\60\211\61\211\62\211\63\211\64\211\65\211\66\211\67\211" +
		"\70\211\71\211\72\211\73\211\74\211\75\211\76\211\77\211\100\211\101\211\102\211" +
		"\103\211\104\211\105\211\106\211\107\211\110\211\111\211\112\211\114\211\uffff\ufffe" +
		"\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\7\323\22\323\uffff\ufffe\22\uffff\7\325\uffff" +
		"\ufffe\22\uffff\7\325\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44" +
		"\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\331\17" +
		"\331\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46" +
		"\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\331\17\331\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff" +
		"\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\114\uffff\11\331\17\331\uffff\ufffe\3\uffff\0\315\6\315" +
		"\10\315\23\315\25\315\45\315\46\315\56\315\57\315\60\315\61\315\62\315\63\315\64" +
		"\315\65\315\66\315\67\315\70\315\71\315\72\315\73\315\74\315\75\315\76\315\77\315" +
		"\100\315\101\315\102\315\103\315\104\315\105\315\106\315\107\315\110\315\111\315" +
		"\112\315\114\315\uffff\ufffe\14\uffff\15\uffff\12\255\24\255\42\255\uffff\ufffe\6" +
		"\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\52\uffff\55\uffff\114\uffff\11\331\26\331\uffff\ufffe\6\uffff\23\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\114\uffff\11\331\26\331\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106" +
		"\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff" +
		"\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff" +
		"\11\331\17\331\26\331\uffff\ufffe\6\uffff\11\331\17\331\26\331\uffff\ufffe\6\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\114\uffff\11\331\17\331\26\331\uffff\ufffe\6\uffff\11\331\17\331\26\331" +
		"\uffff\ufffe\41\uffff\6\171\11\171\17\171\25\171\26\171\27\171\43\171\44\171\45\171" +
		"\46\171\52\171\55\171\56\171\57\171\60\171\61\171\62\171\63\171\64\171\65\171\66" +
		"\171\67\171\70\171\71\171\72\171\73\171\74\171\75\171\76\171\77\171\100\171\101\171" +
		"\102\171\103\171\104\171\105\171\106\171\107\171\110\171\111\171\112\171\114\171" +
		"\uffff\ufffe\22\uffff\7\325\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff" +
		"\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\331" +
		"\17\331\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff" +
		"\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\331\17\331\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff" +
		"\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\114\uffff\11\331\17\331\uffff\ufffe\25\uffff\0\317\6" +
		"\317\10\317\23\317\45\317\46\317\56\317\57\317\60\317\61\317\62\317\63\317\64\317" +
		"\65\317\66\317\67\317\70\317\71\317\72\317\73\317\74\317\75\317\76\317\77\317\100" +
		"\317\101\317\102\317\103\317\104\317\105\317\106\317\107\317\110\317\111\317\112" +
		"\317\114\317\uffff\ufffe\31\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\11\23\26\23" +
		"\41\23\uffff\ufffe\33\uffff\34\uffff\6\212\11\212\17\212\25\212\26\212\27\212\36" +
		"\212\41\212\43\212\44\212\45\212\46\212\52\212\53\212\55\212\56\212\57\212\60\212" +
		"\61\212\62\212\63\212\64\212\65\212\66\212\67\212\70\212\71\212\72\212\73\212\74" +
		"\212\75\212\76\212\77\212\100\212\101\212\102\212\103\212\104\212\105\212\106\212" +
		"\107\212\110\212\111\212\112\212\114\212\uffff\ufffe\6\uffff\11\331\17\331\26\331" +
		"\uffff\ufffe\41\210\6\210\11\210\17\210\25\210\26\210\27\210\43\210\44\210\45\210" +
		"\46\210\52\210\55\210\56\210\57\210\60\210\61\210\62\210\63\210\64\210\65\210\66" +
		"\210\67\210\70\210\71\210\72\210\73\210\74\210\75\210\76\210\77\210\100\210\101\210" +
		"\102\210\103\210\104\210\105\210\106\210\107\210\110\210\111\210\112\210\114\210" +
		"\uffff\ufffe\21\uffff\7\122\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff" +
		"\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\331" +
		"\17\331\uffff\ufffe\114\uffff\0\321\6\321\10\321\23\321\45\321\46\321\56\321\57\321" +
		"\60\321\61\321\62\321\63\321\64\321\65\321\66\321\67\321\70\321\71\321\72\321\73" +
		"\321\74\321\75\321\76\321\77\321\100\321\101\321\102\321\103\321\104\321\105\321" +
		"\106\321\107\321\110\321\111\321\112\321\uffff\ufffe\12\262\42\uffff\24\262\uffff" +
		"\ufffe\12\261\42\261\24\261\uffff\ufffe\11\231\41\uffff\26\231\uffff\ufffe\11\232" +
		"\41\232\26\232\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(176,
		"\0\2\4\25\44\44\44\73\103\107\114\117\124\125\126\130\154\161\175\210\237\246\317" +
		"\334\353\356\367\376\u0105\u0108\u0109\u010e\u0111\u0116\u0121\u0124\u0139\u0151" +
		"\u016a\u01c1\u01ce\u01db\u01e1\u01e2\u01e3\u01e5\u01fd\u0255\u02b0\u0308\u0360\u03bb" +
		"\u0413\u046b\u04c3\u051b\u0573\u05cb\u0623\u067b\u06d3\u072b\u0783\u07db\u0833\u088b" +
		"\u08e3\u0940\u099b\u09f6\u0a4e\u0aa6\u0afe\u0b57\u0baf\u0c07\u0c07\u0c18\u0c19\u0c1a" +
		"\u0c1b\u0c1d\u0c1f\u0c21\u0c22\u0c24\u0c25\u0c27\u0c4f\u0c71\u0c82\u0c87\u0c89\u0c8d" +
		"\u0c8f\u0c90\u0c92\u0c94\u0c96\u0c97\u0c98\u0c99\u0c9b\u0c9d\u0c9e\u0ca0\u0ca2\u0ca3" +
		"\u0ca5\u0ca7\u0cab\u0cae\u0caf\u0cb1\u0cb3\u0cb4\u0cb6\u0cb8\u0cb9\u0cc3\u0ccd\u0cd8" +
		"\u0ce3\u0cee\u0d01\u0d10\u0d1c\u0d2c\u0d3c\u0d4e\u0d62\u0d76\u0d86\u0d9a\u0daf\u0dc7" +
		"\u0dcc\u0dd0\u0de3\u0df6\u0e0a\u0e0c\u0e14\u0e17\u0e19\u0e1a\u0e1e\u0e21\u0e24\u0e2a" +
		"\u0e2c\u0e39\u0e39\u0e3c\u0e3f\u0e50\u0e69\u0e6a\u0e6c\u0e6d\u0e6e\u0e6f\u0e70\u0e71" +
		"\u0e74\u0e77\u0e78\u0e8b\u0e8c\u0e8d\u0e8e\u0e8f\u0e90\u0e91\u0e92\u0e93");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(3731,
		"\u018f\u0190\153\224\1\6\22\31\42\52\76\104\105\142\154\300\u0109\u011e\u0138\u013e" +
		"\u013f\1\6\31\52\70\76\104\105\142\300\361\u011e\u0138\u013e\u013f\75\124\133\164" +
		"\237\303\317\321\322\347\350\352\u0108\u010a\u0110\u0113\u0114\u0118\u012c\u012e" +
		"\u012f\u0155\u0165\163\247\250\253\351\353\354\u0130\25\46\47\101\314\u014d\u0172" +
		"\u0188\u0189\u0106\u016d\u016e\45\122\272\311\375\u0104\u0104\150\266\37\41\74\145" +
		"\255\270\277\313\367\370\375\u012a\u012b\u012d\u0135\u0161\u0163\u0164\u016a\u017d" +
		"\21\154\212\222\263\27\63\64\113\151\154\212\222\263\270\341\u015e\57\111\156\311" +
		"\316\334\345\346\u0112\u0125\u014e\1\6\52\75\76\124\142\154\212\222\237\263\300\303" +
		"\347\350\352\u010a\u0110\u012c\u012e\u012f\u0165\30\151\154\212\222\263\u0106\20" +
		"\33\35\123\154\163\212\222\237\250\253\263\303\305\307\317\322\334\347\350\352\354" +
		"\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u012c\u012e\u012f\u0133" +
		"\u0148\u0149\u0165\u0175\u0177\67\114\116\205\212\222\263\u0107\u0147\u014d\u016f" +
		"\u0172\u0182\237\303\317\322\347\350\352\u0108\u010a\u0110\u0114\u012c\u012e\u012f" +
		"\u0165\u0100\u0109\u0145\10\154\163\212\222\253\263\306\u014a\63\65\154\212\222\263" +
		"\341\154\212\222\263\332\u0150\u0186\332\u0150\u0186\311\154\212\222\263\327\302" +
		"\u0140\u0142\u010b\u0148\u0149\u0175\u0177\154\212\222\263\323\u0119\u014d\u0158" +
		"\u0172\u0188\u0189\u0106\u016d\u016e\237\303\317\322\334\347\350\352\u0108\u010a" +
		"\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u012c\u012e\u012f\u0165\133\154\164\172" +
		"\212\222\237\263\303\316\317\322\347\350\352\u0108\u010a\u0110\u0114\u011c\u012c" +
		"\u012e\u012f\u0165\1\6\25\47\52\76\124\142\162\164\237\300\303\322\347\350\352\u0108" +
		"\u010a\u0110\u0114\u012c\u012e\u012f\u0165\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\104\105\107\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231" +
		"\233\234\237\240\242\243\244\263\277\300\302\303\304\317\322\334\342\347\350\352" +
		"\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115" +
		"\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0165\u016f\u0175\u0177\u0179\1\6\31\52\76\104\105\142\300\u011e\u0138\u013e\u013f" +
		"\1\6\31\52\76\104\105\142\300\u011e\u0138\u013e\u013f\1\6\52\76\142\300\u0108\331" +
		"\3\23\237\273\274\303\317\322\334\347\350\352\366\u0108\u010a\u010c\u010d\u010e\u0110" +
		"\u0114\u0115\u011c\u012c\u012e\u012f\u0165\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\104\105\107\120\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225" +
		"\231\233\234\237\240\242\243\244\263\277\300\302\303\304\317\322\334\342\347\350" +
		"\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115" +
		"\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107" +
		"\121\124\133\142\143\147\154\162\163\164\171\177\200\201\212\222\225\231\233\234" +
		"\237\240\242\243\244\250\253\263\277\300\302\303\304\317\322\334\342\347\350\352" +
		"\354\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115" +
		"\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107" +
		"\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233\234\237" +
		"\240\242\243\244\263\277\300\301\302\303\304\317\322\334\342\347\350\352\357\365" +
		"\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e" +
		"\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f" +
		"\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133" +
		"\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243" +
		"\244\263\277\300\301\302\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102" +
		"\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126" +
		"\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177" +
		"\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\163\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\250" +
		"\253\263\277\300\302\303\304\317\322\334\342\347\350\352\354\357\365\u0101\u0102" +
		"\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126" +
		"\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177" +
		"\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\161\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263" +
		"\277\300\302\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108" +
		"\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e" +
		"\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1" +
		"\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\161" +
		"\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300" +
		"\302\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b" +
		"\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138" +
		"\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25" +
		"\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\161\162\164\171" +
		"\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302\303\304" +
		"\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d" +
		"\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142" +
		"\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47" +
		"\52\66\75\76\104\105\107\121\124\133\142\143\147\154\161\162\164\171\177\200\201" +
		"\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302\303\304\317\322\334" +
		"\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110" +
		"\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148" +
		"\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\104\105\107\121\124\133\142\143\147\154\161\162\164\171\177\200\201\212\222\225" +
		"\231\233\234\237\240\242\243\244\263\277\300\302\303\304\317\322\334\342\347\350" +
		"\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115" +
		"\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107" +
		"\121\124\133\142\143\147\154\161\162\164\171\177\200\201\212\222\225\231\233\234" +
		"\237\240\242\243\244\263\277\300\302\303\304\317\322\334\342\347\350\352\357\365" +
		"\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e" +
		"\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f" +
		"\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133" +
		"\142\143\147\154\162\164\171\177\200\201\212\222\225\231\232\233\234\237\240\242" +
		"\243\244\263\277\300\302\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102" +
		"\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126" +
		"\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177" +
		"\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\164\171\177\200\201\212\222\225\231\232\233\234\237\240\242\243\244\263" +
		"\277\300\302\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108" +
		"\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e" +
		"\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1" +
		"\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\161" +
		"\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300" +
		"\302\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b" +
		"\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138" +
		"\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25" +
		"\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162\164\171\177" +
		"\200\201\212\222\225\231\233\234\237\240\242\243\244\263\275\277\300\302\303\304" +
		"\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d" +
		"\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142" +
		"\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47" +
		"\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162\164\171\177\200\201\212" +
		"\222\225\231\233\234\237\240\242\243\244\263\275\277\300\302\303\304\317\322\334" +
		"\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110" +
		"\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148" +
		"\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\104\105\107\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231" +
		"\233\234\237\240\242\243\244\263\275\277\300\302\303\304\317\322\334\342\347\350" +
		"\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115" +
		"\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107" +
		"\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233\234\237" +
		"\240\242\243\244\263\275\277\300\302\303\304\317\322\334\342\347\350\352\357\365" +
		"\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e" +
		"\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f" +
		"\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133" +
		"\142\143\147\154\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243" +
		"\244\263\267\277\300\302\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102" +
		"\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126" +
		"\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177" +
		"\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277" +
		"\300\302\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a" +
		"\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f" +
		"\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u0166\u016f\u0175\u0177\u0179\1" +
		"\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162" +
		"\163\164\171\177\200\201\212\222\225\231\233\234\237\240\241\242\243\244\250\253" +
		"\263\277\300\302\303\304\317\322\334\342\347\350\352\354\357\365\u0101\u0102\u0103" +
		"\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c" +
		"\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u0166\u016f\u0175\u0177" +
		"\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\163\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\250" +
		"\253\263\277\300\302\303\304\317\322\334\342\347\350\352\354\357\365\u0101\u0102" +
		"\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126" +
		"\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177" +
		"\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\163\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\250" +
		"\253\263\277\300\302\303\304\317\322\334\342\347\350\352\354\357\365\u0101\u0102" +
		"\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126" +
		"\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177" +
		"\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147" +
		"\154\162\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277" +
		"\300\302\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a" +
		"\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f" +
		"\u0138\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u0166\u016f\u0175\u0177\u0179\1" +
		"\2\6\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162" +
		"\164\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302" +
		"\303\304\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b" +
		"\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138" +
		"\u0140\u0142\u0144\u0148\u0149\u014a\u0165\u0166\u016f\u0175\u0177\u0179\0\1\2\6" +
		"\13\22\25\31\34\40\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162\164" +
		"\171\177\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302\303" +
		"\304\317\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c" +
		"\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140" +
		"\u0142\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1\2\6\13\20\22\25\31" +
		"\34\40\47\52\66\75\76\104\105\107\115\121\124\133\142\143\147\154\162\164\171\177" +
		"\200\201\212\222\225\231\233\234\237\240\242\243\244\263\277\300\302\303\304\317" +
		"\322\334\342\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d" +
		"\u010e\u0110\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142" +
		"\u0144\u0148\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\44" +
		"\47\52\66\75\76\104\105\107\121\124\133\142\143\147\154\162\164\171\177\200\201\212" +
		"\222\225\231\233\234\237\240\242\243\244\263\277\300\302\303\304\317\322\334\342" +
		"\347\350\352\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110" +
		"\u0114\u0115\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148" +
		"\u0149\u014a\u0165\u016f\u0175\u0177\u0179\1\2\6\13\22\25\31\34\40\47\52\66\75\76" +
		"\77\104\105\107\121\124\133\142\143\147\154\162\164\171\177\200\201\212\222\225\231" +
		"\233\234\237\240\242\243\244\263\277\300\302\303\304\317\322\334\342\347\350\352" +
		"\357\365\u0101\u0102\u0103\u0108\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115" +
		"\u011c\u011e\u0123\u0126\u012c\u012e\u012f\u0138\u0140\u0142\u0144\u0148\u0149\u014a" +
		"\u0165\u016f\u0175\u0177\u0179\237\303\317\322\347\350\352\u0108\u010a\u0110\u0114" +
		"\u011c\u012c\u012e\u012f\u0165\u0168\235\0\0\25\47\46\101\20\115\3\3\23\25\25\47" +
		"\31\75\107\121\124\133\164\171\201\233\237\240\243\244\302\303\304\317\322\334\342" +
		"\347\350\352\u0103\u0108\u010a\u010c\u010e\u0110\u0114\u0115\u011c\u0123\u012c\u012e" +
		"\u012f\u0140\u0142\u0165\1\6\52\76\142\237\300\303\317\322\334\347\350\352\u0108" +
		"\u010a\u010b\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u011e\u012c\u012e\u012f\u0148" +
		"\u0149\u014a\u0165\u0175\u0177\31\104\105\147\177\225\234\242\277\365\u0101\u0102" +
		"\u0126\u0138\u0144\u016f\u0179\123\163\250\253\354\154\212\154\212\222\263\153\224" +
		"\75\75\124\75\124\75\124\266\u0133\u0166\75\124\75\124\121\200\357\121\201\133\133" +
		"\164\133\164\163\250\253\354\345\346\u0125\161\133\164\133\164\225\225\365\234\u0144" +
		"\u0126\237\303\347\350\352\u010a\u012c\u012e\u012f\u0165\237\303\347\350\352\u010a" +
		"\u012c\u012e\u012f\u0165\237\303\347\350\352\u010a\u0110\u012c\u012e\u012f\u0165" +
		"\237\303\347\350\352\u010a\u0110\u012c\u012e\u012f\u0165\237\303\347\350\352\u010a" +
		"\u0110\u012c\u012e\u012f\u0165\237\303\317\321\322\347\350\352\u0108\u010a\u0110" +
		"\u0113\u0114\u0118\u012c\u012e\u012f\u0155\u0165\237\303\317\322\347\350\352\u0108" +
		"\u010a\u0110\u0114\u012c\u012e\u012f\u0165\237\303\317\347\350\352\u010a\u0110\u012c" +
		"\u012e\u012f\u0165\237\303\317\322\347\350\352\u0108\u010a\u0110\u0114\u011c\u012c" +
		"\u012e\u012f\u0165\237\303\317\322\347\350\352\u0108\u010a\u0110\u0114\u011c\u012c" +
		"\u012e\u012f\u0165\237\303\317\322\334\347\350\352\u0108\u010a\u0110\u0114\u0115" +
		"\u011c\u012c\u012e\u012f\u0165\237\303\317\322\334\347\350\352\u0108\u010a\u010c" +
		"\u010e\u0110\u0114\u0115\u011c\u012c\u012e\u012f\u0165\237\303\317\322\334\347\350" +
		"\352\u0108\u010a\u010c\u010e\u0110\u0114\u0115\u011c\u012c\u012e\u012f\u0165\237" +
		"\303\317\322\347\350\352\u0108\u010a\u0110\u0114\u011c\u012c\u012e\u012f\u0165\237" +
		"\303\317\322\334\347\350\352\u0108\u010a\u010c\u010e\u0110\u0114\u0115\u011c\u012c" +
		"\u012e\u012f\u0165\237\303\317\322\334\347\350\352\u0108\u010a\u010c\u010d\u010e" +
		"\u0110\u0114\u0115\u011c\u012c\u012e\u012f\u0165\237\273\274\303\317\322\334\347" +
		"\350\352\366\u0108\u010a\u010c\u010d\u010e\u0110\u0114\u0115\u011c\u012c\u012e\u012f" +
		"\u0165\u010b\u0148\u0149\u0175\u0177\u010b\u0148\u0175\u0177\133\164\237\303\316" +
		"\317\322\347\350\352\u0108\u010a\u0110\u0114\u011c\u012c\u012e\u012f\u0165\133\164" +
		"\237\303\316\317\322\347\350\352\u0108\u010a\u0110\u0114\u011c\u012c\u012e\u012f" +
		"\u0165\133\164\172\237\303\316\317\322\347\350\352\u0108\u010a\u0110\u0114\u011c" +
		"\u012c\u012e\u012f\u0165\163\253\31\107\240\302\u0103\u0123\u0140\u0142\10\306\u014a" +
		"\31\107\275\31\104\105\u0138\302\u0140\u0142\302\u0140\u0142\1\6\52\76\142\300\66" +
		"\143\1\6\31\52\76\104\105\142\300\u011e\u0138\u013e\u013f\2\13\34\2\13\34\237\303" +
		"\317\322\347\350\352\u0108\u010a\u0110\u0114\u011c\u012c\u012e\u012f\u0165\u0168" +
		"\1\6\25\47\52\76\124\142\162\164\237\300\303\322\347\350\352\u0108\u010a\u0110\u0114" +
		"\u012c\u012e\u012f\u0165\3\20\115\123\266\361\u0133\u0168\243\244\342\345\346\u0125" +
		"\267\237\303\317\321\322\347\350\352\u0108\u010a\u0110\u0113\u0114\u0118\u012c\u012e" +
		"\u012f\u0155\u0165\240\31\31\31\66\66\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(3731,
		"\u0191\u0192\203\203\4\4\41\4\74\4\4\4\4\4\205\4\u0145\4\4\4\4\5\5\5\5\116\5\5\5" +
		"\5\5\u0132\5\5\5\5\120\120\161\161\301\301\301\301\301\301\301\301\301\301\301\301" +
		"\301\301\301\301\301\301\301\237\347\350\352\u012c\u012e\u012f\u0165\44\77\44\77" +
		"\u0110\u0175\u0175\u0175\u0175\u0140\u0140\u0140\76\153\366\u010c\u0138\u013e\u013f" +
		"\200\357\71\73\117\176\355\364\376\u010f\u0136\u0137\u0139\u015f\u0160\u0162\u0169" +
		"\u017a\u017b\u017c\u0185\u018b\40\206\206\206\206\52\105\107\143\201\207\207\207" +
		"\207\365\u0123\u0179\104\142\224\u010d\u0111\u0121\u0126\u0126\u0153\u0126\u010d" +
		"\6\6\6\121\6\121\6\210\210\210\302\210\6\302\302\302\302\302\302\302\302\302\302" +
		"\53\202\211\211\211\211\u0141\34\66\70\154\212\154\212\212\303\154\154\212\303\u010a" +
		"\u010b\303\303\303\303\303\303\154\303\303\u0148\303\303\303\303\303\303\303\303" +
		"\303\303\u0166\u0148\u0148\303\u0148\u0148\115\144\146\261\262\264\356\u0143\u0171" +
		"\u0176\u0186\u0187\u018c\304\304\304\304\304\304\304\304\304\304\304\304\304\304" +
		"\304\u013a\u0146\u0170\31\213\240\213\213\240\213\31\31\106\110\214\214\214\214\u0124" +
		"\215\215\215\215\u011f\u011f\u018d\u0120\u0120\u018e\u010e\216\216\216\216\u011d" +
		"\u0103\u0103\u0103\u0149\u0149\u0149\u0149\u0149\217\217\217\217\u011c\u011c\u0177" +
		"\u011c\u0177\u0177\u0177\u0142\u0142\u0142\305\305\305\305\305\305\305\305\305\305" +
		"\305\305\305\305\305\305\305\305\305\305\305\162\220\162\162\220\220\162\220\162" +
		"\162\162\162\162\162\162\162\162\162\162\162\162\162\162\162\7\7\7\7\7\7\7\7\7\7" +
		"\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135" +
		"\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272\140\135\306" +
		"\140\135\140\140\221\135\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135" +
		"\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140" +
		"\135\u014a\u014a\10\306\135\u014a\u014a\135\11\11\11\11\11\11\11\11\11\11\11\11\11" +
		"\12\12\12\12\12\12\12\12\12\12\12\12\12\13\13\13\13\13\13\u0144\u011e\22\22\307\307" +
		"\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307" +
		"\307\307\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\147\140\122\140" +
		"\10\111\135\221\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140" +
		"\221\135\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a" +
		"\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10" +
		"\306\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140" +
		"\140\122\140\10\111\135\221\235\241\140\140\135\256\140\221\221\135\272\140\135\306" +
		"\140\135\140\140\241\241\221\135\10\140\306\140\306\306\306\140\306\306\306\241\256" +
		"\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306\306" +
		"\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72" +
		"\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140" +
		"\221\221\135\272\140\135\306\140\135\140\140\221\135\10\u0101\140\306\140\306\306" +
		"\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306" +
		"\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10" +
		"\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221" +
		"\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\u0102" +
		"\140\306\140\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306\10" +
		"\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\135" +
		"\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122" +
		"\140\10\111\135\221\235\242\140\140\135\256\140\221\221\135\272\140\135\306\140\135" +
		"\140\140\242\242\221\135\10\140\306\140\306\306\306\140\306\306\306\242\256\135\135" +
		"\135\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140" +
		"\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10" +
		"\111\122\10\135\135\140\140\122\140\10\111\135\221\225\235\140\140\135\256\140\221" +
		"\221\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\140\306" +
		"\306\306\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135" +
		"\306\306\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42" +
		"\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\226\235\140" +
		"\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140" +
		"\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306\10\306\306\306" +
		"\306\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a" +
		"\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135" +
		"\221\227\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221" +
		"\135\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a" +
		"\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10" +
		"\306\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140" +
		"\140\122\140\10\111\135\221\230\235\140\140\135\256\140\221\221\135\272\140\135\306" +
		"\140\135\140\140\221\135\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135" +
		"\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140" +
		"\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111" +
		"\122\10\135\135\140\140\122\140\10\111\135\221\231\235\140\140\135\256\140\221\221" +
		"\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\140\306\306" +
		"\306\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306" +
		"\306\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45" +
		"\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\232\235\140\140" +
		"\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306" +
		"\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306" +
		"\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135" +
		"\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221" +
		"\235\140\140\135\256\140\221\221\135\272\273\140\135\306\140\135\140\140\221\135" +
		"\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306" +
		"\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306" +
		"\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140" +
		"\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272\274\140\135\306\140" +
		"\135\140\140\221\135\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135\140" +
		"\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135" +
		"\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111\122" +
		"\10\135\135\140\140\122\140\10\111\135\221\233\235\140\140\135\256\140\221\221\135" +
		"\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\140\306\306\306" +
		"\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306" +
		"\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54" +
		"\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256" +
		"\140\221\221\135\272\140\135\306\140\135\140\140\221\371\135\10\140\306\140\306\306" +
		"\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306" +
		"\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10" +
		"\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221" +
		"\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\372\135" +
		"\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306" +
		"\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306" +
		"\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140" +
		"\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135" +
		"\140\140\221\373\135\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135\140" +
		"\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135" +
		"\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111\122" +
		"\10\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272" +
		"\140\135\306\140\135\140\140\221\374\135\10\140\306\140\306\306\306\140\306\306\306" +
		"\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306" +
		"\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54" +
		"\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256" +
		"\140\221\221\135\272\140\135\306\140\135\140\140\221\362\135\10\140\306\140\306\306" +
		"\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306" +
		"\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10" +
		"\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221" +
		"\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140" +
		"\306\140\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306\10\306" +
		"\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\u017e" +
		"\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140" +
		"\122\140\10\111\135\221\235\243\140\140\135\256\140\221\221\135\272\140\135\306\140" +
		"\342\135\140\140\243\243\221\135\10\140\306\140\306\306\306\140\306\306\306\243\256" +
		"\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306\306" +
		"\135\140\140\135\u014a\u014a\10\306\u017f\135\u014a\u014a\135\10\17\10\17\42\45\54" +
		"\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235\244\140\140\135" +
		"\256\140\221\221\135\272\140\135\306\140\135\140\140\244\244\221\135\10\140\306\140" +
		"\306\306\306\140\306\306\306\244\256\135\135\135\140\306\306\u014a\306\10\306\306" +
		"\306\306\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\135\u014a" +
		"\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10" +
		"\111\135\221\235\245\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140" +
		"\140\245\245\221\135\10\140\306\140\306\306\306\140\306\306\306\245\256\135\135\135" +
		"\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140" +
		"\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\45\10\111" +
		"\122\10\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135" +
		"\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\140\306\306\306" +
		"\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306" +
		"\306\135\140\140\135\u014a\u014a\10\306\u0180\135\u014a\u014a\135\10\17\10\17\42" +
		"\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111\135\221\235\140\140" +
		"\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306" +
		"\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306" +
		"\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\u0181\135\u014a\u014a" +
		"\135\2\10\17\10\17\42\45\54\17\72\45\10\111\122\10\135\135\140\140\122\140\10\111" +
		"\135\221\235\140\140\135\256\140\221\221\135\272\140\135\306\140\135\140\140\221" +
		"\135\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135\140\306\306\u014a" +
		"\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10" +
		"\306\135\u014a\u014a\135\10\17\10\17\35\42\45\54\17\72\45\10\111\122\10\135\135\140" +
		"\35\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135\272\140\135\306" +
		"\140\135\140\140\221\135\10\140\306\140\306\306\306\140\306\306\306\256\135\135\135" +
		"\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306\306\135\140\140" +
		"\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54\17\72\75\45\10\111" +
		"\122\10\135\135\140\140\122\140\10\111\135\221\235\140\140\135\256\140\221\221\135" +
		"\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306\306\140\306\306\306" +
		"\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306\10\140\135\306\306" +
		"\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\10\17\10\17\42\45\54" +
		"\17\72\45\10\111\122\10\133\135\135\140\140\122\140\10\111\135\221\235\140\140\135" +
		"\256\140\221\221\135\272\140\135\306\140\135\140\140\221\135\10\140\306\140\306\306" +
		"\306\140\306\306\306\256\135\135\135\140\306\306\u014a\306\10\306\306\306\306\306" +
		"\10\140\135\306\306\306\135\140\140\135\u014a\u014a\10\306\135\u014a\u014a\135\310" +
		"\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\300\u018f\3\46\101" +
		"\100\134\36\36\23\24\43\47\50\102\55\123\55\150\123\163\163\253\150\275\311\55\344" +
		"\344\55\311\u0109\311\311\311\344\311\311\311\55\311\311\u014e\u014e\311\311\311" +
		"\311\55\311\311\311\55\55\311\14\14\14\14\14\312\14\312\312\312\312\312\312\312\312" +
		"\312\u014b\312\312\312\312\312\312\312\u0159\312\312\312\u014b\u014b\u0174\312\u014b" +
		"\u014b\56\56\56\177\255\267\276\343\377\267\u013b\u013c\u015d\56\276\377\u018a\155" +
		"\246\246\246\246\222\263\223\223\265\265\204\266\124\125\157\126\126\127\127\360" +
		"\u0167\u0182\130\130\131\131\151\257\u0131\152\260\164\165\251\166\166\247\351\353" +
		"\u0130\u0127\u0127\u0127\234\167\167\170\170\270\271\u0134\277\u016f\u015e\313\u0107" +
		"\u012a\u012b\u012d\u0147\u0161\u0163\u0164\u017d\314\314\314\314\314\314\314\314" +
		"\314\314\315\315\315\315\315\315\u0152\315\315\315\315\316\316\316\316\316\316\316" +
		"\316\316\316\316\317\317\317\317\317\317\317\317\317\317\317\320\320\320\320\320" +
		"\320\320\320\320\320\320\320\320\320\320\320\320\320\320\321\321\u0113\u0118\321" +
		"\321\321\u0118\321\321\u0155\321\321\321\321\322\u0108\u0114\322\322\322\322\322" +
		"\322\322\322\322\323\323\323\u0119\323\323\323\u0119\323\323\u0119\u0158\323\323" +
		"\323\323\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324\325\325" +
		"\325\325\u0122\325\325\325\325\325\325\325\u0122\325\325\325\325\325\326\326\326" +
		"\326\326\326\326\326\326\326\u014f\u0151\326\326\326\326\326\326\326\326\327\327" +
		"\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\330\330" +
		"\330\330\330\330\330\330\330\330\330\330\330\330\330\330\331\331\331\331\331\331" +
		"\331\331\331\331\331\331\331\331\331\331\331\331\331\331\332\332\332\332\332\332" +
		"\332\332\332\332\332\u0150\332\332\332\332\332\332\332\332\332\333\367\370\333\333" +
		"\333\333\333\333\333\u0135\333\333\333\333\333\333\333\333\333\333\333\333\333\u014c" +
		"\u014c\u0173\u014c\u014c\u014d\u0172\u0188\u0189\171\171\334\334\u0112\u0115\u0115" +
		"\334\334\334\u0115\334\334\u0115\u0115\334\334\334\334\172\172\172\172\172\172\172" +
		"\172\172\172\172\172\172\172\172\172\172\172\172\173\173\254\173\173\173\173\173" +
		"\173\173\173\173\173\173\173\173\173\173\173\173\250\354\57\57\340\u0104\u013d\u015b" +
		"\u0104\u0104\32\32\32\60\141\375\61\136\137\u016a\u0105\u0105\u0105\u0106\u016d\u016e" +
		"\u0190\26\103\132\174\u0100\112\175\15\15\62\15\15\62\62\15\15\u015a\62\u016b\u016c" +
		"\20\33\67\21\21\21\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335\335" +
		"\u0183\16\16\51\51\16\16\160\16\236\252\336\16\336\u011a\336\336\336\u011a\336\336" +
		"\u011a\336\336\336\336\25\37\145\156\361\u0133\u0168\u0184\345\346\u0125\u0128\u0129" +
		"\u015c\363\337\337\u0116\u0117\u011b\337\337\337\u011b\337\337\u0154\u0156\u0157" +
		"\337\337\337\u0178\337\341\63\64\65\113\114\27\30");

	private static final short[] tmRuleLen = TMLexer.unpack_short(234,
		"\5\4\4\3\7\4\3\3\4\1\2\4\3\1\2\3\1\1\2\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1" +
		"\2\2\1\1\1\1\3\10\3\2\3\1\1\1\1\5\3\1\3\1\3\1\1\2\2\1\1\1\7\6\6\5\6\5\5\4\2\4\3\3" +
		"\1\1\2\1\1\1\7\5\4\4\5\5\6\1\3\2\1\2\1\3\1\1\3\4\3\3\2\3\2\2\1\1\3\3\2\2\3\3\4\3" +
		"\1\2\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\4\1\4\2\1\3\2\1\3\3\1\1\2\5\2" +
		"\2\3\1\3\3\3\1\1\1\1\1\1\2\1\3\3\1\3\3\1\1\5\3\1\3\1\1\1\1\1\3\1\1\3\1\1\1\0\1\0" +
		"\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\3\1\3\1\3\1\1\0\3\1\1\0\3\1\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(234,
		"\116\116\116\116\117\117\120\121\122\123\123\124\124\125\125\126\126\127\130\130" +
		"\131\132\132\133\133\134\134\134\134\134\134\134\134\134\134\134\134\134\135\136" +
		"\136\136\137\137\137\137\140\141\141\142\143\144\144\144\144\145\146\147\147\150" +
		"\151\151\152\152\152\153\153\153\154\154\154\154\154\154\154\154\155\155\155\155" +
		"\155\155\156\157\157\157\160\160\161\161\161\161\161\162\162\163\164\164\165\165" +
		"\166\167\167\170\170\170\170\170\170\170\170\170\171\172\172\172\173\173\174\174" +
		"\175\175\175\176\176\176\177\177\200\200\200\201\201\202\202\202\203\204\204\205" +
		"\205\205\205\205\205\205\205\206\207\207\207\207\210\210\210\211\212\212\213\213" +
		"\213\214\215\216\216\217\220\220\220\220\221\221\222\222\222\222\223\223\223\224" +
		"\224\224\224\224\225\226\226\226\226\227\227\230\231\231\232\233\234\234\235\235" +
		"\236\236\237\237\240\240\241\241\242\242\243\243\244\244\245\245\246\246\247\247" +
		"\250\250\251\251\252\252\253\253\254\254\255\255\256\256");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'||'",
		"'='",
		"'=='",
		"'!='",
		"'=>'",
		"';'",
		"'.'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'!'",
		"'~'",
		"'&'",
		"'&&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Lbrackets",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lgenerate",
		"Lassert",
		"Lempty",
		"Lnonempty",
		"Lparam",
		"Lstring",
		"Lbool",
		"Lint",
		"Lsymbol",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"imports",
		"import_",
		"options",
		"option",
		"identifier",
		"symref",
		"symref_noargs",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"lexer_directive",
		"state_selector",
		"state_list",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"nonterm_param",
		"directive",
		"inputs",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule_list",
		"rule0",
		"predicate",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsSet",
		"setPrimary",
		"setExpression",
		"annotations",
		"annotation_list",
		"annotation",
		"nonterm_params",
		"param_ref",
		"symref_args",
		"keyval_arg",
		"param_type",
		"param_value",
		"predicate_primary",
		"predicate_expression",
		"expression",
		"map_entry",
		"literal",
		"expression_list",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"importsopt",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"identifieropt",
		"implementsopt",
		"Lnoeoiopt",
		"rhsSuffixopt",
		"param_ref_list_Comma_separated",
		"param_value_list_Comma_separated",
		"keyval_arg_list_Comma_separated",
		"keyval_arg_list_Comma_separated_opt",
		"map_entry_list_Comma_separated",
		"map_entry_list_Comma_separated_opt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 78;
		static final int header = 79;
		static final int lexer_section = 80;
		static final int parser_section = 81;
		static final int parsing_algorithm = 82;
		static final int imports = 83;
		static final int import_ = 84;
		static final int options = 85;
		static final int option = 86;
		static final int identifier = 87;
		static final int symref = 88;
		static final int symref_noargs = 89;
		static final int type = 90;
		static final int type_part_list = 91;
		static final int type_part = 92;
		static final int pattern = 93;
		static final int lexer_parts = 94;
		static final int lexer_part = 95;
		static final int named_pattern = 96;
		static final int lexeme = 97;
		static final int lexeme_transition = 98;
		static final int lexeme_attrs = 99;
		static final int lexeme_attribute = 100;
		static final int lexer_directive = 101;
		static final int state_selector = 102;
		static final int state_list = 103;
		static final int stateref = 104;
		static final int lexer_state = 105;
		static final int grammar_parts = 106;
		static final int grammar_part = 107;
		static final int nonterm = 108;
		static final int nonterm_type = 109;
		static final int _implements = 110;
		static final int assoc = 111;
		static final int nonterm_param = 112;
		static final int directive = 113;
		static final int inputs = 114;
		static final int inputref = 115;
		static final int references = 116;
		static final int references_cs = 117;
		static final int rules = 118;
		static final int rule_list = 119;
		static final int rule0 = 120;
		static final int predicate = 121;
		static final int rhsPrefix = 122;
		static final int rhsSuffix = 123;
		static final int ruleAction = 124;
		static final int rhsParts = 125;
		static final int rhsPart = 126;
		static final int rhsAnnotated = 127;
		static final int rhsAssignment = 128;
		static final int rhsOptional = 129;
		static final int rhsCast = 130;
		static final int rhsUnordered = 131;
		static final int rhsClass = 132;
		static final int rhsPrimary = 133;
		static final int rhsSet = 134;
		static final int setPrimary = 135;
		static final int setExpression = 136;
		static final int annotations = 137;
		static final int annotation_list = 138;
		static final int annotation = 139;
		static final int nonterm_params = 140;
		static final int param_ref = 141;
		static final int symref_args = 142;
		static final int keyval_arg = 143;
		static final int param_type = 144;
		static final int param_value = 145;
		static final int predicate_primary = 146;
		static final int predicate_expression = 147;
		static final int expression = 148;
		static final int map_entry = 149;
		static final int literal = 150;
		static final int expression_list = 151;
		static final int name = 152;
		static final int qualified_id = 153;
		static final int command = 154;
		static final int syntax_problem = 155;
		static final int importsopt = 156;
		static final int parsing_algorithmopt = 157;
		static final int typeopt = 158;
		static final int lexeme_transitionopt = 159;
		static final int iconopt = 160;
		static final int lexeme_attrsopt = 161;
		static final int commandopt = 162;
		static final int identifieropt = 163;
		static final int implementsopt = 164;
		static final int Lnoeoiopt = 165;
		static final int rhsSuffixopt = 166;
		static final int param_ref_list_Comma_separated = 167;
		static final int param_value_list_Comma_separated = 168;
		static final int keyval_arg_list_Comma_separated = 169;
		static final int keyval_arg_list_Comma_separated_opt = 170;
		static final int map_entry_list_Comma_separated = 171;
		static final int map_entry_list_Comma_separated_opt = 172;
		static final int expression_list_Comma_separated = 173;
		static final int expression_list_Comma_separated_opt = 174;
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected Span[] tmStack;
	protected Span tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new Span[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new Span();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new Span();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 37) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new Span();
			tmStack[tmHead].symbol = 37;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 37);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.tokenText()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		Span left = new Span();
		left.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		left.symbol = tmRuleSymbol[rule];
		left.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		Span startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		left.line = startsym.line;
		left.offset = startsym.offset;
		left.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(left, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = left;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, left.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(Span tmLeft, int ruleIndex, int ruleLength) {
		switch (ruleIndex) {
			case 0:  // input ::= header importsopt options lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 4].value), ((List<TmaImport>)tmStack[tmHead - 3].value), ((List<TmaOption>)tmStack[tmHead - 2].value), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 1:  // input ::= header importsopt options lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)tmStack[tmHead - 1].value), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 2:  // input ::= header importsopt lexer_section parser_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 3].value), ((List<TmaImport>)tmStack[tmHead - 2].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead - 1].value), ((List<ITmaGrammarPart>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 3:  // input ::= header importsopt lexer_section
				 tmLeft.value = new TmaInput(((TmaHeader)tmStack[tmHead - 2].value), ((List<TmaImport>)tmStack[tmHead - 1].value), ((List<TmaOption>)null), ((List<ITmaLexerPart>)tmStack[tmHead].value), ((List<ITmaGrammarPart>)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 4:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 5].value), ((TmaName)tmStack[tmHead - 3].value), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 5:  // header ::= Llanguage name parsing_algorithmopt ';'
				 tmLeft.value = new TmaHeader(((TmaName)tmStack[tmHead - 2].value), ((TmaName)null), ((TmaParsingAlgorithm)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 6:  // lexer_section ::= '::' Llexer lexer_parts
				 tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value); 
				break;
			case 7:  // parser_section ::= '::' Lparser grammar_parts
				 tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value); 
				break;
			case 8:  // parsing_algorithm ::= Llalr '(' icon ')'
				 tmLeft.value = new TmaParsingAlgorithm(((Integer)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 9:  // imports ::= import_
				 tmLeft.value = new ArrayList<TmaImport>(16); ((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 10:  // imports ::= imports import_
				 ((List<TmaImport>)tmStack[tmHead - 1].value).add(((TmaImport)tmStack[tmHead].value)); 
				break;
			case 11:  // import_ ::= Limport ID scon ';'
				 tmLeft.value = new TmaImport(((String)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 12:  // import_ ::= Limport scon ';'
				 tmLeft.value = new TmaImport(((String)null), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 13:  // options ::= option
				 tmLeft.value = new ArrayList<TmaOption>(16); ((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 14:  // options ::= options option
				 ((List<TmaOption>)tmStack[tmHead - 1].value).add(((TmaOption)tmStack[tmHead].value)); 
				break;
			case 15:  // option ::= ID '=' expression
				 tmLeft.value = new TmaOption(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 16:  // option ::= syntax_problem
				 tmLeft.value = new TmaOption(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 17:  // identifier ::= ID
				 tmLeft.value = new TmaIdentifier(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 18:  // symref ::= ID symref_args
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead - 1].value), ((TmaSymrefArgs)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 19:  // symref ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), ((TmaSymrefArgs)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 20:  // symref_noargs ::= ID
				 tmLeft.value = new TmaSymref(((String)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 21:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 22:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 38:  // pattern ::= regexp
				 tmLeft.value = new TmaPattern(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 39:  // lexer_parts ::= lexer_part
				 tmLeft.value = new ArrayList<ITmaLexerPart>(64); ((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 40:  // lexer_parts ::= lexer_parts lexer_part
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((ITmaLexerPart)tmStack[tmHead].value)); 
				break;
			case 41:  // lexer_parts ::= lexer_parts syntax_problem
				 ((List<ITmaLexerPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 46:  // named_pattern ::= ID '=' pattern
				 tmLeft.value = new TmaNamedPattern(((String)tmStack[tmHead - 2].value), ((TmaPattern)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 47:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 7].value), ((String)tmStack[tmHead - 6].value), ((TmaPattern)tmStack[tmHead - 4].value), ((TmaStateref)tmStack[tmHead - 3].value), ((Integer)tmStack[tmHead - 2].value), ((TmaLexemeAttrs)tmStack[tmHead - 1].value), ((TmaCommand)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 48:  // lexeme ::= identifier typeopt ':'
				 tmLeft.value = new TmaLexeme(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), ((TmaPattern)null), ((TmaStateref)null), ((Integer)null), ((TmaLexemeAttrs)null), ((TmaCommand)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 49:  // lexeme_transition ::= '=>' stateref
				 tmLeft.value = ((TmaStateref)tmStack[tmHead].value); 
				break;
			case 50:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				 tmLeft.value = ((TmaLexemeAttrs)tmStack[tmHead - 1].value); 
				break;
			case 51:  // lexeme_attribute ::= Lsoft
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSOFT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 52:  // lexeme_attribute ::= Lclass
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LCLASS, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 53:  // lexeme_attribute ::= Lspace
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LSPACE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 54:  // lexeme_attribute ::= Llayout
				 tmLeft.value = new TmaLexemeAttrs(TmaLexemeAttribute.LLAYOUT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 55:  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
				 tmLeft.value = new TmaDirectiveBrackets(((TmaSymref)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 56:  // state_selector ::= '[' state_list ']'
				 tmLeft.value = new TmaStateSelector(((List<TmaLexerState>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 57:  // state_list ::= lexer_state
				 tmLeft.value = new ArrayList<Integer>(4); ((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 58:  // state_list ::= state_list ',' lexer_state
				 ((List<TmaLexerState>)tmStack[tmHead - 2].value).add(((TmaLexerState)tmStack[tmHead].value)); 
				break;
			case 59:  // stateref ::= ID
				 tmLeft.value = new TmaStateref(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 60:  // lexer_state ::= identifier '=>' stateref
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaStateref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 61:  // lexer_state ::= identifier
				 tmLeft.value = new TmaLexerState(((TmaIdentifier)tmStack[tmHead].value), ((TmaStateref)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 62:  // grammar_parts ::= grammar_part
				 tmLeft.value = new ArrayList<ITmaGrammarPart>(64); ((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 63:  // grammar_parts ::= grammar_parts grammar_part
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((ITmaGrammarPart)tmStack[tmHead].value)); 
				break;
			case 64:  // grammar_parts ::= grammar_parts syntax_problem
				 ((List<ITmaGrammarPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 68:  // nonterm ::= annotations identifier nonterm_params nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 6].value), ((TmaIdentifier)tmStack[tmHead - 5].value), ((TmaNontermParams)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 69:  // nonterm ::= annotations identifier nonterm_params '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 70:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 5].value), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)null), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 71:  // nonterm ::= annotations identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)tmStack[tmHead - 4].value), ((TmaIdentifier)tmStack[tmHead - 3].value), ((TmaNontermParams)null), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 72:  // nonterm ::= identifier nonterm_params nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 5].value), ((TmaNontermParams)tmStack[tmHead - 4].value), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 73:  // nonterm ::= identifier nonterm_params '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)tmStack[tmHead - 3].value), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 74:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaNontermParams)null), ((ITmaNontermType)tmStack[tmHead - 3].value), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 75:  // nonterm ::= identifier '::=' rules ';'
				 tmLeft.value = new TmaNonterm(((TmaAnnotations)null), ((TmaIdentifier)tmStack[tmHead - 3].value), ((TmaNontermParams)null), ((ITmaNontermType)null), ((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 76:  // nonterm_type ::= Lreturns symref_noargs
				 tmLeft.value = new TmaNontermTypeAST(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 77:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(true, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 78:  // nonterm_type ::= Lclass identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LCLASS, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 79:  // nonterm_type ::= Linterface identifieropt implementsopt
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LINTERFACE, ((TmaIdentifier)tmStack[tmHead - 1].value), ((List<TmaSymref>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 80:  // nonterm_type ::= Lvoid
				 tmLeft.value = new TmaNontermTypeHint(false, TmaNontermTypeHint.TmaKindKind.LVOID, null, null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 81:  // nonterm_type ::= type
				 tmLeft.value = new TmaNontermTypeRaw(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 82:  // implements ::= ':' references_cs
				 tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value); 
				break;
			case 83:  // assoc ::= Lleft
				 tmLeft.value = TmaAssoc.LLEFT; 
				break;
			case 84:  // assoc ::= Lright
				 tmLeft.value = TmaAssoc.LRIGHT; 
				break;
			case 85:  // assoc ::= Lnonassoc
				 tmLeft.value = TmaAssoc.LNONASSOC; 
				break;
			case 86:  // nonterm_param ::= '%' Lparam identifier param_type '=' param_value ';'
				 tmLeft.value = new TmaNontermParam(((TmaIdentifier)tmStack[tmHead - 4].value), ((TmaParamType)tmStack[tmHead - 3].value), ((ITmaParamValue)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 87:  // nonterm_param ::= '%' Lparam identifier param_type ';'
				 tmLeft.value = new TmaNontermParam(((TmaIdentifier)tmStack[tmHead - 2].value), ((TmaParamType)tmStack[tmHead - 1].value), ((ITmaParamValue)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 88:  // directive ::= '%' assoc references ';'
				 tmLeft.value = new TmaDirectivePrio(((TmaAssoc)tmStack[tmHead - 2].value), ((List<TmaSymref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 89:  // directive ::= '%' Linput inputs ';'
				 tmLeft.value = new TmaDirectiveInput(((List<TmaInputref>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 90:  // directive ::= '%' Lassert Lempty rhsSet ';'
				 tmLeft.value = new TmaDirectiveAssert(TmaDirectiveAssert.TmaKindKind.LEMPTY, ((ITmaRhsPart)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 91:  // directive ::= '%' Lassert Lnonempty rhsSet ';'
				 tmLeft.value = new TmaDirectiveAssert(TmaDirectiveAssert.TmaKindKind.LNONEMPTY, ((ITmaRhsPart)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 92:  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
				 tmLeft.value = new TmaDirectiveSet(((String)tmStack[tmHead - 3].value), ((ITmaRhsPart)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 93:  // inputs ::= inputref
				 tmLeft.value = new ArrayList<TmaInputref>(); ((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 94:  // inputs ::= inputs ',' inputref
				 ((List<TmaInputref>)tmStack[tmHead - 2].value).add(((TmaInputref)tmStack[tmHead].value)); 
				break;
			case 95:  // inputref ::= symref_noargs Lnoeoiopt
				 tmLeft.value = new TmaInputref(((TmaSymref)tmStack[tmHead - 1].value), ((String)tmStack[tmHead].value) != null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 96:  // references ::= symref_noargs
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 97:  // references ::= references symref_noargs
				 ((List<TmaSymref>)tmStack[tmHead - 1].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 98:  // references_cs ::= symref_noargs
				 tmLeft.value = new ArrayList<TmaSymref>(); ((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 99:  // references_cs ::= references_cs ',' symref_noargs
				 ((List<TmaSymref>)tmStack[tmHead - 2].value).add(((TmaSymref)tmStack[tmHead].value)); 
				break;
			case 101:  // rule_list ::= rule0
				 tmLeft.value = new ArrayList<TmaRule0>(); ((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 102:  // rule_list ::= rule_list '|' rule0
				 ((List<TmaRule0>)tmStack[tmHead - 2].value).add(((TmaRule0)tmStack[tmHead].value)); 
				break;
			case 103:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 3].value), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 104:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 105:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 2].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 106:  // rule0 ::= rhsPrefix rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)tmStack[tmHead - 1].value), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 107:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 2].value), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 108:  // rule0 ::= rhsParts rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)tmStack[tmHead - 1].value), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 109:  // rule0 ::= ruleAction rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)tmStack[tmHead - 1].value), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 110:  // rule0 ::= rhsSuffixopt
				 tmLeft.value = new TmaRule0(((TmaRhsPrefix)null), ((List<ITmaRhsPart>)null), ((TmaRuleAction)null), ((TmaRhsSuffix)tmStack[tmHead].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 111:  // rule0 ::= syntax_problem
				 tmLeft.value = new TmaRule0(null, null, null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 112:  // predicate ::= '[' predicate_expression ']'
				 tmLeft.value = ((ITmaPredicateExpression)tmStack[tmHead - 1].value); 
				break;
			case 113:  // rhsPrefix ::= predicate annotations ':'
				 tmLeft.value = new TmaRhsPrefix(((ITmaPredicateExpression)tmStack[tmHead - 2].value), ((TmaAnnotations)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 114:  // rhsPrefix ::= annotations ':'
				 tmLeft.value = new TmaRhsPrefix(((ITmaPredicateExpression)null), ((TmaAnnotations)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 115:  // rhsPrefix ::= predicate ':'
				 tmLeft.value = new TmaRhsPrefix(((ITmaPredicateExpression)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 116:  // rhsSuffix ::= '%' Lprio symref_noargs
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LPRIO, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 117:  // rhsSuffix ::= '%' Lshift symref_noargs
				 tmLeft.value = new TmaRhsSuffix(TmaRhsSuffix.TmaKindKind.LSHIFT, ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 118:  // ruleAction ::= '{~' identifier scon '}'
				 tmLeft.value = new TmaRuleAction(((TmaIdentifier)tmStack[tmHead - 2].value), ((String)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 119:  // ruleAction ::= '{~' identifier '}'
				 tmLeft.value = new TmaRuleAction(((TmaIdentifier)tmStack[tmHead - 1].value), ((String)null), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 120:  // rhsParts ::= rhsPart
				 tmLeft.value = new ArrayList<ITmaRhsPart>(); ((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 121:  // rhsParts ::= rhsParts rhsPart
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((ITmaRhsPart)tmStack[tmHead].value)); 
				break;
			case 122:  // rhsParts ::= rhsParts syntax_problem
				 ((List<ITmaRhsPart>)tmStack[tmHead - 1].value).add(((TmaSyntaxProblem)tmStack[tmHead].value)); 
				break;
			case 127:  // rhsAnnotated ::= annotations rhsAssignment
				 tmLeft.value = new TmaRhsAnnotated(((TmaAnnotations)tmStack[tmHead - 1].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 129:  // rhsAssignment ::= identifier '=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), false, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 130:  // rhsAssignment ::= identifier '+=' rhsOptional
				 tmLeft.value = new TmaRhsAssignment(((TmaIdentifier)tmStack[tmHead - 2].value), true, ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 132:  // rhsOptional ::= rhsCast '?'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 134:  // rhsCast ::= rhsClass Las symref
				 tmLeft.value = new TmaRhsCast(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 135:  // rhsCast ::= rhsClass Las literal
				 tmLeft.value = new TmaRhsAsLiteral(((ITmaRhsPart)tmStack[tmHead - 2].value), ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 136:  // rhsUnordered ::= rhsPart '&' rhsPart
				 tmLeft.value = new TmaRhsUnordered(((ITmaRhsPart)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 138:  // rhsClass ::= identifier ':' rhsPrimary
				 tmLeft.value = new TmaRhsClass(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaRhsPart)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 139:  // rhsPrimary ::= symref
				 tmLeft.value = new TmaRhsSymbol(((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 140:  // rhsPrimary ::= '(' rules ')'
				 tmLeft.value = new TmaRhsNested(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 141:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), true, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 142:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				 tmLeft.value = new TmaRhsList(((List<ITmaRhsPart>)tmStack[tmHead - 4].value), ((List<TmaSymref>)tmStack[tmHead - 2].value), false, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 143:  // rhsPrimary ::= rhsPrimary '*'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.TmaQuantifierKind.MULT, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 144:  // rhsPrimary ::= rhsPrimary '+'
				 tmLeft.value = new TmaRhsQuantifier(((ITmaRhsPart)tmStack[tmHead - 1].value), TmaRhsQuantifier.TmaQuantifierKind.PLUS, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 145:  // rhsPrimary ::= '$' '(' rules ')'
				 tmLeft.value = new TmaRhsIgnored(((List<TmaRule0>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 147:  // rhsSet ::= Lset '(' setExpression ')'
				 tmLeft.value = new TmaRhsSet(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 148:  // setPrimary ::= ID symref
				 tmLeft.value = new TmaSetSymbol(((String)tmStack[tmHead - 1].value), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 149:  // setPrimary ::= symref
				 tmLeft.value = new TmaSetSymbol(((String)null), ((TmaSymref)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 150:  // setPrimary ::= '(' setExpression ')'
				 tmLeft.value = new TmaSetCompound(((ITmaSetExpression)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 151:  // setPrimary ::= '~' setPrimary
				 tmLeft.value = new TmaSetComplement(((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 153:  // setExpression ::= setExpression '|' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.OR, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 154:  // setExpression ::= setExpression '&' setExpression
				 tmLeft.value = new TmaSetBinary(((ITmaSetExpression)tmStack[tmHead - 2].value), TmaSetBinary.TmaKindKind.AMPERSAND, ((ITmaSetExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 155:  // annotations ::= annotation_list
				 tmLeft.value = new TmaAnnotations(((List<TmaAnnotation>)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 156:  // annotation_list ::= annotation
				 tmLeft.value = new ArrayList<TmaAnnotation>(); ((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 157:  // annotation_list ::= annotation_list annotation
				 ((List<TmaAnnotation>)tmStack[tmHead - 1].value).add(((TmaAnnotation)tmStack[tmHead].value)); 
				break;
			case 158:  // annotation ::= '@' ID '{' expression '}'
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead - 3].value), ((ITmaExpression)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 159:  // annotation ::= '@' ID
				 tmLeft.value = new TmaAnnotation(((String)tmStack[tmHead].value), ((ITmaExpression)null), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 160:  // annotation ::= '@' syntax_problem
				 tmLeft.value = new TmaAnnotation(null, null, ((TmaSyntaxProblem)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 161:  // nonterm_params ::= '<' param_ref_list_Comma_separated '>'
				 tmLeft.value = new TmaNontermParams(((List<TmaIdentifier>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 163:  // symref_args ::= '<' param_value_list_Comma_separated '>'
				 tmLeft.value = new TmaSymrefArgs(((List<ITmaParamValue>)tmStack[tmHead - 1].value), null, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 164:  // symref_args ::= '<' keyval_arg_list_Comma_separated_opt '>'
				 tmLeft.value = new TmaSymrefArgs(null, ((List<TmaKeyvalArg>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 165:  // keyval_arg ::= param_ref ':' param_value
				 tmLeft.value = new TmaKeyvalArg(((TmaIdentifier)tmStack[tmHead - 2].value), ((ITmaParamValue)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 166:  // param_type ::= Lint
				 tmLeft.value = TmaParamType.LINT; 
				break;
			case 167:  // param_type ::= Lstring
				 tmLeft.value = TmaParamType.LSTRING; 
				break;
			case 168:  // param_type ::= Lbool
				 tmLeft.value = TmaParamType.LBOOL; 
				break;
			case 169:  // param_type ::= Lsymbol
				 tmLeft.value = TmaParamType.LSYMBOL; 
				break;
			case 172:  // predicate_primary ::= '!' param_ref
				 tmLeft.value = new TmaBoolPredicate(true, ((TmaIdentifier)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 173:  // predicate_primary ::= param_ref
				 tmLeft.value = new TmaBoolPredicate(false, ((TmaIdentifier)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 174:  // predicate_primary ::= param_ref '==' literal
				 tmLeft.value = new TmaComparePredicate(((TmaIdentifier)tmStack[tmHead - 2].value), TmaComparePredicate.TmaKindKind.EQUAL_EQUAL, ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 175:  // predicate_primary ::= param_ref '!=' literal
				 tmLeft.value = new TmaComparePredicate(((TmaIdentifier)tmStack[tmHead - 2].value), TmaComparePredicate.TmaKindKind.EXCLAMATION_EQUAL, ((TmaLiteral)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 177:  // predicate_expression ::= predicate_expression '&&' predicate_expression
				 tmLeft.value = new TmaPredicateBinary(((ITmaPredicateExpression)tmStack[tmHead - 2].value), TmaPredicateBinary.TmaKindKind.AMPERSAND_AMPERSAND, ((ITmaPredicateExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 178:  // predicate_expression ::= predicate_expression '||' predicate_expression
				 tmLeft.value = new TmaPredicateBinary(((ITmaPredicateExpression)tmStack[tmHead - 2].value), TmaPredicateBinary.TmaKindKind.OR_OR, ((ITmaPredicateExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 181:  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
				 tmLeft.value = new TmaInstance(((TmaName)tmStack[tmHead - 3].value), ((List<TmaMapEntry>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 182:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				 tmLeft.value = new TmaArray(((List<ITmaExpression>)tmStack[tmHead - 1].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 184:  // map_entry ::= ID ':' expression
				 tmLeft.value = new TmaMapEntry(((String)tmStack[tmHead - 2].value), ((ITmaExpression)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 185:  // literal ::= scon
				 tmLeft.value = new TmaLiteral(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 186:  // literal ::= icon
				 tmLeft.value = new TmaLiteral(((Integer)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 187:  // literal ::= Ltrue
				 tmLeft.value = new TmaLiteral(Boolean.TRUE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 188:  // literal ::= Lfalse
				 tmLeft.value = new TmaLiteral(Boolean.FALSE, source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 189:  // expression_list ::= expression
				 tmLeft.value = new ArrayList(); ((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 190:  // expression_list ::= expression_list ',' expression
				 ((List<ITmaExpression>)tmStack[tmHead - 2].value).add(((ITmaExpression)tmStack[tmHead].value)); 
				break;
			case 191:  // name ::= qualified_id
				 tmLeft.value = new TmaName(((String)tmStack[tmHead].value), source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 193:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 194:  // command ::= code
				 tmLeft.value = new TmaCommand(source, tmLeft.line, tmStack[tmHead].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 195:  // syntax_problem ::= error
				 tmLeft.value = new TmaSyntaxProblem(source, tmLeft.line, tmLeft.offset, tmLeft.endoffset); 
				break;
			case 218:  // param_ref_list_Comma_separated ::= param_ref_list_Comma_separated ',' param_ref
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 219:  // param_ref_list_Comma_separated ::= param_ref
				tmLeft.value = new ArrayList();
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 220:  // param_value_list_Comma_separated ::= param_value_list_Comma_separated ',' param_value
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 221:  // param_value_list_Comma_separated ::= param_value
				tmLeft.value = new ArrayList();
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 222:  // keyval_arg_list_Comma_separated ::= keyval_arg_list_Comma_separated ',' keyval_arg
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 223:  // keyval_arg_list_Comma_separated ::= keyval_arg
				tmLeft.value = new ArrayList();
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 226:  // map_entry_list_Comma_separated ::= map_entry_list_Comma_separated ',' map_entry
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 227:  // map_entry_list_Comma_separated ::= map_entry
				tmLeft.value = new ArrayList();
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 230:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 231:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(Span value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(Span value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 401);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 402);
	}
}
