${template unit-}
${call java.header-}
package ${call java.package};

public ${if opts.lexerInput == 'custom'}abstract ${end}class ${opts.prefix}Lexer {
${call symbolClass-}
${call statesInterface-}
${call tokensInterface-}
${call errorReporter-}

	public static final int TOKEN_SIZE = ${opts.maxtoken};

	private java.io.@Reader stream;
	final private ErrorReporter reporter;

${if opts.lexerInput == 'buffer'-}
	private CharSequence input;
	private int tokenOffset;
	private int l;
	private int charOffset;
${end-}
	private int chr;

	private int state;

${if opts.lexerInput != 'buffer'-}
	final private StringBuilder tokenBuffer = new StringBuilder(TOKEN_SIZE);

${end-}
	private int tokenLine;
	private int currLine;
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
	private int currColumn;
${end-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
	private int currOffset;
${end-}
${util.shiftRight(self->lexercode(), 1)-}
${call lexerCtor-}
${call lexerReset-}
${if opts.lexerInput == 'custom'-}
	protected abstract int nextChar() throws java.io.@IOException;
${end-}

	protected void advance()${if opts.lexerInput != 'buffer'} throws java.io.@IOException${end} {
		if (chr == -1) return;
${self->advanceChar(false, false)-}
	}
${call accessors-}
${self->lexerTables()-}
${call mapCharacter-}
${call next-}
${if opts.lexerInput == 'buffer'-}
${call charAt-}
${end-}
${call createToken-}
${call unpackRoutines-}
}
${end}

${template unpackRoutines}
${call java_pack.unpackInt}
${end}

${template lexerCtor}
	public ${opts.prefix}Lexer(${if opts.lexerInput == 'buffer'}CharSequence input, ${end}ErrorReporter reporter) throws java.io.@IOException {
		this.reporter = reporter;
		reset(${if opts.lexerInput == 'buffer'}input${end});
	}
${end}

${template lexerReset}
	public void reset(${if opts.lexerInput == 'buffer'}CharSequence input${end}) throws java.io.@IOException {
		this.state = 0;
		tokenLine = currLine = 1;
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
		currColumn = 1;
${end-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
		currOffset = 0;
${end-}
${if opts.lexerInput == 'buffer'-}
		this.input = input;
		tokenOffset = l = 0;
${end-}
${call advanceChar(false, true)-}
	}
${end}

${template accessors}
	public int getState() {
		return state;
	}

	public void setState(int state) {
		this.state = state;
	}

	public int getTokenLine() {
		return tokenLine;
	}

	public int getLine() {
		return currLine;
	}

	public void setLine(int currLine) {
		this.currLine = currLine;
	}

${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
	public int getColumn() {
		return currColumn;
	}

	public void setColumn(int currColumn) {
		this.currColumn = currColumn;
	}

${end-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
	public int getOffset() {
		return currOffset;
	}

	public void setOffset(int currOffset) {
		this.currOffset = currOffset;
	}

${end-}
	public String tokenText() {
${if opts.lexerInput == 'buffer'-}
		return input.subSequence(tokenOffset, charOffset).toString();
${else-}
		return tokenBuffer.toString();
${end-}
	}

	public int tokenSize() {
${if opts.lexerInput == 'buffer'-}
		return charOffset - tokenOffset;
${else-}
		return tokenBuffer.length();
${end-}
	}
${end}

${template mapCharacter}
	private static int mapCharacter(int chr) {
		if (chr >= 0 && chr < ${lex.char2no.length}) return tmCharClass[chr];
		return chr == -1 ? 0 : 1;
	}
${end}

${template onNext-}
${end}

${template next}
	public ${self->java.symbolClassName()} next() throws java.io.@IOException {
		${self->java.symbolClassName()} token = new ${self->java.symbolClassName()}();
		int state;

		tokenloop:
		do {
${if opts.positions.contains('offset')-}
			token.offset = currOffset;
${end-}
			tokenLine =${if opts.positions.contains('line')} token.line =${end} currLine;
${if opts.positions.contains('column')-}
			token.column = currColumn;
${end-}
${if opts.lexerInput == 'buffer'-}
			tokenOffset = charOffset;
${else-}
			if (tokenBuffer.length() > TOKEN_SIZE) {
				tokenBuffer.setLength(TOKEN_SIZE);
				tokenBuffer.trimToSize();
			}
			tokenBuffer.setLength(0);
${end-}

			for (state = ${self->tmStateMapExists() ? 'tmStateMap[this.state]' : 'this.state'}; state >= 0; ) {
				state = tmGoto[state * tmClassesCount + mapCharacter(chr)];
				if (state == -1 && chr == -1) {
${if opts.endpositions.contains('offset')-}
					token.endoffset = currOffset;
${end-}
${if opts.endpositions.contains('line')-}
					token.endline = currLine;
${end-}
${if opts.endpositions.contains('column')-}
					token.endcolumn = currColumn;
${end-}
					token.symbol = 0;
					token.value = null;
					reporter.error("Unexpected end of input reached"${call java.err_location('token', 'this') });
${if opts.positions.contains('offset')-}
					token.offset = currOffset;
${end-}
					break tokenloop;
				}
				if (state >= -1 && chr != -1) {
${util.shiftRight(self->advanceChar(true, false), 3)-}
				}
			}
${if opts.endpositions.contains('offset')-}
			token.endoffset = currOffset;
${end-}
${if opts.endpositions.contains('line')-}
			token.endline = currLine;
${end-}
${if opts.endpositions.contains('column')-}
			token.endcolumn = currColumn;
${end-}

			if (state == -1) {
				reporter.error(java.text.@MessageFormat.format("invalid lexeme at line {0}: `{1}`, skipped", currLine, tokenText())${call java.err_location('token', 'this') });
				token.symbol = -1;
				continue;
			}

			if (state == -2) {
				token.symbol = Tokens.eoi;
				token.value = null;
				break tokenloop;
			}

			token.symbol = tmRuleSymbol[-state - 3];
			token.value = null;

		} while (token.symbol == -1 || !createToken(token, -state - 3));
${call onNext-}
		return token;
	}
${end}

${template charAt}
	protected int charAt(int i) {
		if (i == 0) return chr;
		i += l - 1;
		int res = i < input.length() ? input.charAt(i++) : -1;
		if (res >= Character.MIN_HIGH_SURROGATE && res <= Character.MAX_HIGH_SURROGATE && i < input.length() &&
				Character.isLowSurrogate(input.charAt(i))) {
			res = Character.toCodePoint((char) res, input.charAt(i++));
		}
		return res;
	}
${end}

${template createToken}
	protected boolean createToken(${self->java.symbolClassName()} token, int ruleIndex) throws java.io.@IOException {
${if self->hasLexerActions()-}
		boolean spaceToken = false;
		switch (ruleIndex) {
${foreach rule in syntax.lexerRules-}
${if rule.kindAsText == 'class'-}
			case ${rule.index}:
				return create${rule->classRuleName()}Token(token, ruleIndex);
${else if rule->hasActions() && !rule.classRule-}
			case ${rule.index}: // ${rule.symbol.name}: /${rule.regexp}/
${call lexerAction('token.value', 'token.symbol') for rule-}
				break;
${end-}
${end-}
		}
		return !(spaceToken);
${else-}
		return true;
${end-}
	}
${foreach classRule in self->classRules()-}
${if classRule->classHasInstances()-}

	private static java.util.@Map<String,Integer> subTokensOf${classRule->classRuleName()} = new java.util.@HashMap<${if !opts.java8}String,Integer${end}>();
	static {
${foreach instance in classRule->classInstances()-}
		subTokensOf${classRule->classRuleName()}.put("${util.escape(instance.regexp.constantValue)}", ${instance.index});
${end-}
	}
${end-}

	protected boolean create${classRule->classRuleName()}Token(${self->java.symbolClassName()} token, int ruleIndex) {
${if classRule->classHasInstances()-}
		Integer replacement = subTokensOf${classRule->classRuleName()}.get(tokenText());
		if (replacement != null) {
			ruleIndex = replacement;
			token.symbol = tmRuleSymbol[ruleIndex];
		}
${end-}
${if classRule->classInstances().exists(x|x->hasActions()) || classRule->hasActions()-}
		boolean spaceToken = false;
		switch(ruleIndex) {
${foreach instance in classRule->classInstances().select(x|x->hasActions())-}
			case ${instance.index}:	// ${instance.regexp.constantValue}
${call lexerAction('token.value', 'token.symbol') for instance-}
				break;
${end-}
${if classRule->hasActions()-}
${foreach instance in classRule->classInstances().select(x|!x.action && x.kindAsText == 'soft')-}
			case ${instance.index}:	// ${instance.regexp.constantValue} (soft)
${end-}
			case ${classRule.index}:	// <default>
${call lexerAction('token.value', 'token.symbol') for classRule-}
				break;
${end-}
		}
		return !(spaceToken);
${else-}
		return true;
${end-}
	}
${end-}
${end}

${template updateLocation-}
${if opts.lexerInput == 'buffer'-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
		currOffset += l - charOffset;
${end-}
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
		currColumn += l - charOffset;
${end-}
${end-}
		if (chr == '\n') {
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
			currColumn = 1;
${end-}
			currLine++;
		}
${end}

${template advanceChar(inNext, first)-}
${if !first-}
${call updateLocation-}
${end-}
${if opts.lexerInput == 'custom'-}
${if !first-}
		if (chr >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {
			tokenBuffer.append(Character.toChars(chr));
		} else {
			tokenBuffer.append((char) chr);
		}
${end-}
		chr = nextChar();
${else if opts.lexerInput == 'buffer'-}
		charOffset = l;
		chr = l < input.length() ? input.charAt(l++) : -1;
		if (chr >= Character.MIN_HIGH_SURROGATE && chr <= Character.MAX_HIGH_SURROGATE && l < input.length() &&
				Character.isLowSurrogate(input.charAt(l))) {
			chr = Character.toCodePoint((char) chr, input.charAt(l++));
		}
${end-}
${end}


${template lexerAction($, symbol)-}
${if self.kindAsText == 'space'-}
				spaceToken = true;
${end-}
${if self.transitions-}
${if self.transitions.stateSwitch-}
				switch(state) {
${foreach x in self.transitions.stateSwitch.entrySet()-}
					case States.${x.key->stateId()}:
						state = States.${x.value->stateId()};
						break;
${end-}
${if self.transitions.defaultTransition-}
					default:
						state = States.${self.transitions.defaultTransition->stateId()};
						break;
${end-}
				}
${else if self.transitions.defaultTransition-}
				state = States.${self.transitions.defaultTransition->stateId()};
${end-}
${end-}
${if action-}
				${eval action}
${end-}
${end}

${template lexerTables}
${if lex.char2no.size() > 128-}
	private static final char[] tmCharClass = ${lex.char2no->java_pack.packCountValue(true)};

${call java_pack.unpackCountValue(true)-}
${else-}
	private static final short tmCharClass[] = {
		${util.format(lex.char2no, 16, 2)}
	};
${end-}

${if self->tmStateMapExists()-}
	private static final short tmStateMap[] = {
		${util.format(lex.groupset, 16, 2)}
	};

${end-}
	private static final int[] tmRuleSymbol = ${syntax.lexerRuleTokens->java_pack.packInt()};

	private static final int tmClassesCount = ${lex.nchars};

	private static final short[] tmGoto = ${lex.change->java_pack.packCountValue(false)};

${call java_pack.unpackCountValue(false)-}
${end}


${template symbolClass}
	public static class ${self->java.symbolClassName()} {
		public Object value;
		public int symbol;
		public int state;
${if opts.positions.contains('line')-}
		public int line;
${end-}
${if opts.positions.contains('column')-}
		public int column;
${end-}
${if opts.positions.contains('offset')-}
		public int offset;
${end-}
${if opts.endpositions.contains('line')-}
		public int endline;
${end-}
${if opts.endpositions.contains('column')-}
		public int endcolumn;
${end-}
${if opts.endpositions.contains('offset')-}
		public int endoffset;
${end-}
	}
${end}

${template tokensInterface}
	public interface Tokens {
		int Unavailable_ = -1;
${for i in [0, syntax.terminals - 1]-}
		int ${syntax.symbols[i].id->java.escapeJavaReserved()} = ${i};
${end-}
	}
${end}

${template statesInterface-}
${if syntax.lexerStates.size() > 1}
	public interface States {
${foreach state in syntax.lexerStates-}
		int ${state->stateId()} = ${state.index};
${end-}
	}
${end-}
${end}

${cached query stateId() = self.name->java.escapeJavaReserved()}


${template errorReporter}
	public interface ErrorReporter {
		void error(String message${self->util.location(', int ', '', '')});
	}
${end}

${template lexercode-}
${end}

${cached query hasLexerActions() =
	syntax.lexerRules.exists(l|l->hasActions() && !l.classRule || l.kindAsText == 'class')}

${cached query hasActions() = self.action || self.transitions && self.kindAsText != 'soft' || self.kindAsText == 'space' }

${cached query classRules() = syntax.lexerRules.select(x|x.kindAsText == 'class')}

${cached query classHasInstances() = self->classInstances().size() > 0 }

${cached query classInstances() = context.syntax.lexerRules.select(x|x.classRule && x.classRule == self)}

${cached query classRuleName() = util.uniqueId(util.toFirstUpper(self.symbol.id), '__classrule__')}

${cached query tmStateMapExists() = lex.groupset.length > 1}
