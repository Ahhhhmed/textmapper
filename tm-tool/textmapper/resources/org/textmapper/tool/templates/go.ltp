${template main-}
${call go_lexer.main-}
${call go_parser.main-}
${call go_token.main-}
${call go_ast.main-}
${end}

${query escapeGoReserved() =
	[
		'break',        'default',     'func',         'interface',    'select',
        'case',         'defer',       'go',           'map',          'struct',
        'chan',         'else',        'goto',         'package',      'switch',
        'const',        'fallthrough', 'if',           'range',        'type',
        'continue',     'for',         'import',       'return',       'var',

        'bool', 'string', 'byte', 'int', 'rune',

        'iota', 'nil', 'true', 'false',

        'Token', 'Nonterminal', 'Pos', 'Node', 'Offset', 'Endoffset', 'Start', 'End',

        'fmt', 'strconv'
	].contains(self) ? '_' + self : self }

${query symText(property) = self.leftOffset == -1
	? (property == 'value' ? 'nil' : '-1')
	: (self.isLeft ? 'node' : 'rhs[' + self.leftOffset + ']') + '.' + property }

${query varName() = 'nn' + (self.leftOffset == -1 ? '' : self.leftOffset)}

${template symAccess(property)-}
${assert ['value', 'offset', 'endoffset'].contains(property)-}
${if property == 'value' && symbol->type()-}
 {{${self->varName()}, _ := ${self->symText(property)-}.(${symbol->type()-})}}${self->varName()}${else-}
${self->symText(property)-}
${end-}
${end}

${cached query type() = context.opts.genast ? self->go_ast.type(true) : self.type is LiRawAstType ? self.type : null }
