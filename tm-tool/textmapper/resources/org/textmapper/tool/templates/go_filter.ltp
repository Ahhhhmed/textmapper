${template main-}
${if self->go_parser.eventBased() && opts.eventFields-}
${file self->filterFilename()-}
${call unit-}
${end-}
${end-}
${end}

${template unit-}
${call go.header-}
package ${self->package()}

${if self->localNodeSelectorType()-}
${call nodeSelectorTypeImpl-}
${end-}
var (
${foreach rangeType in syntax.rules.collectUnique(r|r.rangeType()).select(it|it != '').sort(it|it)-}
	${rangeType->nodeTypeFilterRef()->go.declarationName()} = func(t ${self->go_listener.nodeTypeRef()}) bool { return t == ${rangeType->go_listener.nodeTypeValueRef()} }
${end-}
${foreach name in opts.reportTokens.select(tok| self->go_types.isTokenType(tok.nameText)).collect(tok|tok->go_token.tokenNodeName())-}
	${name->nodeTypeFilterRef()->go.declarationName()} = func(t ${self->go_listener.nodeTypeRef()}) bool { return t == ${name->go_listener.nodeTypeValueRef()} }
${end-}
${foreach cat in syntax.categories.sort(it|it).select(it|it != 'TokenSet' || syntax.categoryTypes(it).length > 0)-}
	${cat->nodeTypeFilterRef()->go.declarationName()} = ${self->oneOfRef()}(${cat->go_listener.interfaceEnumValueRef()}...)
${end-}
)

${if self->localOneOf()-}
${call filterFunc-}
${end-}
${end}

${template nodeSelectorTypeImpl-}
type ${self->nodeSelectorType()} func (nt ${self->go_listener.nodeTypeRef()}) bool

${end}

${template filterFunc-}
func ${self->oneOfRef()->go.declarationName()}(types ...${self->go_listener.nodeTypeRef()}) ${self->nodeSelectorTypeRef()} {
	if len(types) == 0 {
		return func(${self->go_listener.nodeTypeRef()}) bool { return false }
	}
	const bits = 32
	size := (int(types[len(types)-1]) + bits - 1) / bits
	bitarr := make([]int32, size)
	for _, t := range types {
		bitarr[uint(t)/bits] |= 1 << (uint(t) % bits)
	}
	return func(t ${self->go_listener.nodeTypeRef()}) bool {
		return bitarr[uint(t)/bits]&(1<<(uint(t)%bits)) != 0
	}
}
${end}

${query filterFilename() = 'selector/selector.go'}
${query package() = self->go.package() + '/selector'}

${query localNodeSelectorType() = self->package()->go.element(self->nodeSelectorType()) == self->nodeSelectorTypeRef()}

${query nodeSelectorType() = self->nodeSelectorTypeRef()->go.declarationName()}
${query nodeSelectorTypeRef() = self->package()->go.element('Selector')}

${query nodeTypeFilterRef() = self->package()->go.element(self->go_listener.asRangeTypeName())}

${query localOneOf() = self->package()->go.element(self->oneOfRef()->go.declarationName()) == self->oneOfRef()}
${query oneOfRef() = self->package()->go.element('OneOf')}