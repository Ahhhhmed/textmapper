${template main-}
${if self->go_parser.eventBased() && opts.eventFields-}
${file self->filterFilename()-}
${call unit-}
${end-}
${end-}
${end}

${template unit-}
${call go.header-}
package ${call package}

${call imports-}
${call nodeFilterTypeImpl-}

var (
${foreach rangeType in syntax.rules.collectUnique(r|r.rangeType()).select(it|it != '').sort(it|it)-}
	${rangeType->go_listener.asRangeTypeName()} = func(t ${self->nodeTypeRef()}) bool { return t == ${rangeType->nodeTypeValueRef()} }
${end-}
${foreach name in opts.reportTokens.select(tok| self->go_types.isTokenType(tok.nameText)).collect(tok|tok->go_token.tokenNodeName())-}
	${name->go_listener.asRangeTypeName()} = func(t ${self->nodeTypeRef()}) bool { return t == ${name->nodeTypeValueRef()} }
${end-}
${foreach cat in syntax.categories.sort(it|it).select(it|it != 'TokenSet' || syntax.categoryTypes(it).length > 0)-}
	${cat->go_listener.asRangeTypeName()} = OneOf(${cat->nodeTypeValueRef()}...)
${end-}
)

${call filterFunc-}
${end}

${template imports-}
import (
	"${self->go.importPackage()}"
)

${end}

${template nodeFilterTypeImpl-}
type ${self->nodeFilterType()} func (nt ${self->nodeTypeRef()}) bool

${end}

${template filterFunc-}
func OneOf(types ...${self->nodeTypeRef()}) ${self->nodeFilterTypeRef()} {
	if len(types) == 0 {
		return func(${self->nodeTypeRef()}) bool { return false }
	}
	const bits = 32
	size := (int(types[len(types)-1]) + bits - 1) / bits
	bitarr := make([]int32, size)
	for _, t := range types {
		bitarr[uint(t)/bits] |= 1 << (uint(t) % bits)
	}
	return func(t ${self->nodeTypeRef()}) bool {
		return bitarr[uint(t)/bits]&(1<<(uint(t)%bits)) != 0
	}
}
${end}

${query filterFilename() = 'filter/filter.go'}
${query package() = 'filter'}
${query importPackage() = self->go.importPackage() + '/' + self->package()}

${query nodeTypeRef() = self->go_types.nodeTypeRef()}
${query nodeTypeValueRef() = self->go_types.nodeTypeValueRef()}

${query nodeFilterType() = 'NodeFilter'}
${query nodeFilterTypeRef() = self->nodeFilterType()}
