${template main-}
${file 'token.go'-}
${call go.header-}
${call token-}
${end-}
${end}

${template token-}
package ${opts.lang}

import (
	"fmt"
)

// Token is an enum of all terminal symbols of the ${opts.lang} language.
type Token int

// Token values.
const (
	UNAVAILABLE Token = iota - 1
	EOI

${for i in [1, syntax.terminals - 1]-}
	${syntax.symbols[i]->tokenName()}${if syntax.symbols[i].isConstant()} // ${util.escape(syntax.symbols[i].getConstantValue())}${end}
${end-}

${if !opts.reportInvalidTokens-}
	INVALIDTOKEN
${end-}
	NumTokens
)

var tokenStr = [...]string{
	"EOI",

${for i in [1, syntax.terminals - 1]-}
	"${util.escape(syntax.symbols[i].isConstant() ? util.escape(syntax.symbols[i].getConstantValue()) : syntax.symbols[i].id)}",
${end-}
${if !opts.reportInvalidTokens-}
	"INVALID",
${end-}
}

func (tok Token) String() string {
	if tok >= 0 && int(tok) < len(tokenStr) {
		return tokenStr[tok]
	}
	return fmt.Sprintf("token(%d)", tok)
}
${end}

${cached query tokenName() = self.id->go.escapeGoReserved()}