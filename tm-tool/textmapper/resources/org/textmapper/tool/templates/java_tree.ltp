${template unit-}
${call java.header-}
package ${call java.package};

${call java.imports-}

public class ${opts.prefix}Tree<T> {

	private final TextSource source;
	private final T root;
	private final java.util.@List<${opts.prefix}Problem> errors;

	public ${opts.prefix}Tree(TextSource source, T root, java.util.@List<${opts.prefix}Problem> errors) {
		this.source = source;
		this.root = root;
		this.errors = errors;
	}

	public TextSource getSource() {
		return source;
	}

	public T getRoot() {
		return root;
	}

	public java.util.@List<${opts.prefix}Problem> getErrors() {
		return errors;
	}

	public boolean hasErrors() {
		return errors.size() > 0;
	}

${call parse}
${call constants}
${call ParseProblemClass}
${call TextSourceClass}
${call getLineOffsets-}
}
${end}

${template typeofsym-}
${if self->java.type()}${self->java.type()}${else}Object${end-}
${end}

${template parse-}
${foreach inp in syntax.input}
	public static ${opts.prefix}Tree<${call typeofsym for inp.target}> ${if syntax.input.length > 1}parse${util.toFirstUpper(inp.target.id)}${else}parse${end}(${call parseParameters for inp}) {
		final java.util.@List<${opts.prefix}Problem> list = new java.util.@ArrayList<${opts.prefix}Problem>();
		${call java.package}.${opts.prefix}Lexer.@ErrorReporter reporter = new ${call java.package}.${opts.prefix}Lexer.@ErrorReporter() {
			public void error(String message${self->util.location(', int ', '', '')}) {
				list.add(new ${opts.prefix}Problem(KIND_ERROR, message, ${self->util.location('', ', ', '')}null));
			}
		};

		try {
${util.shiftRight(self->createLexer(),3)-}

${util.shiftRight(self->createParser(),3)-}
${util.shiftRight(self->parseStatements(),3)-}

			return new ${opts.prefix}Tree<${call typeofsym for inp.target}>(source, result, list);
		} catch (${call java.package}.${opts.prefix}Parser.@ParseException ex) {
			/* not parsed */
		} catch (java.io.@IOException ex) {
			list.add(new ${opts.prefix}Problem(KIND_FATAL, "I/O problem: " + ex.getMessage(), ${foreach l in self->util.locationList()}0, ${end}ex));
		}
		return new ${opts.prefix}Tree<${call typeofsym for inp.target}>(source, null, list);
	}
${end}
${end}

${template parseParameters}TextSource source${end}

${template createLexer-}
${opts.prefix}Lexer lexer = new ${opts.prefix}Lexer(source.getStream(), reporter);
lexer.setLine(source.getInitialLine());
${end}

${template createParser-}
${opts.prefix}Parser parser = new ${opts.prefix}Parser(reporter);
${end}

${template parseStatements-}
${call typeofsym for inp.target} result = parser.${if syntax.input.length > 1}parse${util.toFirstUpper(inp.target.id)}${else}parse${end}(lexer);
${end}

${template constants-}
	public static final int KIND_FATAL = 0;
	public static final int KIND_ERROR = 1;
	public static final int KIND_WARN = 2;

	public static final String PARSER_SOURCE = "parser";
${end}

${template ParseProblemClass-}
	public static class ${opts.prefix}Problem extends Exception {
		private static final long serialVersionUID = 1L;

		private final int kind;
${foreach l in self->util.locationList()-}
		private final int ${l};
${end-}

		public ${opts.prefix}Problem(int kind, String message, ${self->util.location('int ', ', ', '')}Throwable cause) {
			super(message, cause);
			this.kind = kind;
${foreach l in self->util.locationList()-}
			this.${l} = ${l};
${end-}
		}

		public int getKind() {
			return kind;
		}
${foreach l in self->util.locationList()}
		public int get${util.toFirstUpper(l)}() {
			return ${l};
		}
${end}
		public String getSource() {
			return PARSER_SOURCE;
		}
	}
${end}

${template TextSourceClass-}
	public static class TextSource {

		private final String file;
		private final int initialLine;
		private final char[] contents;
		private int[] lineoffset;

		public TextSource(String file, char[] contents, int initialLine) {
			this.file = file;
			this.initialLine = initialLine;
			this.contents = contents;
		}

		public String getFile() {
			return file;
		}

		public int getInitialLine() {
			return initialLine;
		}

		public java.io.@Reader getStream() {
			return new java.io.@CharArrayReader(contents);
		}

		public String getLocation(int offset) {
			return file + "," + lineForOffset(offset);
		}

		public String getText(int start, int end) {
			if (start < 0 || start > contents.length || end > contents.length || start > end) {
				return "";
			}
			return new String(contents, start, end - start);
		}

		public int lineForOffset(int offset) {
			if (lineoffset == null) {
				lineoffset = getLineOffsets(contents);
			}
			int line = java.util.@Arrays.binarySearch(lineoffset, offset);
			return initialLine + (line >= 0 ? line : -line - 2);
		}

		public int columnForOffset(int offset) {
			if (lineoffset == null) {
				lineoffset = getLineOffsets(contents);
			}
			int line = java.util.@Arrays.binarySearch(lineoffset, offset);
			return offset >= 0 ? offset - lineoffset[line >= 0 ? line : -line - 2] : 0;
		}

		public char[] getContents() {
			return contents;
		}
	}
${end}

${template getLineOffsets-}
	private static int[] getLineOffsets(char[] contents) {
		int size = 1;
		for (int i = 0; i < contents.length; i++) {
			if (contents[i] == '\n') {
				size++;
			} else if (contents[i] == '\r') {
				if (i + 1 < contents.length && contents[i + 1] == '\n') {
					i++;
				}
				size++;
			}
		}
		int[] result = new int[size];
		result[0] = 0;
		int e = 1;
		for (int i = 0; i < contents.length; i++) {
			if (contents[i] == '\n') {
				result[e++] = i + 1;
			} else if (contents[i] == '\r') {
				if (i + 1 < contents.length && contents[i + 1] == '\n') {
					i++;
				}
				result[e++] = i + 1;
			}
		}
		if (e != size) {
			throw new IllegalStateException();
		}
		return result;
	}
${end}