${template main-}
${file 'parser.go'-}
${call go.header-}
${call parser-}
${end-}
${file 'parser_tables.go'-}
${call go.header-}
${call parserTables-}
${end-}
${if self->eventBased()-}
${file 'listener.go'-}
${call go.header-}
${call listener-}
${end-}
${end-}
${end}

${template parser-}
package ${opts.lang}

import (
	"fmt"
${if opts.genast-}
	"${opts.package}/ast"
${end-}
${call imports-}
)

// Parser is a table-driven LALR parser for ${opts.lang}.
type Parser struct {
${if self->eventBased()-}
	err      ErrorHandler
	listener Listener
${else-}
	err ErrorHandler
${end-}

	stack []node
	lexer *Lexer
	next  symbol
}

type symbol struct {
	symbol    int32
	offset    int
	endoffset int
}

type node struct {
	sym   symbol
	state ${self->stateType()}
${if !self->eventBased()-}
	value ${self->valueType()}
${end-}
}

func (p *Parser) Init(err ErrorHandler${if self->eventBased()}, l Listener${end}) {
	p.err = err
${if self->eventBased()-}
	p.listener = l
${end-}
}

const (
	startStackSize = 512
	noToken        = int32(UNAVAILABLE)
	eoiToken       = int32(EOI)
	debugSyntax    = false
)
${foreach inp in syntax.input.select(it|it.requested)}
func (p *Parser) Parse${self->util.onlyOneUserInput() ? '' : util.toFirstUpper(inp.target.id)}(lexer *Lexer) ${if self->eventBased()}bool${else}(bool, ${if inp.target->go.type()}${inp.target->go.type()}${else}${self->valueType()}${end})${end} {
${if !self->eventBased() && inp.target->go.type()-}
	ok, v := p.parse(${inp.index}, ${parser.finalStates[inp.index]}, lexer)
	val, _ := v.(${inp.target->go.type()})
	return ok, val
${else-}
	return p.parse(${inp.index}, ${parser.finalStates[inp.index]}, lexer)
${end-}
}
${end-}

func (p *Parser) parse(start, end ${self->stateType()}, lexer *Lexer) ${if self->eventBased()}bool${else}(bool, ${self->valueType()})${end} {
	if cap(p.stack) < startStackSize {
		p.stack = make([]node, 0, startStackSize)
	}
	state := start
${if self->hasRecovering()}	recovering := 0
${end-}

	p.stack = append(p.stack[:0], node{state: state})
	p.lexer = lexer
	p.next.symbol = int32(lexer.Next())
	p.next.offset, p.next.endoffset = lexer.Pos()

	for state != end {
		action := tmAction[state]
${if self->needActionsTable()-}
		if action < -2 {
			// Lookahead is needed.
			if p.next.symbol == noToken {
				p.next.symbol = int32(p.lexer.Next())
				p.next.offset, p.next.endoffset = p.lexer.Pos()
			}
			action = lalr(action, p.next.symbol)
		}
${end-}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])

			var node node
			node.sym.symbol = tmRuleSymbol[rule]
			if ln == 0 {
				node.sym.offset, _ = lexer.Pos()
				node.sym.endoffset = node.sym.offset
			} else {
				node.sym.offset = p.stack[len(p.stack)-ln].sym.offset
				node.sym.endoffset = p.stack[len(p.stack)-1].sym.endoffset
			}
			p.applyRule(rule, &node, p.stack[len(p.stack)-ln:])
			if debugSyntax {
				fmt.Printf("reduced to: %v\n", Symbol(node.sym.symbol))
			}
			p.stack = p.stack[:len(p.stack)-ln]
			state = gotoState(p.stack[len(p.stack)-1].state, node.sym.symbol)
			node.state = state
			p.stack = append(p.stack, node)

		} else if action == -1 {
			// Shift.
			if p.next.symbol == noToken {
				p.next.symbol = int32(lexer.Next())
				p.next.offset, p.next.endoffset = lexer.Pos()
			}
			state = gotoState(state, p.next.symbol)
			p.stack = append(p.stack, node{
				sym:   p.next,
				state: state,
${if !self->eventBased()-}
				value: lexer.Value(),
${end-}
			})
			if debugSyntax {
				fmt.Printf("shift: %v (%s)\n", Symbol(p.next.symbol), lexer.Text())
			}
			if state != -1 && p.next.symbol != eoiToken {
				p.next.symbol = noToken
			}
${if self->hasRecovering()-}
			if recovering > 0 {
				recovering--
			}
${end-}
		}

		if action == -2 || state == -1 {
${if self->hasRecovering()-}
			if p.recover() {
				state = p.stack[len(p.stack)-1].state
				if recovering == 0 {
					offset, endoffset := lexer.Pos()
					line := lexer.Line()
					p.err(line, offset, endoffset-offset, "syntax error")
				}
				if recovering >= 3 {
					p.next.symbol = int32(p.lexer.Next())
					p.next.offset, p.next.endoffset = lexer.Pos()
				}
				recovering = 4
				continue
			}
			if len(p.stack) == 0 {
				state = start
				p.stack = append(p.stack, node{state: state})
			}
${end-}
			break
		}
	}

	if state != end {
${if self->hasRecovering()-}
		if recovering > 0 {
			return false${if !self->eventBased()}, ${self->valueTypeDefaultVal()}${end}
		}
${end-}
		offset, endoffset := lexer.Pos()
		line := lexer.Line()
		p.err(line, offset, endoffset-offset, "syntax error")
		return false${if !self->eventBased()}, ${self->valueTypeDefaultVal()}${end}
	}

	return true${if !self->eventBased()}, p.stack[len(p.stack)-2].value${end}
}
${if self->hasRecovering()-}

const errSymbol = ${syntax.error.index}

func (p *Parser) recover() bool {
	if p.next.symbol == noToken {
		p.next.symbol = int32(p.lexer.Next())
		p.next.offset, p.next.endoffset = p.lexer.Pos()
	}
	if p.next.symbol == eoiToken {
		return false
	}
	e, _ := p.lexer.Pos()
	s := e
	for len(p.stack) > 0 && gotoState(p.stack[len(p.stack)-1].state, errSymbol) == -1 {
		// TODO cleanup
		p.stack = p.stack[:len(p.stack)-1]
		if len(p.stack) > 0 {
			s = p.stack[len(p.stack)-1].sym.offset
		}
	}
	if len(p.stack) > 0 {
		state := gotoState(p.stack[len(p.stack)-1].state, errSymbol)
		p.stack = append(p.stack, node{
			sym:   symbol{errSymbol, s, e},
			state: state,
		})
		return true
	}
	return false
}
${end-}

${if self->needActionsTable()-}
func lalr(action, next int32) int32 {
	a := -action - 3
	for ; tmLalr[a] >= 0; a += 2 {
		if tmLalr[a] == next {
			break
		}
	}
	return tmLalr[a+1]
}

${end-}
func gotoState(state ${self->stateType()}, symbol int32) ${self->stateType()} {
	min := tmGoto[symbol]
	max := tmGoto[symbol+1] - 1

	for min <= max {
		e := (min + max) >> 1
		i := tmFrom[e]
		if i == state {
			return tmTo[e]
		} else if i < state {
			min = e + 1
		} else {
			max = e - 1
		}
	}
	return -1
}

${if self->needExplicitLookahead()-}
${call lookahead}
${end-}
${call applyRule-}
${end}


${template lookahead-}
func (p *Parser) lookahead(start, end ${self->stateType()}) bool {
	var lexer Lexer = *p.lexer
	lexer.err = IgnoreErrorsHandler

	var allocated [64]node
	state := start
	stack := append(allocated[:0], node{state: state})
	next := p.next.symbol

	for state != end {
		action := tmAction[state]
${if self->needActionsTable()-}
		if action < -2 {
			// Lookahead is needed.
			if next == noToken {
				next = int32(lexer.Next())
			}
			action = lalr(action, next)
		}
${end-}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])

			var node node
			node.sym.symbol = tmRuleSymbol[rule]
			stack = stack[:len(stack)-ln]
			state = gotoState(stack[len(stack)-1].state, node.sym.symbol)
			node.state = state
			stack = append(stack, node)

		} else if action == -1 {
			// Shift.
			if next == noToken {
				next = int32(lexer.Next())
			}
			state = gotoState(state, next)
			stack = append(stack, node{
				sym:   symbol{symbol: next},
				state: state,
			})
			if state != -1 && next != eoiToken {
				next = noToken
			}
		}

		if action == -2 || state == -1 {
			break
		}
	}

	return state == end
}
${end}

${template caseLookaheadRules-}
${foreach rule in parser.lookaheadRules-}
	case ${rule.getIndex()}:
		${foreach c in rule.cases}if ${c.isNegated() ? '!' : ''}p.lookahead(${c.input.index}, ${parser.finalStates[c.input.index]}) /* ${c.input.target.name} */ {
			node.sym.symbol = ${c.target.index} /* ${c.target.name} */;
		} else ${end}{
			node.sym.symbol = ${rule.defaultTarget.index} /* ${rule.defaultTarget.name} */;
		}
		return
${end-}
${end}

${template applyRule-}
func (p *Parser) applyRule(rule int32, node *node, rhs []node) {
${if self->eventBased()-}
${if syntax.rules.exists(r|r.hasSymbolsWithRole()) || self->needExplicitLookahead()-}
	switch rule {
${foreach rule in syntax.rules.select(r|r.hasSymbolsWithRole())-}
	case ${rule.getIndex()}: // ${rule}
${foreach sym in rule.symbolsWithRole()-}
		p.listener.Role(Role_${sym.role}, rhs[${sym.leftOffset}].value)
${end-}
${end-}
${call caseLookaheadRules-}
	}
${end-}
	nt := ruleNodeType[rule]
	if nt == 0 {
		return
	}
${if self->withRoles()-}
	node.value = p.listener.Node(nt, node.sym.offset, node.sym.endoffset)
${else-}
	p.listener(nt, node.sym.offset, node.sym.endoffset)
${end-}
${else if syntax.rules.exists(r|self->hasAction(r))  || self->needExplicitLookahead()-}
	switch rule {
${foreach rule in syntax.rules.select(r|self->hasAction(r))-}
	case ${rule.getIndex()}: // ${rule}
		${util.extractStatements(rule->parserAction('node.value'))-}
${end-}
${call caseLookaheadRules-}
	}
${end-}
}
${end}


${template parserTables-}
package ${opts.lang}

import (
	"fmt"
)
${foreach marker in parser.markers}
${if marker.states.length == 1-}
const ${marker.name}State = ${marker.states[0]}
${else-}
var ${marker.name}States = map[int]bool{
${for i in [0, marker.states.length-1]-}
	${marker.states[i]}: true,
${end-}
}
${end-}
${end-}

// Symbol represents a set of all terminal and non-terminal symbols of the ${opts.lang} language.
type Symbol int

var symbolStr = [...]string{
${for i in [parser.nterms, parser.nsyms-1]-}
	"${parser.symbols[i].name}",
${end-}
}

func (n Symbol) String() string {
	if n < Symbol(terminalEnd) {
		return Token(n).String()
	}
	i := int(n) - int(terminalEnd)
	if i < len(symbolStr) {
		return symbolStr[i]
	}
	return fmt.Sprintf("nonterminal(%d)", n)
}

var tmAction = []int32{
	${util.format(parser.action, 16, 1)},
}

${if self->needActionsTable()-}
var tmLalr = []int32{
	${util.format(parser.lalr, 16, 1)},
}

${end-}
var tmGoto = []int32{
	${util.format(parser.symGoto, 16, 1)},
}

var tmFrom = []${self->stateType()}{
	${util.format(parser.symFrom, 16, 1)},
}

var tmTo = []${self->stateType()}{
	${util.format(parser.symTo, 16, 1)},
}

var tmRuleLen = []int${util.bitsForElement(parser.ruleLength)}{
	${util.format(parser.ruleLength, 16, 1)},
}

var tmRuleSymbol = []int32{
	${util.format(parser.left, 16, 1)},
}
${foreach set in syntax.sets-}

// ${set.set}
var ${set.name} = []int32{
${if set.elements.size() > 0-}
	${util.format(set.elements, 16, 1)},
${end-}
}
${end-}
${end}

${cached query reserve(scope) =
	util.uniqueId(util.toCamelCase(self, true)->go.escapeGoReserved(), scope)}

${cached query rangeTypeName() =
    rangeType = self.rangeType(),
    rangeType == '' ? '' : rangeType->reserve('__rangeTypes__')}


${template listener-}
package ${opts.lang}

import "fmt"

type NodeType int
${if self->withRoles()-}
type NodeRole int
${end-}

${if self->withRoles()-}
type Listener interface {
	Node(t NodeType, offset, endoffset int) int
	Role(r NodeRole, node int)
}
${else-}
type Listener func(t NodeType, offset, endoffset int)
${end-}

const (
${foreach rangeType in syntax.rules.collectUnique(r|r->rangeTypeName()).select(it|it != '')-}
	${rangeType}${if index == 0} NodeType = iota + 1${end}
${end-}
${foreach extraType in self->additionalNodeTypes()-}
	${extraType}
${end-}
	NodeTypeMax
)
${if self->withRoles()-}

const (
${foreach role in syntax.rules.collect(r|r.symbolsWithRole()).collectUnique(r|r.role).sort(r|r)-}
	Role_${role}${if index == 0} NodeRole = iota + 1${end}
${end-}
)
${end-}

var ruleNodeType = [...]NodeType{
${foreach rule in syntax.rules-}
	${v = rule->rangeTypeName(), v == '' ? 0 : v}, // ${rule}
${end-}
}

var nodeTypeStr = [...]string{
	"NONE",
${foreach rangeType in syntax.rules.collectUnique(r|r->rangeTypeName()).select(it|it != '')-}
	"${rangeType}",
${end-}
${foreach extraType in self->additionalNodeTypes()-}
	"${extraType}",
${end-}
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}
${end}


${query needActionsTable() = parser.lalr.size() > 0}

${query needExplicitLookahead() = parser.lookaheadRules.size() > 0}

${cached query hasRecovering() = syntax.error}

${query hasAction(rule) = rule.getAction() || opts.genast && self->go_ast.astcode(rule)}

${template parserAction($)-}
${if getAction()-}
${eval getAction()}
${else-}
${eval context->go_ast.astcode(self), '#[generated action for ' + self + ']'}
${end-}
${end}


${template imports}${end}

${cached query eventBased() = opts.eventBased && !opts.genast}

${cached query withRoles() = self->eventBased() && syntax.rules.exists(r|r.hasSymbolsWithRole()) }

${query additionalNodeTypes() = []}

${query valueType() = self->eventBased() ? 'int' : 'interface{}' }

${query valueTypeDefaultVal() = self->eventBased() ? '0' : 'nil' }

${cached query stateType() = parser.statesCount < 127 ? 'int8' : parser.statesCount < 65535 ? 'int16' : 'int32' }