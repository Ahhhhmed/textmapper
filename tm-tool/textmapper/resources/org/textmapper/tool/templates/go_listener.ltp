${template main-}
${if self->go_parser.eventBased()-}
${file 'listener.go'-}
${call go.header-}
${call listener-}
${end-}
${end-}
${end}


${template listener-}
package ${self->go.package()}

import "fmt"

type ${self->nodeType()} int

type Listener func(t ${self->nodeType()}, offset, endoffset int)

const (
${foreach rangeType in syntax.rules.collectUnique(r|r.rangeType()).select(it|it != '')-}
	${rangeType->asRangeTypeName()}${if index == 0} ${self->nodeType()} = iota + 1${end}${call typedescr(rangeType)}
${end-}
${foreach extraType in opts.extraTypes-}
	${extraType->asRangeTypeName()}
${end-}
${foreach name in opts.reportTokens.collect(it|it->go_token.tokenNodeName())-}
	${name->asRangeTypeName()}
${end-}
	${self->nodeType()}Max
)

${call categories-}
var rule${self->nodeType()} = [...]${self->nodeType()}{
${foreach rule in syntax.rules-}
	${v = rule.rangeType(), v == '' ? 0 : v->nodeTypeValueRef()}, // ${rule}
${end-}
}

var nodeTypeStr = [...]string{
	"NONE",
${foreach rangeType in syntax.rules.collectUnique(r|r.rangeType()).select(it|it != '')-}
	"${rangeType->nodeTypeValueString()}",
${end-}
${foreach extraType in opts.extraTypes-}
	"${extraType->nodeTypeValueString()}",
${end-}
${foreach name in opts.reportTokens.collect(it|it->go_token.tokenNodeName())-}
	"${name->nodeTypeValueString()}",
${end-}
}

func (t ${self->nodeType()}) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}
${end}


${query typedescr(rangeType) =
  signature = opts.eventFields
    ? syntax.rangeFields(rangeType).collect(it | it.toString())->util.join(' ')
    : '',
  signature.isEmpty() ? '' : '  // ' + signature }


${template categories-}
${foreach cat in syntax.categories.sort(it|it).select(it|it != 'TokenSet' || syntax.categoryTypes(it).length > 0)-}
var ${cat->asRangeTypeName()} = []NodeType{
${foreach type in syntax.categoryTypes(cat)-}
    ${type->nodeTypeValueRef()},
${end-}
}

${end-}
${end}


${cached query reserve(scope) =
	util.uniqueId(util.toCamelCase(self, true)->go.escapeGoReserved(), scope)}

${cached query asRangeTypeName() =
    self->reserve('__rangeTypes__')}

${query nodeType() = 'NodeType'}

${query nodeTypeRef() = self->nodeType()}
${query nodeTypeValueRef() = self->asRangeTypeName()}
${query nodeTypeValueString() = self->asRangeTypeName()}
