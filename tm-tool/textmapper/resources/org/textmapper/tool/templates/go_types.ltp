${template main-}
${if self->go_parser.eventBased() && opts.eventFields-}
${file self->astFilename()-}
${call unit-}
${end-}
${file self->factoryFilename()-}
${call factory-}
${end-}
${end-}
${end}

${template unit-}
${call go.header-}
package ${call package}

${call imports-}
${call wrappedTypeTempl-}
${call interfaces-}
${call types-}
${end}

${template imports-}
import (
	"${self->go.importPackage()}"
	"${self->go_filters.importPackage()}"
)

${end}

${template factory-}
${call go.header-}
package ${call package}

${call factoryImports-}
func To${self->baseNode()}(node Node) ${self->baseNode()} {
	if node == nil {
		return nil
	}
	switch node.Type() {
${foreach rangeType in syntax.rules.collectUnique(r|r.rangeType()).select(it|it != '').sort(it|it)-}
	case ${rangeType->nodeTypeValueRef()}:
		return &${rangeType->asRangeTypeName()}{node}
${end-}
${if tokens = opts.reportTokens
                   .collect(it|it->go_token.tokenNodeName()->nodeTypeValueRef())->util.join(', '),
     tokens != '' -}
	case ${tokens}:
		return &Token{node}
${end-}
${call customRules-}
	}
	log.Fatalf("unknown node type %v\n", node.Type())
	return nil
}
${end}

${template factoryImports-}
import (
	"log"
	"${self->go.importPackage()}"
)

${end}


${template wrappedTypeTempl-}
type Node interface {
	Type() ${self->nodeTypeRef()}
	Child(filter ...${self->nodeFilterTypeRef()}) Node
	Children(filter ...${self->nodeFilterTypeRef()}) []Node
}

${end}

${template interfaces-}
// Interfaces.

type ${self->baseNode()} interface {
	${self->baseNode()->asInterfaceMethod()}()
}

${if syntax.categoryTypes('TokenSet').length > 0-}
type Token struct {
	${self->wrappedType()}
}

${end-}
// All types implement ${self->baseNode()}.
${foreach rangeType in syntax.rules.collectUnique(r|r.rangeType()).select(it|it != '').sort(it|it)-}
func (${rangeType->asRangeTypeName()}) ${self->baseNode()->asInterfaceMethod()}() {}
${end-}
${if syntax.categoryTypes('TokenSet').length > 0-}
func (Token) ${self->baseNode()->asInterfaceMethod()}() {}
${end-}

${foreach cat in syntax.categories.sort(it|it).select(it|it != 'TokenSet')-}
type ${cat->asRangeTypeName()} interface {
	${cat->asInterfaceMethod()}()
}

// ${cat->asInterfaceMethod()}() ensures that only the following types can be
// assigned to ${cat->asRangeTypeName()}.
//
${foreach type in syntax.categoryTypes(cat)-}
func (${type->asRangeTypeName()}) ${cat->asInterfaceMethod()}() {}
${end-}

${end-}
${end}

${template types-}
// Types.

${foreach rangeType in syntax.rules.collectUnique(r|r.rangeType()).select(it|it != '').sort(it|it)-}
${call type(rangeType)-}
${end-}

${end}

${template type(rangeType)-}
type ${rangeType->asRangeTypeName()} struct {
	${self->wrappedType()}
}
${foreach field in syntax.rangeFields(rangeType)}
func (n ${rangeType->asRangeTypeName()}) ${field->asGetterName()}() ${call getterType(field)} {
${call getterImpl(field)-}
}
${end}
${end}


${cached query needPtr(field) =
  field.interfaceType ? false :
  field.isNullable() && !field.isList() && field.types.length == 1 }

${cached query getterType(field) =
  (field.isList() ? '[]' : '') +
  (self->needPtr(field) ? '*' : '') +
   self->getterInnerType(field) }



${cached query isTokenType(name) =
    syntax.categoryTypes('TokenSet').contains(name) }

${cached query getterInnerType(field) =
  field.interfaceType ? field.interfaceType->asRangeTypeName() :
  field.types.forAll(t|self->isTokenType(t)) ? 'Token' :
  field.types.length == 1
     ? field.types.first()->asRangeTypeName()
     : self->baseNode() }

${cached query isOneType(field) = field.types.length == 1 }

${query fieldFilterInternal(field) =
  field.interfaceType ? field.interfaceType->nodeTypeFilterRef() :
  field.types.length == 1 ? field.types.first()->nodeTypeFilterRef() :
  self->go_filters.package() + '.OneOf(' +
          field.types.collect(it|it->nodeTypeValueRef())->util.join(', ') + ')'}

${query fieldFilter(field) =
  after = field.comesAfterField(),
  (after ? self->fieldFilter(after) + ', ' : '') + self->fieldFilterInternal(field) }

${template convertNode(field, node)-}
${if self->isOneType(field)-}
${(self->needPtr(field) ? '&' : '') + self->getterInnerType(field)}{${node}}${else-}
To${self->baseNode()}(${node}).(${(self->needPtr(field) ? '*' : '') + self->getterInnerType(field)})${end-}
${end}

${template getterImpl(field)-}
${if field.isList()-}
	nodes := n.Children(${self->fieldFilter(field)})
	var result []${self->getterInnerType(field)} = make([]${self->getterInnerType(field)}, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ${self->convertNode(field, 'node')})
	}
	return result
${else if !field.isNullable()-}
	return ${self->convertNode(field, 'n.Child(' + self->fieldFilter(field) + ')')}
${else-}
	if child := n.Child(${self->fieldFilter(field)}); child != nil {
		return ${self->convertNode(field, 'child')}
	}
	return nil
${end-}
${end}


${query astFilename() = 'ast/ast.go'}
${query factoryFilename() = 'ast/factory.go'}
${query package() = 'ast'}
${query importPackage() = self->go.importPackage() + '/' + self->package()}

${query wrappedType() = 'Node'}
${query baseNode() = util.toCamelCase(opts.lang, true) + 'Node'}

${query asInterfaceMethod() = util.toFirstLower(self->asRangeTypeName()) + 'Node' }

${query asGetterName() = util.toCamelCase(self.name, true)->go.escapeGoReserved()}

${query nodeTypeRef() = context->go.package() + '.' + self->go_listener.nodeTypeRef()}
${query nodeTypeValueRef() = context->go.package() + '.' + self->asRangeTypeName()}
${query nodeTypeFilterRef() = context->go_filters.package() + '.' + self->asRangeTypeName()}
${query asRangeTypeName() = self->go_listener.asRangeTypeName()}

${query nodeFilterTypeRef() = self->go_filters.package() + '.' + self->go_filters.nodeFilterType()}

${template customRules}${end}