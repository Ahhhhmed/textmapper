${template main-}
${file opts.module+'.y'}${call unit('$$')}${end-}
${end}


${template unit($)-}
%{
${call prologue-}
%}
${call declarations-}
%%

${foreach nterm in parser.symbols.select(i|!i.isTerm()) separator '\n'-}
${self->nonterm(nterm)-}
${end-}

%%

${call epilogue-}
${end}


${template nonterm(nterm)-}
${nterm->symbolName()} :
  ${foreach rule in self->nontermRules() separator '\n| '}${call rhs(rule)}${end}
;
${end}

${query nontermRules() = syntax.rules[nterm].sort(it|it.getRight().length == 0 ? 0 : 1)}

${template rhs(rule)-}
${if rule.getRight().length == 0}%empty${else-}
${foreach sym in rule.getRight() separator ' '}${sym.target->symbolName()}${end-}${end-}
${if rule.precedence()} %prec ${rule.precedence()->symbolName()}${end-}
${if rule.codeTemplate()}
			${call bisonAction for rule-}${end-}
${end}

${template lexerAction(rule)-}
${rule.codeTemplate ? rule.codeTemplate : ''-}
${end}

${template parserAction(rule)-}
${if rule.codeTemplate()-}
${call bisonAction for rule-}
${end-}
${end}

${template bisonAction-}
${eval codeTemplate()-}
${end}


${query symText(property) =
	isVal = property == 'value',
	suffix = isVal ? '' : '.' + property,
	self.rightOffset == -1
	? (isVal ? 'null' : '-1')
	: (isVal ? '$' : '@') + (self.isLeft ? '$' : self.leftOffset) + suffix }

${template symAccess(property)-}
${if property == 'value'-}
${symbol->type() ? '((' + symbol->type() + ')' + self->symText(property) + ')' : self->symText(property) -}
${else-}
${self->symText(property)-}
${end-}
${end}

${cached query type() = self.type is LiRawAstType ? self.type : null }

${template prologue-}
#include <stdio.h>
${end}

${template epilogue-}
${end}

${template declarations-}

${assert syntax.input.length <= 1 && syntax.input.forAll(it|it.hasEoi())-}
%start ${self->startSymbol()}

${call tokens-}
${call directives-}
${end}

${template tokens-}
${foreach prio in syntax.priorities-}
%${prio->prioType()} ${foreach term in prio.symbols separator ' '}${term->symbolName()}${end}
${end-}
${foreach term in self->nonprioTerms()-}
%token ${term->symbolName()}
${end-}

${end}

${query prioType() = self.prio == 1 ? 'left' : self.prio == 2 ? 'right' : 'nonassoc'}


${query nonprioTerms() =
	prioTerms = syntax.priorities.collect(it|it.symbols).collectUnique(it|it.index),
	syntax.symbols.select(it|it.isTerm() && it.index > 0 && !prioTerms.contains(it.index))}

${query startSymbol() =
	syntax.input.length == 0 ? 'input' :
	syntax.input.length == 1 ? syntax.input[0].target->symbolName() : ''}


${query symbolName() = self.id}

${template directives-}
%locations
${end}
