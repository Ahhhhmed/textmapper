/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(383,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\250\0\251\0\uffc1\uffff\260\0\uff7b" +
		"\uffff\252\0\253\0\uffff\uffff\243\0\242\0\246\0\255\0\uff15\uffff\uff0d\uffff\uff01" +
		"\uffff\334\0\ufec5\uffff\uffff\uffff\ufebf\uffff\14\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\265\0\uffff\uffff\uffff\uffff\uffff\uffff\261\0\uffff\uffff\uffff\uffff\245" +
		"\0\ufe7f\uffff\221\0\232\0\uffff\uffff\324\0\322\0\231\0\uffff\uffff\ufe1b\uffff" +
		"\uffff\uffff\ufe15\uffff\uffff\uffff\uffff\uffff\3\0\256\0\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\ufddd\uffff\263\0\12\0\333\0\uffff\uffff\uffff\uffff\222" +
		"\0\uffff\uffff\223\0\uffff\uffff\330\0\ufdd7\uffff\uffff\uffff\ufdd1\uffff\uffff" +
		"\uffff\10\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\0\0\224\0\321\0\13\0" +
		"\323\0\uffff\uffff\uffff\uffff\244\0\uffff\uffff\6\0\7\0\uffff\uffff\uffff\uffff" +
		"\ufdcb\uffff\ufdc3\uffff\ufdbd\uffff\41\0\45\0\46\0\47\0\44\0\11\0\uffff\uffff\247" +
		"\0\327\0\2\0\uffff\uffff\ufd7d\uffff\302\0\uffff\uffff\uffff\uffff\uffff\uffff\267" +
		"\0\uffff\uffff\42\0\43\0\uffff\uffff\uffff\uffff\uffff\uffff\ufd75\uffff\66\0\71" +
		"\0\72\0\73\0\uffff\uffff\316\0\ufd37\uffff\16\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\62\0\40\0\50\0\uffff\uffff\31\0\32\0\25\0\26\0\uffff\uffff\23\0\24\0\30\0\33\0\35" +
		"\0\34\0\27\0\uffff\uffff\22\0\ufcf7\uffff\uffff\uffff\113\0\114\0\115\0\uffff\uffff" +
		"\uffff\uffff\ufcb5\uffff\217\0\ufc73\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufc27" +
		"\uffff\ufbed\uffff\110\0\111\0\uffff\uffff\uffff\uffff\67\0\70\0\uffff\uffff\315" +
		"\0\uffff\uffff\63\0\64\0\301\0\17\0\37\0\uffff\uffff\20\0\21\0\ufbb3\uffff\ufb6b" +
		"\uffff\310\0\uffff\uffff\uffff\uffff\124\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\ufb63\uffff\uffff\uffff\uffff\uffff\uffff\uffff\257\0\uffff\uffff\175\0\uffff" +
		"\uffff\312\0\uffff\uffff\ufb17\uffff\313\0\ufacd\uffff\ufac3\uffff\ufa77\uffff\155" +
		"\0\160\0\162\0\ufa27\uffff\156\0\uf9d5\uffff\uf981\uffff\uffff\uffff\157\0\141\0" +
		"\uf929\uffff\140\0\320\0\uffff\uffff\uf921\uffff\104\0\303\0\uf8e7\uffff\uf8e1\uffff" +
		"\uf8db\uffff\uf88f\uffff\uffff\uffff\uf843\uffff\uffff\uffff\uffff\uffff\61\0\36" +
		"\0\uffff\uffff\271\0\uf7f7\uffff\122\0\121\0\uffff\uffff\226\0\227\0\225\0\230\0" +
		"\uffff\uffff\120\0\125\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uf7b1\uffff" +
		"\237\0\uffff\uffff\uffff\uffff\uf7a5\uffff\uffff\uffff\uf759\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\103\0\145\0\uffff\uffff\uf70d\uffff\uf703\uffff\uffff" +
		"\uffff\134\0\137\0\uf6b7\uffff\uf6ad\uffff\154\0\136\0\uffff\uffff\166\0\uffff\uffff" +
		"\201\0\202\0\144\0\161\0\uf65d\uffff\uffff\uffff\220\0\uf60f\uffff\uffff\uffff\305" +
		"\0\106\0\107\0\uffff\uffff\uffff\uffff\uf609\uffff\uffff\uffff\uf5bd\uffff\uf571" +
		"\uffff\uffff\uffff\53\0\273\0\uf525\uffff\307\0\uffff\uffff\117\0\215\0\146\0\147" +
		"\0\233\0\uffff\uffff\uffff\uffff\uffff\uffff\142\0\uffff\uffff\176\0\uffff\uffff" +
		"\uffff\uffff\151\0\uffff\uffff\uffff\uffff\uffff\uffff\uf4e1\uffff\206\0\211\0\uffff" +
		"\uffff\uffff\uffff\163\0\uf4a3\uffff\164\0\143\0\133\0\uf44b\uffff\132\0\135\0\uf441" +
		"\uffff\170\0\171\0\311\0\317\0\105\0\126\0\uf3f1\uffff\102\0\101\0\uffff\uffff\77" +
		"\0\uffff\uffff\uffff\uffff\uf3eb\uffff\uffff\uffff\275\0\uf39f\uffff\uffff\uffff" +
		"\235\0\236\0\uf35d\uffff\uf355\uffff\uffff\uffff\150\0\203\0\uffff\uffff\210\0\205" +
		"\0\uffff\uffff\204\0\uffff\uffff\131\0\uffff\uffff\100\0\76\0\75\0\uffff\uffff\55" +
		"\0\56\0\57\0\60\0\uffff\uffff\277\0\51\0\116\0\uffff\uffff\207\0\uf34d\uffff\uf345" +
		"\uffff\127\0\74\0\54\0\200\0\177\0\uffff\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(3264,
		"\10\262\45\262\46\262\54\262\56\262\57\262\60\262\61\262\62\262\63\262\64\262\65" +
		"\262\66\262\67\262\70\262\71\262\72\262\73\262\74\262\75\262\76\262\77\262\100\262" +
		"\101\262\102\262\103\262\104\262\105\262\106\262\uffff\ufffe\2\uffff\3\uffff\23\uffff" +
		"\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100" +
		"\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\47\uffff\50\uffff\51\uffff\24\336\uffff\ufffe\31\uffff\0\15\6\15\10\15\11" +
		"\15\17\15\21\15\24\15\25\15\26\15\27\15\30\15\32\15\33\15\34\15\36\15\41\15\43\15" +
		"\44\15\45\15\46\15\52\15\53\15\55\15\56\15\57\15\60\15\61\15\62\15\63\15\64\15\65" +
		"\15\66\15\67\15\70\15\71\15\72\15\73\15\74\15\75\15\76\15\77\15\100\15\101\15\102" +
		"\15\103\15\104\15\105\15\106\15\110\15\uffff\ufffe\25\uffff\104\uffff\17\266\uffff" +
		"\ufffe\20\uffff\17\254\25\254\26\254\104\254\uffff\ufffe\54\uffff\10\264\45\264\46" +
		"\264\56\264\57\264\60\264\61\264\62\264\63\264\64\264\65\264\66\264\67\264\70\264" +
		"\71\264\72\264\73\264\74\264\75\264\76\264\77\264\100\264\101\264\102\264\103\264" +
		"\104\264\105\264\106\264\uffff\ufffe\21\uffff\24\335\uffff\ufffe\2\uffff\3\uffff" +
		"\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77" +
		"\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\47" +
		"\uffff\50\uffff\32\326\uffff\ufffe\31\uffff\13\13\22\13\35\13\6\15\11\15\17\15\21" +
		"\15\25\15\26\15\27\15\32\15\33\15\34\15\36\15\41\15\43\15\44\15\45\15\46\15\52\15" +
		"\53\15\55\15\56\15\57\15\60\15\61\15\62\15\63\15\64\15\65\15\66\15\67\15\70\15\71" +
		"\15\72\15\73\15\74\15\75\15\76\15\77\15\100\15\101\15\102\15\103\15\104\15\105\15" +
		"\106\15\110\15\uffff\ufffe\21\uffff\32\325\uffff\ufffe\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\26\332\uffff\ufffe\10\uffff\0" +
		"\1\uffff\ufffe\21\uffff\26\331\uffff\ufffe\104\uffff\17\266\uffff\ufffe\13\uffff" +
		"\22\13\25\13\uffff\ufffe\25\uffff\22\270\uffff\ufffe\6\uffff\23\uffff\45\uffff\46" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\0\4\10\4" +
		"\uffff\ufffe\16\uffff\21\65\24\65\uffff\ufffe\6\uffff\44\uffff\45\uffff\46\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\0\5\uffff\ufffe" +
		"\44\uffff\22\214\25\214\43\214\46\214\55\214\56\214\57\214\60\214\61\214\62\214\63" +
		"\214\64\214\65\214\66\214\67\214\70\214\71\214\72\214\73\214\74\214\75\214\76\214" +
		"\77\214\100\214\101\214\102\214\103\214\104\214\105\214\106\214\uffff\ufffe\1\uffff" +
		"\0\52\6\52\10\52\23\52\45\52\46\52\56\52\57\52\60\52\61\52\62\52\63\52\64\52\65\52" +
		"\66\52\67\52\70\52\71\52\72\52\73\52\74\52\75\52\76\52\77\52\100\52\101\52\102\52" +
		"\103\52\104\52\105\52\106\52\uffff\ufffe\111\uffff\22\216\25\216\43\216\44\216\46" +
		"\216\55\216\56\216\57\216\60\216\61\216\62\216\63\216\64\216\65\216\66\216\67\216" +
		"\70\216\71\216\72\216\73\216\74\216\75\216\76\216\77\216\100\216\101\216\102\216" +
		"\103\216\104\216\105\216\106\216\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43" +
		"\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\110\uffff\11\314\17\314\uffff\ufffe\46\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\304\22\304\uffff\ufffe" +
		"\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77" +
		"\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7" +
		"\304\22\304\uffff\ufffe\16\uffff\0\272\3\272\6\272\10\272\23\272\25\272\45\272\46" +
		"\272\56\272\57\272\60\272\61\272\62\272\63\272\64\272\65\272\66\272\67\272\70\272" +
		"\71\272\72\272\73\272\74\272\75\272\76\272\77\272\100\272\101\272\102\272\103\272" +
		"\104\272\105\272\106\272\110\272\uffff\ufffe\74\uffff\17\123\21\123\uffff\ufffe\6" +
		"\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\314" +
		"\26\314\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\46\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11" +
		"\314\17\314\26\314\uffff\ufffe\6\uffff\11\314\17\314\26\314\uffff\ufffe\6\uffff\25" +
		"\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\314\17\314\26\314\uffff" +
		"\ufffe\41\uffff\6\152\11\152\17\152\25\152\26\152\27\152\43\152\44\152\45\152\46" +
		"\152\52\152\55\152\56\152\57\152\60\152\61\152\62\152\63\152\64\152\65\152\66\152" +
		"\67\152\70\152\71\152\72\152\73\152\74\152\75\152\76\152\77\152\100\152\101\152\102" +
		"\152\103\152\104\152\105\152\106\152\110\152\uffff\ufffe\36\uffff\6\165\11\165\17" +
		"\165\25\165\26\165\27\165\41\165\43\165\44\165\45\165\46\165\52\165\55\165\56\165" +
		"\57\165\60\165\61\165\62\165\63\165\64\165\65\165\66\165\67\165\70\165\71\165\72" +
		"\165\73\165\74\165\75\165\76\165\77\165\100\165\101\165\102\165\103\165\104\165\105" +
		"\165\106\165\110\165\uffff\ufffe\53\uffff\6\167\11\167\17\167\25\167\26\167\27\167" +
		"\36\167\41\167\43\167\44\167\45\167\46\167\52\167\55\167\56\167\57\167\60\167\61" +
		"\167\62\167\63\167\64\167\65\167\66\167\67\167\70\167\71\167\72\167\73\167\74\167" +
		"\75\167\76\167\77\167\100\167\101\167\102\167\103\167\104\167\105\167\106\167\110" +
		"\167\uffff\ufffe\33\uffff\34\uffff\6\173\11\173\17\173\25\173\26\173\27\173\36\173" +
		"\41\173\43\173\44\173\45\173\46\173\52\173\53\173\55\173\56\173\57\173\60\173\61" +
		"\173\62\173\63\173\64\173\65\173\66\173\67\173\70\173\71\173\72\173\73\173\74\173" +
		"\75\173\76\173\77\173\100\173\101\173\102\173\103\173\104\173\105\173\106\173\110" +
		"\173\uffff\ufffe\11\uffff\17\130\26\130\uffff\ufffe\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\304\22\304\uffff\ufffe\22\uffff" +
		"\7\306\uffff\ufffe\22\uffff\7\306\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\314\17\314\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\314\17" +
		"\314\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\110\uffff\11\314\17\314\uffff\ufffe\3\uffff\0\274\6\274\10\274\23\274\25\274\45" +
		"\274\46\274\56\274\57\274\60\274\61\274\62\274\63\274\64\274\65\274\66\274\67\274" +
		"\70\274\71\274\72\274\73\274\74\274\75\274\76\274\77\274\100\274\101\274\102\274" +
		"\103\274\104\274\105\274\106\274\110\274\uffff\ufffe\14\uffff\15\uffff\12\234\24" +
		"\234\42\234\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\52\uffff\55" +
		"\uffff\110\uffff\11\314\26\314\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43" +
		"\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\110\uffff\11\314\26\314\uffff\ufffe\6\uffff\11\314\17" +
		"\314\26\314\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110" +
		"\uffff\11\314\17\314\26\314\uffff\ufffe\6\uffff\11\314\17\314\26\314\uffff\ufffe" +
		"\41\uffff\6\153\11\153\17\153\25\153\26\153\27\153\43\153\44\153\45\153\46\153\52" +
		"\153\55\153\56\153\57\153\60\153\61\153\62\153\63\153\64\153\65\153\66\153\67\153" +
		"\70\153\71\153\72\153\73\153\74\153\75\153\76\153\77\153\100\153\101\153\102\153" +
		"\103\153\104\153\105\153\106\153\110\153\uffff\ufffe\6\uffff\23\uffff\25\uffff\27" +
		"\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\314\17\314\26\314\uffff\ufffe\22" +
		"\uffff\7\306\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45" +
		"\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\110\uffff\11\314\17\314\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\314\17\314\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\314\17" +
		"\314\uffff\ufffe\25\uffff\0\276\6\276\10\276\23\276\45\276\46\276\56\276\57\276\60" +
		"\276\61\276\62\276\63\276\64\276\65\276\66\276\67\276\70\276\71\276\72\276\73\276" +
		"\74\276\75\276\76\276\77\276\100\276\101\276\102\276\103\276\104\276\105\276\106" +
		"\276\110\276\uffff\ufffe\31\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\11\15\26\15\41\15\uffff\ufffe\33\uffff\34\uffff\6\174" +
		"\11\174\17\174\25\174\26\174\27\174\36\174\41\174\43\174\44\174\45\174\46\174\52" +
		"\174\53\174\55\174\56\174\57\174\60\174\61\174\62\174\63\174\64\174\65\174\66\174" +
		"\67\174\70\174\71\174\72\174\73\174\74\174\75\174\76\174\77\174\100\174\101\174\102" +
		"\174\103\174\104\174\105\174\106\174\110\174\uffff\ufffe\6\uffff\11\314\17\314\26" +
		"\314\uffff\ufffe\41\172\6\172\11\172\17\172\25\172\26\172\27\172\43\172\44\172\45" +
		"\172\46\172\52\172\55\172\56\172\57\172\60\172\61\172\62\172\63\172\64\172\65\172" +
		"\66\172\67\172\70\172\71\172\72\172\73\172\74\172\75\172\76\172\77\172\100\172\101" +
		"\172\102\172\103\172\104\172\105\172\106\172\110\172\uffff\ufffe\21\uffff\7\112\uffff" +
		"\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106" +
		"\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff" +
		"\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff" +
		"\11\314\17\314\uffff\ufffe\110\uffff\0\300\6\300\10\300\23\300\45\300\46\300\56\300" +
		"\57\300\60\300\61\300\62\300\63\300\64\300\65\300\66\300\67\300\70\300\71\300\72" +
		"\300\73\300\74\300\75\300\76\300\77\300\100\300\101\300\102\300\103\300\104\300\105" +
		"\300\106\300\uffff\ufffe\12\241\42\uffff\24\241\uffff\ufffe\12\240\42\240\24\240" +
		"\uffff\ufffe\11\212\41\uffff\26\212\uffff\ufffe\11\213\41\213\26\213\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(168,
		"\0\2\4\25\44\44\44\73\103\105\112\115\121\122\123\125\146\153\167\202\231\240\311" +
		"\326\345\350\361\370\377\u0102\u0103\u0108\u010b\u0110\u011b\u011e\u0133\u014b\u0163" +
		"\u01b8\u01c5\u01d2\u01d8\u01d9\u01da\u01db\u01f0\u0246\u029f\u02f5\u034b\u03a4\u03fa" +
		"\u0450\u04a6\u04fc\u0552\u05a8\u05fe\u0654\u06aa\u0700\u0756\u07b1\u080a\u0863\u08b9" +
		"\u090f\u0965\u09bc\u0a12\u0a68\u0a68\u0a79\u0a7a\u0a7b\u0a7c\u0a7d\u0a7e\u0a80\u0a81" +
		"\u0a82\u0aaa\u0ad0\u0add\u0ae2\u0ae4\u0ae8\u0aea\u0aeb\u0aed\u0aef\u0af1\u0af2\u0af3" +
		"\u0af4\u0af6\u0af8\u0afa\u0afc\u0afd\u0aff\u0b01\u0b05\u0b08\u0b09\u0b0b\u0b0d\u0b0f" +
		"\u0b11\u0b12\u0b1c\u0b27\u0b32\u0b3d\u0b50\u0b5f\u0b6b\u0b7b\u0b8b\u0b9d\u0bb1\u0bc5" +
		"\u0bd5\u0be9\u0bfe\u0c03\u0c07\u0c1a\u0c2e\u0c30\u0c38\u0c3b\u0c3d\u0c3e\u0c42\u0c45" +
		"\u0c48\u0c4e\u0c50\u0c5d\u0c60\u0c63\u0c74\u0c8c\u0c8d\u0c8e\u0c90\u0c91\u0c92\u0c93" +
		"\u0c94\u0c95\u0c96\u0c99\u0c9c\u0c9d\u0ca7\u0cba\u0ccd\u0cce\u0ccf\u0cd0\u0cd1\u0cd2" +
		"\u0cd3\u0cd4\u0cd5");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(3285,
		"\u017b\u017c\150\217\1\6\26\36\41\63\72\73\110\117\151\266\371\u010d\u0125\u012b" +
		"\u012c\1\6\26\41\57\72\73\110\117\266\345\u010d\u0125\u012b\u012c\107\131\140\161" +
		"\230\271\303\305\306\333\334\336\370\372\u0102\u0103\u0107\u0112\u011c\u011e\u011f" +
		"\u0141\u0152\160\240\241\244\335\337\340\u0120\40\66\322\u013a\u015e\u0174\u0175" +
		"\366\u0159\u015a\65\127\276\355\364\364\145\257\34\62\106\122\246\262\265\300\355" +
		"\u011a\u011b\u011d\u014e\u0150\u0151\u0156\u0169\21\151\205\215\254\24\52\53\101" +
		"\147\151\205\215\254\262\325\u014b\46\77\153\276\302\317\331\332\u0101\u0115\u013b" +
		"\1\6\41\107\110\117\131\151\205\215\230\254\266\271\333\334\336\372\u0112\u011c\u011e" +
		"\u011f\u0152\25\147\151\205\215\254\366\20\30\32\130\151\160\205\215\230\241\244" +
		"\254\271\273\274\303\306\317\333\334\336\340\370\372\373\374\375\376\u0103\u0104" +
		"\u010b\u0112\u011c\u011e\u011f\u0123\u0135\u0136\u0152\u0161\u0163\56\102\104\200" +
		"\205\215\254\367\u0134\u013a\u015b\u015e\u016e\230\271\303\306\333\334\336\370\372" +
		"\u0103\u0112\u011c\u011e\u011f\u0152\360\371\u0132\10\43\151\160\205\215\244\254" +
		"\u0137\52\54\151\205\215\254\325\151\205\215\254\316\u013d\u0172\316\u013d\u0172" +
		"\276\151\205\215\254\313\270\u012d\u012f\373\u0135\u0136\u0161\u0163\151\205\215" +
		"\254\307\u0108\u013a\u0144\u015e\u0174\u0175\366\u0159\u015a\230\271\303\306\317" +
		"\333\334\336\370\372\374\375\376\u0103\u0104\u010b\u0112\u011c\u011e\u011f\u0152" +
		"\140\151\161\170\205\215\230\254\271\302\303\306\333\334\336\370\372\u0103\u010b" +
		"\u0112\u011c\u011e\u011f\u0152\1\6\40\41\110\117\131\157\161\230\266\271\306\333" +
		"\334\336\370\372\u0103\u0112\u011c\u011e\u011f\u0152\1\2\6\13\26\31\35\36\40\41\55" +
		"\72\73\75\107\110\117\120\126\131\140\144\151\157\161\166\172\173\174\205\215\220" +
		"\224\225\230\231\233\234\235\254\265\266\270\271\272\303\306\317\326\333\334\336" +
		"\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113" +
		"\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161" +
		"\u0163\u0165\1\6\26\41\72\73\110\117\266\u010d\u0125\u012b\u012c\1\6\26\41\72\73" +
		"\110\117\266\u010d\u0125\u012b\u012c\1\6\41\110\117\266\370\315\22\230\271\303\306" +
		"\317\333\334\336\370\372\374\375\376\u0103\u0104\u010b\u0112\u011c\u011e\u011f\u0152" +
		"\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\125\126\131\140\144\151\157" +
		"\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235\254\265\266\270\271" +
		"\272\303\306\317\326\333\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103" +
		"\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135" +
		"\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75" +
		"\107\110\117\120\126\131\140\144\151\157\160\161\166\172\173\174\205\215\220\224" +
		"\225\230\231\233\234\235\241\244\254\265\266\270\271\272\303\306\317\326\333\334" +
		"\336\340\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112" +
		"\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b" +
		"\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131" +
		"\140\144\151\157\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235\254" +
		"\265\266\267\270\271\272\303\306\317\326\333\334\336\343\350\361\362\363\370\372" +
		"\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125" +
		"\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31" +
		"\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161\166\172\173" +
		"\174\205\215\220\224\225\230\231\233\234\235\254\265\266\267\270\271\272\303\306" +
		"\317\326\333\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b" +
		"\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137" +
		"\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117" +
		"\120\126\131\140\144\151\157\160\161\166\172\173\174\205\215\220\224\225\230\231" +
		"\233\234\235\241\244\254\265\266\270\271\272\303\306\317\326\333\334\336\340\343" +
		"\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116" +
		"\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163" +
		"\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151" +
		"\156\157\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235\254\265\266" +
		"\270\271\272\303\306\317\326\333\334\336\343\350\361\362\363\370\372\373\374\375" +
		"\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f" +
		"\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41" +
		"\55\72\73\75\107\110\117\120\126\131\140\144\151\156\157\161\166\172\173\174\205" +
		"\215\220\224\225\230\231\233\234\235\254\265\266\270\271\272\303\306\317\326\333" +
		"\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112" +
		"\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b" +
		"\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131" +
		"\140\144\151\156\157\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235" +
		"\254\265\266\270\271\272\303\306\317\326\333\334\336\343\350\361\362\363\370\372" +
		"\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125" +
		"\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31" +
		"\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\156\157\161\166\172" +
		"\173\174\205\215\220\224\225\230\231\233\234\235\254\265\266\270\271\272\303\306" +
		"\317\326\333\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b" +
		"\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137" +
		"\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117" +
		"\120\126\131\140\144\151\156\157\161\166\172\173\174\205\215\220\224\225\230\231" +
		"\233\234\235\254\265\266\270\271\272\303\306\317\326\333\334\336\343\350\361\362" +
		"\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e" +
		"\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1" +
		"\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161" +
		"\166\172\173\174\205\215\220\224\225\230\231\233\234\235\254\263\265\266\270\271" +
		"\272\303\306\317\326\333\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103" +
		"\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135" +
		"\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75" +
		"\107\110\117\120\126\131\140\144\151\157\161\166\172\173\174\205\215\220\224\225" +
		"\230\231\233\234\235\254\263\265\266\270\271\272\303\306\317\326\333\334\336\343" +
		"\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116" +
		"\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163" +
		"\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151" +
		"\157\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235\254\263\265\266" +
		"\270\271\272\303\306\317\326\333\334\336\343\350\361\362\363\370\372\373\374\375" +
		"\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f" +
		"\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41" +
		"\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161\166\172\173\174\205\215" +
		"\220\224\225\230\231\233\234\235\254\263\265\266\270\271\272\303\306\317\326\333" +
		"\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112" +
		"\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b" +
		"\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131" +
		"\140\144\151\157\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235\254" +
		"\260\265\266\270\271\272\303\306\317\326\333\334\336\343\350\361\362\363\370\372" +
		"\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125" +
		"\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31" +
		"\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161\166\172\173" +
		"\174\205\215\220\224\225\230\231\233\234\235\254\265\266\270\271\272\303\306\317" +
		"\326\333\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d" +
		"\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152" +
		"\u0153\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117" +
		"\120\126\131\140\144\151\157\160\161\166\172\173\174\205\215\220\224\225\230\231" +
		"\232\233\234\235\241\244\254\265\266\270\271\272\303\306\317\326\333\334\336\340" +
		"\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113" +
		"\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u0153\u015b" +
		"\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131" +
		"\140\144\151\157\160\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235" +
		"\241\244\254\265\266\270\271\272\303\306\317\326\333\334\336\340\343\350\361\362" +
		"\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e" +
		"\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1" +
		"\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\160" +
		"\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235\241\244\254\265\266" +
		"\270\271\272\303\306\317\326\333\334\336\340\343\350\361\362\363\370\372\373\374" +
		"\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d" +
		"\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36" +
		"\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161\166\172\173\174\205" +
		"\215\220\224\225\230\231\233\234\235\254\265\266\270\271\272\303\306\317\326\333" +
		"\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112" +
		"\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u0153" +
		"\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126" +
		"\131\140\144\151\157\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235" +
		"\254\265\266\270\271\272\303\306\317\326\333\334\336\343\350\361\362\363\370\372" +
		"\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125" +
		"\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u0153\u015b\u0161\u0163\u0165\0\1\2\6" +
		"\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161\166" +
		"\172\173\174\205\215\220\224\225\230\231\233\234\235\254\265\266\270\271\272\303" +
		"\306\317\326\333\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103\u0104" +
		"\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136" +
		"\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\20\26\31\35\36\40\41\55\72\73\75\103" +
		"\107\110\117\120\126\131\140\144\151\157\161\166\172\173\174\205\215\220\224\225" +
		"\230\231\233\234\235\254\265\266\270\271\272\303\306\317\326\333\334\336\343\350" +
		"\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116\u011c" +
		"\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163\u0165" +
		"\1\2\6\13\26\31\35\36\40\41\55\64\72\73\75\107\110\117\120\126\131\140\144\151\157" +
		"\161\166\172\173\174\205\215\220\224\225\230\231\233\234\235\254\265\266\270\271" +
		"\272\303\306\317\326\333\334\336\343\350\361\362\363\370\372\373\374\375\376\u0103" +
		"\u0104\u010b\u010d\u0112\u0113\u0116\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135" +
		"\u0136\u0137\u0152\u015b\u0161\u0163\u0165\1\2\6\13\26\31\35\36\40\41\55\72\73\75" +
		"\107\110\111\117\120\126\131\140\144\151\157\161\166\172\173\174\205\215\220\224" +
		"\225\230\231\233\234\235\254\265\266\270\271\272\303\306\317\326\333\334\336\343" +
		"\350\361\362\363\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112\u0113\u0116" +
		"\u011c\u011e\u011f\u0125\u012d\u012f\u0131\u0135\u0136\u0137\u0152\u015b\u0161\u0163" +
		"\u0165\230\271\303\306\333\334\336\370\372\u0103\u010b\u0112\u011c\u011e\u011f\u0152" +
		"\u0155\226\0\0\40\66\20\103\22\40\26\75\107\126\131\140\161\166\174\224\230\231\234" +
		"\235\270\271\272\303\306\317\326\333\334\336\363\370\372\374\376\u0103\u0104\u010b" +
		"\u0112\u0113\u011c\u011e\u011f\u012d\u012f\u0152\1\6\26\41\72\73\110\117\230\266" +
		"\271\303\306\317\333\334\336\370\372\373\374\375\376\u0103\u0104\u010b\u010d\u0112" +
		"\u011c\u011e\u011f\u0125\u0135\u0136\u0137\u0152\u0161\u0163\144\172\220\225\233" +
		"\265\350\361\362\u0116\u0131\u015b\u0165\130\160\241\244\340\151\205\151\205\215" +
		"\254\150\217\107\107\131\107\131\107\131\257\u0123\u0153\107\131\107\131\173\343" +
		"\126\174\140\140\161\140\161\160\241\244\340\331\332\u0115\156\140\161\140\161\220" +
		"\350\225\u0131\u0116\230\271\333\334\336\372\u011c\u011e\u011f\u0152\230\271\333" +
		"\334\336\372\u0112\u011c\u011e\u011f\u0152\230\271\333\334\336\372\u0112\u011c\u011e" +
		"\u011f\u0152\230\271\333\334\336\372\u0112\u011c\u011e\u011f\u0152\230\271\303\305" +
		"\306\333\334\336\370\372\u0102\u0103\u0107\u0112\u011c\u011e\u011f\u0141\u0152\230" +
		"\271\303\306\333\334\336\370\372\u0103\u0112\u011c\u011e\u011f\u0152\230\271\303" +
		"\333\334\336\372\u0112\u011c\u011e\u011f\u0152\230\271\303\306\333\334\336\370\372" +
		"\u0103\u010b\u0112\u011c\u011e\u011f\u0152\230\271\303\306\333\334\336\370\372\u0103" +
		"\u010b\u0112\u011c\u011e\u011f\u0152\230\271\303\306\317\333\334\336\370\372\u0103" +
		"\u0104\u010b\u0112\u011c\u011e\u011f\u0152\230\271\303\306\317\333\334\336\370\372" +
		"\374\376\u0103\u0104\u010b\u0112\u011c\u011e\u011f\u0152\230\271\303\306\317\333" +
		"\334\336\370\372\374\376\u0103\u0104\u010b\u0112\u011c\u011e\u011f\u0152\230\271" +
		"\303\306\333\334\336\370\372\u0103\u010b\u0112\u011c\u011e\u011f\u0152\230\271\303" +
		"\306\317\333\334\336\370\372\374\376\u0103\u0104\u010b\u0112\u011c\u011e\u011f\u0152" +
		"\230\271\303\306\317\333\334\336\370\372\374\375\376\u0103\u0104\u010b\u0112\u011c" +
		"\u011e\u011f\u0152\373\u0135\u0136\u0161\u0163\373\u0135\u0161\u0163\140\161\230" +
		"\271\302\303\306\333\334\336\370\372\u0103\u010b\u0112\u011c\u011e\u011f\u0152\140" +
		"\161\170\230\271\302\303\306\333\334\336\370\372\u0103\u010b\u0112\u011c\u011e\u011f" +
		"\u0152\160\244\26\75\231\270\363\u0113\u012d\u012f\10\43\u0137\26\75\263\26\72\73" +
		"\u0125\270\u012d\u012f\270\u012d\u012f\1\6\41\110\117\266\55\120\1\6\26\41\72\73" +
		"\110\117\266\u010d\u0125\u012b\u012c\2\13\31\2\13\31\230\271\303\306\333\334\336" +
		"\370\372\u0103\u010b\u0112\u011c\u011e\u011f\u0152\u0155\1\6\40\41\110\117\131\157" +
		"\161\230\266\271\306\333\334\336\370\372\u0103\u0112\u011c\u011e\u011f\u0152\3\22" +
		"\20\103\130\257\345\u0123\u0155\126\234\235\326\331\332\u0115\220\230\271\333\334" +
		"\336\372\u011c\u011e\u011f\u0152\230\271\303\305\306\333\334\336\370\372\u0102\u0103" +
		"\u0107\u0112\u011c\u011e\u011f\u0141\u0152\140\161\230\271\302\303\306\333\334\336" +
		"\370\372\u0103\u010b\u0112\u011c\u011e\u011f\u0152\231\26\26\26\55\55\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(3285,
		"\u017d\u017e\176\176\4\4\4\62\4\106\4\4\4\4\200\4\u0132\4\4\4\4\5\5\5\5\104\5\5\5" +
		"\5\5\u0122\5\5\5\5\125\125\156\156\267\267\267\267\267\267\267\267\267\267\267\267" +
		"\267\267\267\267\267\267\267\230\333\334\336\u011c\u011e\u011f\u0152\64\111\u0112" +
		"\u0161\u0161\u0161\u0161\u012d\u012d\u012d\110\150\374\u0125\u012b\u012c\173\343" +
		"\60\105\124\143\341\347\356\377\u0126\u014c\u014d\u014f\u0166\u0167\u0168\u0171\u0177" +
		"\35\201\201\201\201\41\73\75\120\174\202\202\202\202\350\u0113\u0165\72\117\217\375" +
		"\u0100\u0110\u0116\u0116\u013f\u0116\375\6\6\6\126\6\6\126\203\203\203\270\203\6" +
		"\270\270\270\270\270\270\270\270\270\270\42\175\204\204\204\204\u012e\31\55\57\151" +
		"\205\151\205\205\271\151\151\205\271\372\373\271\271\271\271\271\271\151\271\271" +
		"\u0135\271\271\271\271\271\271\271\271\271\271\u0153\u0135\u0135\271\u0135\u0135" +
		"\103\121\123\252\253\255\342\u0130\u015d\u0162\u0172\u0173\u0178\272\272\272\272" +
		"\272\272\272\272\272\272\272\272\272\272\272\u0127\u0133\u015c\26\26\206\231\206" +
		"\206\231\206\26\74\76\207\207\207\207\u0114\210\210\210\210\u010e\u010e\u0179\u010f" +
		"\u010f\u017a\376\211\211\211\211\u010c\363\363\363\u0136\u0136\u0136\u0136\u0136" +
		"\212\212\212\212\u010b\u010b\u0163\u010b\u0163\u0163\u0163\u012f\u012f\u012f\273" +
		"\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273" +
		"\157\213\157\157\213\213\157\213\157\157\157\157\157\157\157\157\157\157\157\157" +
		"\157\157\157\157\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\43\17" +
		"\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\115\115\171\247\115" +
		"\214\214\171\115\171\43\115\171\115\115\214\171\10\115\43\115\43\43\43\115\43\43" +
		"\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115" +
		"\115\171\u0137\u0137\10\43\171\u0137\u0137\171\11\11\11\11\11\11\11\11\11\11\11\11" +
		"\11\12\12\12\12\12\12\12\12\12\12\12\12\12\13\13\13\13\13\13\u0131\u010d\36\274\274" +
		"\274\274\274\274\274\274\274\274\274\274\274\274\274\274\274\274\274\274\274\10\17" +
		"\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\144\115\127\115\171\214\226\115" +
		"\115\171\247\115\214\214\171\115\171\43\115\171\115\115\214\171\10\115\43\115\43" +
		"\43\43\115\43\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171" +
		"\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17\43\17" +
		"\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\232\115\115\171\247" +
		"\115\214\214\171\115\171\43\115\171\115\115\232\232\214\171\10\115\43\115\43\43\43" +
		"\115\43\43\43\232\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171" +
		"\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17\43\17" +
		"\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\115\115\171\247\115" +
		"\214\214\171\115\171\43\115\171\115\115\214\171\10\361\115\43\115\43\43\43\115\43" +
		"\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10" +
		"\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17\43\17\61\63\65\10" +
		"\77\10\10\115\127\10\10\77\115\127\115\171\214\226\115\115\171\247\115\214\214\171" +
		"\115\171\43\115\171\115\115\214\171\10\362\115\43\115\43\43\43\115\43\43\43\247\171" +
		"\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115\171" +
		"\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17\43\17\61\63\65\10\77\10\10\115" +
		"\127\10\10\77\115\127\115\171\214\226\233\115\115\171\247\115\214\214\171\115\171" +
		"\43\115\171\115\115\233\233\214\171\10\115\43\115\43\43\43\115\43\43\43\233\247\171" +
		"\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115\171" +
		"\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17\43\17\61\63\65\10\77\10\10\115" +
		"\127\10\10\77\115\127\115\171\214\220\226\115\115\171\247\115\214\214\171\115\171" +
		"\43\115\171\115\115\214\171\10\115\43\115\43\43\43\115\43\43\43\247\171\171\171\115" +
		"\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115\171\u0137\u0137" +
		"\10\43\171\u0137\u0137\171\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77" +
		"\115\127\115\171\214\221\226\115\115\171\247\115\214\214\171\115\171\43\115\171\115" +
		"\115\214\171\10\115\43\115\43\43\43\115\43\43\43\247\171\171\171\115\43\43\u0137" +
		"\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137" +
		"\u0137\171\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171" +
		"\214\222\226\115\115\171\247\115\214\214\171\115\171\43\115\171\115\115\214\171\10" +
		"\115\43\115\43\43\43\115\43\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43" +
		"\43\10\43\115\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10" +
		"\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\223\226" +
		"\115\115\171\247\115\214\214\171\115\171\43\115\171\115\115\214\171\10\115\43\115" +
		"\43\43\43\115\43\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115" +
		"\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17\43" +
		"\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\224\226\115\115\171" +
		"\247\115\214\214\171\115\171\43\115\171\115\115\214\171\10\115\43\115\43\43\43\115" +
		"\43\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43" +
		"\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17\43\17\61\63\65" +
		"\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\115\115\171\247\115\214\214" +
		"\171\115\171\43\115\171\115\115\214\351\171\10\115\43\115\43\43\43\115\43\43\43\247" +
		"\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115" +
		"\171\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17\43\17\61\63\65\10\77\10\10" +
		"\115\127\10\10\77\115\127\115\171\214\226\115\115\171\247\115\214\214\171\115\171" +
		"\43\115\171\115\115\214\352\171\10\115\43\115\43\43\43\115\43\43\43\247\171\171\171" +
		"\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115\171\u0137\u0137" +
		"\10\43\171\u0137\u0137\171\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77" +
		"\115\127\115\171\214\226\115\115\171\247\115\214\214\171\115\171\43\115\171\115\115" +
		"\214\353\171\10\115\43\115\43\43\43\115\43\43\43\247\171\171\171\115\43\43\u0137" +
		"\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137" +
		"\u0137\171\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171" +
		"\214\226\115\115\171\247\115\214\214\171\115\171\43\115\171\115\115\214\354\171\10" +
		"\115\43\115\43\43\43\115\43\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43" +
		"\43\10\43\115\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10" +
		"\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\115" +
		"\115\171\247\115\214\214\171\115\171\43\115\171\115\115\214\346\171\10\115\43\115" +
		"\43\43\43\115\43\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115" +
		"\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17\43" +
		"\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\115\115\171\247" +
		"\115\214\214\171\115\171\43\115\171\115\115\214\171\10\115\43\115\43\43\43\115\43" +
		"\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10" +
		"\115\115\171\u0137\u0137\10\43\u016a\171\u0137\u0137\171\10\17\10\17\43\17\61\63" +
		"\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\234\115\115\171\247\115" +
		"\214\214\171\115\171\43\115\326\171\115\115\234\234\214\171\10\115\43\115\43\43\43" +
		"\115\43\43\43\234\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171" +
		"\43\43\43\10\115\115\171\u0137\u0137\10\43\u016b\171\u0137\u0137\171\10\17\10\17" +
		"\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\235\115\115" +
		"\171\247\115\214\214\171\115\171\43\115\171\115\115\235\235\214\171\10\115\43\115" +
		"\43\43\43\115\43\43\43\235\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43" +
		"\115\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17" +
		"\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\236\115\115" +
		"\171\247\115\214\214\171\115\171\43\115\171\115\115\236\236\214\171\10\115\43\115" +
		"\43\43\43\115\43\43\43\236\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43" +
		"\115\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\10\17\10\17" +
		"\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\115\115\171" +
		"\247\115\214\214\171\115\171\43\115\171\115\115\214\171\10\115\43\115\43\43\43\115" +
		"\43\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43" +
		"\10\115\115\171\u0137\u0137\10\43\u016c\171\u0137\u0137\171\10\17\10\17\43\17\61" +
		"\63\65\10\77\10\10\115\127\10\10\77\115\127\115\171\214\226\115\115\171\247\115\214" +
		"\214\171\115\171\43\115\171\115\115\214\171\10\115\43\115\43\43\43\115\43\43\43\247" +
		"\171\171\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115" +
		"\171\u0137\u0137\10\43\u016d\171\u0137\u0137\171\2\10\17\10\17\43\17\61\63\65\10" +
		"\77\10\10\115\127\10\10\77\115\127\115\171\214\226\115\115\171\247\115\214\214\171" +
		"\115\171\43\115\171\115\115\214\171\10\115\43\115\43\43\43\115\43\43\43\247\171\171" +
		"\171\115\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115\171\u0137" +
		"\u0137\10\43\171\u0137\u0137\171\10\17\10\17\32\43\17\61\63\65\10\77\10\10\115\32" +
		"\127\10\10\77\115\127\115\171\214\226\115\115\171\247\115\214\214\171\115\171\43" +
		"\115\171\115\115\214\171\10\115\43\115\43\43\43\115\43\43\43\247\171\171\171\115" +
		"\43\43\u0137\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115\171\u0137\u0137" +
		"\10\43\171\u0137\u0137\171\10\17\10\17\43\17\61\63\65\10\77\107\10\10\115\127\10" +
		"\10\77\115\127\115\171\214\226\115\115\171\247\115\214\214\171\115\171\43\115\171" +
		"\115\115\214\171\10\115\43\115\43\43\43\115\43\43\43\247\171\171\171\115\43\43\u0137" +
		"\43\10\43\43\43\43\10\43\115\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137" +
		"\u0137\171\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\140\10\77\115\127\115" +
		"\171\214\226\115\115\171\247\115\214\214\171\115\171\43\115\171\115\115\214\171\10" +
		"\115\43\115\43\43\43\115\43\43\43\247\171\171\171\115\43\43\u0137\43\10\43\43\43" +
		"\43\10\43\115\171\43\43\43\10\115\115\171\u0137\u0137\10\43\171\u0137\u0137\171\275" +
		"\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\266\u017b\3\66\112" +
		"\33\33\37\67\44\44\130\145\130\160\160\244\145\263\276\44\330\330\44\276\371\276" +
		"\276\276\330\276\276\276\44\276\276\u013b\u013b\276\276\276\276\44\276\276\276\44" +
		"\44\276\14\14\45\14\45\45\14\14\277\14\277\277\277\277\277\277\277\277\277\u0138" +
		"\277\277\277\277\277\277\u0145\277\277\277\277\45\u0138\u0138\u0160\277\u0138\u0138" +
		"\172\246\260\264\327\357\260\u0128\u0129\u014a\264\357\u0176\152\237\237\237\237" +
		"\215\254\216\216\256\256\177\257\131\132\154\133\133\134\134\344\u0154\u016e\135" +
		"\135\136\136\250\u0121\146\251\161\162\242\163\163\240\335\337\u0120\u0117\u0117" +
		"\u0117\225\164\164\165\165\261\u0124\265\u015b\u014b\300\367\u011a\u011b\u011d\u0134" +
		"\u014e\u0150\u0151\u0169\301\301\301\301\301\301\u0147\301\301\301\301\302\302\302" +
		"\302\302\302\302\302\302\302\302\303\303\303\303\303\303\303\303\303\303\303\304" +
		"\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\304\305\305" +
		"\u0102\u0107\305\305\305\u0107\305\u0141\305\305\305\305\305\306\370\u0103\306\306" +
		"\306\306\306\306\306\306\306\307\307\307\u0108\307\307\307\u0108\307\u0108\u0144" +
		"\307\307\307\307\307\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310" +
		"\310\311\311\311\311\u0111\311\311\311\311\311\311\u0111\311\311\311\311\311\311" +
		"\312\312\312\312\312\312\312\312\312\312\u013c\u013e\312\312\312\312\312\312\312" +
		"\312\313\313\313\313\313\313\313\313\313\313\313\313\313\313\313\313\313\313\313" +
		"\313\314\314\314\314\314\314\314\314\314\314\314\314\314\314\314\314\315\315\315" +
		"\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\315\316\316\316" +
		"\316\316\316\316\316\316\316\316\u013d\316\316\316\316\316\316\316\316\316\u0139" +
		"\u0139\u015f\u0139\u0139\u013a\u015e\u0174\u0175\166\166\317\317\u0101\u0104\u0104" +
		"\317\317\317\u0104\317\u0104\u0104\317\317\317\317\317\167\167\245\167\167\167\167" +
		"\167\167\167\167\167\167\167\167\167\167\167\167\167\241\340\46\46\324\364\u012a" +
		"\u0148\364\364\27\27\27\47\116\355\50\113\114\u0156\365\365\365\366\u0159\u015a\u017c" +
		"\23\71\137\141\360\100\142\15\15\51\15\51\51\15\15\15\u0146\51\u0157\u0158\20\30" +
		"\56\21\21\21\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\320\u016f" +
		"\16\16\70\16\16\16\155\227\243\321\16\321\u0109\321\321\321\u0109\321\u0109\321\321" +
		"\321\321\321\22\40\34\122\153\345\u0123\u0155\u0170\147\331\332\u0115\u0118\u0119" +
		"\u0149\262\322\322\322\322\322\322\322\322\322\322\323\323\u0105\u0106\u010a\323" +
		"\323\323\u010a\323\u0140\u0142\u0143\323\323\323\323\u0164\323\170\170\170\170\170" +
		"\170\170\170\170\170\170\170\170\170\170\170\170\170\170\325\52\53\54\101\102\24" +
		"\25");

	private static final short[] tmRuleLen = TMLexer.unpack_short(223,
		"\5\4\7\4\3\3\4\4\3\3\1\1\2\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2\1\1\1\1" +
		"\3\10\3\2\3\1\1\1\1\5\3\1\3\1\1\2\2\1\1\1\7\6\6\5\6\5\5\4\2\4\3\3\1\1\2\1\1\1\7\5" +
		"\4\4\2\1\1\2\1\3\1\4\3\3\2\3\2\2\1\1\3\3\2\2\3\3\4\3\1\2\2\1\1\1\1\2\1\3\3\1\2\1" +
		"\3\3\3\1\3\1\3\6\6\2\2\4\4\2\1\3\2\1\3\3\1\5\2\2\3\1\3\3\3\1\1\1\1\1\1\2\1\3\3\1" +
		"\3\3\1\1\5\3\1\3\1\1\1\1\1\1\3\1\1\2\0\2\0\1\0\1\0\1\0\1\0\1\0\1\0\3\1\1\0\1\0\3" +
		"\1\3\1\1\0\2\1\3\1\3\1\3\1\1\0\3\1\1\0\3\1\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(223,
		"\112\112\113\113\114\115\116\117\117\120\120\121\122\122\123\124\124\125\125\126" +
		"\126\126\126\126\126\126\126\126\126\126\126\126\127\130\130\130\131\131\131\131" +
		"\132\133\133\134\135\136\136\136\136\137\140\141\142\142\143\143\143\144\144\144" +
		"\145\145\145\145\145\145\145\145\146\146\146\146\146\146\147\150\150\150\151\151" +
		"\152\152\153\153\154\154\155\155\156\157\157\157\157\157\157\157\157\157\160\161" +
		"\161\161\162\162\163\163\164\164\164\165\165\165\166\166\167\167\167\170\170\171" +
		"\171\171\172\173\173\174\174\174\174\174\174\174\174\175\175\175\175\176\176\176" +
		"\177\200\200\200\201\202\203\203\204\205\205\205\205\206\206\207\207\207\207\210" +
		"\210\210\211\211\211\211\211\212\213\213\213\213\214\215\215\216\217\220\220\221" +
		"\221\222\222\223\223\224\224\225\225\226\226\227\227\230\230\231\231\232\232\233" +
		"\233\234\234\235\235\236\236\237\237\240\240\241\241\242\242\243\243\244\244\245" +
		"\245\246\246");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'||'",
		"'='",
		"'=='",
		"'!='",
		"'=>'",
		"';'",
		"'.'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'!'",
		"'~'",
		"'&'",
		"'&&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Lbrackets",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lparam",
		"Lstring",
		"Lbool",
		"Lint",
		"Lsymbol",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"symref_noargs",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"lexer_directive",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"nonterm_param",
		"directive",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule0",
		"predicate",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"setPrimary",
		"setExpression",
		"annotations",
		"annotation",
		"nonterm_params",
		"param_ref",
		"symref_args",
		"keyval_arg",
		"param_type",
		"param_value",
		"predicate_primary",
		"predicate_expression",
		"expression",
		"map_entry",
		"literal",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"import__optlist",
		"option_optlist",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"lexer_state_list_Comma_separated",
		"identifieropt",
		"implementsopt",
		"inputref_list_Comma_separated",
		"rule0_list_Or_separated",
		"rhsSuffixopt",
		"annotation_list",
		"param_ref_list_Comma_separated",
		"param_value_list_Comma_separated",
		"keyval_arg_list_Comma_separated",
		"keyval_arg_list_Comma_separated_opt",
		"map_entry_list_Comma_separated",
		"map_entry_list_Comma_separated_opt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 74;
		static final int header = 75;
		static final int lexer_section = 76;
		static final int parser_section = 77;
		static final int parsing_algorithm = 78;
		static final int import_ = 79;
		static final int option = 80;
		static final int identifier = 81;
		static final int symref = 82;
		static final int symref_noargs = 83;
		static final int type = 84;
		static final int type_part_list = 85;
		static final int type_part = 86;
		static final int pattern = 87;
		static final int lexer_parts = 88;
		static final int lexer_part = 89;
		static final int named_pattern = 90;
		static final int lexeme = 91;
		static final int lexeme_transition = 92;
		static final int lexeme_attrs = 93;
		static final int lexeme_attribute = 94;
		static final int lexer_directive = 95;
		static final int state_selector = 96;
		static final int stateref = 97;
		static final int lexer_state = 98;
		static final int grammar_parts = 99;
		static final int grammar_part = 100;
		static final int nonterm = 101;
		static final int nonterm_type = 102;
		static final int _implements = 103;
		static final int assoc = 104;
		static final int nonterm_param = 105;
		static final int directive = 106;
		static final int inputref = 107;
		static final int references = 108;
		static final int references_cs = 109;
		static final int rules = 110;
		static final int rule0 = 111;
		static final int predicate = 112;
		static final int rhsPrefix = 113;
		static final int rhsSuffix = 114;
		static final int ruleAction = 115;
		static final int rhsParts = 116;
		static final int rhsPart = 117;
		static final int rhsAnnotated = 118;
		static final int rhsAssignment = 119;
		static final int rhsOptional = 120;
		static final int rhsCast = 121;
		static final int rhsUnordered = 122;
		static final int rhsClass = 123;
		static final int rhsPrimary = 124;
		static final int setPrimary = 125;
		static final int setExpression = 126;
		static final int annotations = 127;
		static final int annotation = 128;
		static final int nonterm_params = 129;
		static final int param_ref = 130;
		static final int symref_args = 131;
		static final int keyval_arg = 132;
		static final int param_type = 133;
		static final int param_value = 134;
		static final int predicate_primary = 135;
		static final int predicate_expression = 136;
		static final int expression = 137;
		static final int map_entry = 138;
		static final int literal = 139;
		static final int name = 140;
		static final int qualified_id = 141;
		static final int command = 142;
		static final int syntax_problem = 143;
		static final int import__optlist = 144;
		static final int option_optlist = 145;
		static final int parsing_algorithmopt = 146;
		static final int typeopt = 147;
		static final int lexeme_transitionopt = 148;
		static final int iconopt = 149;
		static final int lexeme_attrsopt = 150;
		static final int commandopt = 151;
		static final int lexer_state_list_Comma_separated = 152;
		static final int identifieropt = 153;
		static final int implementsopt = 154;
		static final int inputref_list_Comma_separated = 155;
		static final int rule0_list_Or_separated = 156;
		static final int rhsSuffixopt = 157;
		static final int annotation_list = 158;
		static final int param_ref_list_Comma_separated = 159;
		static final int param_value_list_Comma_separated = 160;
		static final int keyval_arg_list_Comma_separated = 161;
		static final int keyval_arg_list_Comma_separated_opt = 162;
		static final int map_entry_list_Comma_separated = 163;
		static final int map_entry_list_Comma_separated_opt = 164;
		static final int expression_list_Comma_separated = 165;
		static final int expression_list_Comma_separated_opt = 166;
	}

	public interface Rules {
		static final int lexer_directive_directiveBrackets = 49;  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
		static final int nonterm_type_nontermTypeAST = 68;  // nonterm_type ::= Lreturns symref_noargs
		static final int nonterm_type_nontermTypeHint = 69;  // nonterm_type ::= Linline Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint2 = 70;  // nonterm_type ::= Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint3 = 71;  // nonterm_type ::= Linterface identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint4 = 72;  // nonterm_type ::= Lvoid
		static final int nonterm_type_nontermTypeRaw = 73;  // nonterm_type ::= type
		static final int directive_directivePrio = 80;  // directive ::= '%' assoc references ';'
		static final int directive_directiveInput = 81;  // directive ::= '%' Linput inputref_list_Comma_separated ';'
		static final int rhsOptional_rhsQuantifier = 118;  // rhsOptional ::= rhsCast '?'
		static final int rhsCast_rhsAsLiteral = 121;  // rhsCast ::= rhsClass Las literal
		static final int rhsPrimary_rhsSymbol = 125;  // rhsPrimary ::= symref
		static final int rhsPrimary_rhsNested = 126;  // rhsPrimary ::= '(' rules ')'
		static final int rhsPrimary_rhsList = 127;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		static final int rhsPrimary_rhsList2 = 128;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		static final int rhsPrimary_rhsQuantifier = 129;  // rhsPrimary ::= rhsPrimary '*'
		static final int rhsPrimary_rhsQuantifier2 = 130;  // rhsPrimary ::= rhsPrimary '+'
		static final int rhsPrimary_rhsIgnored = 131;  // rhsPrimary ::= '$' '(' rules ')'
		static final int rhsPrimary_rhsSet = 132;  // rhsPrimary ::= Lset '(' setExpression ')'
		static final int setPrimary_setSymbol = 133;  // setPrimary ::= ID symref
		static final int setPrimary_setSymbol2 = 134;  // setPrimary ::= symref
		static final int setPrimary_setCompound = 135;  // setPrimary ::= '(' setExpression ')'
		static final int setPrimary_setComplement = 136;  // setPrimary ::= '~' setPrimary
		static final int setExpression_setBinary = 138;  // setExpression ::= setExpression '|' setExpression
		static final int setExpression_setBinary2 = 139;  // setExpression ::= setExpression '&' setExpression
		static final int predicate_primary_boolPredicate = 155;  // predicate_primary ::= '!' param_ref
		static final int predicate_primary_boolPredicate2 = 156;  // predicate_primary ::= param_ref
		static final int predicate_primary_comparePredicate = 157;  // predicate_primary ::= param_ref '==' literal
		static final int predicate_primary_comparePredicate2 = 158;  // predicate_primary ::= param_ref '!=' literal
		static final int predicate_expression_predicateBinary = 160;  // predicate_expression ::= predicate_expression '&&' predicate_expression
		static final int predicate_expression_predicateBinary2 = 161;  // predicate_expression ::= predicate_expression '||' predicate_expression
		static final int expression_instance = 164;  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
		static final int expression_array = 165;  // expression ::= '[' expression_list_Comma_separated_opt ']'
		static final int literal_literal = 168;  // literal ::= scon
		static final int literal_literal2 = 169;  // literal ::= icon
		static final int literal_literal3 = 170;  // literal ::= Ltrue
		static final int literal_literal4 = 171;  // literal ::= Lfalse
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 37) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 37;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 37);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.tokenText()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 0:  // input ::= header import__optlist option_optlist lexer_section parser_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead - 1].value) /* lexer */,
						((List<ITmaGrammarPart>)tmStack[tmHead].value) /* parser */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 1:  // input ::= header import__optlist option_optlist lexer_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead].value) /* lexer */,
						null /* parser */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 2:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 3:  // header ::= Llanguage name parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 4:  // lexer_section ::= '::' Llexer lexer_parts
				tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value);
				break;
			case 5:  // parser_section ::= '::' Lparser grammar_parts
				tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value);
				break;
			case 6:  // parsing_algorithm ::= Llalr '(' icon ')'
				tmLeft.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 7:  // import_ ::= Limport ID scon ';'
				tmLeft.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // import_ ::= Limport scon ';'
				tmLeft.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 9:  // option ::= ID '=' expression
				tmLeft.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* key */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 10:  // option ::= syntax_problem
				tmLeft.value = new TmaOption(
						null /* key */,
						null /* value */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 11:  // identifier ::= ID
				tmLeft.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 12:  // symref ::= ID symref_args
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead - 1].value) /* name */,
						((TmaSymrefArgs)tmStack[tmHead].value) /* args */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // symref ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 14:  // symref_noargs ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 15:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 16:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 32:  // pattern ::= regexp
				tmLeft.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 33:  // lexer_parts ::= lexer_part
				tmLeft.value = new ArrayList();
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 34:  // lexer_parts ::= lexer_parts lexer_part
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 35:  // lexer_parts ::= lexer_parts syntax_problem
				((List<ITmaLexerPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 40:  // named_pattern ::= ID '=' pattern
				tmLeft.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 41:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* transition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemeAttrs)tmStack[tmHead - 1].value) /* attrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						null /* input */, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 42:  // lexeme ::= identifier typeopt ':'
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* transition */,
						null /* priority */,
						null /* attrs */,
						null /* command */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 43:  // lexeme_transition ::= '=>' stateref
				tmLeft.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 44:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				tmLeft.value = new TmaLexemeAttrs(
						((TmaLexemeAttribute)tmStack[tmHead - 1].value) /* kind */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 45:  // lexeme_attribute ::= Lsoft
				tmLeft.value = TmaLexemeAttribute.LSOFT;
				break;
			case 46:  // lexeme_attribute ::= Lclass
				tmLeft.value = TmaLexemeAttribute.LCLASS;
				break;
			case 47:  // lexeme_attribute ::= Lspace
				tmLeft.value = TmaLexemeAttribute.LSPACE;
				break;
			case 48:  // lexeme_attribute ::= Llayout
				tmLeft.value = TmaLexemeAttribute.LLAYOUT;
				break;
			case 49:  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
				tmLeft.value = new TmaDirectiveBrackets(
						((TmaSymref)tmStack[tmHead - 2].value) /* opening */,
						((TmaSymref)tmStack[tmHead - 1].value) /* closing */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 50:  // state_selector ::= '[' lexer_state_list_Comma_separated ']'
				tmLeft.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 51:  // stateref ::= ID
				tmLeft.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 52:  // lexer_state ::= identifier '=>' stateref
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 53:  // lexer_state ::= identifier
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 54:  // grammar_parts ::= grammar_part
				tmLeft.value = new ArrayList();
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 55:  // grammar_parts ::= grammar_parts grammar_part
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 56:  // grammar_parts ::= grammar_parts syntax_problem
				((List<ITmaGrammarPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 60:  // nonterm ::= annotations identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 6].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 61:  // nonterm ::= annotations identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 62:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 63:  // nonterm ::= annotations identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 64:  // nonterm ::= identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 65:  // nonterm ::= identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 66:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 67:  // nonterm ::= identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 68:  // nonterm_type ::= Lreturns symref_noargs
				tmLeft.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 69:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						true /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 70:  // nonterm_type ::= Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 71:  // nonterm_type ::= Linterface identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 72:  // nonterm_type ::= Lvoid
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* _implements */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 73:  // nonterm_type ::= type
				tmLeft.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* typeText */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 74:  // implements ::= ':' references_cs
				tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value);
				break;
			case 75:  // assoc ::= Lleft
				tmLeft.value = TmaAssoc.LLEFT;
				break;
			case 76:  // assoc ::= Lright
				tmLeft.value = TmaAssoc.LRIGHT;
				break;
			case 77:  // assoc ::= Lnonassoc
				tmLeft.value = TmaAssoc.LNONASSOC;
				break;
			case 78:  // nonterm_param ::= '%' Lparam identifier param_type '=' param_value ';'
				tmLeft.value = new TmaNontermParam(
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaParamType)tmStack[tmHead - 3].value) /* paramType */,
						((ITmaParamValue)tmStack[tmHead - 1].value) /* paramValue */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 79:  // nonterm_param ::= '%' Lparam identifier param_type ';'
				tmLeft.value = new TmaNontermParam(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaParamType)tmStack[tmHead - 1].value) /* paramType */,
						null /* paramValue */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 80:  // directive ::= '%' assoc references ';'
				tmLeft.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 81:  // directive ::= '%' Linput inputref_list_Comma_separated ';'
				tmLeft.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 82:  // inputref ::= symref_noargs Lnoeoi
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* reference */,
						true /* noeoi */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 83:  // inputref ::= symref_noargs
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						false /* noeoi */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 84:  // references ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 85:  // references ::= references symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 86:  // references_cs ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 87:  // references_cs ::= references_cs ',' symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 89:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 90:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 91:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 92:  // rule0 ::= rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 93:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 94:  // rule0 ::= rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 95:  // rule0 ::= ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 96:  // rule0 ::= rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 97:  // rule0 ::= syntax_problem
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* action */,
						null /* suffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 98:  // predicate ::= '[' predicate_expression ']'
				tmLeft.value = ((ITmaPredicateExpression)tmStack[tmHead - 1].value);
				break;
			case 99:  // rhsPrefix ::= predicate annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 100:  // rhsPrefix ::= annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						null /* predicate */,
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 101:  // rhsPrefix ::= predicate ':'
				tmLeft.value = new TmaRhsPrefix(
						((ITmaPredicateExpression)tmStack[tmHead - 1].value) /* predicate */,
						null /* annotations */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 102:  // rhsSuffix ::= '%' Lprio symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 103:  // rhsSuffix ::= '%' Lshift symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 104:  // ruleAction ::= '{~' identifier scon '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* action */,
						((String)tmStack[tmHead - 1].value) /* parameter */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 105:  // ruleAction ::= '{~' identifier '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 1].value) /* action */,
						null /* parameter */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 106:  // rhsParts ::= rhsPart
				tmLeft.value = new ArrayList();
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 107:  // rhsParts ::= rhsParts rhsPart
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 108:  // rhsParts ::= rhsParts syntax_problem
				((List<ITmaRhsPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 113:  // rhsAnnotated ::= annotations rhsAssignment
				tmLeft.value = new TmaRhsAnnotated(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 115:  // rhsAssignment ::= identifier '=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 116:  // rhsAssignment ::= identifier '+=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 118:  // rhsOptional ::= rhsCast '?'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 119:  // rhsCast ::= rhsClass
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* target */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 120:  // rhsCast ::= rhsClass Las symref
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaSymref)tmStack[tmHead].value) /* target */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 121:  // rhsCast ::= rhsClass Las literal
				tmLeft.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 122:  // rhsUnordered ::= rhsPart '&' rhsPart
				tmLeft.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 124:  // rhsClass ::= identifier ':' rhsPrimary
				tmLeft.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 125:  // rhsPrimary ::= symref
				tmLeft.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 126:  // rhsPrimary ::= '(' rules ')'
				tmLeft.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 127:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						true /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 128:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						false /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 129:  // rhsPrimary ::= rhsPrimary '*'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 130:  // rhsPrimary ::= rhsPrimary '+'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 131:  // rhsPrimary ::= '$' '(' rules ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 132:  // rhsPrimary ::= Lset '(' setExpression ')'
				tmLeft.value = new TmaRhsSet(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* expr */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 133:  // setPrimary ::= ID symref
				tmLeft.value = new TmaSetSymbol(
						((String)tmStack[tmHead - 1].value) /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 134:  // setPrimary ::= symref
				tmLeft.value = new TmaSetSymbol(
						null /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 135:  // setPrimary ::= '(' setExpression ')'
				tmLeft.value = new TmaSetCompound(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 136:  // setPrimary ::= '~' setPrimary
				tmLeft.value = new TmaSetComplement(
						((ITmaSetExpression)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 138:  // setExpression ::= setExpression '|' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.OR /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 139:  // setExpression ::= setExpression '&' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.AMPERSAND /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 140:  // annotations ::= annotation_list
				tmLeft.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 141:  // annotation ::= '@' ID '{' expression '}'
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 142:  // annotation ::= '@' ID
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 143:  // annotation ::= '@' syntax_problem
				tmLeft.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 144:  // nonterm_params ::= '<' param_ref_list_Comma_separated '>'
				tmLeft.value = new TmaNontermParams(
						((List<TmaIdentifier>)tmStack[tmHead - 1].value) /* refs */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 146:  // symref_args ::= '<' param_value_list_Comma_separated '>'
				tmLeft.value = new TmaSymrefArgs(
						((List<ITmaParamValue>)tmStack[tmHead - 1].value) /* valueList */,
						null /* keyvalueList */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 147:  // symref_args ::= '<' keyval_arg_list_Comma_separated_opt '>'
				tmLeft.value = new TmaSymrefArgs(
						null /* valueList */,
						((List<TmaKeyvalArg>)tmStack[tmHead - 1].value) /* keyvalueList */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 148:  // keyval_arg ::= param_ref ':' param_value
				tmLeft.value = new TmaKeyvalArg(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((ITmaParamValue)tmStack[tmHead].value) /* val */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 149:  // param_type ::= Lint
				tmLeft.value = TmaParamType.LINT;
				break;
			case 150:  // param_type ::= Lstring
				tmLeft.value = TmaParamType.LSTRING;
				break;
			case 151:  // param_type ::= Lbool
				tmLeft.value = TmaParamType.LBOOL;
				break;
			case 152:  // param_type ::= Lsymbol
				tmLeft.value = TmaParamType.LSYMBOL;
				break;
			case 155:  // predicate_primary ::= '!' param_ref
				tmLeft.value = new TmaBoolPredicate(
						true /* isNegated */,
						((TmaIdentifier)tmStack[tmHead].value) /* paramRef */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 156:  // predicate_primary ::= param_ref
				tmLeft.value = new TmaBoolPredicate(
						false /* isNegated */,
						((TmaIdentifier)tmStack[tmHead].value) /* paramRef */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 157:  // predicate_primary ::= param_ref '==' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EQUAL_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 158:  // predicate_primary ::= param_ref '!=' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EXCLAMATION_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 160:  // predicate_expression ::= predicate_expression '&&' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.AMPERSAND_AMPERSAND /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 161:  // predicate_expression ::= predicate_expression '||' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.OR_OR /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 164:  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
				tmLeft.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntry>)tmStack[tmHead - 1].value) /* entries */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 165:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				tmLeft.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 167:  // map_entry ::= ID ':' expression
				tmLeft.value = new TmaMapEntry(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 168:  // literal ::= scon
				tmLeft.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 169:  // literal ::= icon
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						((Integer)tmStack[tmHead].value) /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 170:  // literal ::= Ltrue
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						true /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 171:  // literal ::= Lfalse
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 172:  // name ::= qualified_id
				tmLeft.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 174:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 175:  // command ::= code
				tmLeft.value = new TmaCommand(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 176:  // syntax_problem ::= error
				tmLeft.value = new TmaSyntaxProblem(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 177:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 178:  // import__optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 179:  // option_optlist ::= option_optlist option
				((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 180:  // option_optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 193:  // lexer_state_list_Comma_separated ::= lexer_state_list_Comma_separated ',' lexer_state
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 194:  // lexer_state_list_Comma_separated ::= lexer_state
				tmLeft.value = new ArrayList();
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 199:  // inputref_list_Comma_separated ::= inputref_list_Comma_separated ',' inputref
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 200:  // inputref_list_Comma_separated ::= inputref
				tmLeft.value = new ArrayList();
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 201:  // rule0_list_Or_separated ::= rule0_list_Or_separated '|' rule0
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 202:  // rule0_list_Or_separated ::= rule0
				tmLeft.value = new ArrayList();
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 205:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 206:  // annotation_list ::= annotation
				tmLeft.value = new ArrayList();
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 207:  // param_ref_list_Comma_separated ::= param_ref_list_Comma_separated ',' param_ref
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 208:  // param_ref_list_Comma_separated ::= param_ref
				tmLeft.value = new ArrayList();
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 209:  // param_value_list_Comma_separated ::= param_value_list_Comma_separated ',' param_value
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 210:  // param_value_list_Comma_separated ::= param_value
				tmLeft.value = new ArrayList();
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 211:  // keyval_arg_list_Comma_separated ::= keyval_arg_list_Comma_separated ',' keyval_arg
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 212:  // keyval_arg_list_Comma_separated ::= keyval_arg
				tmLeft.value = new ArrayList();
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 215:  // map_entry_list_Comma_separated ::= map_entry_list_Comma_separated ',' map_entry
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 216:  // map_entry_list_Comma_separated ::= map_entry
				tmLeft.value = new ArrayList();
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 219:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 220:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 381);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 382);
	}
}
