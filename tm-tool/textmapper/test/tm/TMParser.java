/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(317,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\211\0\212\0\uffcd\uffff\226\0\14" +
		"\0\213\0\214\0\uffff\uffff\205\0\204\0\210\0\223\0\uff93\uffff\uff8b\uffff\uff7f" +
		"\uffff\272\0\uff4f\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\233\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\227\0\uffff\uffff\uffff\uffff\207\0\uff49\uffff\uffff" +
		"\uffff\uffff\uffff\3\0\224\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uff1d" +
		"\uffff\231\0\12\0\271\0\uffff\uffff\uff17\uffff\uffff\uffff\uff11\uffff\uffff\uffff" +
		"\10\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\0\0\220\0\221\0\217\0\uffff" +
		"\uffff\uffff\uffff\206\0\uffff\uffff\6\0\7\0\uffff\uffff\uff0b\uffff\uff03\uffff" +
		"\ufefd\uffff\37\0\43\0\44\0\42\0\11\0\uffff\uffff\215\0\uffff\uffff\2\0\13\0\ufecb" +
		"\uffff\250\0\uffff\uffff\uffff\uffff\uffff\uffff\235\0\uffff\uffff\40\0\41\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\ufec3\uffff\62\0\65\0\66\0\uffff\uffff\266\0\ufe91" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\56\0\36\0\45\0\uffff\uffff\27\0\30\0\23" +
		"\0\24\0\uffff\uffff\21\0\22\0\26\0\31\0\33\0\32\0\25\0\uffff\uffff\20\0\ufe5d\uffff" +
		"\uffff\uffff\102\0\103\0\104\0\uffff\uffff\ufe29\uffff\203\0\ufdf3\uffff\uffff\uffff" +
		"\uffff\uffff\ufdb5\uffff\ufd87\uffff\77\0\100\0\uffff\uffff\63\0\64\0\uffff\uffff" +
		"\265\0\216\0\57\0\60\0\247\0\15\0\35\0\uffff\uffff\16\0\17\0\ufd59\uffff\ufd1f\uffff" +
		"\256\0\uffff\uffff\111\0\uffff\uffff\uffff\uffff\uffff\uffff\ufd17\uffff\uffff\uffff" +
		"\uffff\uffff\ufcd9\uffff\uffff\uffff\225\0\uffff\uffff\157\0\uffff\uffff\260\0\ufc87" +
		"\uffff\261\0\ufc49\uffff\ufc3f\uffff\ufbff\uffff\137\0\142\0\144\0\ufbbb\uffff\140" +
		"\0\ufb75\uffff\ufb2d\uffff\uffff\uffff\141\0\126\0\ufae1\uffff\125\0\ufad9\uffff" +
		"\73\0\251\0\ufaab\uffff\ufaa5\uffff\ufa9f\uffff\ufa61\uffff\uffff\uffff\34\0\uffff" +
		"\uffff\237\0\ufa23\uffff\107\0\106\0\uffff\uffff\105\0\112\0\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uf9eb\uffff\uffff\uffff\uf9ab\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\72\0\uf96b\uffff\uf961\uffff\uffff\uffff\121\0\124\0\uf921" +
		"\uffff\uf917\uffff\136\0\123\0\uffff\uffff\150\0\uffff\uffff\163\0\164\0\127\0\143" +
		"\0\uf8d3\uffff\uf893\uffff\uffff\uffff\253\0\75\0\76\0\uffff\uffff\uffff\uffff\uf88d" +
		"\uffff\50\0\241\0\uf84f\uffff\255\0\201\0\130\0\131\0\160\0\uffff\uffff\uffff\uffff" +
		"\133\0\uffff\uffff\uffff\uffff\uffff\uffff\uf819\uffff\171\0\174\0\uffff\uffff\uffff" +
		"\uffff\145\0\uf7e9\uffff\146\0\120\0\uf79d\uffff\117\0\122\0\uf793\uffff\152\0\153" +
		"\0\257\0\74\0\113\0\uf74f\uffff\71\0\70\0\uffff\uffff\uffff\uffff\243\0\uf749\uffff" +
		"\uffff\uffff\132\0\uffff\uffff\166\0\uffff\uffff\173\0\170\0\uffff\uffff\167\0\uffff" +
		"\uffff\116\0\uffff\uffff\67\0\52\0\53\0\54\0\55\0\uffff\uffff\245\0\46\0\uffff\uffff" +
		"\uffff\uffff\264\0\uffff\uffff\172\0\uf715\uffff\uf70d\uffff\114\0\51\0\162\0\161" +
		"\0\uffff\uffff\uffff\uffff\165\0\177\0\263\0\uffff\uffff\uffff\uffff\ufffe\uffff" +
		"\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(2296,
		"\10\230\41\230\42\230\50\230\52\230\53\230\54\230\55\230\56\230\57\230\60\230\61" +
		"\230\62\230\63\230\64\230\65\230\66\230\67\230\70\230\71\230\72\230\73\230\74\230" +
		"\uffff\ufffe\2\uffff\3\uffff\21\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\43\uffff\44\uffff" +
		"\45\uffff\22\274\uffff\ufffe\23\uffff\72\uffff\14\234\uffff\ufffe\15\uffff\14\222" +
		"\23\222\24\222\72\222\uffff\ufffe\50\uffff\10\232\41\232\42\232\52\232\53\232\54" +
		"\232\55\232\56\232\57\232\60\232\61\232\62\232\63\232\64\232\65\232\66\232\67\232" +
		"\70\232\71\232\72\232\73\232\74\232\uffff\ufffe\17\uffff\22\273\uffff\ufffe\42\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff" +
		"\52\uffff\24\270\uffff\ufffe\10\uffff\0\1\uffff\ufffe\17\uffff\24\267\uffff\ufffe" +
		"\72\uffff\14\234\uffff\ufffe\12\uffff\20\13\23\13\uffff\ufffe\23\uffff\20\236\uffff" +
		"\ufffe\21\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\55\uffff\54\uffff\53\uffff\52\uffff\0\4\10\4\uffff\ufffe\13\uffff\17\61\22" +
		"\61\uffff\ufffe\6\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff\71" +
		"\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60" +
		"\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\0\5\uffff\ufffe\40\uffff" +
		"\20\200\23\200\37\200\42\200\51\200\52\200\53\200\54\200\55\200\56\200\57\200\60" +
		"\200\61\200\62\200\63\200\64\200\65\200\66\200\67\200\70\200\71\200\72\200\73\200" +
		"\74\200\uffff\ufffe\1\uffff\0\47\10\47\21\47\41\47\42\47\52\47\53\47\54\47\55\47" +
		"\56\47\57\47\60\47\61\47\62\47\63\47\64\47\65\47\66\47\67\47\70\47\71\47\72\47\73" +
		"\47\74\47\uffff\ufffe\77\uffff\20\202\23\202\37\202\40\202\42\202\51\202\52\202\53" +
		"\202\54\202\55\202\56\202\57\202\60\202\61\202\62\202\63\202\64\202\65\202\66\202" +
		"\67\202\70\202\71\202\72\202\73\202\74\202\uffff\ufffe\6\uffff\23\uffff\25\uffff" +
		"\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\76\uffff\11\262\14\262\uffff" +
		"\ufffe\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54" +
		"\uffff\53\uffff\52\uffff\7\252\20\252\uffff\ufffe\42\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\7\252\20\252\uffff" +
		"\ufffe\13\uffff\0\240\3\240\10\240\21\240\23\240\41\240\42\240\52\240\53\240\54\240" +
		"\55\240\56\240\57\240\60\240\61\240\62\240\63\240\64\240\65\240\66\240\67\240\70" +
		"\240\71\240\72\240\73\240\74\240\76\240\uffff\ufffe\62\uffff\14\110\17\110\uffff" +
		"\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73" +
		"\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\76\uffff\11\262\24\262\uffff\ufffe\12\13\20\13\33\13\6\14\11\14\14\14\23\14" +
		"\24\14\25\14\31\14\32\14\34\14\36\14\37\14\40\14\41\14\42\14\46\14\47\14\51\14\52" +
		"\14\53\14\54\14\55\14\56\14\57\14\60\14\61\14\62\14\63\14\64\14\65\14\66\14\67\14" +
		"\70\14\71\14\72\14\73\14\74\14\76\14\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff" +
		"\40\uffff\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\76\uffff\11\262\14\262\24\262\uffff\ufffe\6" +
		"\uffff\11\262\14\262\24\262\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff" +
		"\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\76\uffff\11\262\14\262\24\262\uffff\ufffe\36" +
		"\uffff\6\134\11\134\14\134\23\134\24\134\25\134\37\134\40\134\41\134\42\134\46\134" +
		"\51\134\52\134\53\134\54\134\55\134\56\134\57\134\60\134\61\134\62\134\63\134\64" +
		"\134\65\134\66\134\67\134\70\134\71\134\72\134\73\134\74\134\76\134\uffff\ufffe\34" +
		"\uffff\6\147\11\147\14\147\23\147\24\147\25\147\36\147\37\147\40\147\41\147\42\147" +
		"\46\147\51\147\52\147\53\147\54\147\55\147\56\147\57\147\60\147\61\147\62\147\63" +
		"\147\64\147\65\147\66\147\67\147\70\147\71\147\72\147\73\147\74\147\76\147\uffff" +
		"\ufffe\47\uffff\6\151\11\151\14\151\23\151\24\151\25\151\34\151\36\151\37\151\40" +
		"\151\41\151\42\151\46\151\51\151\52\151\53\151\54\151\55\151\56\151\57\151\60\151" +
		"\61\151\62\151\63\151\64\151\65\151\66\151\67\151\70\151\71\151\72\151\73\151\74" +
		"\151\76\151\uffff\ufffe\31\uffff\32\uffff\6\155\11\155\14\155\23\155\24\155\25\155" +
		"\34\155\36\155\37\155\40\155\41\155\42\155\46\155\47\155\51\155\52\155\53\155\54" +
		"\155\55\155\56\155\57\155\60\155\61\155\62\155\63\155\64\155\65\155\66\155\67\155" +
		"\70\155\71\155\72\155\73\155\74\155\76\155\uffff\ufffe\11\uffff\14\115\24\115\uffff" +
		"\ufffe\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54" +
		"\uffff\53\uffff\52\uffff\7\252\20\252\uffff\ufffe\20\uffff\7\254\uffff\ufffe\20\uffff" +
		"\7\254\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff" +
		"\52\uffff\51\uffff\76\uffff\11\262\14\262\uffff\ufffe\6\uffff\23\uffff\25\uffff\37" +
		"\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\76\uffff\11\262\14\262\uffff" +
		"\ufffe\3\uffff\0\242\10\242\21\242\23\242\41\242\42\242\52\242\53\242\54\242\55\242" +
		"\56\242\57\242\60\242\61\242\62\242\63\242\64\242\65\242\66\242\67\242\70\242\71" +
		"\242\72\242\73\242\74\242\76\242\uffff\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40" +
		"\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\46\uffff\51\uffff\76\uffff\11\262\24\262\uffff" +
		"\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73" +
		"\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\76\uffff\11\262\14\262\24\262\uffff\ufffe\6\uffff\11\262\14\262\24\262\uffff" +
		"\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73" +
		"\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\76\uffff\11\262\14\262\24\262\uffff\ufffe\6\uffff\11\262\14\262\24\262\uffff" +
		"\ufffe\36\uffff\6\135\11\135\14\135\23\135\24\135\25\135\37\135\40\135\41\135\42" +
		"\135\46\135\51\135\52\135\53\135\54\135\55\135\56\135\57\135\60\135\61\135\62\135" +
		"\63\135\64\135\65\135\66\135\67\135\70\135\71\135\72\135\73\135\74\135\76\135\uffff" +
		"\ufffe\6\uffff\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73" +
		"\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\76\uffff\11\262\14\262\24\262\uffff\ufffe\20\uffff\7\254\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\37\uffff\40\uffff\41\uffff\42\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\76\uffff" +
		"\11\262\14\262\uffff\ufffe\23\uffff\0\244\10\244\21\244\41\244\42\244\52\244\53\244" +
		"\54\244\55\244\56\244\57\244\60\244\61\244\62\244\63\244\64\244\65\244\66\244\67" +
		"\244\70\244\71\244\72\244\73\244\74\244\76\244\uffff\ufffe\42\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\11\14\24" +
		"\14\36\14\uffff\ufffe\31\uffff\32\uffff\6\156\11\156\14\156\23\156\24\156\25\156" +
		"\34\156\36\156\37\156\40\156\41\156\42\156\46\156\47\156\51\156\52\156\53\156\54" +
		"\156\55\156\56\156\57\156\60\156\61\156\62\156\63\156\64\156\65\156\66\156\67\156" +
		"\70\156\71\156\72\156\73\156\74\156\76\156\uffff\ufffe\6\uffff\11\262\14\262\24\262" +
		"\uffff\ufffe\36\154\6\154\11\154\14\154\23\154\24\154\25\154\37\154\40\154\41\154" +
		"\42\154\46\154\51\154\52\154\53\154\54\154\55\154\56\154\57\154\60\154\61\154\62" +
		"\154\63\154\64\154\65\154\66\154\67\154\70\154\71\154\72\154\73\154\74\154\76\154" +
		"\uffff\ufffe\17\uffff\7\101\uffff\ufffe\76\uffff\0\246\10\246\21\246\41\246\42\246" +
		"\52\246\53\246\54\246\55\246\56\246\57\246\60\246\61\246\62\246\63\246\64\246\65" +
		"\246\66\246\67\246\70\246\71\246\72\246\73\246\74\246\uffff\ufffe\11\175\36\uffff" +
		"\24\175\uffff\ufffe\11\176\36\176\24\176\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(144,
		"\0\2\4\20\32\32\32\53\57\61\66\73\77\112\117\120\132\143\160\166\231\247\262\265" +
		"\271\275\304\307\310\315\322\335\356\u0101\u0116\u015d\u0165\u016d\u0174\u0175\u0176" +
		"\u0177\u0188\u01d1\u0219\u0261\u02aa\u02f2\u033a\u0382\u03ca\u0412\u045a\u04a5\u04ee" +
		"\u0537\u057f\u05c7\u060f\u0658\u06a0\u06e8\u06e8\u06f5\u06f6\u06f7\u06f8\u06f9\u06fa" +
		"\u06fc\u06fd\u06fe\u0719\u0746\u0749\u074b\u074f\u0751\u0752\u0754\u0756\u0758\u0759" +
		"\u075a\u075b\u075d\u075f\u0761\u0762\u0764\u0766\u0768\u076b\u076c\u076e\u0770\u0772" +
		"\u0773\u0779\u0780\u0787\u0796\u07a1\u07a9\u07b5\u07c1\u07cf\u07df\u07ef\u07fb\u080b" +
		"\u081c\u0821\u0825\u0827\u0835\u0844\u084b\u0853\u0854\u0856\u0859\u085c\u0869\u087e" +
		"\u087f\u0880\u0882\u0883\u0884\u0885\u0886\u0887\u0888\u088b\u088e\u088f\u0895\u08a4" +
		"\u08a5\u08b3\u08b4\u08b5\u08b6");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(2230,
		"\u0139\u013a\123\170\1\6\34\37\47\66\74\124\143\233\316\340\1\6\37\43\66\74\143\233" +
		"\303\340\113\134\200\235\247\251\252\275\276\315\317\325\326\332\345\355\u0105\133" +
		"\207\212\277\36\52\266\377\u0119\u012e\u012f\51\56\103\115\243\56\115\120\225\32" +
		"\46\64\77\230\232\245\353\354\371\u0111\21\124\156\166\222\u012a\24\57\122\124\156" +
		"\166\222\230\u010e\u012c\56\115\126\243\263\273\274\346\u0100\1\6\37\65\66\74\105" +
		"\124\143\156\166\222\233\25\122\124\156\166\222\20\26\30\104\124\133\156\166\200" +
		"\212\222\235\237\241\247\252\263\275\276\315\317\320\321\322\323\326\327\336\345" +
		"\355\360\372\373\u011c\u011e\42\60\62\151\156\166\222\314\371\377\u0115\u0119\u0126" +
		"\u012c\200\235\247\252\275\276\315\317\326\345\355\311\316\367\124\156\166\222\124" +
		"\156\166\222\124\156\166\222\262\u0102\u0129\262\u0102\u0129\243\124\156\166\222" +
		"\257\320\372\373\u011c\u011e\124\156\166\222\253\333\377\u0108\u0119\u012e\u012f" +
		"\200\235\247\252\263\275\276\315\317\321\322\323\326\327\336\345\355\113\124\134" +
		"\142\156\166\200\222\235\247\252\275\276\315\317\326\336\345\355\1\6\36\37\66\74" +
		"\105\132\134\143\200\233\235\252\275\276\315\317\326\345\355\1\2\6\13\27\33\34\36" +
		"\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202" +
		"\203\204\222\232\233\235\236\247\252\263\270\275\276\301\306\312\313\315\317\320" +
		"\321\322\323\326\327\336\340\345\347\355\366\372\373\374\u0115\u0117\u011c\u011e" +
		"\u0120\u0134\u0135\1\6\37\66\74\143\233\340\1\6\37\66\74\143\233\340\1\6\37\66\74" +
		"\143\233\315\261\22\200\235\247\252\263\275\276\315\317\321\322\323\326\327\336\345" +
		"\355\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\133\134\140\143\144" +
		"\145\156\166\171\175\200\202\203\204\212\222\232\233\235\236\247\252\263\270\275" +
		"\276\301\306\312\313\315\317\320\321\322\323\326\327\336\340\345\347\355\366\372" +
		"\373\374\u0115\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6\13\27\33\34\36\37\41\65" +
		"\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204" +
		"\222\232\233\234\235\236\247\252\263\270\275\276\301\306\312\313\315\317\320\321" +
		"\322\323\326\327\336\340\345\347\355\366\372\373\374\u0115\u0117\u011c\u011e\u0120" +
		"\u0134\u0135\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143" +
		"\144\145\156\166\171\175\200\202\203\204\222\232\233\234\235\236\247\252\263\270" +
		"\275\276\301\306\312\313\315\317\320\321\322\323\326\327\336\340\345\347\355\366" +
		"\372\373\374\u0115\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6\13\27\33\34\36\37\41" +
		"\65\66\74\75\102\105\113\124\132\133\134\140\143\144\145\156\166\171\175\200\202" +
		"\203\204\212\222\232\233\235\236\247\252\263\270\275\276\301\306\312\313\315\317" +
		"\320\321\322\323\326\327\336\340\345\347\355\366\372\373\374\u0115\u0117\u011c\u011e" +
		"\u0120\u0134\u0135\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\131\132" +
		"\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247\252" +
		"\263\270\275\276\301\306\312\313\315\317\320\321\322\323\326\327\336\340\345\347" +
		"\355\366\372\373\374\u0115\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6\13\27\33\34" +
		"\36\37\41\65\66\74\75\102\105\113\124\131\132\134\140\143\144\145\156\166\171\175" +
		"\200\202\203\204\222\232\233\235\236\247\252\263\270\275\276\301\306\312\313\315" +
		"\317\320\321\322\323\326\327\336\340\345\347\355\366\372\373\374\u0115\u0117\u011c" +
		"\u011e\u0120\u0134\u0135\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\131" +
		"\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247" +
		"\252\263\270\275\276\301\306\312\313\315\317\320\321\322\323\326\327\336\340\345" +
		"\347\355\366\372\373\374\u0115\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6\13\27\33" +
		"\34\36\37\41\65\66\74\75\102\105\113\124\131\132\134\140\143\144\145\156\166\171" +
		"\175\200\202\203\204\222\232\233\235\236\247\252\263\270\275\276\301\306\312\313" +
		"\315\317\320\321\322\323\326\327\336\340\345\347\355\366\372\373\374\u0115\u0117" +
		"\u011c\u011e\u0120\u0134\u0135\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113" +
		"\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\226\232\233\235" +
		"\236\247\252\263\270\275\276\301\306\312\313\315\317\320\321\322\323\326\327\336" +
		"\340\345\347\355\366\372\373\374\u0115\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6" +
		"\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166" +
		"\171\175\200\202\203\204\222\232\233\235\236\247\252\263\270\275\276\301\306\312" +
		"\313\315\317\320\321\322\323\326\327\336\340\345\347\355\366\372\373\374\u0112\u0115" +
		"\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105" +
		"\113\124\132\133\134\140\143\144\145\156\166\171\175\200\201\202\203\204\212\222" +
		"\232\233\235\236\247\252\263\270\275\276\301\306\312\313\315\317\320\321\322\323" +
		"\326\327\336\340\345\347\355\366\372\373\374\u0112\u0115\u0117\u011c\u011e\u0120" +
		"\u0134\u0135\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\133\134\140" +
		"\143\144\145\156\166\171\175\200\202\203\204\212\222\232\233\235\236\247\252\263" +
		"\270\275\276\301\306\312\313\315\317\320\321\322\323\326\327\336\340\345\347\355" +
		"\366\372\373\374\u0115\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6\13\27\33\34\36\37" +
		"\41\65\66\74\75\102\105\113\124\132\133\134\140\143\144\145\156\166\171\175\200\202" +
		"\203\204\212\222\232\233\235\236\247\252\263\270\275\276\301\306\312\313\315\317" +
		"\320\321\322\323\326\327\336\340\345\347\355\366\372\373\374\u0115\u0117\u011c\u011e" +
		"\u0120\u0134\u0135\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134" +
		"\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247\252\263" +
		"\270\275\276\301\306\312\313\315\317\320\321\322\323\326\327\336\340\345\347\355" +
		"\366\372\373\374\u0112\u0115\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6\13\27\33\34" +
		"\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200" +
		"\202\203\204\222\232\233\235\236\247\252\263\270\275\276\301\306\312\313\315\317" +
		"\320\321\322\323\326\327\336\340\345\347\355\366\372\373\374\u0112\u0115\u0117\u011c" +
		"\u011e\u0120\u0134\u0135\0\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124" +
		"\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247" +
		"\252\263\270\275\276\301\306\312\313\315\317\320\321\322\323\326\327\336\340\345" +
		"\347\355\366\372\373\374\u0115\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6\13\20\27" +
		"\33\34\36\37\41\61\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171" +
		"\175\200\202\203\204\222\232\233\235\236\247\252\263\270\275\276\301\306\312\313" +
		"\315\317\320\321\322\323\326\327\336\340\345\347\355\366\372\373\374\u0115\u0117" +
		"\u011c\u011e\u0120\u0134\u0135\1\2\6\13\27\33\34\36\37\41\50\65\66\74\75\102\105" +
		"\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235" +
		"\236\247\252\263\270\275\276\301\306\312\313\315\317\320\321\322\323\326\327\336" +
		"\340\345\347\355\366\372\373\374\u0115\u0117\u011c\u011e\u0120\u0134\u0135\1\2\6" +
		"\13\27\33\34\36\37\41\65\66\67\74\75\102\105\113\124\132\134\140\143\144\145\156" +
		"\166\171\175\200\202\203\204\222\232\233\235\236\247\252\263\270\275\276\301\306" +
		"\312\313\315\317\320\321\322\323\326\327\336\340\345\347\355\366\372\373\374\u0115" +
		"\u0117\u011c\u011e\u0120\u0134\u0135\200\235\247\252\275\276\315\317\326\336\345" +
		"\355\u0114\176\0\0\36\52\20\61\22\36\65\102\105\113\134\140\145\200\203\204\235\236" +
		"\247\252\263\270\275\276\315\317\321\323\326\327\336\345\355\1\6\37\66\74\143\171" +
		"\175\200\202\232\233\235\247\252\263\275\276\306\312\313\315\317\320\321\322\323" +
		"\326\327\336\340\345\347\355\366\372\373\374\u0115\u0117\u011c\u011e\u0120\u0134" +
		"\u0135\104\133\212\124\156\124\156\166\222\123\170\65\65\105\65\105\65\105\225\360" +
		"\u0112\65\105\144\301\102\145\113\113\134\113\134\133\212\273\274\346\131\113\134" +
		"\171\306\175\366\347\200\235\275\276\317\355\200\235\275\276\317\345\355\200\235" +
		"\275\276\317\345\355\200\235\247\251\252\275\276\315\317\325\326\332\345\355\u0105" +
		"\200\235\247\252\275\276\315\317\326\345\355\200\235\247\275\276\317\345\355\200" +
		"\235\247\252\275\276\315\317\326\336\345\355\200\235\247\252\275\276\315\317\326" +
		"\336\345\355\200\235\247\252\263\275\276\315\317\326\327\336\345\355\200\235\247" +
		"\252\263\275\276\315\317\321\323\326\327\336\345\355\200\235\247\252\263\275\276" +
		"\315\317\321\323\326\327\336\345\355\200\235\247\252\275\276\315\317\326\336\345" +
		"\355\200\235\247\252\263\275\276\315\317\321\323\326\327\336\345\355\200\235\247" +
		"\252\263\275\276\315\317\321\322\323\326\327\336\345\355\320\372\373\u011c\u011e" +
		"\320\372\u011c\u011e\u0117\u0135\113\134\200\235\247\252\275\276\315\317\326\336" +
		"\345\355\113\134\142\200\235\247\252\275\276\315\317\326\336\345\355\1\6\37\66\74" +
		"\143\233\1\6\37\66\74\143\233\340\41\56\115\2\13\27\2\13\27\200\235\247\252\275\276" +
		"\315\317\326\336\345\355\u0114\1\6\36\37\66\74\105\132\134\143\200\233\235\252\275" +
		"\276\315\317\326\345\355\3\22\20\61\104\225\303\360\u0114\102\203\204\270\273\274" +
		"\346\171\200\235\275\276\317\355\200\235\247\251\252\275\276\315\317\325\326\332" +
		"\345\355\u0105\u0117\113\134\200\235\247\252\275\276\315\317\326\336\345\355\41\6" +
		"\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(2230,
		"\u013b\u013c\147\147\4\4\46\4\64\4\4\151\4\4\367\4\5\5\5\62\5\5\5\5\357\5\131\131" +
		"\234\234\234\234\234\234\234\234\234\234\234\234\234\234\234\200\275\276\355\50\67" +
		"\345\u011c\u011c\u011c\u011c\66\71\123\71\321\72\72\144\301\44\63\101\116\305\307" +
		"\324\u010f\u0110\u0117\u0121\33\152\152\152\152\u0134\37\75\145\153\153\153\153\306" +
		"\u0120\u0135\73\73\170\322\343\347\347\347\322\6\6\6\102\6\6\102\154\6\154\154\154" +
		"\6\40\146\155\155\155\155\27\41\43\124\156\124\156\156\235\124\156\235\317\320\235" +
		"\235\235\235\235\235\235\372\235\235\235\235\235\235\235\235\u0112\372\372\372\372" +
		"\61\76\100\220\221\223\300\365\u0118\u011d\u0129\u012d\u0131\u0136\236\236\236\236" +
		"\236\236\236\236\236\236\236\362\370\u0116\157\157\157\157\160\160\160\160\161\161" +
		"\161\161\341\341\u0132\342\342\u0133\323\162\162\162\162\337\373\373\373\373\373" +
		"\163\163\163\163\336\336\u011e\336\u011e\u011e\u011e\237\237\237\237\237\237\237" +
		"\237\237\237\237\237\237\237\237\237\237\132\164\132\132\164\164\132\164\132\132" +
		"\132\132\132\132\132\132\132\132\132\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10" +
		"\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117" +
		"\165\165\10\10\240\10\117\117\165\10\10\240\117\240\240\240\117\240\240\215\10\10" +
		"\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374\374\10\10\10\374\374" +
		"\10\10\10\11\11\11\11\11\11\11\11\12\12\12\12\12\12\12\12\13\13\13\13\13\13\13\366" +
		"\340\34\241\241\241\241\241\241\241\241\241\241\241\241\241\241\241\241\241\10\17" +
		"\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\201\117\117\10\215\117" +
		"\165\165\10\10\240\10\117\117\201\165\10\10\240\117\240\240\240\117\240\240\215\10" +
		"\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374\374\10\10\10\374\374" +
		"\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117" +
		"\10\215\117\165\165\10\10\240\10\117\117\165\10\10\312\240\117\240\240\240\117\240" +
		"\240\215\10\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374\374\10" +
		"\10\10\374\374\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165" +
		"\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\313\240\117\240\240" +
		"\240\117\240\240\215\10\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10" +
		"\374\374\10\10\10\374\374\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117" +
		"\103\117\165\176\202\117\117\10\215\117\165\165\10\10\240\10\117\117\202\165\10\10" +
		"\240\117\240\240\240\117\240\240\215\10\10\10\240\240\374\240\10\240\240\240\240" +
		"\10\240\10\240\10\374\374\10\10\10\374\374\10\10\10\10\17\10\17\17\45\47\51\10\56" +
		"\103\10\10\115\117\103\117\165\171\176\117\117\10\215\117\165\165\10\10\240\10\117" +
		"\117\165\10\10\240\117\240\240\240\117\240\240\215\10\10\10\240\240\374\240\10\240" +
		"\240\240\240\10\240\10\240\10\374\374\10\10\10\374\374\10\10\10\10\17\10\17\17\45" +
		"\47\51\10\56\103\10\10\115\117\103\117\165\172\176\117\117\10\215\117\165\165\10" +
		"\10\240\10\117\117\165\10\10\240\117\240\240\240\117\240\240\215\10\10\10\240\240" +
		"\374\240\10\240\240\240\240\10\240\10\240\10\374\374\10\10\10\374\374\10\10\10\10" +
		"\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\173\176\117\117\10\215" +
		"\117\165\165\10\10\240\10\117\117\165\10\10\240\117\240\240\240\117\240\240\215\10" +
		"\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374\374\10\10\10\374\374" +
		"\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\174\176\117" +
		"\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\240\117\240\240\240\117\240" +
		"\240\215\10\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374\374\10" +
		"\10\10\374\374\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165" +
		"\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\304\10\10\240\117\240\240" +
		"\240\117\240\240\215\10\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10" +
		"\374\374\10\10\10\374\374\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117" +
		"\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\240\117" +
		"\240\240\240\117\240\240\215\10\10\10\240\240\374\240\10\240\240\240\240\10\240\10" +
		"\240\10\374\374\10\u0122\10\10\374\374\10\10\10\10\17\10\17\17\45\47\51\10\56\103" +
		"\10\10\115\117\103\117\165\176\203\117\117\10\215\117\165\165\10\10\240\270\10\117" +
		"\117\203\165\10\10\240\117\240\240\240\117\240\240\215\10\10\10\240\240\374\240\10" +
		"\240\240\240\240\10\240\10\240\10\374\374\10\u0123\10\10\374\374\10\10\10\10\17\10" +
		"\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\204\117\117\10\215\117\165" +
		"\165\10\10\240\10\117\117\204\165\10\10\240\117\240\240\240\117\240\240\215\10\10" +
		"\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374\374\10\10\10\374\374" +
		"\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\205\117" +
		"\117\10\215\117\165\165\10\10\240\10\117\117\205\165\10\10\240\117\240\240\240\117" +
		"\240\240\215\10\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374\374" +
		"\10\10\10\374\374\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117" +
		"\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\240\117\240\240" +
		"\240\117\240\240\215\10\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10" +
		"\374\374\10\u0124\10\10\374\374\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10" +
		"\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10" +
		"\240\117\240\240\240\117\240\240\215\10\10\10\240\240\374\240\10\240\240\240\240" +
		"\10\240\10\240\10\374\374\10\u0125\10\10\374\374\10\10\10\2\10\17\10\17\17\45\47" +
		"\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240" +
		"\10\117\117\165\10\10\240\117\240\240\240\117\240\240\215\10\10\10\240\240\374\240" +
		"\10\240\240\240\240\10\240\10\240\10\374\374\10\10\10\374\374\10\10\10\10\17\10\17" +
		"\30\17\45\47\51\10\56\30\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165" +
		"\165\10\10\240\10\117\117\165\10\10\240\117\240\240\240\117\240\240\215\10\10\10" +
		"\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374\374\10\10\10\374\374\10" +
		"\10\10\10\17\10\17\17\45\47\51\10\56\65\103\10\10\115\117\103\117\165\176\117\117" +
		"\10\215\117\165\165\10\10\240\10\117\117\165\10\10\240\117\240\240\240\117\240\240" +
		"\215\10\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374\374\10\10\10" +
		"\374\374\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\113\10\115\117\103\117\165" +
		"\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\240\117\240\240\240" +
		"\117\240\240\215\10\10\10\240\240\374\240\10\240\240\240\240\10\240\10\240\10\374" +
		"\374\10\10\10\374\374\10\10\10\242\242\242\242\242\242\242\242\242\242\242\242\242" +
		"\233\u0139\3\52\70\31\31\35\53\104\120\104\133\133\212\120\243\272\272\243\316\243" +
		"\243\243\272\243\243\243\243\u0100\u0100\243\243\243\243\243\14\14\14\14\14\14\226" +
		"\231\244\271\310\14\244\244\244\244\244\244\226\363\364\244\244\375\244\244\244\244" +
		"\244\244\u0109\244\u010d\244\231\375\375\u011b\310\u012a\375\375\u0130\u0137\u012a" +
		"\125\206\206\166\222\167\167\224\224\150\225\105\106\127\107\107\110\110\302\u0113" +
		"\u0126\111\111\216\356\121\217\134\135\210\136\136\207\277\350\350\350\175\137\137" +
		"\227\361\232\u0115\u010e\245\314\353\354\371\u0111\246\246\246\246\246\u010b\246" +
		"\247\247\247\247\247\247\247\250\250\250\250\250\250\250\250\250\250\250\250\250" +
		"\250\250\251\251\325\332\251\251\332\251\u0105\251\251\252\315\326\252\252\252\252" +
		"\252\253\253\253\333\253\253\333\253\333\u0108\253\253\254\254\254\254\254\254\254" +
		"\254\254\254\254\254\255\255\255\255\344\255\255\255\255\255\344\255\255\255\256" +
		"\256\256\256\256\256\256\256\256\u0101\u0103\256\256\256\256\256\257\257\257\257" +
		"\257\257\257\257\257\257\257\257\257\257\257\257\260\260\260\260\260\260\260\260" +
		"\260\260\260\260\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261\261" +
		"\262\262\262\262\262\262\262\262\262\262\u0102\262\262\262\262\262\262\376\376\u011a" +
		"\376\376\377\u0119\u012e\u012f\u012b\u0138\140\140\263\263\327\327\263\263\327\263" +
		"\327\327\263\263\141\141\213\141\141\141\141\141\141\141\141\141\141\141\141\u013a" +
		"\23\55\112\114\214\311\15\15\15\15\15\15\15\u010a\57\74\143\20\26\42\21\21\21\264" +
		"\264\264\264\264\264\264\264\264\264\264\264\u0127\16\16\54\16\16\16\130\177\211" +
		"\16\265\16\265\334\265\265\334\265\334\265\265\22\36\32\77\126\303\360\u0114\u0128" +
		"\122\273\274\346\351\352\u010c\230\266\266\266\266\266\266\267\267\330\331\335\267" +
		"\267\335\267\u0104\u0106\u0107\267\267\u011f\u012c\142\142\142\142\142\142\142\142" +
		"\142\142\142\142\142\142\60\24\25");

	private static final short[] tmRuleLen = TMLexer.unpack_short(189,
		"\5\4\7\4\3\3\4\4\3\3\1\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2\1\1\1\3\10\3" +
		"\2\3\1\1\1\1\3\1\3\1\1\2\2\1\1\6\5\5\4\2\4\3\3\1\1\2\1\1\1\4\4\2\1\1\2\1\3\1\4\3" +
		"\3\2\3\2\2\1\1\2\3\3\4\3\1\2\2\1\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\6\4\4" +
		"\2\1\3\2\1\3\3\3\1\5\2\2\1\1\5\3\1\1\1\1\1\3\5\1\1\1\1\1\3\1\1\2\0\2\0\1\0\1\0\1" +
		"\0\1\0\1\0\1\0\3\1\1\0\1\0\3\1\3\1\1\0\3\1\2\1\1\0\3\1\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(189,
		"\100\100\101\101\102\103\104\105\105\106\106\107\110\111\111\112\112\113\113\113" +
		"\113\113\113\113\113\113\113\113\113\113\114\115\115\115\116\116\116\117\120\120" +
		"\121\122\123\123\123\123\124\125\126\126\127\127\127\130\130\131\131\131\131\132" +
		"\132\132\132\132\132\133\134\134\134\135\135\136\136\137\137\140\140\141\142\142" +
		"\142\142\142\142\142\142\142\143\144\144\145\145\146\146\146\147\147\147\150\150" +
		"\151\151\151\152\152\153\153\153\154\155\155\156\156\156\156\156\156\156\156\156" +
		"\157\157\157\157\160\160\160\161\162\163\163\163\164\164\164\164\164\165\165\165" +
		"\165\166\166\167\167\167\170\171\171\172\173\174\174\175\175\176\176\177\177\200" +
		"\200\201\201\202\202\203\203\204\204\205\205\206\206\207\207\210\210\211\211\212" +
		"\212\213\213\214\214\215\215\216\216");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'='",
		"'=>'",
		"';'",
		"'.'",
		"'..'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'~'",
		"'&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"directive",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule0",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"setPrimary",
		"setExpression",
		"rhsBracketsPair",
		"annotations",
		"annotation",
		"expression",
		"literal",
		"map_entries",
		"map_separator",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"import__optlist",
		"option_optlist",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"lexer_state_list_Comma_separated",
		"identifieropt",
		"implementsopt",
		"inputref_list_Comma_separated",
		"rule0_list_Or_separated",
		"rhsSuffixopt",
		"rhsBracketsPair_list_Comma_separated",
		"annotation_list",
		"map_entriesopt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 64;
		static final int header = 65;
		static final int lexer_section = 66;
		static final int parser_section = 67;
		static final int parsing_algorithm = 68;
		static final int import_ = 69;
		static final int option = 70;
		static final int identifier = 71;
		static final int symref = 72;
		static final int type = 73;
		static final int type_part_list = 74;
		static final int type_part = 75;
		static final int pattern = 76;
		static final int lexer_parts = 77;
		static final int lexer_part = 78;
		static final int named_pattern = 79;
		static final int lexeme = 80;
		static final int lexeme_transition = 81;
		static final int lexeme_attrs = 82;
		static final int lexeme_attribute = 83;
		static final int state_selector = 84;
		static final int stateref = 85;
		static final int lexer_state = 86;
		static final int grammar_parts = 87;
		static final int grammar_part = 88;
		static final int nonterm = 89;
		static final int nonterm_type = 90;
		static final int _implements = 91;
		static final int assoc = 92;
		static final int directive = 93;
		static final int inputref = 94;
		static final int references = 95;
		static final int references_cs = 96;
		static final int rules = 97;
		static final int rule0 = 98;
		static final int rhsPrefix = 99;
		static final int rhsSuffix = 100;
		static final int ruleAction = 101;
		static final int rhsParts = 102;
		static final int rhsPart = 103;
		static final int rhsAnnotated = 104;
		static final int rhsAssignment = 105;
		static final int rhsOptional = 106;
		static final int rhsCast = 107;
		static final int rhsUnordered = 108;
		static final int rhsClass = 109;
		static final int rhsPrimary = 110;
		static final int setPrimary = 111;
		static final int setExpression = 112;
		static final int rhsBracketsPair = 113;
		static final int annotations = 114;
		static final int annotation = 115;
		static final int expression = 116;
		static final int literal = 117;
		static final int map_entries = 118;
		static final int map_separator = 119;
		static final int name = 120;
		static final int qualified_id = 121;
		static final int command = 122;
		static final int syntax_problem = 123;
		static final int import__optlist = 124;
		static final int option_optlist = 125;
		static final int parsing_algorithmopt = 126;
		static final int typeopt = 127;
		static final int lexeme_transitionopt = 128;
		static final int iconopt = 129;
		static final int lexeme_attrsopt = 130;
		static final int commandopt = 131;
		static final int lexer_state_list_Comma_separated = 132;
		static final int identifieropt = 133;
		static final int implementsopt = 134;
		static final int inputref_list_Comma_separated = 135;
		static final int rule0_list_Or_separated = 136;
		static final int rhsSuffixopt = 137;
		static final int rhsBracketsPair_list_Comma_separated = 138;
		static final int annotation_list = 139;
		static final int map_entriesopt = 140;
		static final int expression_list_Comma_separated = 141;
		static final int expression_list_Comma_separated_opt = 142;
	}

	public interface Rules {
		static final int nonterm_type_nontermTypeAST = 59;  // nonterm_type ::= Lreturns symref
		static final int nonterm_type_nontermTypeHint = 60;  // nonterm_type ::= Linline Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint2 = 61;  // nonterm_type ::= Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint3 = 62;  // nonterm_type ::= Linterface identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint4 = 63;  // nonterm_type ::= Lvoid
		static final int nonterm_type_nontermTypeRaw = 64;  // nonterm_type ::= type
		static final int directive_directivePrio = 69;  // directive ::= '%' assoc references ';'
		static final int directive_directiveInput = 70;  // directive ::= '%' Linput inputref_list_Comma_separated ';'
		static final int rhsOptional_rhsQuantifier = 104;  // rhsOptional ::= rhsCast '?'
		static final int rhsCast_rhsAsLiteral = 107;  // rhsCast ::= rhsClass Las literal
		static final int rhsPrimary_rhsSymbol = 111;  // rhsPrimary ::= symref
		static final int rhsPrimary_rhsNested = 112;  // rhsPrimary ::= '(' rules ')'
		static final int rhsPrimary_rhsList = 113;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		static final int rhsPrimary_rhsList2 = 114;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		static final int rhsPrimary_rhsQuantifier = 115;  // rhsPrimary ::= rhsPrimary '*'
		static final int rhsPrimary_rhsQuantifier2 = 116;  // rhsPrimary ::= rhsPrimary '+'
		static final int rhsPrimary_rhsIgnored = 117;  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
		static final int rhsPrimary_rhsIgnored2 = 118;  // rhsPrimary ::= '$' '(' rules ')'
		static final int rhsPrimary_rhsSet = 119;  // rhsPrimary ::= Lset '(' setExpression ')'
		static final int setPrimary_setSymbol = 120;  // setPrimary ::= ID symref
		static final int setPrimary_setSymbol2 = 121;  // setPrimary ::= symref
		static final int setPrimary_setCompound = 122;  // setPrimary ::= '(' setExpression ')'
		static final int setPrimary_setComplement = 123;  // setPrimary ::= '~' setPrimary
		static final int setExpression_setBinary = 125;  // setExpression ::= setExpression '|' setExpression
		static final int setExpression_setBinary2 = 126;  // setExpression ::= setExpression '&' setExpression
		static final int expression_instance = 134;  // expression ::= Lnew name '(' map_entriesopt ')'
		static final int expression_array = 135;  // expression ::= '[' expression_list_Comma_separated_opt ']'
		static final int literal_literal = 137;  // literal ::= scon
		static final int literal_literal2 = 138;  // literal ::= icon
		static final int literal_literal3 = 139;  // literal ::= Ltrue
		static final int literal_literal4 = 140;  // literal ::= Lfalse
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 33) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 33;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 33);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 0:  // input ::= header import__optlist option_optlist lexer_section parser_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead - 1].value) /* lexer */,
						((List<ITmaGrammarPart>)tmStack[tmHead].value) /* parser */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 1:  // input ::= header import__optlist option_optlist lexer_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead].value) /* lexer */,
						null /* parser */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 2:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 3:  // header ::= Llanguage name parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 4:  // lexer_section ::= '::' Llexer lexer_parts
				tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value);
				break;
			case 5:  // parser_section ::= '::' Lparser grammar_parts
				tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value);
				break;
			case 6:  // parsing_algorithm ::= Llalr '(' icon ')'
				tmLeft.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 7:  // import_ ::= Limport ID scon ';'
				tmLeft.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // import_ ::= Limport scon ';'
				tmLeft.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 9:  // option ::= ID '=' expression
				tmLeft.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* key */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 10:  // option ::= syntax_problem
				tmLeft.value = new TmaOption(
						null /* key */,
						null /* value */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 11:  // identifier ::= ID
				tmLeft.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 12:  // symref ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 14:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 30:  // pattern ::= regexp
				tmLeft.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 31:  // lexer_parts ::= lexer_part
				tmLeft.value = new ArrayList();
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 32:  // lexer_parts ::= lexer_parts lexer_part
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 33:  // lexer_parts ::= lexer_parts syntax_problem
				((List<ITmaLexerPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 37:  // named_pattern ::= ID '=' pattern
				tmLeft.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 38:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* transition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemeAttrs)tmStack[tmHead - 1].value) /* attrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						null /* input */, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 39:  // lexeme ::= identifier typeopt ':'
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* transition */,
						null /* priority */,
						null /* attrs */,
						null /* command */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 40:  // lexeme_transition ::= '=>' stateref
				tmLeft.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 41:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				tmLeft.value = new TmaLexemeAttrs(
						((TmaLexemeAttribute)tmStack[tmHead - 1].value) /* kind */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 42:  // lexeme_attribute ::= Lsoft
				tmLeft.value = TmaLexemeAttribute.LSOFT;
				break;
			case 43:  // lexeme_attribute ::= Lclass
				tmLeft.value = TmaLexemeAttribute.LCLASS;
				break;
			case 44:  // lexeme_attribute ::= Lspace
				tmLeft.value = TmaLexemeAttribute.LSPACE;
				break;
			case 45:  // lexeme_attribute ::= Llayout
				tmLeft.value = TmaLexemeAttribute.LLAYOUT;
				break;
			case 46:  // state_selector ::= '[' lexer_state_list_Comma_separated ']'
				tmLeft.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 47:  // stateref ::= ID
				tmLeft.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 48:  // lexer_state ::= identifier '=>' stateref
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 49:  // lexer_state ::= identifier
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 50:  // grammar_parts ::= grammar_part
				tmLeft.value = new ArrayList();
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 51:  // grammar_parts ::= grammar_parts grammar_part
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 52:  // grammar_parts ::= grammar_parts syntax_problem
				((List<ITmaGrammarPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 55:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 56:  // nonterm ::= annotations identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 57:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 58:  // nonterm ::= identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 59:  // nonterm_type ::= Lreturns symref
				tmLeft.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 60:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						true /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 61:  // nonterm_type ::= Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 62:  // nonterm_type ::= Linterface identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 63:  // nonterm_type ::= Lvoid
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* _implements */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 64:  // nonterm_type ::= type
				tmLeft.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* typeText */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 65:  // implements ::= ':' references_cs
				tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value);
				break;
			case 66:  // assoc ::= Lleft
				tmLeft.value = TmaAssoc.LLEFT;
				break;
			case 67:  // assoc ::= Lright
				tmLeft.value = TmaAssoc.LRIGHT;
				break;
			case 68:  // assoc ::= Lnonassoc
				tmLeft.value = TmaAssoc.LNONASSOC;
				break;
			case 69:  // directive ::= '%' assoc references ';'
				tmLeft.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 70:  // directive ::= '%' Linput inputref_list_Comma_separated ';'
				tmLeft.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 71:  // inputref ::= symref Lnoeoi
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* reference */,
						true /* noeoi */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 72:  // inputref ::= symref
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						false /* noeoi */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 73:  // references ::= symref
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 74:  // references ::= references symref
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 75:  // references_cs ::= symref
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 76:  // references_cs ::= references_cs ',' symref
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 78:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 79:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 80:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 81:  // rule0 ::= rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 82:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 83:  // rule0 ::= rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 84:  // rule0 ::= ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 85:  // rule0 ::= rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 86:  // rule0 ::= syntax_problem
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* action */,
						null /* suffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 87:  // rhsPrefix ::= annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 88:  // rhsSuffix ::= '%' Lprio symref
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 89:  // rhsSuffix ::= '%' Lshift symref
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 90:  // ruleAction ::= '{~' identifier scon '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* action */,
						((String)tmStack[tmHead - 1].value) /* parameter */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 91:  // ruleAction ::= '{~' identifier '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 1].value) /* action */,
						null /* parameter */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 92:  // rhsParts ::= rhsPart
				tmLeft.value = new ArrayList();
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 93:  // rhsParts ::= rhsParts rhsPart
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 94:  // rhsParts ::= rhsParts syntax_problem
				((List<ITmaRhsPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 99:  // rhsAnnotated ::= annotations rhsAssignment
				tmLeft.value = new TmaRhsAnnotated(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 101:  // rhsAssignment ::= identifier '=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 102:  // rhsAssignment ::= identifier '+=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 104:  // rhsOptional ::= rhsCast '?'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 105:  // rhsCast ::= rhsClass
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* target */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 106:  // rhsCast ::= rhsClass Las symref
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaSymref)tmStack[tmHead].value) /* target */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 107:  // rhsCast ::= rhsClass Las literal
				tmLeft.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 108:  // rhsUnordered ::= rhsPart '&' rhsPart
				tmLeft.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 110:  // rhsClass ::= identifier ':' rhsPrimary
				tmLeft.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 111:  // rhsPrimary ::= symref
				tmLeft.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 112:  // rhsPrimary ::= '(' rules ')'
				tmLeft.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 113:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						true /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 114:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						false /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 115:  // rhsPrimary ::= rhsPrimary '*'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 116:  // rhsPrimary ::= rhsPrimary '+'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 117:  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 3].value) /* rules */,
						((List<TmaRhsBracketsPair>)tmStack[tmHead - 1].value) /* brackets */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 118:  // rhsPrimary ::= '$' '(' rules ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* brackets */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 119:  // rhsPrimary ::= Lset '(' setExpression ')'
				tmLeft.value = new TmaRhsSet(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* expr */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 120:  // setPrimary ::= ID symref
				tmLeft.value = new TmaSetSymbol(
						((String)tmStack[tmHead - 1].value) /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 121:  // setPrimary ::= symref
				tmLeft.value = new TmaSetSymbol(
						null /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 122:  // setPrimary ::= '(' setExpression ')'
				tmLeft.value = new TmaSetCompound(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 123:  // setPrimary ::= '~' setPrimary
				tmLeft.value = new TmaSetComplement(
						((ITmaSetExpression)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 125:  // setExpression ::= setExpression '|' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.OR /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 126:  // setExpression ::= setExpression '&' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.AMPERSAND /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 127:  // rhsBracketsPair ::= symref '..' symref
				tmLeft.value = new TmaRhsBracketsPair(
						((TmaSymref)tmStack[tmHead - 2].value) /* lhs */,
						((TmaSymref)tmStack[tmHead].value) /* rhs */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 128:  // annotations ::= annotation_list
				tmLeft.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 129:  // annotation ::= '@' ID '{' expression '}'
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 130:  // annotation ::= '@' ID
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 131:  // annotation ::= '@' syntax_problem
				tmLeft.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 134:  // expression ::= Lnew name '(' map_entriesopt ')'
				tmLeft.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntriesItem>)tmStack[tmHead - 1].value) /* mapEntries */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 135:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				tmLeft.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 137:  // literal ::= scon
				tmLeft.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 138:  // literal ::= icon
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						((Integer)tmStack[tmHead].value) /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 139:  // literal ::= Ltrue
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						true /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 140:  // literal ::= Lfalse
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 141:  // map_entries ::= ID map_separator expression
				tmLeft.value = new ArrayList();
				((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* expression */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset));
				break;
			case 142:  // map_entries ::= map_entries ',' ID map_separator expression
				((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* expression */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset));
				break;
			case 146:  // name ::= qualified_id
				tmLeft.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 148:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 149:  // command ::= code
				tmLeft.value = new TmaCommand(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 150:  // syntax_problem ::= error
				tmLeft.value = new TmaSyntaxProblem(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 151:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 152:  // import__optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 153:  // option_optlist ::= option_optlist option
				((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 154:  // option_optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 167:  // lexer_state_list_Comma_separated ::= lexer_state_list_Comma_separated ',' lexer_state
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 168:  // lexer_state_list_Comma_separated ::= lexer_state
				tmLeft.value = new ArrayList();
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 173:  // inputref_list_Comma_separated ::= inputref_list_Comma_separated ',' inputref
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 174:  // inputref_list_Comma_separated ::= inputref
				tmLeft.value = new ArrayList();
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 175:  // rule0_list_Or_separated ::= rule0_list_Or_separated '|' rule0
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 176:  // rule0_list_Or_separated ::= rule0
				tmLeft.value = new ArrayList();
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 179:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair_list_Comma_separated ',' rhsBracketsPair
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 180:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair
				tmLeft.value = new ArrayList();
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 181:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 182:  // annotation_list ::= annotation
				tmLeft.value = new ArrayList();
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 185:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 186:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 315);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 316);
	}
}
