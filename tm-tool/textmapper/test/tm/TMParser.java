/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(292,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\243\0\244\0\uffcd\uffff\260\0\22" +
		"\0\245\0\246\0\uffff\uffff\231\0\230\0\242\0\255\0\uff93\uffff\uff8b\uffff\uff7f" +
		"\uffff\236\0\uff4f\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\6\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\0\0\uffff\uffff\uffff\uffff\241\0\uff49\uffff\uffff" +
		"\uffff\uffff\uffff\11\0\256\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uff1d" +
		"\uffff\2\0\20\0\235\0\uffff\uffff\uff17\uffff\uffff\uffff\uff11\uffff\uffff\uffff" +
		"\16\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\4\0\252\0\253\0\251\0\uffff" +
		"\uffff\uffff\uffff\234\0\uffff\uffff\14\0\15\0\uffff\uffff\uff0b\uffff\uff03\uffff" +
		"\ufefd\uffff\45\0\51\0\52\0\50\0\17\0\uffff\uffff\247\0\uffff\uffff\10\0\21\0\ufecb" +
		"\uffff\77\0\uffff\uffff\uffff\uffff\uffff\uffff\54\0\uffff\uffff\46\0\47\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\ufec3\uffff\104\0\107\0\110\0\uffff\uffff\223\0\ufe91" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\100\0\44\0\53\0\uffff\uffff\35\0\36\0" +
		"\31\0\32\0\uffff\uffff\27\0\30\0\34\0\37\0\41\0\40\0\33\0\uffff\uffff\26\0\ufe5f" +
		"\uffff\uffff\uffff\130\0\131\0\132\0\uffff\uffff\ufe2b\uffff\227\0\ufdf7\uffff\uffff" +
		"\uffff\uffff\uffff\ufdbb\uffff\ufd8d\uffff\125\0\126\0\uffff\uffff\105\0\106\0\uffff" +
		"\uffff\222\0\250\0\101\0\102\0\76\0\23\0\43\0\uffff\uffff\24\0\25\0\ufd5f\uffff\ufd25" +
		"\uffff\135\0\uffff\uffff\141\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufd1d" +
		"\uffff\uffff\uffff\ufce1\uffff\257\0\uffff\uffff\207\0\uffff\uffff\146\0\ufc93\uffff" +
		"\150\0\ufc59\uffff\ufc1d\uffff\167\0\172\0\174\0\ufbdd\uffff\170\0\ufb9b\uffff\ufb57" +
		"\uffff\uffff\uffff\171\0\156\0\ufb0f\uffff\155\0\ufb07\uffff\115\0\116\0\ufad9\uffff" +
		"\ufad3\uffff\ufacd\uffff\ufa91\uffff\uffff\uffff\42\0\uffff\uffff\56\0\ufa55\uffff" +
		"\137\0\136\0\uffff\uffff\133\0\142\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\ufa1d\uffff\uf9e1\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\114\0\uf9a3\uffff\153\0\uf967\uffff\166\0\154\0\uffff\uffff\200\0\uffff\uffff\213" +
		"\0\214\0\173\0\uf927\uffff\uf8e9\uffff\uffff\uffff\120\0\123\0\124\0\uffff\uffff" +
		"\uffff\uffff\uf8e3\uffff\70\0\60\0\uf8a7\uffff\134\0\225\0\162\0\163\0\161\0\157" +
		"\0\uffff\uffff\210\0\uffff\uffff\uffff\uffff\uffff\uffff\175\0\uf871\uffff\176\0" +
		"\152\0\uf829\uffff\202\0\203\0\145\0\122\0\143\0\uf7e9\uffff\113\0\112\0\uffff\uffff" +
		"\uffff\uffff\62\0\uf7e3\uffff\160\0\uffff\uffff\uffff\uffff\220\0\uffff\uffff\111" +
		"\0\72\0\73\0\74\0\75\0\uffff\uffff\64\0\66\0\uffff\uffff\uffff\uffff\216\0\uffff" +
		"\uffff\144\0\71\0\212\0\211\0\uffff\uffff\uffff\uffff\217\0\221\0\215\0\uffff\uffff" +
		"\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(2126,
		"\10\1\37\1\40\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1" +
		"\63\1\64\1\65\1\66\1\67\1\70\1\71\1\uffff\ufffe\2\uffff\3\uffff\21\uffff\37\uffff" +
		"\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\47\uffff\41\uffff\42\uffff\43\uffff\22\240\uffff\ufffe\23\uffff\67\uffff" +
		"\14\7\uffff\ufffe\15\uffff\14\254\23\254\24\254\67\254\uffff\ufffe\46\uffff\10\3" +
		"\37\3\40\3\47\3\50\3\51\3\52\3\53\3\54\3\55\3\56\3\57\3\60\3\61\3\62\3\63\3\64\3" +
		"\65\3\66\3\67\3\70\3\71\3\uffff\ufffe\17\uffff\22\237\uffff\ufffe\40\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff" +
		"\24\233\uffff\ufffe\10\uffff\0\5\uffff\ufffe\17\uffff\24\232\uffff\ufffe\67\uffff" +
		"\14\7\uffff\ufffe\12\uffff\20\21\23\21\uffff\ufffe\23\uffff\20\55\uffff\ufffe\21" +
		"\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52" +
		"\uffff\51\uffff\50\uffff\47\uffff\0\12\10\12\uffff\ufffe\13\uffff\17\103\22\103\uffff" +
		"\ufffe\6\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54" +
		"\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\0\13\uffff\ufffe\36\uffff\22" +
		"\224\23\224\35\224\40\224\47\224\50\224\51\224\52\224\53\224\54\224\55\224\56\224" +
		"\57\224\60\224\61\224\62\224\63\224\64\224\65\224\66\224\67\224\70\224\71\224\uffff" +
		"\ufffe\1\uffff\0\67\10\67\21\67\37\67\40\67\47\67\50\67\51\67\52\67\53\67\54\67\55" +
		"\67\56\67\57\67\60\67\61\67\62\67\63\67\64\67\65\67\66\67\67\67\70\67\71\67\uffff" +
		"\ufffe\74\uffff\22\226\23\226\35\226\36\226\40\226\47\226\50\226\51\226\52\226\53" +
		"\226\54\226\55\226\56\226\57\226\60\226\61\226\62\226\63\226\64\226\65\226\66\226" +
		"\67\226\70\226\71\226\uffff\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37" +
		"\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\50\uffff\47\uffff\73\uffff\11\151\14\151\uffff\ufffe\40\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\7" +
		"\117\20\117\uffff\ufffe\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53" +
		"\uffff\52\uffff\51\uffff\50\uffff\47\uffff\7\117\20\117\uffff\ufffe\13\uffff\0\57" +
		"\3\57\10\57\21\57\23\57\37\57\40\57\47\57\50\57\51\57\52\57\53\57\54\57\55\57\56" +
		"\57\57\57\60\57\61\57\62\57\63\57\64\57\65\57\66\57\67\57\70\57\71\57\73\57\uffff" +
		"\ufffe\57\uffff\14\140\17\140\uffff\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff" +
		"\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\47\uffff\73\uffff\11\151\24\151\uffff\ufffe\12\21\20\21\32\21" +
		"\6\22\11\22\14\22\23\22\24\22\30\22\31\22\33\22\34\22\35\22\36\22\37\22\40\22\44" +
		"\22\45\22\47\22\50\22\51\22\52\22\53\22\54\22\55\22\56\22\57\22\60\22\61\22\62\22" +
		"\63\22\64\22\65\22\66\22\67\22\70\22\71\22\73\22\uffff\ufffe\6\uffff\23\uffff\35" +
		"\uffff\36\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52" +
		"\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\151\14\151\24\151\uffff\ufffe\6\uffff" +
		"\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\151\14\151\24" +
		"\151\uffff\ufffe\34\uffff\6\164\11\164\14\164\23\164\24\164\35\164\36\164\37\164" +
		"\40\164\44\164\47\164\50\164\51\164\52\164\53\164\54\164\55\164\56\164\57\164\60" +
		"\164\61\164\62\164\63\164\64\164\65\164\66\164\67\164\70\164\71\164\73\164\uffff" +
		"\ufffe\33\uffff\6\177\11\177\14\177\23\177\24\177\34\177\35\177\36\177\37\177\40" +
		"\177\44\177\47\177\50\177\51\177\52\177\53\177\54\177\55\177\56\177\57\177\60\177" +
		"\61\177\62\177\63\177\64\177\65\177\66\177\67\177\70\177\71\177\73\177\uffff\ufffe" +
		"\45\uffff\6\201\11\201\14\201\23\201\24\201\33\201\34\201\35\201\36\201\37\201\40" +
		"\201\44\201\47\201\50\201\51\201\52\201\53\201\54\201\55\201\56\201\57\201\60\201" +
		"\61\201\62\201\63\201\64\201\65\201\66\201\67\201\70\201\71\201\73\201\uffff\ufffe" +
		"\30\uffff\31\uffff\6\205\11\205\14\205\23\205\24\205\33\205\34\205\35\205\36\205" +
		"\37\205\40\205\44\205\45\205\47\205\50\205\51\205\52\205\53\205\54\205\55\205\56" +
		"\205\57\205\60\205\61\205\62\205\63\205\64\205\65\205\66\205\67\205\70\205\71\205" +
		"\73\205\uffff\ufffe\11\uffff\14\147\24\147\uffff\ufffe\40\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\7\117\20" +
		"\117\uffff\ufffe\20\uffff\7\121\uffff\ufffe\20\uffff\7\121\uffff\ufffe\6\uffff\21" +
		"\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\151\14\151" +
		"\uffff\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff" +
		"\73\uffff\11\151\14\151\uffff\ufffe\3\uffff\0\61\10\61\21\61\23\61\37\61\40\61\47" +
		"\61\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61" +
		"\65\61\66\61\67\61\70\61\71\61\73\61\uffff\ufffe\6\uffff\23\uffff\35\uffff\36\uffff" +
		"\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\47\uffff\44\uffff\73\uffff\11\151\24\151\uffff\ufffe\6\uffff\21" +
		"\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73\uffff\11\151\14\151" +
		"\24\151\uffff\ufffe\6\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff" +
		"\73\uffff\11\151\14\151\24\151\uffff\ufffe\34\uffff\6\165\11\165\14\165\23\165\24" +
		"\165\35\165\36\165\37\165\40\165\44\165\47\165\50\165\51\165\52\165\53\165\54\165" +
		"\55\165\56\165\57\165\60\165\61\165\62\165\63\165\64\165\65\165\66\165\67\165\70" +
		"\165\71\165\73\165\uffff\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff" +
		"\40\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\47\uffff\73\uffff\11\151\14\151\24\151\uffff\ufffe\20\uffff\7\121\uffff" +
		"\ufffe\6\uffff\21\uffff\23\uffff\35\uffff\36\uffff\37\uffff\40\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\47\uffff\73" +
		"\uffff\11\151\14\151\uffff\ufffe\23\uffff\0\63\10\63\21\63\37\63\40\63\47\63\50\63" +
		"\51\63\52\63\53\63\54\63\55\63\56\63\57\63\60\63\61\63\62\63\63\63\64\63\65\63\66" +
		"\63\67\63\70\63\71\63\73\63\uffff\ufffe\30\uffff\31\uffff\6\206\11\206\14\206\23" +
		"\206\24\206\33\206\34\206\35\206\36\206\37\206\40\206\44\206\45\206\47\206\50\206" +
		"\51\206\52\206\53\206\54\206\55\206\56\206\57\206\60\206\61\206\62\206\63\206\64" +
		"\206\65\206\66\206\67\206\70\206\71\206\73\206\uffff\ufffe\34\204\6\204\11\204\14" +
		"\204\23\204\24\204\35\204\36\204\37\204\40\204\44\204\47\204\50\204\51\204\52\204" +
		"\53\204\54\204\55\204\56\204\57\204\60\204\61\204\62\204\63\204\64\204\65\204\66" +
		"\204\67\204\70\204\71\204\73\204\uffff\ufffe\17\uffff\7\127\uffff\ufffe\73\uffff" +
		"\0\65\10\65\21\65\37\65\40\65\47\65\50\65\51\65\52\65\53\65\54\65\55\65\56\65\57" +
		"\65\60\65\61\65\62\65\63\65\64\65\65\65\66\65\67\65\70\65\71\65\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(138,
		"\0\2\4\17\31\31\31\46\52\54\55\62\66\101\106\107\121\131\155\166\222\236\237\243" +
		"\247\256\261\262\267\276\316\342\367\u0138\u0140\u0148\u014f\u0150\u0151\u0152\u0195" +
		"\u01d7\u0219\u025c\u029e\u02e0\u0322\u0364\u03a6\u03e8\u042d\u0470\u04b3\u04f5\u0537" +
		"\u0579\u05bc\u05fe\u0640\u0640\u064d\u064e\u064f\u0650\u0651\u0652\u0654\u0655\u0656" +
		"\u0671\u0697\u069a\u069c\u06a0\u06a2\u06a3\u06a5\u06a7\u06a9\u06aa\u06ab\u06ac\u06ae" +
		"\u06b0\u06b2\u06b3\u06b5\u06b7\u06b9\u06bc\u06bd\u06bf\u06c1\u06c3\u06c4\u06ca\u06d1" +
		"\u06d8\u06e3\u06eb\u06f7\u0703\u0710\u071f\u072e\u073a\u0749\u0759\u075b\u076a\u077a" +
		"\u0781\u0789\u078a\u078c\u078f\u0792\u079f\u07b4\u07b5\u07b6\u07b8\u07b9\u07ba\u07bb" +
		"\u07bc\u07bd\u07be\u07c1\u07c4\u07c5\u07cb\u07d6\u07d7\u07e6\u07e7\u07e8\u07e9");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(2025,
		"\u0120\u0121\123\170\1\6\34\37\47\66\74\124\143\233\332\1\6\37\43\66\74\143\233\301" +
		"\332\113\134\200\236\246\250\273\274\315\316\323\336\346\133\207\212\275\36\52\264" +
		"\51\56\103\115\242\56\115\120\225\32\46\64\77\230\232\244\344\345\363\u0102\21\124" +
		"\156\166\222\u0114\24\57\122\124\156\166\222\230\377\u0116\56\115\126\242\271\272" +
		"\337\364\1\6\37\65\66\74\105\124\143\156\166\200\222\233\236\273\274\316\336\346" +
		"\25\122\124\156\166\222\312\313\360\20\26\30\104\124\133\156\166\200\212\222\236" +
		"\237\246\250\261\273\274\315\316\317\320\321\323\330\336\346\351\42\60\62\151\156" +
		"\166\222\314\363\u0107\u0110\u0116\307\124\156\166\222\124\156\166\222\124\156\166" +
		"\222\260\366\u0113\260\366\u0113\242\124\156\166\222\255\124\156\166\222\251\325" +
		"\371\200\236\246\250\261\273\274\315\316\317\320\321\323\330\336\346\113\124\134" +
		"\142\156\166\200\222\235\236\246\250\273\274\315\316\323\330\336\346\1\6\36\37\66" +
		"\74\105\132\134\143\200\233\236\250\273\274\315\316\323\336\346\1\2\6\13\27\33\34" +
		"\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200" +
		"\202\203\204\222\232\233\235\236\246\250\261\266\273\274\277\304\310\311\313\315" +
		"\316\317\320\321\323\330\332\336\340\346\362\u0107\u0108\u010a\u011b\u011c\1\6\37" +
		"\66\74\143\233\332\1\6\37\66\74\143\233\332\1\6\37\66\74\143\233\315\257\22\1\2\6" +
		"\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\133\134\140\143\144\145\156" +
		"\166\171\175\200\202\203\204\212\222\232\233\235\236\246\250\261\266\273\274\277" +
		"\304\310\311\313\315\316\317\320\321\323\330\332\336\340\346\362\u0107\u0108\u010a" +
		"\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143" +
		"\144\145\156\166\171\175\200\202\203\204\222\232\233\234\235\236\246\250\261\266" +
		"\273\274\277\304\310\311\313\315\316\317\320\321\323\330\332\336\340\346\362\u0107" +
		"\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132" +
		"\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\234\235\236\246" +
		"\250\261\266\273\274\277\304\310\311\313\315\316\317\320\321\323\330\332\336\340" +
		"\346\362\u0107\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102" +
		"\105\113\124\132\133\134\140\143\144\145\156\166\171\175\200\202\203\204\212\222" +
		"\232\233\235\236\246\250\261\266\273\274\277\304\310\311\313\315\316\317\320\321" +
		"\323\330\332\336\340\346\362\u0107\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37" +
		"\41\65\66\74\75\102\105\113\124\131\132\134\140\143\144\145\156\166\171\175\200\202" +
		"\203\204\222\232\233\235\236\246\250\261\266\273\274\277\304\310\311\313\315\316" +
		"\317\320\321\323\330\332\336\340\346\362\u0107\u0108\u010a\u011b\u011c\1\2\6\13\27" +
		"\33\34\36\37\41\65\66\74\75\102\105\113\124\131\132\134\140\143\144\145\156\166\171" +
		"\175\200\202\203\204\222\232\233\235\236\246\250\261\266\273\274\277\304\310\311" +
		"\313\315\316\317\320\321\323\330\332\336\340\346\362\u0107\u0108\u010a\u011b\u011c" +
		"\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\131\132\134\140\143\144\145" +
		"\156\166\171\175\200\202\203\204\222\232\233\235\236\246\250\261\266\273\274\277" +
		"\304\310\311\313\315\316\317\320\321\323\330\332\336\340\346\362\u0107\u0108\u010a" +
		"\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\131\132\134\140" +
		"\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\246\250\261\266" +
		"\273\274\277\304\310\311\313\315\316\317\320\321\323\330\332\336\340\346\362\u0107" +
		"\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132" +
		"\134\140\143\144\145\156\166\171\175\200\202\203\204\222\226\232\233\235\236\246" +
		"\250\261\266\273\274\277\304\310\311\313\315\316\317\320\321\323\330\332\336\340" +
		"\346\362\u0107\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102" +
		"\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233" +
		"\235\236\246\250\261\266\273\274\277\304\310\311\313\315\316\317\320\321\323\330" +
		"\332\336\340\346\362\u0103\u0107\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37" +
		"\41\65\66\74\75\102\105\113\124\132\133\134\140\143\144\145\156\166\171\175\200\201" +
		"\202\203\204\212\222\232\233\235\236\246\250\261\266\273\274\277\304\310\311\313" +
		"\315\316\317\320\321\323\330\332\336\340\346\362\u0103\u0107\u0108\u010a\u011b\u011c" +
		"\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\133\134\140\143\144\145" +
		"\156\166\171\175\200\202\203\204\212\222\232\233\235\236\246\250\261\266\273\274" +
		"\277\304\310\311\313\315\316\317\320\321\323\330\332\336\340\346\362\u0107\u0108" +
		"\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\133" +
		"\134\140\143\144\145\156\166\171\175\200\202\203\204\212\222\232\233\235\236\246" +
		"\250\261\266\273\274\277\304\310\311\313\315\316\317\320\321\323\330\332\336\340" +
		"\346\362\u0107\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102" +
		"\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233" +
		"\235\236\246\250\261\266\273\274\277\304\310\311\313\315\316\317\320\321\323\330" +
		"\332\336\340\346\362\u0103\u0107\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37" +
		"\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203" +
		"\204\222\232\233\235\236\246\250\261\266\273\274\277\304\310\311\313\315\316\317" +
		"\320\321\323\330\332\336\340\346\362\u0103\u0107\u0108\u010a\u011b\u011c\0\1\2\6" +
		"\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166" +
		"\171\175\200\202\203\204\222\232\233\235\236\246\250\261\266\273\274\277\304\310" +
		"\311\313\315\316\317\320\321\323\330\332\336\340\346\362\u0107\u0108\u010a\u011b" +
		"\u011c\1\2\6\13\20\27\33\34\36\37\41\61\65\66\74\75\102\105\113\124\132\134\140\143" +
		"\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\246\250\261\266\273" +
		"\274\277\304\310\311\313\315\316\317\320\321\323\330\332\336\340\346\362\u0107\u0108" +
		"\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\50\65\66\74\75\102\105\113\124\132" +
		"\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\246\250" +
		"\261\266\273\274\277\304\310\311\313\315\316\317\320\321\323\330\332\336\340\346" +
		"\362\u0107\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\67\74\75\102" +
		"\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233" +
		"\235\236\246\250\261\266\273\274\277\304\310\311\313\315\316\317\320\321\323\330" +
		"\332\336\340\346\362\u0107\u0108\u010a\u011b\u011c\200\236\246\250\273\274\315\316" +
		"\323\330\336\346\u0105\176\0\0\36\52\20\61\22\36\65\102\105\113\134\140\145\200\203" +
		"\204\235\236\246\250\261\266\273\274\313\315\316\317\321\323\330\336\346\1\6\37\66" +
		"\74\143\171\175\200\202\232\233\236\246\250\261\273\274\304\310\311\315\316\317\320" +
		"\321\323\330\332\336\340\346\362\u0107\u0108\u010a\u011b\u011c\104\133\212\124\156" +
		"\124\156\166\222\123\170\65\65\105\65\105\65\105\225\351\u0103\65\105\144\277\102" +
		"\145\113\113\134\113\134\133\212\271\272\337\131\113\134\171\304\175\362\340\200" +
		"\236\273\274\316\346\200\236\273\274\316\336\346\200\236\273\274\316\336\346\200" +
		"\236\246\250\273\274\315\316\323\336\346\200\236\246\273\274\316\336\346\200\236" +
		"\246\250\273\274\315\316\323\330\336\346\200\236\246\250\273\274\315\316\323\330" +
		"\336\346\200\236\246\250\261\273\274\315\316\323\330\336\346\200\236\246\250\261" +
		"\273\274\315\316\317\321\323\330\336\346\200\236\246\250\261\273\274\315\316\317" +
		"\321\323\330\336\346\200\236\246\250\273\274\315\316\323\330\336\346\200\236\246" +
		"\250\261\273\274\315\316\317\321\323\330\336\346\200\236\246\250\261\273\274\315" +
		"\316\317\320\321\323\330\336\346\u0108\u011c\113\134\200\235\236\246\250\273\274" +
		"\315\316\323\330\336\346\113\134\142\200\235\236\246\250\273\274\315\316\323\330" +
		"\336\346\1\6\37\66\74\143\233\1\6\37\66\74\143\233\332\41\56\115\2\13\27\2\13\27" +
		"\200\236\246\250\273\274\315\316\323\330\336\346\u0105\1\6\36\37\66\74\105\132\134" +
		"\143\200\233\236\250\273\274\315\316\323\336\346\3\22\20\61\104\225\301\351\u0105" +
		"\102\203\204\266\271\272\337\171\200\236\273\274\316\346\200\236\246\250\273\274" +
		"\315\316\323\336\346\u0108\113\134\200\235\236\246\250\273\274\315\316\323\330\336" +
		"\346\41\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(2025,
		"\u0122\u0123\147\147\4\4\46\4\64\4\4\151\4\4\4\5\5\5\62\5\5\5\5\350\5\131\131\234" +
		"\234\234\234\234\234\234\234\234\234\234\200\273\274\346\50\67\336\66\71\123\71\317" +
		"\72\72\144\277\44\63\101\116\303\305\322\u0100\u0101\u0108\u010b\33\152\152\152\152" +
		"\u011b\37\75\145\153\153\153\153\304\u010a\u011c\73\73\170\320\340\340\340\320\6" +
		"\6\6\102\6\6\102\154\6\154\154\235\154\6\235\235\235\235\235\235\40\146\155\155\155" +
		"\155\356\357\u0106\27\41\43\124\156\124\156\156\236\124\156\236\316\236\236\236\236" +
		"\236\236\236\236\236\236\236\236\236\236\u0103\61\76\100\220\221\223\276\361\u0109" +
		"\u0113\u0118\u011d\353\157\157\157\157\160\160\160\160\161\161\161\161\333\333\u0119" +
		"\334\334\u011a\321\162\162\162\162\331\163\163\163\163\330\330\330\237\237\237\237" +
		"\237\237\237\237\237\237\237\237\237\237\237\237\132\164\132\132\164\164\132\164" +
		"\132\132\132\132\132\132\132\132\132\132\132\132\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7" +
		"\7\7\7\7\7\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117" +
		"\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240\240\240\117\240\240" +
		"\215\10\10\10\117\240\240\240\10\240\240\240\10\240\10\240\10\10\10\10\10\10\11\11" +
		"\11\11\11\11\11\11\12\12\12\12\12\12\12\12\13\13\13\13\13\13\13\362\332\34\10\17" +
		"\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\201\117\117\10\215\117" +
		"\165\165\10\10\240\10\117\117\201\165\10\10\117\240\240\240\240\117\240\240\215\10" +
		"\10\10\117\240\240\240\10\240\240\240\10\240\10\240\10\10\10\10\10\10\10\17\10\17" +
		"\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10" +
		"\10\240\10\117\117\165\10\10\310\117\240\240\240\240\117\240\240\215\10\10\10\117" +
		"\240\240\240\10\240\240\240\10\240\10\240\10\10\10\10\10\10\10\17\10\17\17\45\47" +
		"\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240" +
		"\10\117\117\165\10\10\311\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240" +
		"\240\10\240\240\240\10\240\10\240\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56" +
		"\103\10\10\115\117\103\117\165\176\202\117\117\10\215\117\165\165\10\10\240\10\117" +
		"\117\202\165\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\240\10" +
		"\240\240\240\10\240\10\240\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10" +
		"\10\115\117\103\117\165\171\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165" +
		"\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\240\10\240\240\240" +
		"\10\240\10\240\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117" +
		"\103\117\165\172\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117" +
		"\240\240\240\240\117\240\240\215\10\10\10\117\240\240\240\10\240\240\240\10\240\10" +
		"\240\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165" +
		"\173\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240\240" +
		"\240\117\240\240\215\10\10\10\117\240\240\240\10\240\240\240\10\240\10\240\10\10" +
		"\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\174\176" +
		"\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240\240\240\117" +
		"\240\240\215\10\10\10\117\240\240\240\10\240\240\240\10\240\10\240\10\10\10\10\10" +
		"\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215" +
		"\117\165\165\10\10\240\10\117\117\165\302\10\10\117\240\240\240\240\117\240\240\215" +
		"\10\10\10\117\240\240\240\10\240\240\240\10\240\10\240\10\10\10\10\10\10\10\17\10" +
		"\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165" +
		"\10\10\240\10\117\117\165\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117" +
		"\240\240\240\10\240\240\240\10\240\10\240\10\u010c\10\10\10\10\10\10\17\10\17\17" +
		"\45\47\51\10\56\103\10\10\115\117\103\117\165\176\203\117\117\10\215\117\165\165" +
		"\10\10\240\266\10\117\117\203\165\10\10\117\240\240\240\240\117\240\240\215\10\10" +
		"\10\117\240\240\240\10\240\240\240\10\240\10\240\10\u010d\10\10\10\10\10\10\17\10" +
		"\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\204\117\117\10\215\117\165" +
		"\165\10\10\240\10\117\117\204\165\10\10\117\240\240\240\240\117\240\240\215\10\10" +
		"\10\117\240\240\240\10\240\240\240\10\240\10\240\10\10\10\10\10\10\10\17\10\17\17" +
		"\45\47\51\10\56\103\10\10\115\117\103\117\165\176\205\117\117\10\215\117\165\165" +
		"\10\10\240\10\117\117\205\165\10\10\117\240\240\240\240\117\240\240\215\10\10\10" +
		"\117\240\240\240\10\240\240\240\10\240\10\240\10\10\10\10\10\10\10\17\10\17\17\45" +
		"\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240" +
		"\10\117\117\165\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\240" +
		"\10\240\240\240\10\240\10\240\10\u010e\10\10\10\10\10\10\17\10\17\17\45\47\51\10" +
		"\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117" +
		"\117\165\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\240\10\240" +
		"\240\240\10\240\10\240\10\u010f\10\10\10\10\10\2\10\17\10\17\17\45\47\51\10\56\103" +
		"\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165" +
		"\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\240\10\240\240\240" +
		"\10\240\10\240\10\10\10\10\10\10\10\17\10\17\30\17\45\47\51\10\56\30\103\10\10\115" +
		"\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117" +
		"\240\240\240\240\117\240\240\215\10\10\10\117\240\240\240\10\240\240\240\10\240\10" +
		"\240\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56\65\103\10\10\115\117\103\117" +
		"\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240\240" +
		"\240\117\240\240\215\10\10\10\117\240\240\240\10\240\240\240\10\240\10\240\10\10" +
		"\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\113\10\115\117\103\117\165\176" +
		"\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240\240\240\117" +
		"\240\240\215\10\10\10\117\240\240\240\10\240\240\240\10\240\10\240\10\10\10\10\10" +
		"\10\241\241\241\241\241\241\241\241\241\241\241\241\241\233\u0120\3\52\70\31\31\35" +
		"\53\104\120\104\133\133\212\120\242\270\270\312\242\242\242\242\270\242\242\360\242" +
		"\242\364\364\242\242\242\242\14\14\14\14\14\14\226\231\243\267\306\14\243\243\243" +
		"\243\243\243\226\354\355\243\243\243\243\243\243\243\372\243\376\243\231\306\u0114" +
		"\u0117\u011e\u0114\125\206\206\166\222\167\167\224\224\150\225\105\106\127\107\107" +
		"\110\110\300\u0104\u0110\111\111\216\347\121\217\134\135\210\136\136\207\275\341" +
		"\341\341\175\137\137\227\352\232\u0107\377\244\314\344\345\363\u0102\245\245\245" +
		"\245\245\374\245\246\246\246\246\246\246\246\247\247\247\247\247\247\247\247\247" +
		"\247\247\250\315\323\250\250\250\250\250\251\251\251\325\251\251\325\251\325\371" +
		"\251\251\252\252\252\252\252\252\252\252\252\252\252\252\253\253\253\253\335\253" +
		"\253\253\253\253\253\253\253\254\254\254\254\254\254\254\254\254\365\367\254\254" +
		"\254\254\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\256\256\256" +
		"\256\256\256\256\256\256\256\256\256\257\257\257\257\257\257\257\257\257\257\257" +
		"\257\257\257\257\260\260\260\260\260\260\260\260\260\260\366\260\260\260\260\260" +
		"\u0115\u011f\140\140\261\313\261\261\261\261\261\261\261\261\261\261\261\141\141" +
		"\213\141\141\141\141\141\141\141\141\141\141\141\141\141\u0121\23\55\112\114\214" +
		"\307\15\15\15\15\15\15\15\373\57\74\143\20\26\42\21\21\21\262\262\262\262\262\262" +
		"\262\262\262\262\262\262\u0111\16\16\54\16\16\16\130\177\211\16\263\16\263\326\263" +
		"\263\326\263\326\263\263\22\36\32\77\126\301\351\u0105\u0112\122\271\272\337\342" +
		"\343\375\230\264\264\264\264\264\264\265\265\324\327\265\265\327\265\370\265\265" +
		"\u0116\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\60\24\25");

	private static final short[] tmRuleLen = TMLexer.unpack_short(177,
		"\2\0\2\0\5\4\1\0\7\4\3\3\4\4\3\3\1\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2" +
		"\1\1\1\3\1\0\1\0\1\0\1\0\1\0\10\3\2\3\1\1\1\1\3\1\3\1\3\1\1\2\2\1\1\6\5\5\4\2\1\0" +
		"\1\0\4\3\3\1\1\2\1\1\1\4\3\1\4\2\1\1\2\1\3\3\1\1\1\0\3\2\2\1\1\3\4\3\3\3\1\2\2\1" +
		"\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\3\1\6\4\3\2\1\1\5\2\2\1\1\1\0\5\3\1\1" +
		"\0\3\1\1\1\1\1\3\5\1\1\1\1\1\3\1\1");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(177,
		"\166\166\167\167\75\75\170\170\76\76\77\100\101\102\102\103\103\104\105\106\106\107" +
		"\107\110\110\110\110\110\110\110\110\110\110\110\110\110\111\112\112\112\113\113" +
		"\113\114\171\171\172\172\173\173\174\174\175\175\115\115\116\117\120\120\120\120" +
		"\176\176\121\122\123\123\124\124\124\125\125\126\126\126\126\127\177\177\200\200" +
		"\127\127\127\127\127\130\131\131\131\132\201\201\132\133\133\134\134\135\135\202" +
		"\202\136\203\203\137\137\137\137\137\140\140\140\141\141\142\142\142\143\143\143" +
		"\144\144\145\145\145\146\146\147\147\147\150\151\151\152\152\152\152\152\152\204" +
		"\204\152\152\153\205\205\154\155\155\155\156\156\206\206\156\207\207\210\210\156" +
		"\156\157\157\157\157\160\160\161\161\161\162\163\163\164\165");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'='",
		"'=>'",
		"';'",
		"'.'",
		"'..'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"directive",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule0",
		"rhsPrefix",
		"rhsSuffix",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsBracketsPair",
		"annotations",
		"annotation",
		"expression",
		"literal",
		"map_entries",
		"map_separator",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"import__optlist",
		"option_optlist",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"lexer_state_list_Comma_separated",
		"identifieropt",
		"implementsopt",
		"inputref_list_Comma_separated",
		"rule0_list_Or_separated",
		"rhsSuffixopt",
		"rhsBracketsPair_list_Comma_separated",
		"annotation_list",
		"map_entriesopt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 61;
		static final int header = 62;
		static final int lexer_section = 63;
		static final int parser_section = 64;
		static final int parsing_algorithm = 65;
		static final int import_ = 66;
		static final int option = 67;
		static final int identifier = 68;
		static final int symref = 69;
		static final int type = 70;
		static final int type_part_list = 71;
		static final int type_part = 72;
		static final int pattern = 73;
		static final int lexer_parts = 74;
		static final int lexer_part = 75;
		static final int named_pattern = 76;
		static final int lexeme = 77;
		static final int lexeme_transition = 78;
		static final int lexeme_attrs = 79;
		static final int lexeme_attribute = 80;
		static final int state_selector = 81;
		static final int stateref = 82;
		static final int lexer_state = 83;
		static final int grammar_parts = 84;
		static final int grammar_part = 85;
		static final int nonterm = 86;
		static final int nonterm_type = 87;
		static final int _implements = 88;
		static final int assoc = 89;
		static final int directive = 90;
		static final int inputref = 91;
		static final int references = 92;
		static final int references_cs = 93;
		static final int rules = 94;
		static final int rule0 = 95;
		static final int rhsPrefix = 96;
		static final int rhsSuffix = 97;
		static final int rhsParts = 98;
		static final int rhsPart = 99;
		static final int rhsAnnotated = 100;
		static final int rhsAssignment = 101;
		static final int rhsOptional = 102;
		static final int rhsCast = 103;
		static final int rhsUnordered = 104;
		static final int rhsClass = 105;
		static final int rhsPrimary = 106;
		static final int rhsBracketsPair = 107;
		static final int annotations = 108;
		static final int annotation = 109;
		static final int expression = 110;
		static final int literal = 111;
		static final int map_entries = 112;
		static final int map_separator = 113;
		static final int name = 114;
		static final int qualified_id = 115;
		static final int command = 116;
		static final int syntax_problem = 117;
		static final int import__optlist = 118;
		static final int option_optlist = 119;
		static final int parsing_algorithmopt = 120;
		static final int typeopt = 121;
		static final int lexeme_transitionopt = 122;
		static final int iconopt = 123;
		static final int lexeme_attrsopt = 124;
		static final int commandopt = 125;
		static final int lexer_state_list_Comma_separated = 126;
		static final int identifieropt = 127;
		static final int implementsopt = 128;
		static final int inputref_list_Comma_separated = 129;
		static final int rule0_list_Or_separated = 130;
		static final int rhsSuffixopt = 131;
		static final int rhsBracketsPair_list_Comma_separated = 132;
		static final int annotation_list = 133;
		static final int map_entriesopt = 134;
		static final int expression_list_Comma_separated = 135;
		static final int expression_list_Comma_separated_opt = 136;
	}

	public interface Rules {
		static final int nonterm_type_nontermTypeAST = 77;  // nonterm_type ::= Lreturns symref
		static final int nonterm_type_nontermTypeHint = 82;  // nonterm_type ::= Linline Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint2 = 83;  // nonterm_type ::= Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint3 = 84;  // nonterm_type ::= Linterface identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint4 = 85;  // nonterm_type ::= Lvoid
		static final int nonterm_type_nontermTypeRaw = 86;  // nonterm_type ::= type
		static final int directive_directivePrio = 91;  // directive ::= '%' assoc references ';'
		static final int directive_directiveInput = 94;  // directive ::= '%' Linput inputref_list_Comma_separated ';'
		static final int rhsOptional_rhsQuantifier = 128;  // rhsOptional ::= rhsCast '?'
		static final int rhsCast_rhsAsLiteral = 131;  // rhsCast ::= rhsClass Las literal
		static final int rhsPrimary_rhsSymbol = 135;  // rhsPrimary ::= symref
		static final int rhsPrimary_rhsNested = 136;  // rhsPrimary ::= '(' rules ')'
		static final int rhsPrimary_rhsList = 137;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		static final int rhsPrimary_rhsList2 = 138;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		static final int rhsPrimary_rhsQuantifier = 139;  // rhsPrimary ::= rhsPrimary '*'
		static final int rhsPrimary_rhsQuantifier2 = 140;  // rhsPrimary ::= rhsPrimary '+'
		static final int rhsPrimary_rhsIgnored = 143;  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
		static final int rhsPrimary_rhsIgnored2 = 144;  // rhsPrimary ::= '$' '(' rules ')'
		static final int expression_instance = 156;  // expression ::= Lnew name '(' map_entriesopt ')'
		static final int expression_array = 161;  // expression ::= '[' expression_list_Comma_separated_opt ']'
		static final int literal_literal = 163;  // literal ::= scon
		static final int literal_literal2 = 164;  // literal ::= icon
		static final int literal_literal3 = 165;  // literal ::= Ltrue
		static final int literal_literal4 = 166;  // literal ::= Lfalse
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 31) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 31;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 31);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 0:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 1:  // import__optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 2:  // option_optlist ::= option_optlist option
				((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 3:  // option_optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 4:  // input ::= header import__optlist option_optlist lexer_section parser_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* options */,
						((TmaLexerSection)tmStack[tmHead - 1].value) /* lexer */,
						((TmaParserSection)tmStack[tmHead].value) /* parser */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 5:  // input ::= header import__optlist option_optlist lexer_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* options */,
						((TmaLexerSection)tmStack[tmHead].value) /* lexer */,
						null /* parser */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 9:  // header ::= Llanguage name parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 10:  // lexer_section ::= '::' Llexer lexer_parts
				tmLeft.value = new TmaLexerSection(
						((List<TmaLexerPartsItem>)tmStack[tmHead].value) /* lexerParts */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 11:  // parser_section ::= '::' Lparser grammar_parts
				tmLeft.value = new TmaParserSection(
						((List<TmaGrammarPartsItem>)tmStack[tmHead].value) /* grammarParts */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 12:  // parsing_algorithm ::= Llalr '(' icon ')'
				tmLeft.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // import_ ::= Limport ID scon ';'
				tmLeft.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 14:  // import_ ::= Limport scon ';'
				tmLeft.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 15:  // option ::= ID '=' expression
				tmLeft.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* key */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 16:  // option ::= syntax_problem
				tmLeft.value = new TmaOption(
						null /* key */,
						null /* value */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 17:  // identifier ::= ID
				tmLeft.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 18:  // symref ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 19:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 20:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 36:  // pattern ::= regexp
				tmLeft.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 37:  // lexer_parts ::= lexer_part
				tmLeft.value = new ArrayList();
				((List<TmaLexerPartsItem>)tmLeft.value).add(new TmaLexerPartsItem(
						((ITmaLexerPart)tmStack[tmHead].value) /* lexerPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset));
				break;
			case 38:  // lexer_parts ::= lexer_parts lexer_part
				((List<TmaLexerPartsItem>)tmLeft.value).add(new TmaLexerPartsItem(
						((ITmaLexerPart)tmStack[tmHead].value) /* lexerPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 39:  // lexer_parts ::= lexer_parts syntax_problem
				((List<TmaLexerPartsItem>)tmLeft.value).add(new TmaLexerPartsItem(
						null /* lexerPart */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 43:  // named_pattern ::= ID '=' pattern
				tmLeft.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 54:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* transition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemeAttrs)tmStack[tmHead - 1].value) /* attrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						null /* input */, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 55:  // lexeme ::= identifier typeopt ':'
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* transition */,
						null /* priority */,
						null /* attrs */,
						null /* command */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 56:  // lexeme_transition ::= '=>' stateref
				tmLeft.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 57:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				tmLeft.value = new TmaLexemeAttrs(
						((TmaLexemeAttribute)tmStack[tmHead - 1].value) /* kind */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 58:  // lexeme_attribute ::= Lsoft
				tmLeft.value = TmaLexemeAttribute.LSOFT;
				break;
			case 59:  // lexeme_attribute ::= Lclass
				tmLeft.value = TmaLexemeAttribute.LCLASS;
				break;
			case 60:  // lexeme_attribute ::= Lspace
				tmLeft.value = TmaLexemeAttribute.LSPACE;
				break;
			case 61:  // lexeme_attribute ::= Llayout
				tmLeft.value = TmaLexemeAttribute.LLAYOUT;
				break;
			case 62:  // lexer_state_list_Comma_separated ::= lexer_state_list_Comma_separated ',' lexer_state
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 63:  // lexer_state_list_Comma_separated ::= lexer_state
				tmLeft.value = new ArrayList();
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 64:  // state_selector ::= '[' lexer_state_list_Comma_separated ']'
				tmLeft.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 65:  // stateref ::= ID
				tmLeft.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 66:  // lexer_state ::= identifier '=>' stateref
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 67:  // lexer_state ::= identifier
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 68:  // grammar_parts ::= grammar_part
				tmLeft.value = new ArrayList();
				((List<TmaGrammarPartsItem>)tmLeft.value).add(new TmaGrammarPartsItem(
						((ITmaGrammarPart)tmStack[tmHead].value) /* grammarPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset));
				break;
			case 69:  // grammar_parts ::= grammar_parts grammar_part
				((List<TmaGrammarPartsItem>)tmLeft.value).add(new TmaGrammarPartsItem(
						((ITmaGrammarPart)tmStack[tmHead].value) /* grammarPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 70:  // grammar_parts ::= grammar_parts syntax_problem
				((List<TmaGrammarPartsItem>)tmLeft.value).add(new TmaGrammarPartsItem(
						null /* grammarPart */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 73:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 74:  // nonterm ::= annotations identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 75:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 76:  // nonterm ::= identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 77:  // nonterm_type ::= Lreturns symref
				tmLeft.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 82:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						true /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 83:  // nonterm_type ::= Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 84:  // nonterm_type ::= Linterface identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 85:  // nonterm_type ::= Lvoid
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* _implements */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 86:  // nonterm_type ::= type
				tmLeft.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* typeText */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 87:  // implements ::= ':' references_cs
				tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value);
				break;
			case 88:  // assoc ::= Lleft
				tmLeft.value = TmaAssoc.LLEFT;
				break;
			case 89:  // assoc ::= Lright
				tmLeft.value = TmaAssoc.LRIGHT;
				break;
			case 90:  // assoc ::= Lnonassoc
				tmLeft.value = TmaAssoc.LNONASSOC;
				break;
			case 91:  // directive ::= '%' assoc references ';'
				tmLeft.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 92:  // inputref_list_Comma_separated ::= inputref_list_Comma_separated ',' inputref
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 93:  // inputref_list_Comma_separated ::= inputref
				tmLeft.value = new ArrayList();
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 94:  // directive ::= '%' Linput inputref_list_Comma_separated ';'
				tmLeft.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 95:  // inputref ::= symref Lnoeoi
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* reference */,
						true /* noeoi */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 96:  // inputref ::= symref
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						false /* noeoi */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 97:  // references ::= symref
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 98:  // references ::= references symref
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 99:  // references_cs ::= symref
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 100:  // references_cs ::= references_cs ',' symref
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 101:  // rule0_list_Or_separated ::= rule0_list_Or_separated '|' rule0
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 102:  // rule0_list_Or_separated ::= rule0
				tmLeft.value = new ArrayList();
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 106:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<TmaRhsPartsItem>)tmStack[tmHead - 1].value) /* list */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 107:  // rule0 ::= rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 108:  // rule0 ::= rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<TmaRhsPartsItem>)tmStack[tmHead - 1].value) /* list */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 109:  // rule0 ::= rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 110:  // rule0 ::= syntax_problem
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* suffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 111:  // rhsPrefix ::= '[' annotations ']'
				tmLeft.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* alias */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 112:  // rhsPrefix ::= '[' annotations identifier ']'
				tmLeft.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 2].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* alias */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 113:  // rhsPrefix ::= '[' identifier ']'
				tmLeft.value = new TmaRhsPrefix(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* alias */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 114:  // rhsSuffix ::= '%' Lprio symref
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 115:  // rhsSuffix ::= '%' Lshift symref
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 116:  // rhsParts ::= rhsPart
				tmLeft.value = new ArrayList();
				((List<TmaRhsPartsItem>)tmLeft.value).add(new TmaRhsPartsItem(
						((ITmaRhsPart)tmStack[tmHead].value) /* rhsPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset));
				break;
			case 117:  // rhsParts ::= rhsParts rhsPart
				((List<TmaRhsPartsItem>)tmLeft.value).add(new TmaRhsPartsItem(
						((ITmaRhsPart)tmStack[tmHead].value) /* rhsPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 118:  // rhsParts ::= rhsParts syntax_problem
				((List<TmaRhsPartsItem>)tmLeft.value).add(new TmaRhsPartsItem(
						null /* rhsPart */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 123:  // rhsAnnotated ::= annotations rhsAssignment
				tmLeft.value = new TmaRhsAnnotated(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 125:  // rhsAssignment ::= identifier '=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 126:  // rhsAssignment ::= identifier '+=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 128:  // rhsOptional ::= rhsCast '?'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 129:  // rhsCast ::= rhsClass
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* target */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 130:  // rhsCast ::= rhsClass Las symref
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaSymref)tmStack[tmHead].value) /* target */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 131:  // rhsCast ::= rhsClass Las literal
				tmLeft.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 132:  // rhsUnordered ::= rhsPart '&' rhsPart
				tmLeft.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 134:  // rhsClass ::= identifier ':' rhsPrimary
				tmLeft.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 135:  // rhsPrimary ::= symref
				tmLeft.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 136:  // rhsPrimary ::= '(' rules ')'
				tmLeft.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 137:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				tmLeft.value = new TmaRhsList(
						((List<TmaRhsPartsItem>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						true /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 138:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				tmLeft.value = new TmaRhsList(
						((List<TmaRhsPartsItem>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						false /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 139:  // rhsPrimary ::= rhsPrimary '*'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 140:  // rhsPrimary ::= rhsPrimary '+'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 141:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair_list_Comma_separated ',' rhsBracketsPair
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 142:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair
				tmLeft.value = new ArrayList();
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 143:  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 3].value) /* rules */,
						((List<TmaRhsBracketsPair>)tmStack[tmHead - 1].value) /* brackets */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 144:  // rhsPrimary ::= '$' '(' rules ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* brackets */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 145:  // rhsBracketsPair ::= symref '..' symref
				tmLeft.value = new TmaRhsBracketsPair(
						((TmaSymref)tmStack[tmHead - 2].value) /* lhs */,
						((TmaSymref)tmStack[tmHead].value) /* rhs */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 146:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 147:  // annotation_list ::= annotation
				tmLeft.value = new ArrayList();
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 148:  // annotations ::= annotation_list
				tmLeft.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 149:  // annotation ::= '@' ID '{' expression '}'
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 150:  // annotation ::= '@' ID
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 151:  // annotation ::= '@' syntax_problem
				tmLeft.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 156:  // expression ::= Lnew name '(' map_entriesopt ')'
				tmLeft.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntriesItem>)tmStack[tmHead - 1].value) /* mapEntries */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 157:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 158:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 161:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				tmLeft.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 163:  // literal ::= scon
				tmLeft.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 164:  // literal ::= icon
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						((Integer)tmStack[tmHead].value) /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 165:  // literal ::= Ltrue
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						true /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 166:  // literal ::= Lfalse
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 167:  // map_entries ::= ID map_separator expression
				tmLeft.value = new ArrayList();
				((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* expression */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset));
				break;
			case 168:  // map_entries ::= map_entries ',' ID map_separator expression
				((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* expression */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset));
				break;
			case 172:  // name ::= qualified_id
				tmLeft.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 174:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 175:  // command ::= code
				tmLeft.value = new TmaCommand(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 176:  // syntax_problem ::= error
				tmLeft.value = new TmaSyntaxProblem(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 290);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 291);
	}
}
