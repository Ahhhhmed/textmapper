/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.Span;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(397,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\254\0\255\0\uffb9\uffff\264\0\uff6b" +
		"\uffff\256\0\257\0\uffff\uffff\247\0\246\0\252\0\261\0\ufeff\uffff\ufef7\uffff\ufeeb" +
		"\uffff\340\0\ufea7\uffff\uffff\uffff\ufea1\uffff\14\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\271\0\uffff\uffff\uffff\uffff\uffff\uffff\265\0\uffff\uffff\uffff\uffff\251" +
		"\0\ufe59\uffff\225\0\236\0\uffff\uffff\330\0\326\0\235\0\uffff\uffff\ufe51\uffff" +
		"\uffff\uffff\ufe4b\uffff\uffff\uffff\uffff\uffff\3\0\262\0\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\ufe0b\uffff\267\0\12\0\337\0\uffff\uffff\uffff\uffff\226" +
		"\0\uffff\uffff\227\0\uffff\uffff\334\0\ufe05\uffff\uffff\uffff\ufdff\uffff\uffff" +
		"\uffff\10\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\0\0\16\0\230\0\325\0" +
		"\13\0\327\0\uffff\uffff\uffff\uffff\250\0\uffff\uffff\6\0\7\0\uffff\uffff\uffff\uffff" +
		"\ufdf9\uffff\ufdf1\uffff\ufdeb\uffff\41\0\45\0\46\0\47\0\44\0\11\0\uffff\uffff\253" +
		"\0\333\0\2\0\uffff\uffff\ufda3\uffff\306\0\uffff\uffff\uffff\uffff\uffff\uffff\273" +
		"\0\uffff\uffff\42\0\43\0\uffff\uffff\uffff\uffff\uffff\uffff\ufd9b\uffff\66\0\71" +
		"\0\72\0\73\0\uffff\uffff\322\0\ufd55\uffff\uffff\uffff\uffff\uffff\uffff\uffff\62" +
		"\0\40\0\50\0\uffff\uffff\31\0\32\0\25\0\26\0\uffff\uffff\23\0\24\0\30\0\33\0\35\0" +
		"\34\0\27\0\uffff\uffff\22\0\ufd0d\uffff\uffff\uffff\113\0\114\0\115\0\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufcc3\uffff\223\0\ufc79\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\ufc25\uffff\ufbe3\uffff\110\0\111\0\uffff\uffff\uffff\uffff\67" +
		"\0\70\0\uffff\uffff\321\0\uffff\uffff\63\0\64\0\305\0\17\0\37\0\uffff\uffff\20\0" +
		"\21\0\ufba1\uffff\ufb51\uffff\314\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\127\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufb49\uffff\uffff" +
		"\uffff\uffff\uffff\ufaf5\uffff\uffff\uffff\263\0\uffff\uffff\200\0\uffff\uffff\316" +
		"\0\uffff\uffff\ufa8d\uffff\317\0\ufa3b\uffff\ufa31\uffff\uf9dd\uffff\160\0\163\0" +
		"\165\0\uf985\uffff\161\0\uf92b\uffff\uf8cf\uffff\207\0\uffff\uffff\162\0\144\0\uf86f" +
		"\uffff\143\0\324\0\uffff\uffff\uf867\uffff\104\0\307\0\uf825\uffff\uf81f\uffff\uf819" +
		"\uffff\uf7c5\uffff\uffff\uffff\uf771\uffff\uffff\uffff\uffff\uffff\61\0\36\0\uffff" +
		"\uffff\275\0\uf71d\uffff\125\0\121\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\232\0\233\0\231\0\234\0\uffff\uffff\120\0\130\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uf6cf\uffff\243\0\uffff\uffff\uffff\uffff\uf6c3\uffff\uffff\uffff\uf66f" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\103\0\150\0\uffff\uffff\uf61b" +
		"\uffff\uf611\uffff\uffff\uffff\137\0\142\0\uf5bd\uffff\uf5b3\uffff\157\0\141\0\uffff" +
		"\uffff\171\0\uffff\uffff\204\0\205\0\147\0\164\0\uf55b\uffff\uffff\uffff\224\0\uf505" +
		"\uffff\uffff\uffff\311\0\106\0\107\0\uffff\uffff\uffff\uffff\uf4ff\uffff\uffff\uffff" +
		"\uf4ab\uffff\uf457\uffff\uffff\uffff\53\0\277\0\uf403\uffff\313\0\uffff\uffff\122" +
		"\0\123\0\uffff\uffff\117\0\221\0\151\0\152\0\237\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\145\0\uffff\uffff\201\0\uffff\uffff\uffff\uffff\154\0\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uf3b7\uffff\212\0\215\0\uffff\uffff\uffff\uffff\166\0\uf371\uffff\167" +
		"\0\146\0\136\0\uf311\uffff\135\0\140\0\uf307\uffff\173\0\174\0\315\0\323\0\105\0" +
		"\131\0\uf2af\uffff\102\0\101\0\uffff\uffff\77\0\uffff\uffff\uffff\uffff\uf2a9\uffff" +
		"\uffff\uffff\301\0\uf255\uffff\124\0\uffff\uffff\241\0\242\0\uf20b\uffff\uf203\uffff" +
		"\uffff\uffff\153\0\206\0\uffff\uffff\214\0\211\0\uffff\uffff\210\0\uffff\uffff\134" +
		"\0\uffff\uffff\100\0\76\0\75\0\uffff\uffff\55\0\56\0\57\0\60\0\uffff\uffff\303\0" +
		"\51\0\116\0\uffff\uffff\213\0\uf1fb\uffff\uf1f3\uffff\132\0\74\0\54\0\203\0\202\0" +
		"\uffff\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(3602,
		"\10\266\45\266\46\266\54\266\56\266\57\266\60\266\61\266\62\266\63\266\64\266\65" +
		"\266\66\266\67\266\70\266\71\266\72\266\73\266\74\266\75\266\76\266\77\266\100\266" +
		"\101\266\102\266\103\266\104\266\105\266\106\266\107\266\110\266\111\266\112\266" +
		"\uffff\ufffe\2\uffff\3\uffff\23\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\47\uffff\50\uffff\51\uffff\24\342\uffff\ufffe\31\uffff\0\15\6\15\10\15\11\15\17" +
		"\15\21\15\24\15\25\15\26\15\27\15\30\15\33\15\34\15\36\15\41\15\43\15\44\15\45\15" +
		"\46\15\52\15\53\15\55\15\56\15\57\15\60\15\61\15\62\15\63\15\64\15\65\15\66\15\67" +
		"\15\70\15\71\15\72\15\73\15\74\15\75\15\76\15\77\15\100\15\101\15\102\15\103\15\104" +
		"\15\105\15\106\15\107\15\110\15\111\15\112\15\114\15\uffff\ufffe\25\uffff\110\uffff" +
		"\17\272\uffff\ufffe\20\uffff\17\260\25\260\26\260\110\260\uffff\ufffe\54\uffff\10" +
		"\270\45\270\46\270\56\270\57\270\60\270\61\270\62\270\63\270\64\270\65\270\66\270" +
		"\67\270\70\270\71\270\72\270\73\270\74\270\75\270\76\270\77\270\100\270\101\270\102" +
		"\270\103\270\104\270\105\270\106\270\107\270\110\270\111\270\112\270\uffff\ufffe" +
		"\21\uffff\24\341\uffff\ufffe\2\uffff\3\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\47\uffff\50\uffff\32\332\uffff\ufffe\22\13\21\16\32\16\uffff\ufffe\21\uffff\32\331" +
		"\uffff\ufffe\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\26\336\uffff\ufffe\10\uffff\0" +
		"\1\uffff\ufffe\21\uffff\26\335\uffff\ufffe\110\uffff\17\272\uffff\ufffe\13\uffff" +
		"\22\13\25\13\uffff\ufffe\25\uffff\22\274\uffff\ufffe\6\uffff\23\uffff\45\uffff\46" +
		"\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\0\4\10\4\uffff\ufffe\16\uffff\21\65\24\65\uffff" +
		"\ufffe\6\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\0\5\uffff\ufffe" +
		"\44\uffff\22\220\25\220\43\220\46\220\55\220\56\220\57\220\60\220\61\220\62\220\63" +
		"\220\64\220\65\220\66\220\67\220\70\220\71\220\72\220\73\220\74\220\75\220\76\220" +
		"\77\220\100\220\101\220\102\220\103\220\104\220\105\220\106\220\107\220\110\220\111" +
		"\220\112\220\uffff\ufffe\1\uffff\0\52\6\52\10\52\23\52\45\52\46\52\56\52\57\52\60" +
		"\52\61\52\62\52\63\52\64\52\65\52\66\52\67\52\70\52\71\52\72\52\73\52\74\52\75\52" +
		"\76\52\77\52\100\52\101\52\102\52\103\52\104\52\105\52\106\52\107\52\110\52\111\52" +
		"\112\52\uffff\ufffe\115\uffff\22\222\25\222\43\222\44\222\46\222\55\222\56\222\57" +
		"\222\60\222\61\222\62\222\63\222\64\222\65\222\66\222\67\222\70\222\71\222\72\222" +
		"\73\222\74\222\75\222\76\222\77\222\100\222\101\222\102\222\103\222\104\222\105\222" +
		"\106\222\107\222\110\222\111\222\112\222\uffff\ufffe\6\uffff\23\uffff\25\uffff\27" +
		"\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114" +
		"\uffff\11\320\17\320\uffff\ufffe\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\310\22\310" +
		"\uffff\ufffe\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\310\22\310\uffff\ufffe\16\uffff" +
		"\0\276\3\276\6\276\10\276\23\276\25\276\45\276\46\276\56\276\57\276\60\276\61\276" +
		"\62\276\63\276\64\276\65\276\66\276\67\276\70\276\71\276\72\276\73\276\74\276\75" +
		"\276\76\276\77\276\100\276\101\276\102\276\103\276\104\276\105\276\106\276\107\276" +
		"\110\276\111\276\112\276\114\276\uffff\ufffe\100\uffff\17\126\21\126\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff" +
		"\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\114\uffff\11\320\26\320\uffff\ufffe\31\uffff\13\13\22" +
		"\13\35\13\6\15\11\15\17\15\25\15\26\15\27\15\33\15\34\15\36\15\41\15\43\15\44\15" +
		"\45\15\46\15\52\15\53\15\55\15\56\15\57\15\60\15\61\15\62\15\63\15\64\15\65\15\66" +
		"\15\67\15\70\15\71\15\72\15\73\15\74\15\75\15\76\15\77\15\100\15\101\15\102\15\103" +
		"\15\104\15\105\15\106\15\107\15\110\15\111\15\112\15\114\15\uffff\ufffe\6\uffff\25" +
		"\uffff\27\uffff\43\uffff\44\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114" +
		"\uffff\11\320\17\320\26\320\uffff\ufffe\6\uffff\11\320\17\320\26\320\uffff\ufffe" +
		"\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff" +
		"\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff" +
		"\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\114\uffff\11\320\17\320\26\320\uffff\ufffe\41\uffff\6\155\11\155" +
		"\17\155\25\155\26\155\27\155\43\155\44\155\45\155\46\155\52\155\55\155\56\155\57" +
		"\155\60\155\61\155\62\155\63\155\64\155\65\155\66\155\67\155\70\155\71\155\72\155" +
		"\73\155\74\155\75\155\76\155\77\155\100\155\101\155\102\155\103\155\104\155\105\155" +
		"\106\155\107\155\110\155\111\155\112\155\114\155\uffff\ufffe\36\uffff\6\170\11\170" +
		"\17\170\25\170\26\170\27\170\41\170\43\170\44\170\45\170\46\170\52\170\55\170\56" +
		"\170\57\170\60\170\61\170\62\170\63\170\64\170\65\170\66\170\67\170\70\170\71\170" +
		"\72\170\73\170\74\170\75\170\76\170\77\170\100\170\101\170\102\170\103\170\104\170" +
		"\105\170\106\170\107\170\110\170\111\170\112\170\114\170\uffff\ufffe\53\uffff\6\172" +
		"\11\172\17\172\25\172\26\172\27\172\36\172\41\172\43\172\44\172\45\172\46\172\52" +
		"\172\55\172\56\172\57\172\60\172\61\172\62\172\63\172\64\172\65\172\66\172\67\172" +
		"\70\172\71\172\72\172\73\172\74\172\75\172\76\172\77\172\100\172\101\172\102\172" +
		"\103\172\104\172\105\172\106\172\107\172\110\172\111\172\112\172\114\172\uffff\ufffe" +
		"\33\uffff\34\uffff\6\176\11\176\17\176\25\176\26\176\27\176\36\176\41\176\43\176" +
		"\44\176\45\176\46\176\52\176\53\176\55\176\56\176\57\176\60\176\61\176\62\176\63" +
		"\176\64\176\65\176\66\176\67\176\70\176\71\176\72\176\73\176\74\176\75\176\76\176" +
		"\77\176\100\176\101\176\102\176\103\176\104\176\105\176\106\176\107\176\110\176\111" +
		"\176\112\176\114\176\uffff\ufffe\11\uffff\17\133\26\133\uffff\ufffe\46\uffff\112" +
		"\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\7\310\22\310\uffff\ufffe\22\uffff\7\312\uffff\ufffe\22" +
		"\uffff\7\312\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45" +
		"\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\320\17\320\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff" +
		"\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\114\uffff\11\320\17\320\uffff\ufffe\6\uffff\23\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\114\uffff\11\320\17\320\uffff\ufffe\3\uffff\0\300\6\300\10\300\23\300\25" +
		"\300\45\300\46\300\56\300\57\300\60\300\61\300\62\300\63\300\64\300\65\300\66\300" +
		"\67\300\70\300\71\300\72\300\73\300\74\300\75\300\76\300\77\300\100\300\101\300\102" +
		"\300\103\300\104\300\105\300\106\300\107\300\110\300\111\300\112\300\114\300\uffff" +
		"\ufffe\14\uffff\15\uffff\12\240\24\240\42\240\uffff\ufffe\6\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106" +
		"\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff" +
		"\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\52\uffff\55\uffff" +
		"\114\uffff\11\320\26\320\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff" +
		"\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\320" +
		"\26\320\uffff\ufffe\6\uffff\11\320\17\320\26\320\uffff\ufffe\6\uffff\25\uffff\27" +
		"\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114" +
		"\uffff\11\320\17\320\26\320\uffff\ufffe\6\uffff\11\320\17\320\26\320\uffff\ufffe" +
		"\41\uffff\6\156\11\156\17\156\25\156\26\156\27\156\43\156\44\156\45\156\46\156\52" +
		"\156\55\156\56\156\57\156\60\156\61\156\62\156\63\156\64\156\65\156\66\156\67\156" +
		"\70\156\71\156\72\156\73\156\74\156\75\156\76\156\77\156\100\156\101\156\102\156" +
		"\103\156\104\156\105\156\106\156\107\156\110\156\111\156\112\156\114\156\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff" +
		"\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\114\uffff\11\320\17\320\26\320\uffff\ufffe\22\uffff\7" +
		"\312\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46" +
		"\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\320\17\320\uffff\ufffe" +
		"\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff" +
		"\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\114\uffff\11\320\17\320\uffff\ufffe\6\uffff\23\uffff" +
		"\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\112\uffff\111\uffff\110\uffff" +
		"\107\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\114\uffff\11\320\17\320\uffff\ufffe\25\uffff\0\302\6\302\10\302\23\302" +
		"\45\302\46\302\56\302\57\302\60\302\61\302\62\302\63\302\64\302\65\302\66\302\67" +
		"\302\70\302\71\302\72\302\73\302\74\302\75\302\76\302\77\302\100\302\101\302\102" +
		"\302\103\302\104\302\105\302\106\302\107\302\110\302\111\302\112\302\114\302\uffff" +
		"\ufffe\31\uffff\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\11\15\26\15\41\15\uffff\ufffe" +
		"\33\uffff\34\uffff\6\177\11\177\17\177\25\177\26\177\27\177\36\177\41\177\43\177" +
		"\44\177\45\177\46\177\52\177\53\177\55\177\56\177\57\177\60\177\61\177\62\177\63" +
		"\177\64\177\65\177\66\177\67\177\70\177\71\177\72\177\73\177\74\177\75\177\76\177" +
		"\77\177\100\177\101\177\102\177\103\177\104\177\105\177\106\177\107\177\110\177\111" +
		"\177\112\177\114\177\uffff\ufffe\6\uffff\11\320\17\320\26\320\uffff\ufffe\41\175" +
		"\6\175\11\175\17\175\25\175\26\175\27\175\43\175\44\175\45\175\46\175\52\175\55\175" +
		"\56\175\57\175\60\175\61\175\62\175\63\175\64\175\65\175\66\175\67\175\70\175\71" +
		"\175\72\175\73\175\74\175\75\175\76\175\77\175\100\175\101\175\102\175\103\175\104" +
		"\175\105\175\106\175\107\175\110\175\111\175\112\175\114\175\uffff\ufffe\21\uffff" +
		"\7\112\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff" +
		"\46\uffff\112\uffff\111\uffff\110\uffff\107\uffff\106\uffff\105\uffff\104\uffff\103" +
		"\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\114\uffff\11\320\17\320\uffff\ufffe" +
		"\114\uffff\0\304\6\304\10\304\23\304\45\304\46\304\56\304\57\304\60\304\61\304\62" +
		"\304\63\304\64\304\65\304\66\304\67\304\70\304\71\304\72\304\73\304\74\304\75\304" +
		"\76\304\77\304\100\304\101\304\102\304\103\304\104\304\105\304\106\304\107\304\110" +
		"\304\111\304\112\304\uffff\ufffe\12\245\42\uffff\24\245\uffff\ufffe\12\244\42\244" +
		"\24\244\uffff\ufffe\11\216\41\uffff\26\216\uffff\ufffe\11\217\41\217\26\217\uffff" +
		"\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(173,
		"\0\2\4\25\44\44\44\73\103\105\112\115\122\123\124\126\152\157\173\206\235\244\315" +
		"\332\351\354\365\374\u0103\u0106\u0107\u010c\u010f\u0114\u011f\u0122\u0137\u014f" +
		"\u0167\u01bd\u01ca\u01d7\u01dd\u01de\u01df\u01e0\u01f8\u024f\u02a9\u0300\u0357\u03b1" +
		"\u0408\u045f\u04b6\u050d\u0564\u05bb\u0612\u0669\u06c0\u0717\u076e\u07c5\u081c\u0873" +
		"\u08ca\u0926\u0980\u09da\u0a31\u0a88\u0adf\u0b37\u0b8e\u0be5\u0be5\u0bf6\u0bf7\u0bf8" +
		"\u0bf9\u0bfa\u0bfb\u0bfd\u0bfe\u0bff\u0c27\u0c49\u0c5a\u0c5f\u0c61\u0c65\u0c67\u0c68" +
		"\u0c6a\u0c6c\u0c6e\u0c6f\u0c70\u0c71\u0c73\u0c75\u0c77\u0c79\u0c7a\u0c7c\u0c7e\u0c82" +
		"\u0c85\u0c86\u0c88\u0c8a\u0c8c\u0c8e\u0c8f\u0c99\u0ca4\u0caf\u0cba\u0ccd\u0cdc\u0ce8" +
		"\u0cf8\u0d08\u0d1a\u0d2e\u0d42\u0d52\u0d66\u0d7b\u0d93\u0d98\u0d9c\u0daf\u0dc3\u0dc5" +
		"\u0dcd\u0dd0\u0dd2\u0dd3\u0dd7\u0dda\u0ddd\u0de3\u0de5\u0df2\u0df5\u0df8\u0e09\u0e21" +
		"\u0e22\u0e23\u0e25\u0e26\u0e27\u0e28\u0e29\u0e2a\u0e2b\u0e2e\u0e31\u0e32\u0e3c\u0e4f" +
		"\u0e62\u0e63\u0e64\u0e65\u0e66\u0e67\u0e68\u0e69\u0e6a");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(3690,
		"\u0189\u018a\151\217\1\6\26\36\41\63\72\73\110\120\152\273\u0103\u0117\u0132\u0138" +
		"\u0139\1\6\26\41\57\72\73\110\120\273\354\u0117\u0132\u0138\u0139\107\132\141\162" +
		"\232\276\311\313\314\342\343\345\u0102\u0104\u010c\u010d\u0111\u011c\u0126\u0128" +
		"\u0129\u014e\u015f\161\242\243\246\344\346\347\u012a\40\66\331\u0147\u016c\u0182" +
		"\u0183\u0100\u0167\u0168\65\130\265\304\367\376\376\146\261\34\62\106\123\250\264" +
		"\272\306\361\362\367\u0124\u0125\u0127\u012f\u015b\u015d\u015e\u0164\u0177\21\152" +
		"\205\215\256\24\52\53\101\150\152\205\215\256\264\334\u0158\46\77\154\304\310\326" +
		"\340\341\u010b\u011f\u0148\1\6\41\107\110\120\132\152\205\215\232\256\273\276\342" +
		"\343\345\u0104\u011c\u0126\u0128\u0129\u015f\25\150\152\205\215\256\u0100\20\30\32" +
		"\131\152\161\205\215\232\243\246\256\276\300\302\311\314\326\342\343\345\347\u0102" +
		"\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u011c\u0126\u0128\u0129\u012d\u0142" +
		"\u0143\u015f\u016f\u0171\56\102\104\200\205\215\256\u0101\u0141\u0147\u0169\u016c" +
		"\u017c\232\276\311\314\342\343\345\u0102\u0104\u010d\u011c\u0126\u0128\u0129\u015f" +
		"\372\u0103\u013f\10\152\161\205\215\246\256\301\u0144\52\54\152\205\215\256\334\152" +
		"\205\215\256\324\u014a\u0180\324\u014a\u0180\304\152\205\215\256\321\275\u013a\u013c" +
		"\u0105\u0142\u0143\u016f\u0171\152\205\215\256\315\u0112\u0147\u0151\u016c\u0182" +
		"\u0183\u0100\u0167\u0168\232\276\311\314\326\342\343\345\u0102\u0104\u0106\u0107" +
		"\u0108\u010d\u010e\u0115\u011c\u0126\u0128\u0129\u015f\141\152\162\171\205\215\232" +
		"\256\276\310\311\314\342\343\345\u0102\u0104\u010d\u0115\u011c\u0126\u0128\u0129" +
		"\u015f\1\6\40\41\110\120\132\160\162\232\273\276\314\342\343\345\u0102\u0104\u010d" +
		"\u011c\u0126\u0128\u0129\u015f\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120" +
		"\121\127\132\141\145\152\160\162\167\172\173\174\205\215\220\224\226\227\232\233" +
		"\235\236\237\256\272\273\275\276\277\311\314\326\335\342\343\345\352\357\373\374" +
		"\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120" +
		"\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171" +
		"\u0173\1\6\26\41\72\73\110\120\273\u0117\u0132\u0138\u0139\1\6\26\41\72\73\110\120" +
		"\273\u0117\u0132\u0138\u0139\1\6\41\110\120\273\u0102\323\22\232\266\267\276\311" +
		"\314\326\342\343\345\360\u0102\u0104\u0106\u0107\u0108\u010d\u010e\u0115\u011c\u0126" +
		"\u0128\u0129\u015f\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\126\127" +
		"\132\141\145\152\160\162\167\172\173\174\205\215\220\224\226\227\232\233\235\236" +
		"\237\256\272\273\275\276\277\311\314\326\335\342\343\345\352\357\373\374\375\u0102" +
		"\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128" +
		"\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1" +
		"\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\160\161" +
		"\162\167\172\173\174\205\215\220\224\226\227\232\233\235\236\237\243\246\256\272" +
		"\273\275\276\277\311\314\326\335\342\343\345\347\352\357\373\374\375\u0102\u0104" +
		"\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129" +
		"\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13" +
		"\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\160\162\167\172" +
		"\173\174\205\215\220\224\226\227\232\233\235\236\237\256\272\273\274\275\276\277" +
		"\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108" +
		"\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e" +
		"\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72" +
		"\73\75\107\110\120\121\127\132\141\145\152\160\162\167\172\173\174\205\215\220\224" +
		"\226\227\232\233\235\236\237\256\272\273\274\275\276\277\311\314\326\335\342\343" +
		"\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117" +
		"\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f" +
		"\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127" +
		"\132\141\145\152\160\161\162\167\172\173\174\205\215\220\224\226\227\232\233\235" +
		"\236\237\243\246\256\272\273\275\276\277\311\314\326\335\342\343\345\347\352\357" +
		"\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d" +
		"\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f" +
		"\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145" +
		"\152\157\160\162\167\172\173\174\205\215\220\224\226\227\232\233\235\236\237\256" +
		"\272\273\275\276\277\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104" +
		"\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129" +
		"\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13" +
		"\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\157\160\162\167" +
		"\172\173\174\205\215\220\224\226\227\232\233\235\236\237\256\272\273\275\276\277" +
		"\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108" +
		"\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e" +
		"\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72" +
		"\73\75\107\110\120\121\127\132\141\145\152\157\160\162\167\172\173\174\205\215\220" +
		"\224\226\227\232\233\235\236\237\256\272\273\275\276\277\311\314\326\335\342\343" +
		"\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117" +
		"\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f" +
		"\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127" +
		"\132\141\145\152\157\160\162\167\172\173\174\205\215\220\224\226\227\232\233\235" +
		"\236\237\256\272\273\275\276\277\311\314\326\335\342\343\345\352\357\373\374\375" +
		"\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126" +
		"\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173" +
		"\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\157\160" +
		"\162\167\172\173\174\205\215\220\224\226\227\232\233\235\236\237\256\272\273\275" +
		"\276\277\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104\u0105\u0106" +
		"\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a" +
		"\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36" +
		"\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\157\160\162\167\172\173\174" +
		"\205\215\220\224\226\227\232\233\235\236\237\256\272\273\275\276\277\311\314\326" +
		"\335\342\343\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e" +
		"\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143" +
		"\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110" +
		"\120\121\127\132\141\145\152\160\162\167\172\173\174\205\215\220\224\225\226\227" +
		"\232\233\235\236\237\256\272\273\275\276\277\311\314\326\335\342\343\345\352\357" +
		"\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d" +
		"\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f" +
		"\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145" +
		"\152\160\162\167\172\173\174\205\215\220\224\225\226\227\232\233\235\236\237\256" +
		"\272\273\275\276\277\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104" +
		"\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129" +
		"\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13" +
		"\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\157\160\162\167" +
		"\172\173\174\205\215\220\224\226\227\232\233\235\236\237\256\272\273\275\276\277" +
		"\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108" +
		"\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e" +
		"\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72" +
		"\73\75\107\110\120\121\127\132\141\145\152\160\162\167\172\173\174\205\215\220\224" +
		"\226\227\232\233\235\236\237\256\270\272\273\275\276\277\311\314\326\335\342\343" +
		"\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117" +
		"\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f" +
		"\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127" +
		"\132\141\145\152\160\162\167\172\173\174\205\215\220\224\226\227\232\233\235\236" +
		"\237\256\270\272\273\275\276\277\311\314\326\335\342\343\345\352\357\373\374\375" +
		"\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126" +
		"\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173" +
		"\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\160\162" +
		"\167\172\173\174\205\215\220\224\226\227\232\233\235\236\237\256\270\272\273\275" +
		"\276\277\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104\u0105\u0106" +
		"\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a" +
		"\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36" +
		"\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\160\162\167\172\173\174\205" +
		"\215\220\224\226\227\232\233\235\236\237\256\270\272\273\275\276\277\311\314\326" +
		"\335\342\343\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e" +
		"\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143" +
		"\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110" +
		"\120\121\127\132\141\145\152\160\162\167\172\173\174\205\215\220\224\226\227\232" +
		"\233\235\236\237\256\262\272\273\275\276\277\311\314\326\335\342\343\345\352\357" +
		"\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d" +
		"\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f" +
		"\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145" +
		"\152\160\162\167\172\173\174\205\215\220\224\226\227\232\233\235\236\237\256\272" +
		"\273\275\276\277\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104\u0105" +
		"\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132" +
		"\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0160\u0169\u016f\u0171\u0173\1\2\6\13" +
		"\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\160\161\162\167" +
		"\172\173\174\205\215\220\224\226\227\232\233\234\235\236\237\243\246\256\272\273" +
		"\275\276\277\311\314\326\335\342\343\345\347\352\357\373\374\375\u0102\u0104\u0105" +
		"\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132" +
		"\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0160\u0169\u016f\u0171\u0173\1\2\6\13" +
		"\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\160\161\162\167" +
		"\172\173\174\205\215\220\224\226\227\232\233\235\236\237\243\246\256\272\273\275" +
		"\276\277\311\314\326\335\342\343\345\347\352\357\373\374\375\u0102\u0104\u0105\u0106" +
		"\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a" +
		"\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36" +
		"\40\41\55\72\73\75\107\110\120\121\127\132\141\145\152\160\161\162\167\172\173\174" +
		"\205\215\220\224\226\227\232\233\235\236\237\243\246\256\272\273\275\276\277\311" +
		"\314\326\335\342\343\345\347\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108" +
		"\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e" +
		"\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72" +
		"\73\75\107\110\120\121\127\132\141\145\152\160\162\167\172\173\174\205\215\220\224" +
		"\226\227\232\233\235\236\237\256\272\273\275\276\277\311\314\326\335\342\343\345" +
		"\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117" +
		"\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f" +
		"\u0160\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120" +
		"\121\127\132\141\145\152\160\162\167\172\173\174\205\215\220\224\226\227\232\233" +
		"\235\236\237\256\272\273\275\276\277\311\314\326\335\342\343\345\352\357\373\374" +
		"\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120" +
		"\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0160\u0169\u016f" +
		"\u0171\u0173\0\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\120\121\127\132\141" +
		"\145\152\160\162\167\172\173\174\205\215\220\224\226\227\232\233\235\236\237\256" +
		"\272\273\275\276\277\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104" +
		"\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129" +
		"\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13" +
		"\20\26\31\35\36\40\41\55\72\73\75\103\107\110\120\121\127\132\141\145\152\160\162" +
		"\167\172\173\174\205\215\220\224\226\227\232\233\235\236\237\256\272\273\275\276" +
		"\277\311\314\326\335\342\343\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107" +
		"\u0108\u010d\u010e\u0115\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c" +
		"\u013e\u0142\u0143\u0144\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41" +
		"\55\64\72\73\75\107\110\120\121\127\132\141\145\152\160\162\167\172\173\174\205\215" +
		"\220\224\226\227\232\233\235\236\237\256\272\273\275\276\277\311\314\326\335\342" +
		"\343\345\352\357\373\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115" +
		"\u0117\u011c\u011d\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144" +
		"\u015f\u0169\u016f\u0171\u0173\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\111" +
		"\120\121\127\132\141\145\152\160\162\167\172\173\174\205\215\220\224\226\227\232" +
		"\233\235\236\237\256\272\273\275\276\277\311\314\326\335\342\343\345\352\357\373" +
		"\374\375\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e\u0115\u0117\u011c\u011d" +
		"\u0120\u0126\u0128\u0129\u0132\u013a\u013c\u013e\u0142\u0143\u0144\u015f\u0169\u016f" +
		"\u0171\u0173\232\276\311\314\342\343\345\u0102\u0104\u010d\u0115\u011c\u0126\u0128" +
		"\u0129\u015f\u0162\230\0\0\40\66\20\103\22\40\26\75\107\127\132\141\162\167\174\226" +
		"\232\233\236\237\275\276\277\311\314\326\335\342\343\345\375\u0102\u0104\u0106\u0108" +
		"\u010d\u010e\u0115\u011c\u011d\u0126\u0128\u0129\u013a\u013c\u015f\1\6\41\110\120" +
		"\232\273\276\311\314\326\342\343\345\u0102\u0104\u0105\u0106\u0107\u0108\u010d\u010e" +
		"\u0115\u0117\u011c\u0126\u0128\u0129\u0142\u0143\u0144\u015f\u016f\u0171\26\72\73" +
		"\145\172\220\227\235\272\357\373\374\u0120\u0132\u013e\u0169\u0173\131\161\243\246" +
		"\347\152\205\152\205\215\256\151\217\107\107\132\107\132\107\132\261\u012d\u0160" +
		"\107\132\107\132\173\352\127\174\141\141\162\141\162\161\243\246\347\340\341\u011f" +
		"\157\141\162\141\162\220\357\227\u013e\u0120\232\276\342\343\345\u0104\u0126\u0128" +
		"\u0129\u015f\232\276\342\343\345\u0104\u011c\u0126\u0128\u0129\u015f\232\276\342" +
		"\343\345\u0104\u011c\u0126\u0128\u0129\u015f\232\276\342\343\345\u0104\u011c\u0126" +
		"\u0128\u0129\u015f\232\276\311\313\314\342\343\345\u0102\u0104\u010c\u010d\u0111" +
		"\u011c\u0126\u0128\u0129\u014e\u015f\232\276\311\314\342\343\345\u0102\u0104\u010d" +
		"\u011c\u0126\u0128\u0129\u015f\232\276\311\342\343\345\u0104\u011c\u0126\u0128\u0129" +
		"\u015f\232\276\311\314\342\343\345\u0102\u0104\u010d\u0115\u011c\u0126\u0128\u0129" +
		"\u015f\232\276\311\314\342\343\345\u0102\u0104\u010d\u0115\u011c\u0126\u0128\u0129" +
		"\u015f\232\276\311\314\326\342\343\345\u0102\u0104\u010d\u010e\u0115\u011c\u0126" +
		"\u0128\u0129\u015f\232\276\311\314\326\342\343\345\u0102\u0104\u0106\u0108\u010d" +
		"\u010e\u0115\u011c\u0126\u0128\u0129\u015f\232\276\311\314\326\342\343\345\u0102" +
		"\u0104\u0106\u0108\u010d\u010e\u0115\u011c\u0126\u0128\u0129\u015f\232\276\311\314" +
		"\342\343\345\u0102\u0104\u010d\u0115\u011c\u0126\u0128\u0129\u015f\232\276\311\314" +
		"\326\342\343\345\u0102\u0104\u0106\u0108\u010d\u010e\u0115\u011c\u0126\u0128\u0129" +
		"\u015f\232\276\311\314\326\342\343\345\u0102\u0104\u0106\u0107\u0108\u010d\u010e" +
		"\u0115\u011c\u0126\u0128\u0129\u015f\232\266\267\276\311\314\326\342\343\345\360" +
		"\u0102\u0104\u0106\u0107\u0108\u010d\u010e\u0115\u011c\u0126\u0128\u0129\u015f\u0105" +
		"\u0142\u0143\u016f\u0171\u0105\u0142\u016f\u0171\141\162\232\276\310\311\314\342" +
		"\343\345\u0102\u0104\u010d\u0115\u011c\u0126\u0128\u0129\u015f\141\162\171\232\276" +
		"\310\311\314\342\343\345\u0102\u0104\u010d\u0115\u011c\u0126\u0128\u0129\u015f\161" +
		"\246\26\75\233\275\375\u011d\u013a\u013c\10\301\u0144\26\75\270\26\72\73\u0132\275" +
		"\u013a\u013c\275\u013a\u013c\1\6\41\110\120\273\55\121\1\6\26\41\72\73\110\120\273" +
		"\u0117\u0132\u0138\u0139\2\13\31\2\13\31\232\276\311\314\342\343\345\u0102\u0104" +
		"\u010d\u0115\u011c\u0126\u0128\u0129\u015f\u0162\1\6\40\41\110\120\132\160\162\232" +
		"\273\276\314\342\343\345\u0102\u0104\u010d\u011c\u0126\u0128\u0129\u015f\3\22\20" +
		"\103\131\261\354\u012d\u0162\127\236\237\335\340\341\u011f\220\232\276\342\343\345" +
		"\u0104\u0126\u0128\u0129\u015f\232\276\311\313\314\342\343\345\u0102\u0104\u010c" +
		"\u010d\u0111\u011c\u0126\u0128\u0129\u014e\u015f\141\162\232\276\310\311\314\342" +
		"\343\345\u0102\u0104\u010d\u0115\u011c\u0126\u0128\u0129\u015f\233\26\26\26\55\55" +
		"\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(3690,
		"\u018b\u018c\176\176\4\4\4\62\4\106\4\4\4\4\200\4\u013f\4\4\4\4\5\5\5\5\104\5\5\5" +
		"\5\5\u012c\5\5\5\5\126\126\157\157\274\274\274\274\274\274\274\274\274\274\274\274" +
		"\274\274\274\274\274\274\274\232\342\343\345\u0126\u0128\u0129\u015f\64\111\u011c" +
		"\u016f\u016f\u016f\u016f\u013a\u013a\u013a\110\151\360\u0106\u0132\u0138\u0139\173" +
		"\352\60\105\125\144\350\356\370\u0109\u0130\u0131\u0133\u0159\u015a\u015c\u0163\u0174" +
		"\u0175\u0176\u017f\u0185\35\201\201\201\201\41\73\75\121\174\202\202\202\202\357" +
		"\u011d\u0173\72\120\217\u0107\u010a\u011a\u0120\u0120\u014c\u0120\u0107\6\6\6\127" +
		"\6\6\127\203\203\203\275\203\6\275\275\275\275\275\275\275\275\275\275\42\175\204" +
		"\204\204\204\u013b\31\55\57\152\205\152\205\205\276\152\152\205\276\u0104\u0105\276" +
		"\276\276\276\276\276\152\276\276\u0142\276\276\276\276\276\276\276\276\276\276\u0160" +
		"\u0142\u0142\276\u0142\u0142\103\122\124\254\255\257\351\u013d\u016b\u0170\u0180" +
		"\u0181\u0186\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\u0134\u0140" +
		"\u016a\26\206\233\206\206\233\206\26\26\74\76\207\207\207\207\u011e\210\210\210\210" +
		"\u0118\u0118\u0187\u0119\u0119\u0188\u0108\211\211\211\211\u0116\375\375\375\u0143" +
		"\u0143\u0143\u0143\u0143\212\212\212\212\u0115\u0115\u0171\u0115\u0171\u0171\u0171" +
		"\u013c\u013c\u013c\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300" +
		"\300\300\300\300\300\160\213\160\160\213\213\160\213\160\160\160\160\160\160\160" +
		"\160\160\160\160\160\160\160\160\160\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7" +
		"\7\7\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214" +
		"\230\116\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116\214\113\10\116" +
		"\301\116\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144\301\10\301" +
		"\301\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144" +
		"\u0144\113\11\11\11\11\11\11\11\11\11\11\11\11\11\12\12\12\12\12\12\12\12\12\12\12" +
		"\12\12\13\13\13\13\13\13\u013e\u0117\36\302\302\302\302\302\302\302\302\302\302\302" +
		"\302\302\302\302\302\302\302\302\302\302\302\302\302\10\17\10\17\43\17\61\63\65\10" +
		"\77\113\113\116\130\10\10\77\145\116\130\116\113\214\230\116\116\113\251\116\214" +
		"\214\113\265\116\113\301\116\113\116\116\214\113\10\116\301\116\301\301\301\116\301" +
		"\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113" +
		"\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43" +
		"\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\230\234\116\116\113" +
		"\251\116\214\214\113\265\116\113\301\116\113\116\116\234\234\214\113\10\116\301\116" +
		"\301\301\301\116\301\301\301\234\251\113\113\113\116\301\301\u0144\301\10\301\301" +
		"\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144" +
		"\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116" +
		"\113\214\230\116\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116\214" +
		"\113\10\373\116\301\116\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144" +
		"\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10" +
		"\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77" +
		"\116\130\116\113\214\230\116\116\113\251\116\214\214\113\265\116\113\301\116\113" +
		"\116\116\214\113\10\374\116\301\116\301\301\301\116\301\301\301\251\113\113\113\116" +
		"\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113" +
		"\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113" +
		"\116\130\10\10\77\116\130\116\113\214\230\235\116\116\113\251\116\214\214\113\265" +
		"\116\113\301\116\113\116\116\235\235\214\113\10\116\301\116\301\301\301\116\301\301" +
		"\301\235\251\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113" +
		"\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43" +
		"\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\220\230\116\116\113" +
		"\251\116\214\214\113\265\116\113\301\116\113\116\116\214\113\10\116\301\116\301\301" +
		"\301\116\301\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10" +
		"\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\10" +
		"\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\221\230" +
		"\116\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116\214\113\10\116\301" +
		"\116\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301" +
		"\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144" +
		"\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116" +
		"\113\214\222\230\116\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116" +
		"\214\113\10\116\301\116\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144" +
		"\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10" +
		"\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77" +
		"\116\130\116\113\214\223\230\116\116\113\251\116\214\214\113\265\116\113\301\116" +
		"\113\116\116\214\113\10\116\301\116\301\301\301\116\301\301\301\251\113\113\113\116" +
		"\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113" +
		"\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113" +
		"\116\130\10\10\77\116\130\116\113\214\224\230\116\116\113\251\116\214\214\113\265" +
		"\116\113\301\116\113\116\116\214\113\10\116\301\116\301\301\301\116\301\301\301\251" +
		"\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301\301" +
		"\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65" +
		"\10\77\113\113\116\130\10\10\77\116\130\116\113\214\225\230\116\116\113\251\116\214" +
		"\214\113\265\116\113\301\116\113\116\116\214\113\10\116\301\116\301\301\301\116\301" +
		"\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113" +
		"\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43" +
		"\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\230\116\116\113\251" +
		"\116\214\214\113\265\266\116\113\301\116\113\116\116\214\113\10\116\301\116\301\301" +
		"\301\116\301\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10" +
		"\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\10" +
		"\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\230\116" +
		"\116\113\251\116\214\214\113\265\267\116\113\301\116\113\116\116\214\113\10\116\301" +
		"\116\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301" +
		"\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144" +
		"\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116" +
		"\113\214\226\230\116\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116" +
		"\214\113\10\116\301\116\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144" +
		"\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10" +
		"\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77" +
		"\116\130\116\113\214\230\116\116\113\251\116\214\214\113\265\116\113\301\116\113" +
		"\116\116\214\363\113\10\116\301\116\301\301\301\116\301\301\301\251\113\113\113\116" +
		"\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113" +
		"\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113" +
		"\116\130\10\10\77\116\130\116\113\214\230\116\116\113\251\116\214\214\113\265\116" +
		"\113\301\116\113\116\116\214\364\113\10\116\301\116\301\301\301\116\301\301\301\251" +
		"\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301\301" +
		"\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65" +
		"\10\77\113\113\116\130\10\10\77\116\130\116\113\214\230\116\116\113\251\116\214\214" +
		"\113\265\116\113\301\116\113\116\116\214\365\113\10\116\301\116\301\301\301\116\301" +
		"\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113" +
		"\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43" +
		"\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\230\116\116\113\251" +
		"\116\214\214\113\265\116\113\301\116\113\116\116\214\366\113\10\116\301\116\301\301" +
		"\301\116\301\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10" +
		"\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\10" +
		"\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\230\116" +
		"\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116\214\355\113\10\116\301" +
		"\116\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301" +
		"\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144" +
		"\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116" +
		"\113\214\230\116\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116\214" +
		"\113\10\116\301\116\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144" +
		"\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10" +
		"\301\u0178\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10" +
		"\10\77\116\130\116\113\214\230\236\116\116\113\251\116\214\214\113\265\116\113\301" +
		"\116\335\113\116\116\236\236\214\113\10\116\301\116\301\301\301\116\301\301\301\236" +
		"\251\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301" +
		"\301\113\116\116\113\u0144\u0144\10\301\u0179\113\u0144\u0144\113\10\17\10\17\43" +
		"\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\230\237\116\116\113" +
		"\251\116\214\214\113\265\116\113\301\116\113\116\116\237\237\214\113\10\116\301\116" +
		"\301\301\301\116\301\301\301\237\251\113\113\113\116\301\301\u0144\301\10\301\301" +
		"\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144" +
		"\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116" +
		"\113\214\230\240\116\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116" +
		"\240\240\214\113\10\116\301\116\301\301\301\116\301\301\301\240\251\113\113\113\116" +
		"\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113" +
		"\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113" +
		"\116\130\10\10\77\116\130\116\113\214\230\116\116\113\251\116\214\214\113\265\116" +
		"\113\301\116\113\116\116\214\113\10\116\301\116\301\301\301\116\301\301\301\251\113" +
		"\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301\301\113" +
		"\116\116\113\u0144\u0144\10\301\u017a\113\u0144\u0144\113\10\17\10\17\43\17\61\63" +
		"\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\230\116\116\113\251\116\214" +
		"\214\113\265\116\113\301\116\113\116\116\214\113\10\116\301\116\301\301\301\116\301" +
		"\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113" +
		"\301\301\301\113\116\116\113\u0144\u0144\10\301\u017b\113\u0144\u0144\113\2\10\17" +
		"\10\17\43\17\61\63\65\10\77\113\113\116\130\10\10\77\116\130\116\113\214\230\116" +
		"\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116\214\113\10\116\301\116" +
		"\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144\301\10\301\301\301" +
		"\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144" +
		"\113\10\17\10\17\32\43\17\61\63\65\10\77\113\113\116\32\130\10\10\77\116\130\116" +
		"\113\214\230\116\116\113\251\116\214\214\113\265\116\113\301\116\113\116\116\214" +
		"\113\10\116\301\116\301\301\301\116\301\301\301\251\113\113\113\116\301\301\u0144" +
		"\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113\u0144\u0144\10" +
		"\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\107\113\113\116\130\10" +
		"\10\77\116\130\116\113\214\230\116\116\113\251\116\214\214\113\265\116\113\301\116" +
		"\113\116\116\214\113\10\116\301\116\301\301\301\116\301\301\301\251\113\113\113\116" +
		"\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301\301\113\116\116\113" +
		"\u0144\u0144\10\301\113\u0144\u0144\113\10\17\10\17\43\17\61\63\65\10\77\113\113" +
		"\116\130\10\141\10\77\116\130\116\113\214\230\116\116\113\251\116\214\214\113\265" +
		"\116\113\301\116\113\116\116\214\113\10\116\301\116\301\301\301\116\301\301\301\251" +
		"\113\113\113\116\301\301\u0144\301\10\301\301\301\301\10\301\116\113\301\301\301" +
		"\113\116\116\113\u0144\u0144\10\301\113\u0144\u0144\113\303\303\303\303\303\303\303" +
		"\303\303\303\303\303\303\303\303\303\303\273\u0189\3\66\112\33\33\37\67\44\44\131" +
		"\146\131\161\161\246\146\270\304\44\337\337\44\304\u0103\304\304\304\337\304\304" +
		"\304\44\304\304\u0148\u0148\304\304\304\304\44\304\304\304\44\44\304\14\14\14\14" +
		"\14\305\14\305\305\305\305\305\305\305\305\305\u0145\305\305\305\305\305\305\u0152" +
		"\305\305\305\305\u0145\u0145\u016e\305\u0145\u0145\45\45\45\172\250\262\271\336\371" +
		"\262\u0135\u0136\u0157\45\271\371\u0184\153\241\241\241\241\215\256\216\216\260\260" +
		"\177\261\132\133\155\134\134\135\135\353\u0161\u017c\136\136\137\137\252\u012b\147" +
		"\253\162\163\244\164\164\242\344\346\u012a\u0121\u0121\u0121\227\165\165\166\166" +
		"\263\u012e\272\u0169\u0158\306\u0101\u0124\u0125\u0127\u0141\u015b\u015d\u015e\u0177" +
		"\307\307\307\307\307\307\u0154\307\307\307\307\310\310\310\310\310\310\310\310\310" +
		"\310\310\311\311\311\311\311\311\311\311\311\311\311\312\312\312\312\312\312\312" +
		"\312\312\312\312\312\312\312\312\312\312\312\312\313\313\u010c\u0111\313\313\313" +
		"\u0111\313\u014e\313\313\313\313\313\314\u0102\u010d\314\314\314\314\314\314\314" +
		"\314\314\315\315\315\u0112\315\315\315\u0112\315\u0112\u0151\315\315\315\315\315" +
		"\316\316\316\316\316\316\316\316\316\316\316\316\316\316\316\316\317\317\317\317" +
		"\u011b\317\317\317\317\317\317\u011b\317\317\317\317\317\317\320\320\320\320\320" +
		"\320\320\320\320\320\u0149\u014b\320\320\320\320\320\320\320\320\321\321\321\321" +
		"\321\321\321\321\321\321\321\321\321\321\321\321\321\321\321\321\322\322\322\322" +
		"\322\322\322\322\322\322\322\322\322\322\322\322\323\323\323\323\323\323\323\323" +
		"\323\323\323\323\323\323\323\323\323\323\323\323\324\324\324\324\324\324\324\324" +
		"\324\324\324\u014a\324\324\324\324\324\324\324\324\324\325\361\362\325\325\325\325" +
		"\325\325\325\u012f\325\325\325\325\325\325\325\325\325\325\325\325\325\u0146\u0146" +
		"\u016d\u0146\u0146\u0147\u016c\u0182\u0183\167\167\326\326\u010b\u010e\u010e\326" +
		"\326\326\u010e\326\u010e\u010e\326\326\326\326\326\170\170\247\170\170\170\170\170" +
		"\170\170\170\170\170\170\170\170\170\170\170\170\243\347\46\46\333\376\u0137\u0155" +
		"\376\376\27\27\27\47\117\367\50\114\115\u0164\377\377\377\u0100\u0167\u0168\u018a" +
		"\23\71\140\142\372\100\143\15\15\51\15\51\51\15\15\15\u0153\51\u0165\u0166\20\30" +
		"\56\21\21\21\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\327\u017d" +
		"\16\16\70\16\16\16\156\231\245\330\16\330\u0113\330\330\330\u0113\330\u0113\330\330" +
		"\330\330\330\22\40\34\123\154\354\u012d\u0162\u017e\150\340\341\u011f\u0122\u0123" +
		"\u0156\264\331\331\331\331\331\331\331\331\331\331\332\332\u010f\u0110\u0114\332" +
		"\332\332\u0114\332\u014d\u014f\u0150\332\332\332\332\u0172\332\171\171\171\171\171" +
		"\171\171\171\171\171\171\171\171\171\171\171\171\171\171\334\52\53\54\101\102\24" +
		"\25");

	private static final short[] tmRuleLen = TMLexer.unpack_short(227,
		"\5\4\7\4\3\3\4\4\3\3\1\1\2\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2\1\1\1\1" +
		"\3\10\3\2\3\1\1\1\1\5\3\1\3\1\1\2\2\1\1\1\7\6\6\5\6\5\5\4\2\4\3\3\1\1\2\1\1\1\7\5" +
		"\4\4\5\5\6\2\1\1\2\1\3\1\4\3\3\2\3\2\2\1\1\3\3\2\2\3\3\4\3\1\2\2\1\1\1\1\2\1\3\3" +
		"\1\2\1\3\3\3\1\3\1\3\6\6\2\2\4\1\4\2\1\3\2\1\3\3\1\5\2\2\3\1\3\3\3\1\1\1\1\1\1\2" +
		"\1\3\3\1\3\3\1\1\5\3\1\3\1\1\1\1\1\1\3\1\1\2\0\2\0\1\0\1\0\1\0\1\0\1\0\1\0\3\1\1" +
		"\0\1\0\3\1\3\1\1\0\2\1\3\1\3\1\3\1\1\0\3\1\1\0\3\1\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(227,
		"\116\116\117\117\120\121\122\123\123\124\124\125\126\126\127\130\130\131\131\132" +
		"\132\132\132\132\132\132\132\132\132\132\132\132\133\134\134\134\135\135\135\135" +
		"\136\137\137\140\141\142\142\142\142\143\144\145\146\146\147\147\147\150\150\150" +
		"\151\151\151\151\151\151\151\151\152\152\152\152\152\152\153\154\154\154\155\155" +
		"\156\156\156\156\156\157\157\160\160\161\161\162\163\163\163\163\163\163\163\163" +
		"\163\164\165\165\165\166\166\167\167\170\170\170\171\171\171\172\172\173\173\173" +
		"\174\174\175\175\175\176\177\177\200\200\200\200\200\200\200\200\201\202\202\202" +
		"\202\203\203\203\204\205\205\205\206\207\210\210\211\212\212\212\212\213\213\214" +
		"\214\214\214\215\215\215\216\216\216\216\216\217\220\220\220\220\221\222\222\223" +
		"\224\225\225\226\226\227\227\230\230\231\231\232\232\233\233\234\234\235\235\236" +
		"\236\237\237\240\240\241\241\242\242\243\243\244\244\245\245\246\246\247\247\250" +
		"\250\251\251\252\252\253\253");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'||'",
		"'='",
		"'=='",
		"'!='",
		"'=>'",
		"';'",
		"'.'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'!'",
		"'~'",
		"'&'",
		"'&&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Lbrackets",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lgenerate",
		"Lassert",
		"Lempty",
		"Lnonempty",
		"Lparam",
		"Lstring",
		"Lbool",
		"Lint",
		"Lsymbol",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"symref_noargs",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"lexer_directive",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"nonterm_param",
		"directive",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule0",
		"predicate",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsSet",
		"setPrimary",
		"setExpression",
		"annotations",
		"annotation",
		"nonterm_params",
		"param_ref",
		"symref_args",
		"keyval_arg",
		"param_type",
		"param_value",
		"predicate_primary",
		"predicate_expression",
		"expression",
		"map_entry",
		"literal",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"import__optlist",
		"option_optlist",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"lexer_state_list_Comma_separated",
		"identifieropt",
		"implementsopt",
		"inputref_list_Comma_separated",
		"rule0_list_Or_separated",
		"rhsSuffixopt",
		"annotation_list",
		"param_ref_list_Comma_separated",
		"param_value_list_Comma_separated",
		"keyval_arg_list_Comma_separated",
		"keyval_arg_list_Comma_separated_opt",
		"map_entry_list_Comma_separated",
		"map_entry_list_Comma_separated_opt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 78;
		static final int header = 79;
		static final int lexer_section = 80;
		static final int parser_section = 81;
		static final int parsing_algorithm = 82;
		static final int import_ = 83;
		static final int option = 84;
		static final int identifier = 85;
		static final int symref = 86;
		static final int symref_noargs = 87;
		static final int type = 88;
		static final int type_part_list = 89;
		static final int type_part = 90;
		static final int pattern = 91;
		static final int lexer_parts = 92;
		static final int lexer_part = 93;
		static final int named_pattern = 94;
		static final int lexeme = 95;
		static final int lexeme_transition = 96;
		static final int lexeme_attrs = 97;
		static final int lexeme_attribute = 98;
		static final int lexer_directive = 99;
		static final int state_selector = 100;
		static final int stateref = 101;
		static final int lexer_state = 102;
		static final int grammar_parts = 103;
		static final int grammar_part = 104;
		static final int nonterm = 105;
		static final int nonterm_type = 106;
		static final int _implements = 107;
		static final int assoc = 108;
		static final int nonterm_param = 109;
		static final int directive = 110;
		static final int inputref = 111;
		static final int references = 112;
		static final int references_cs = 113;
		static final int rules = 114;
		static final int rule0 = 115;
		static final int predicate = 116;
		static final int rhsPrefix = 117;
		static final int rhsSuffix = 118;
		static final int ruleAction = 119;
		static final int rhsParts = 120;
		static final int rhsPart = 121;
		static final int rhsAnnotated = 122;
		static final int rhsAssignment = 123;
		static final int rhsOptional = 124;
		static final int rhsCast = 125;
		static final int rhsUnordered = 126;
		static final int rhsClass = 127;
		static final int rhsPrimary = 128;
		static final int rhsSet = 129;
		static final int setPrimary = 130;
		static final int setExpression = 131;
		static final int annotations = 132;
		static final int annotation = 133;
		static final int nonterm_params = 134;
		static final int param_ref = 135;
		static final int symref_args = 136;
		static final int keyval_arg = 137;
		static final int param_type = 138;
		static final int param_value = 139;
		static final int predicate_primary = 140;
		static final int predicate_expression = 141;
		static final int expression = 142;
		static final int map_entry = 143;
		static final int literal = 144;
		static final int name = 145;
		static final int qualified_id = 146;
		static final int command = 147;
		static final int syntax_problem = 148;
		static final int import__optlist = 149;
		static final int option_optlist = 150;
		static final int parsing_algorithmopt = 151;
		static final int typeopt = 152;
		static final int lexeme_transitionopt = 153;
		static final int iconopt = 154;
		static final int lexeme_attrsopt = 155;
		static final int commandopt = 156;
		static final int lexer_state_list_Comma_separated = 157;
		static final int identifieropt = 158;
		static final int implementsopt = 159;
		static final int inputref_list_Comma_separated = 160;
		static final int rule0_list_Or_separated = 161;
		static final int rhsSuffixopt = 162;
		static final int annotation_list = 163;
		static final int param_ref_list_Comma_separated = 164;
		static final int param_value_list_Comma_separated = 165;
		static final int keyval_arg_list_Comma_separated = 166;
		static final int keyval_arg_list_Comma_separated_opt = 167;
		static final int map_entry_list_Comma_separated = 168;
		static final int map_entry_list_Comma_separated_opt = 169;
		static final int expression_list_Comma_separated = 170;
		static final int expression_list_Comma_separated_opt = 171;
	}

	public interface Rules {
		static final int lexer_directive_directiveBrackets = 49;  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
		static final int nonterm_type_nontermTypeAST = 68;  // nonterm_type ::= Lreturns symref_noargs
		static final int nonterm_type_nontermTypeHint = 69;  // nonterm_type ::= Linline Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint2 = 70;  // nonterm_type ::= Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint3 = 71;  // nonterm_type ::= Linterface identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint4 = 72;  // nonterm_type ::= Lvoid
		static final int nonterm_type_nontermTypeRaw = 73;  // nonterm_type ::= type
		static final int directive_directivePrio = 80;  // directive ::= '%' assoc references ';'
		static final int directive_directiveInput = 81;  // directive ::= '%' Linput inputref_list_Comma_separated ';'
		static final int directive_directiveAssert = 82;  // directive ::= '%' Lassert Lempty rhsSet ';'
		static final int directive_directiveAssert2 = 83;  // directive ::= '%' Lassert Lnonempty rhsSet ';'
		static final int directive_directiveSet = 84;  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
		static final int rhsOptional_rhsQuantifier = 121;  // rhsOptional ::= rhsCast '?'
		static final int rhsCast_rhsAsLiteral = 124;  // rhsCast ::= rhsClass Las literal
		static final int rhsPrimary_rhsSymbol = 128;  // rhsPrimary ::= symref
		static final int rhsPrimary_rhsNested = 129;  // rhsPrimary ::= '(' rules ')'
		static final int rhsPrimary_rhsList = 130;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		static final int rhsPrimary_rhsList2 = 131;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		static final int rhsPrimary_rhsQuantifier = 132;  // rhsPrimary ::= rhsPrimary '*'
		static final int rhsPrimary_rhsQuantifier2 = 133;  // rhsPrimary ::= rhsPrimary '+'
		static final int rhsPrimary_rhsIgnored = 134;  // rhsPrimary ::= '$' '(' rules ')'
		static final int rhsSet_rhsSet = 136;  // rhsSet ::= Lset '(' setExpression ')'
		static final int setPrimary_setSymbol = 137;  // setPrimary ::= ID symref
		static final int setPrimary_setSymbol2 = 138;  // setPrimary ::= symref
		static final int setPrimary_setCompound = 139;  // setPrimary ::= '(' setExpression ')'
		static final int setPrimary_setComplement = 140;  // setPrimary ::= '~' setPrimary
		static final int setExpression_setBinary = 142;  // setExpression ::= setExpression '|' setExpression
		static final int setExpression_setBinary2 = 143;  // setExpression ::= setExpression '&' setExpression
		static final int predicate_primary_boolPredicate = 159;  // predicate_primary ::= '!' param_ref
		static final int predicate_primary_boolPredicate2 = 160;  // predicate_primary ::= param_ref
		static final int predicate_primary_comparePredicate = 161;  // predicate_primary ::= param_ref '==' literal
		static final int predicate_primary_comparePredicate2 = 162;  // predicate_primary ::= param_ref '!=' literal
		static final int predicate_expression_predicateBinary = 164;  // predicate_expression ::= predicate_expression '&&' predicate_expression
		static final int predicate_expression_predicateBinary2 = 165;  // predicate_expression ::= predicate_expression '||' predicate_expression
		static final int expression_instance = 168;  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
		static final int expression_array = 169;  // expression ::= '[' expression_list_Comma_separated_opt ']'
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected Span[] tmStack;
	protected Span tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new Span[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new Span();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new Span();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 37) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new Span();
			tmStack[tmHead].symbol = 37;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 37);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.tokenText()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		Span left = new Span();
		left.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		left.symbol = tmRuleSymbol[rule];
		left.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		Span startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		left.line = startsym.line;
		left.offset = startsym.offset;
		left.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(left, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = left;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, left.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(Span tmLeft, int ruleIndex, int ruleLength) {
		switch (ruleIndex) {
			case 0:  // input ::= header import__optlist option_optlist lexer_section parser_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead - 1].value) /* lexer */,
						((List<ITmaGrammarPart>)tmStack[tmHead].value) /* parser */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 1:  // input ::= header import__optlist option_optlist lexer_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead].value) /* lexer */,
						null /* parser */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 2:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 3:  // header ::= Llanguage name parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 4:  // lexer_section ::= '::' Llexer lexer_parts
				tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value);
				break;
			case 5:  // parser_section ::= '::' Lparser grammar_parts
				tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value);
				break;
			case 6:  // parsing_algorithm ::= Llalr '(' icon ')'
				tmLeft.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 7:  // import_ ::= Limport ID scon ';'
				tmLeft.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // import_ ::= Limport scon ';'
				tmLeft.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 9:  // option ::= ID '=' expression
				tmLeft.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* key */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 10:  // option ::= syntax_problem
				tmLeft.value = new TmaOption(
						null /* key */,
						null /* value */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 11:  // identifier ::= ID
				tmLeft.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 12:  // symref ::= ID symref_args
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead - 1].value) /* name */,
						((TmaSymrefArgs)tmStack[tmHead].value) /* args */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // symref ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 14:  // symref_noargs ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 15:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 16:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 32:  // pattern ::= regexp
				tmLeft.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 33:  // lexer_parts ::= lexer_part
				tmLeft.value = new ArrayList();
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 34:  // lexer_parts ::= lexer_parts lexer_part
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 35:  // lexer_parts ::= lexer_parts syntax_problem
				((List<ITmaLexerPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 40:  // named_pattern ::= ID '=' pattern
				tmLeft.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 41:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* transition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemeAttrs)tmStack[tmHead - 1].value) /* attrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						null /* input */, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 42:  // lexeme ::= identifier typeopt ':'
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* transition */,
						null /* priority */,
						null /* attrs */,
						null /* command */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 43:  // lexeme_transition ::= '=>' stateref
				tmLeft.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 44:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				tmLeft.value = new TmaLexemeAttrs(
						((TmaLexemeAttribute)tmStack[tmHead - 1].value) /* kind */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 45:  // lexeme_attribute ::= Lsoft
				tmLeft.value = TmaLexemeAttribute.LSOFT;
				break;
			case 46:  // lexeme_attribute ::= Lclass
				tmLeft.value = TmaLexemeAttribute.LCLASS;
				break;
			case 47:  // lexeme_attribute ::= Lspace
				tmLeft.value = TmaLexemeAttribute.LSPACE;
				break;
			case 48:  // lexeme_attribute ::= Llayout
				tmLeft.value = TmaLexemeAttribute.LLAYOUT;
				break;
			case 49:  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs ';'
				tmLeft.value = new TmaDirectiveBrackets(
						((TmaSymref)tmStack[tmHead - 2].value) /* opening */,
						((TmaSymref)tmStack[tmHead - 1].value) /* closing */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 50:  // state_selector ::= '[' lexer_state_list_Comma_separated ']'
				tmLeft.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 51:  // stateref ::= ID
				tmLeft.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 52:  // lexer_state ::= identifier '=>' stateref
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 53:  // lexer_state ::= identifier
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 54:  // grammar_parts ::= grammar_part
				tmLeft.value = new ArrayList();
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 55:  // grammar_parts ::= grammar_parts grammar_part
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 56:  // grammar_parts ::= grammar_parts syntax_problem
				((List<ITmaGrammarPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 60:  // nonterm ::= annotations identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 6].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 61:  // nonterm ::= annotations identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 62:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 63:  // nonterm ::= annotations identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 64:  // nonterm ::= identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 65:  // nonterm ::= identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 66:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 67:  // nonterm ::= identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 68:  // nonterm_type ::= Lreturns symref_noargs
				tmLeft.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 69:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						true /* inline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 70:  // nonterm_type ::= Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 71:  // nonterm_type ::= Linterface identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 72:  // nonterm_type ::= Lvoid
				tmLeft.value = new TmaNontermTypeHint(
						false /* inline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* _implements */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 73:  // nonterm_type ::= type
				tmLeft.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* typeText */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 74:  // implements ::= ':' references_cs
				tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value);
				break;
			case 75:  // assoc ::= Lleft
				tmLeft.value = TmaAssoc.LLEFT;
				break;
			case 76:  // assoc ::= Lright
				tmLeft.value = TmaAssoc.LRIGHT;
				break;
			case 77:  // assoc ::= Lnonassoc
				tmLeft.value = TmaAssoc.LNONASSOC;
				break;
			case 78:  // nonterm_param ::= '%' Lparam identifier param_type '=' param_value ';'
				tmLeft.value = new TmaNontermParam(
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaParamType)tmStack[tmHead - 3].value) /* paramType */,
						((ITmaParamValue)tmStack[tmHead - 1].value) /* paramValue */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 79:  // nonterm_param ::= '%' Lparam identifier param_type ';'
				tmLeft.value = new TmaNontermParam(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaParamType)tmStack[tmHead - 1].value) /* paramType */,
						null /* paramValue */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 80:  // directive ::= '%' assoc references ';'
				tmLeft.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 81:  // directive ::= '%' Linput inputref_list_Comma_separated ';'
				tmLeft.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 82:  // directive ::= '%' Lassert Lempty rhsSet ';'
				tmLeft.value = new TmaDirectiveAssert(
						TmaDirectiveAssert.TmaKindKind.LEMPTY /* kind */,
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* rhsSet */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 83:  // directive ::= '%' Lassert Lnonempty rhsSet ';'
				tmLeft.value = new TmaDirectiveAssert(
						TmaDirectiveAssert.TmaKindKind.LNONEMPTY /* kind */,
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* rhsSet */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 84:  // directive ::= '%' Lgenerate ID '=' rhsSet ';'
				tmLeft.value = new TmaDirectiveSet(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* rhsSet */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 85:  // inputref ::= symref_noargs Lnoeoi
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* reference */,
						true /* noeoi */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 86:  // inputref ::= symref_noargs
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						false /* noeoi */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 87:  // references ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 88:  // references ::= references symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 89:  // references_cs ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 90:  // references_cs ::= references_cs ',' symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 92:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 93:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 94:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 95:  // rule0 ::= rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 96:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 97:  // rule0 ::= rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 98:  // rule0 ::= ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 99:  // rule0 ::= rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* error */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 100:  // rule0 ::= syntax_problem
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* action */,
						null /* suffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* error */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 101:  // predicate ::= '[' predicate_expression ']'
				tmLeft.value = ((ITmaPredicateExpression)tmStack[tmHead - 1].value);
				break;
			case 102:  // rhsPrefix ::= predicate annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 103:  // rhsPrefix ::= annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						null /* predicate */,
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 104:  // rhsPrefix ::= predicate ':'
				tmLeft.value = new TmaRhsPrefix(
						((ITmaPredicateExpression)tmStack[tmHead - 1].value) /* predicate */,
						null /* annotations */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 105:  // rhsSuffix ::= '%' Lprio symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 106:  // rhsSuffix ::= '%' Lshift symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 107:  // ruleAction ::= '{~' identifier scon '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* action */,
						((String)tmStack[tmHead - 1].value) /* parameter */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 108:  // ruleAction ::= '{~' identifier '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 1].value) /* action */,
						null /* parameter */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 109:  // rhsParts ::= rhsPart
				tmLeft.value = new ArrayList();
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 110:  // rhsParts ::= rhsParts rhsPart
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 111:  // rhsParts ::= rhsParts syntax_problem
				((List<ITmaRhsPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 116:  // rhsAnnotated ::= annotations rhsAssignment
				tmLeft.value = new TmaRhsAnnotated(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 118:  // rhsAssignment ::= identifier '=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 119:  // rhsAssignment ::= identifier '+=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 121:  // rhsOptional ::= rhsCast '?'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 122:  // rhsCast ::= rhsClass
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* target */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 123:  // rhsCast ::= rhsClass Las symref
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaSymref)tmStack[tmHead].value) /* target */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 124:  // rhsCast ::= rhsClass Las literal
				tmLeft.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 125:  // rhsUnordered ::= rhsPart '&' rhsPart
				tmLeft.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 127:  // rhsClass ::= identifier ':' rhsPrimary
				tmLeft.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 128:  // rhsPrimary ::= symref
				tmLeft.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 129:  // rhsPrimary ::= '(' rules ')'
				tmLeft.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 130:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						true /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 131:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						false /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 132:  // rhsPrimary ::= rhsPrimary '*'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 133:  // rhsPrimary ::= rhsPrimary '+'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 134:  // rhsPrimary ::= '$' '(' rules ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 136:  // rhsSet ::= Lset '(' setExpression ')'
				tmLeft.value = new TmaRhsSet(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* expr */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 137:  // setPrimary ::= ID symref
				tmLeft.value = new TmaSetSymbol(
						((String)tmStack[tmHead - 1].value) /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 138:  // setPrimary ::= symref
				tmLeft.value = new TmaSetSymbol(
						null /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 139:  // setPrimary ::= '(' setExpression ')'
				tmLeft.value = new TmaSetCompound(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 140:  // setPrimary ::= '~' setPrimary
				tmLeft.value = new TmaSetComplement(
						((ITmaSetExpression)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 142:  // setExpression ::= setExpression '|' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.OR /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 143:  // setExpression ::= setExpression '&' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.AMPERSAND /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 144:  // annotations ::= annotation_list
				tmLeft.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 145:  // annotation ::= '@' ID '{' expression '}'
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 146:  // annotation ::= '@' ID
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 147:  // annotation ::= '@' syntax_problem
				tmLeft.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 148:  // nonterm_params ::= '<' param_ref_list_Comma_separated '>'
				tmLeft.value = new TmaNontermParams(
						((List<TmaIdentifier>)tmStack[tmHead - 1].value) /* refs */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 150:  // symref_args ::= '<' param_value_list_Comma_separated '>'
				tmLeft.value = new TmaSymrefArgs(
						((List<ITmaParamValue>)tmStack[tmHead - 1].value) /* valueList */,
						null /* keyvalueList */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 151:  // symref_args ::= '<' keyval_arg_list_Comma_separated_opt '>'
				tmLeft.value = new TmaSymrefArgs(
						null /* valueList */,
						((List<TmaKeyvalArg>)tmStack[tmHead - 1].value) /* keyvalueList */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 152:  // keyval_arg ::= param_ref ':' param_value
				tmLeft.value = new TmaKeyvalArg(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((ITmaParamValue)tmStack[tmHead].value) /* val */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 153:  // param_type ::= Lint
				tmLeft.value = TmaParamType.LINT;
				break;
			case 154:  // param_type ::= Lstring
				tmLeft.value = TmaParamType.LSTRING;
				break;
			case 155:  // param_type ::= Lbool
				tmLeft.value = TmaParamType.LBOOL;
				break;
			case 156:  // param_type ::= Lsymbol
				tmLeft.value = TmaParamType.LSYMBOL;
				break;
			case 159:  // predicate_primary ::= '!' param_ref
				tmLeft.value = new TmaBoolPredicate(
						true /* negated */,
						((TmaIdentifier)tmStack[tmHead].value) /* paramRef */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 160:  // predicate_primary ::= param_ref
				tmLeft.value = new TmaBoolPredicate(
						false /* negated */,
						((TmaIdentifier)tmStack[tmHead].value) /* paramRef */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 161:  // predicate_primary ::= param_ref '==' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EQUAL_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 162:  // predicate_primary ::= param_ref '!=' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EXCLAMATION_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 164:  // predicate_expression ::= predicate_expression '&&' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.AMPERSAND_AMPERSAND /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 165:  // predicate_expression ::= predicate_expression '||' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.OR_OR /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 168:  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
				tmLeft.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntry>)tmStack[tmHead - 1].value) /* entries */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 169:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				tmLeft.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 171:  // map_entry ::= ID ':' expression
				tmLeft.value = new TmaMapEntry(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 172:  // literal ::= scon
				tmLeft.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* value */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 173:  // literal ::= icon
				tmLeft.value = new TmaLiteral(
						((Integer)tmStack[tmHead].value) /* value */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 174:  // literal ::= Ltrue
				tmLeft.value = new TmaLiteral(
						true /* value */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 175:  // literal ::= Lfalse
				tmLeft.value = new TmaLiteral(
						false /* value */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 176:  // name ::= qualified_id
				tmLeft.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 178:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 179:  // command ::= code
				tmLeft.value = new TmaCommand(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 180:  // syntax_problem ::= error
				tmLeft.value = new TmaSyntaxProblem(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 181:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 182:  // import__optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 183:  // option_optlist ::= option_optlist option
				((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 184:  // option_optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 197:  // lexer_state_list_Comma_separated ::= lexer_state_list_Comma_separated ',' lexer_state
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 198:  // lexer_state_list_Comma_separated ::= lexer_state
				tmLeft.value = new ArrayList();
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 203:  // inputref_list_Comma_separated ::= inputref_list_Comma_separated ',' inputref
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 204:  // inputref_list_Comma_separated ::= inputref
				tmLeft.value = new ArrayList();
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 205:  // rule0_list_Or_separated ::= rule0_list_Or_separated '|' rule0
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 206:  // rule0_list_Or_separated ::= rule0
				tmLeft.value = new ArrayList();
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 209:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 210:  // annotation_list ::= annotation
				tmLeft.value = new ArrayList();
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 211:  // param_ref_list_Comma_separated ::= param_ref_list_Comma_separated ',' param_ref
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 212:  // param_ref_list_Comma_separated ::= param_ref
				tmLeft.value = new ArrayList();
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 213:  // param_value_list_Comma_separated ::= param_value_list_Comma_separated ',' param_value
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 214:  // param_value_list_Comma_separated ::= param_value
				tmLeft.value = new ArrayList();
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 215:  // keyval_arg_list_Comma_separated ::= keyval_arg_list_Comma_separated ',' keyval_arg
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 216:  // keyval_arg_list_Comma_separated ::= keyval_arg
				tmLeft.value = new ArrayList();
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 219:  // map_entry_list_Comma_separated ::= map_entry_list_Comma_separated ',' map_entry
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 220:  // map_entry_list_Comma_separated ::= map_entry
				tmLeft.value = new ArrayList();
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 223:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 224:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(Span value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(Span value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 395);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 396);
	}
}
