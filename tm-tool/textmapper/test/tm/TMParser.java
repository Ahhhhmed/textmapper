/**
 * Copyright 2002-2013 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Lexems;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(292,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\246\0\247\0\uffcd\uffff\263\0\22" +
		"\0\250\0\251\0\uffff\uffff\234\0\233\0\245\0\260\0\uff93\uffff\uff8b\uffff\uff7f" +
		"\uffff\241\0\uff4f\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\6\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\0\0\uffff\uffff\uffff\uffff\244\0\uff49\uffff\uffff" +
		"\uffff\uffff\uffff\11\0\261\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uff1d" +
		"\uffff\2\0\20\0\240\0\uffff\uffff\uff17\uffff\uffff\uffff\uff11\uffff\uffff\uffff" +
		"\16\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\4\0\255\0\256\0\254\0\uffff" +
		"\uffff\uffff\uffff\237\0\uffff\uffff\14\0\15\0\uffff\uffff\uff0b\uffff\uff03\uffff" +
		"\ufefd\uffff\45\0\51\0\52\0\50\0\17\0\uffff\uffff\252\0\uffff\uffff\10\0\21\0\ufecb" +
		"\uffff\77\0\uffff\uffff\uffff\uffff\uffff\uffff\54\0\uffff\uffff\46\0\47\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\ufec3\uffff\104\0\107\0\110\0\uffff\uffff\220\0\ufe91" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\100\0\44\0\53\0\uffff\uffff\35\0\36\0" +
		"\31\0\32\0\uffff\uffff\27\0\30\0\34\0\37\0\41\0\40\0\33\0\uffff\uffff\26\0\ufe63" +
		"\uffff\uffff\uffff\125\0\126\0\127\0\uffff\uffff\ufe2f\uffff\227\0\ufdfb\uffff\uffff" +
		"\uffff\uffff\uffff\ufdbd\uffff\ufd91\uffff\123\0\124\0\uffff\uffff\105\0\106\0\uffff" +
		"\uffff\217\0\253\0\101\0\102\0\76\0\23\0\43\0\uffff\uffff\24\0\25\0\ufd65\uffff\ufd2b" +
		"\uffff\132\0\uffff\uffff\136\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufd23" +
		"\uffff\uffff\uffff\uffff\uffff\ufce5\uffff\262\0\uffff\uffff\204\0\uffff\uffff\143" +
		"\0\ufc95\uffff\145\0\ufc59\uffff\ufc1b\uffff\164\0\167\0\171\0\ufbd9\uffff\165\0" +
		"\ufb95\uffff\ufb4f\uffff\uffff\uffff\ufb05\uffff\166\0\153\0\ufad5\uffff\152\0\ufacd" +
		"\uffff\ufa9d\uffff\115\0\116\0\121\0\122\0\ufa71\uffff\ufa33\uffff\uffff\uffff\42" +
		"\0\uffff\uffff\56\0\uf9f5\uffff\134\0\133\0\uffff\uffff\130\0\137\0\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uf9bd\uffff\231\0\uffff\uffff" +
		"\uf97f\uffff\uffff\uffff\uffff\uffff\uffff\uffff\114\0\uf93f\uffff\150\0\uf901\uffff" +
		"\163\0\151\0\uffff\uffff\175\0\uffff\uffff\210\0\211\0\170\0\uf8bf\uffff\uf88f\uffff" +
		"\120\0\uffff\uffff\uffff\uffff\uf84f\uffff\70\0\60\0\uf811\uffff\131\0\225\0\157" +
		"\0\160\0\156\0\154\0\uffff\uffff\205\0\uffff\uffff\uffff\uffff\232\0\uffff\uffff" +
		"\uffff\uffff\172\0\uf7db\uffff\173\0\147\0\uf791\uffff\177\0\200\0\142\0\113\0\112" +
		"\0\uffff\uffff\uffff\uffff\62\0\uf74f\uffff\155\0\uffff\uffff\230\0\uffff\uffff\215" +
		"\0\111\0\72\0\73\0\74\0\75\0\uffff\uffff\64\0\66\0\uffff\uffff\uffff\uffff\213\0" +
		"\uffff\uffff\71\0\207\0\206\0\uffff\uffff\uffff\uffff\214\0\216\0\212\0\uffff\uffff" +
		"\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(2274,
		"\10\1\40\1\41\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1" +
		"\64\1\65\1\66\1\67\1\70\1\71\1\72\1\uffff\ufffe\2\uffff\3\uffff\21\uffff\40\uffff" +
		"\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\42\uffff\43\uffff\44\uffff\22\243\uffff\ufffe\23\uffff\70\uffff" +
		"\14\7\uffff\ufffe\15\uffff\14\257\23\257\25\257\70\257\uffff\ufffe\47\uffff\10\3" +
		"\40\3\41\3\50\3\51\3\52\3\53\3\54\3\55\3\56\3\57\3\60\3\61\3\62\3\63\3\64\3\65\3" +
		"\66\3\67\3\70\3\71\3\72\3\uffff\ufffe\17\uffff\22\242\uffff\ufffe\41\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff" +
		"\25\236\uffff\ufffe\10\uffff\0\5\uffff\ufffe\17\uffff\25\235\uffff\ufffe\70\uffff" +
		"\14\7\uffff\ufffe\12\uffff\20\21\23\21\uffff\ufffe\23\uffff\20\55\uffff\ufffe\21" +
		"\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53" +
		"\uffff\52\uffff\51\uffff\50\uffff\0\12\10\12\uffff\ufffe\13\uffff\17\103\22\103\uffff" +
		"\ufffe\6\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\0\13\uffff\ufffe\37\uffff\22" +
		"\224\41\224\50\224\51\224\52\224\53\224\54\224\55\224\56\224\57\224\60\224\61\224" +
		"\62\224\63\224\64\224\65\224\66\224\67\224\70\224\71\224\72\224\uffff\ufffe\1\uffff" +
		"\0\67\10\67\21\67\40\67\41\67\50\67\51\67\52\67\53\67\54\67\55\67\56\67\57\67\60" +
		"\67\61\67\62\67\63\67\64\67\65\67\66\67\67\67\70\67\71\67\72\67\uffff\ufffe\75\uffff" +
		"\22\226\23\226\36\226\37\226\41\226\50\226\51\226\52\226\53\226\54\226\55\226\56" +
		"\226\57\226\60\226\61\226\62\226\63\226\64\226\65\226\66\226\67\226\70\226\71\226" +
		"\72\226\uffff\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff" +
		"\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\74\uffff\11\146\14\146\uffff\ufffe\41\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\7\117\uffff" +
		"\ufffe\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52" +
		"\uffff\51\uffff\50\uffff\7\117\uffff\ufffe\13\uffff\0\57\3\57\10\57\21\57\23\57\40" +
		"\57\41\57\50\57\51\57\52\57\53\57\54\57\55\57\56\57\57\57\60\57\61\57\62\57\63\57" +
		"\64\57\65\57\66\57\67\57\70\57\71\57\72\57\74\57\uffff\ufffe\60\uffff\14\135\17\135" +
		"\uffff\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\74\uffff\11\146\25\146\uffff\ufffe\12\21\20\21\33\21\6\22\11\22\14\22\23" +
		"\22\24\22\25\22\31\22\32\22\34\22\35\22\36\22\37\22\40\22\41\22\45\22\46\22\50\22" +
		"\51\22\52\22\53\22\54\22\55\22\56\22\57\22\60\22\61\22\62\22\63\22\64\22\65\22\66" +
		"\22\67\22\70\22\71\22\72\22\74\22\uffff\ufffe\6\uffff\23\uffff\24\uffff\36\uffff" +
		"\37\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff" +
		"\52\uffff\51\uffff\50\uffff\74\uffff\11\146\14\146\25\146\uffff\ufffe\6\uffff\23" +
		"\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\74\uffff\11\146\14\146" +
		"\25\146\uffff\ufffe\35\uffff\6\161\11\161\14\161\23\161\24\161\25\161\36\161\37\161" +
		"\40\161\41\161\45\161\50\161\51\161\52\161\53\161\54\161\55\161\56\161\57\161\60" +
		"\161\61\161\62\161\63\161\64\161\65\161\66\161\67\161\70\161\71\161\72\161\74\161" +
		"\uffff\ufffe\34\uffff\6\174\11\174\14\174\23\174\24\174\25\174\35\174\36\174\37\174" +
		"\40\174\41\174\45\174\50\174\51\174\52\174\53\174\54\174\55\174\56\174\57\174\60" +
		"\174\61\174\62\174\63\174\64\174\65\174\66\174\67\174\70\174\71\174\72\174\74\174" +
		"\uffff\ufffe\46\uffff\6\176\11\176\14\176\23\176\24\176\25\176\34\176\35\176\36\176" +
		"\37\176\40\176\41\176\45\176\50\176\51\176\52\176\53\176\54\176\55\176\56\176\57" +
		"\176\60\176\61\176\62\176\63\176\64\176\65\176\66\176\67\176\70\176\71\176\72\176" +
		"\74\176\uffff\ufffe\31\uffff\32\uffff\6\202\11\202\14\202\23\202\24\202\25\202\34" +
		"\202\35\202\36\202\37\202\40\202\41\202\45\202\46\202\50\202\51\202\52\202\53\202" +
		"\54\202\55\202\56\202\57\202\60\202\61\202\62\202\63\202\64\202\65\202\66\202\67" +
		"\202\70\202\71\202\72\202\74\202\uffff\ufffe\37\uffff\23\223\36\223\41\223\50\223" +
		"\51\223\52\223\53\223\54\223\55\223\56\223\57\223\60\223\61\223\62\223\63\223\64" +
		"\223\65\223\66\223\67\223\70\223\71\223\72\223\uffff\ufffe\11\uffff\14\144\25\144" +
		"\uffff\ufffe\37\uffff\23\221\36\221\41\221\50\221\51\221\52\221\53\221\54\221\55" +
		"\221\56\221\57\221\60\221\61\221\62\221\63\221\64\221\65\221\66\221\67\221\70\221" +
		"\71\221\72\221\uffff\ufffe\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\7\117\uffff\ufffe\6\uffff\21\uffff" +
		"\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff" +
		"\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff" +
		"\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\74\uffff\11\146\14" +
		"\146\uffff\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41" +
		"\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\50\uffff\74\uffff\11\146\14\146\uffff\ufffe\3\uffff\0\61\10\61\21\61\23\61" +
		"\40\61\41\61\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63" +
		"\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\74\61\uffff\ufffe\6\uffff\23\uffff" +
		"\24\uffff\36\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\45\uffff\74\uffff\11\146\25" +
		"\146\uffff\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41" +
		"\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62" +
		"\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51" +
		"\uffff\50\uffff\74\uffff\11\146\14\146\25\146\uffff\ufffe\6\uffff\23\uffff\24\uffff" +
		"\36\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\74\uffff\11\146\14\146\25\146\uffff" +
		"\ufffe\35\uffff\6\162\11\162\14\162\23\162\24\162\25\162\36\162\37\162\40\162\41" +
		"\162\45\162\50\162\51\162\52\162\53\162\54\162\55\162\56\162\57\162\60\162\61\162" +
		"\62\162\63\162\64\162\65\162\66\162\67\162\70\162\71\162\72\162\74\162\uffff\ufffe" +
		"\37\uffff\23\222\36\222\41\222\50\222\51\222\52\222\53\222\54\222\55\222\56\222\57" +
		"\222\60\222\61\222\62\222\63\222\64\222\65\222\66\222\67\222\70\222\71\222\72\222" +
		"\uffff\ufffe\6\uffff\21\uffff\23\uffff\24\uffff\36\uffff\37\uffff\40\uffff\41\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\50\uffff\74\uffff\11\146\14\146\25\146\uffff\ufffe\6\uffff\21\uffff\23\uffff\24" +
		"\uffff\36\uffff\37\uffff\40\uffff\41\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\74\uffff\11\146\14\146\uffff" +
		"\ufffe\23\uffff\0\63\10\63\21\63\40\63\41\63\50\63\51\63\52\63\53\63\54\63\55\63" +
		"\56\63\57\63\60\63\61\63\62\63\63\63\64\63\65\63\66\63\67\63\70\63\71\63\72\63\74" +
		"\63\uffff\ufffe\31\uffff\32\uffff\6\203\11\203\14\203\23\203\24\203\25\203\34\203" +
		"\35\203\36\203\37\203\40\203\41\203\45\203\46\203\50\203\51\203\52\203\53\203\54" +
		"\203\55\203\56\203\57\203\60\203\61\203\62\203\63\203\64\203\65\203\66\203\67\203" +
		"\70\203\71\203\72\203\74\203\uffff\ufffe\35\201\6\201\11\201\14\201\23\201\24\201" +
		"\25\201\36\201\37\201\40\201\41\201\45\201\50\201\51\201\52\201\53\201\54\201\55" +
		"\201\56\201\57\201\60\201\61\201\62\201\63\201\64\201\65\201\66\201\67\201\70\201" +
		"\71\201\72\201\74\201\uffff\ufffe\74\uffff\0\65\10\65\21\65\40\65\41\65\50\65\51" +
		"\65\52\65\53\65\54\65\55\65\56\65\57\65\60\65\61\65\62\65\63\65\64\65\65\65\66\65" +
		"\67\65\70\65\71\65\72\65\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(140,
		"\0\2\4\17\31\31\31\46\52\54\56\63\67\102\107\110\121\126\152\163\217\233\250\251" +
		"\255\261\270\273\274\301\310\330\357\u0104\u0145\u014d\u0155\u015c\u015d\u015e\u015f" +
		"\u01a2\u01e4\u0226\u0269\u02ab\u02ed\u032f\u0371\u03b3\u03f5\u043a\u047d\u04c0\u0502" +
		"\u0544\u0586\u05c9\u060b\u064d\u064d\u065a\u065b\u065c\u065d\u065e\u065f\u0661\u0662" +
		"\u0663\u067e\u06a4\u06a7\u06a9\u06ad\u06af\u06b0\u06b2\u06b4\u06b6\u06b7\u06b8\u06b9" +
		"\u06bb\u06bd\u06bf\u06c0\u06c2\u06c4\u06c6\u06c7\u06c9\u06cb\u06cd\u06cd\u06d3\u06da" +
		"\u06e1\u06ec\u06f4\u0700\u070c\u0719\u0728\u0737\u0743\u0752\u0762\u0764\u0770\u0773" +
		"\u0786\u0792\u0799\u07a1\u07a2\u07a4\u07a7\u07aa\u07b7\u07cc\u07cd\u07ce\u07d0\u07d1" +
		"\u07d2\u07d3\u07d4\u07d5\u07d6\u07d9\u07da\u07e0\u07eb\u07ec\u07fc\u07fd\u07fe\u07ff" +
		"\u0800");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(2048,
		"\u0120\u0121\123\170\1\6\34\37\47\66\74\124\143\233\337\1\6\37\43\66\74\143\233\304" +
		"\337\113\134\200\236\247\251\276\277\320\323\330\344\350\133\207\212\300\36\52\266" +
		"\322\51\56\103\115\243\56\115\120\225\32\46\64\77\230\232\245\346\347\367\u0103\21" +
		"\124\156\166\222\u0115\24\57\122\124\156\166\222\230\u0117\56\115\126\243\370\1\6" +
		"\37\65\66\74\105\124\143\156\166\200\222\233\236\276\277\323\344\350\25\122\124\156" +
		"\166\222\315\316\362\20\26\30\104\124\133\156\166\200\212\222\236\240\247\251\262" +
		"\276\277\320\323\324\325\326\330\335\344\350\353\200\236\247\251\276\277\320\323" +
		"\330\335\344\350\42\60\62\151\156\166\222\317\322\367\u0108\u0111\u0117\312\124\156" +
		"\166\222\124\156\166\222\124\156\166\222\261\372\u0114\261\372\u0114\243\124\156" +
		"\166\222\256\124\156\166\222\252\332\375\200\236\247\251\262\276\277\320\323\324" +
		"\325\326\330\335\344\350\113\124\134\142\156\166\200\222\235\236\247\251\263\270" +
		"\276\277\320\323\330\335\343\344\350\1\6\36\37\66\74\105\132\134\143\200\233\236" +
		"\251\276\277\320\323\330\344\350\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113" +
		"\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236" +
		"\237\247\251\262\271\276\277\302\307\313\314\316\320\323\324\325\326\330\335\337" +
		"\344\350\364\365\u0108\u010a\u011b\u011c\1\6\37\66\74\143\233\337\1\6\37\66\74\143" +
		"\233\337\1\6\37\66\74\143\233\320\260\22\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102" +
		"\105\113\124\132\133\134\140\143\144\145\156\166\171\175\200\202\203\204\212\222" +
		"\232\233\235\236\237\247\251\262\271\276\277\302\307\313\314\316\320\323\324\325" +
		"\326\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37" +
		"\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203" +
		"\204\222\232\233\234\235\236\237\247\251\262\271\276\277\302\307\313\314\316\320" +
		"\323\324\325\326\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13\27" +
		"\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175" +
		"\200\202\203\204\222\232\233\234\235\236\237\247\251\262\271\276\277\302\307\313" +
		"\314\316\320\323\324\325\326\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c" +
		"\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\133\134\140\143\144\145" +
		"\156\166\171\175\200\202\203\204\212\222\232\233\235\236\237\247\251\262\271\276" +
		"\277\302\307\313\314\316\320\323\324\325\326\330\335\337\344\350\364\365\u0108\u010a" +
		"\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\131\132\134\140" +
		"\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\237\247\251\262" +
		"\271\276\277\302\307\313\314\316\320\323\324\325\326\330\335\337\344\350\364\365" +
		"\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\131" +
		"\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\237" +
		"\247\251\262\271\276\277\302\307\313\314\316\320\323\324\325\326\330\335\337\344" +
		"\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105" +
		"\113\124\131\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233" +
		"\235\236\237\247\251\262\271\276\277\302\307\313\314\316\320\323\324\325\326\330" +
		"\335\337\344\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66" +
		"\74\75\102\105\113\124\131\132\134\140\143\144\145\156\166\171\175\200\202\203\204" +
		"\222\232\233\235\236\237\247\251\262\271\276\277\302\307\313\314\316\320\323\324" +
		"\325\326\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36" +
		"\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202" +
		"\203\204\222\226\232\233\235\236\237\247\251\262\271\276\277\302\307\313\314\316" +
		"\320\323\324\325\326\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13" +
		"\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171" +
		"\175\200\202\203\204\222\232\233\235\236\237\247\251\262\271\276\277\302\307\313" +
		"\314\316\320\323\324\325\326\330\335\337\344\350\364\365\u0104\u0108\u010a\u011b" +
		"\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\133\134\140\143" +
		"\144\145\156\166\171\175\200\201\202\203\204\212\222\232\233\235\236\237\247\251" +
		"\262\271\276\277\302\307\313\314\316\320\323\324\325\326\330\335\337\344\350\364" +
		"\365\u0104\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105" +
		"\113\124\132\133\134\140\143\144\145\156\166\171\175\200\202\203\204\212\222\232" +
		"\233\235\236\237\247\251\262\271\276\277\302\307\313\314\316\320\323\324\325\326" +
		"\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65" +
		"\66\74\75\102\105\113\124\132\133\134\140\143\144\145\156\166\171\175\200\202\203" +
		"\204\212\222\232\233\235\236\237\247\251\262\271\276\277\302\307\313\314\316\320" +
		"\323\324\325\326\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13\27" +
		"\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175" +
		"\200\202\203\204\222\232\233\235\236\237\247\251\262\271\276\277\302\307\313\314" +
		"\316\320\323\324\325\326\330\335\337\344\350\364\365\u0104\u0108\u010a\u011b\u011c" +
		"\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156" +
		"\166\171\175\200\202\203\204\222\232\233\235\236\237\247\251\262\271\276\277\302" +
		"\307\313\314\316\320\323\324\325\326\330\335\337\344\350\364\365\u0104\u0108\u010a" +
		"\u011b\u011c\0\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140" +
		"\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\237\247\251\262" +
		"\271\276\277\302\307\313\314\316\320\323\324\325\326\330\335\337\344\350\364\365" +
		"\u0108\u010a\u011b\u011c\1\2\6\13\20\27\33\34\36\37\41\61\65\66\74\75\102\105\113" +
		"\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236" +
		"\237\247\251\262\271\276\277\302\307\313\314\316\320\323\324\325\326\330\335\337" +
		"\344\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\50\65\66\74\75" +
		"\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232" +
		"\233\235\236\237\247\251\262\271\276\277\302\307\313\314\316\320\323\324\325\326" +
		"\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c\1\2\6\13\27\33\34\36\37\41\65" +
		"\66\67\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203" +
		"\204\222\232\233\235\236\237\247\251\262\271\276\277\302\307\313\314\316\320\323" +
		"\324\325\326\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c\200\236\247\251" +
		"\276\277\320\323\330\335\344\350\u0106\176\0\0\36\52\20\61\22\36\65\102\105\113\134" +
		"\140\145\200\203\204\235\236\247\251\262\271\276\277\316\320\323\324\326\330\335" +
		"\344\350\1\6\37\66\74\143\171\175\200\202\232\233\236\237\247\251\262\276\277\307" +
		"\313\314\320\323\324\325\326\330\335\337\344\350\364\365\u0108\u010a\u011b\u011c" +
		"\104\133\212\124\156\124\156\166\222\123\170\65\65\105\65\105\65\105\225\353\u0104" +
		"\65\105\144\302\102\145\113\113\134\113\134\133\212\131\113\134\171\307\175\364\200" +
		"\236\276\277\323\350\200\236\276\277\323\344\350\200\236\276\277\323\344\350\200" +
		"\236\247\251\276\277\320\323\330\344\350\200\236\247\276\277\323\344\350\200\236" +
		"\247\251\276\277\320\323\330\335\344\350\200\236\247\251\276\277\320\323\330\335" +
		"\344\350\200\236\247\251\262\276\277\320\323\330\335\344\350\200\236\247\251\262" +
		"\276\277\320\323\324\326\330\335\344\350\200\236\247\251\262\276\277\320\323\324" +
		"\326\330\335\344\350\200\236\247\251\276\277\320\323\330\335\344\350\200\236\247" +
		"\251\262\276\277\320\323\324\326\330\335\344\350\200\236\247\251\262\276\277\320" +
		"\323\324\325\326\330\335\344\350\u010a\u011c\200\236\247\251\276\277\320\323\330" +
		"\335\344\350\113\134\235\113\134\142\200\235\236\247\251\263\270\276\277\320\323" +
		"\330\335\343\344\350\200\236\247\251\276\277\320\323\330\335\344\350\1\6\37\66\74" +
		"\143\233\1\6\37\66\74\143\233\337\41\56\115\2\13\27\2\13\27\200\236\247\251\276\277" +
		"\320\323\330\335\344\350\u0106\1\6\36\37\66\74\105\132\134\143\200\233\236\251\276" +
		"\277\320\323\330\344\350\3\22\20\61\104\225\304\353\u0106\102\203\204\271\171\200" +
		"\236\276\277\323\350\200\236\247\251\276\277\320\323\330\344\350\u010a\113\134\200" +
		"\235\236\247\251\263\276\277\320\323\330\335\344\350\237\41\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(2048,
		"\u0122\u0123\147\147\4\4\46\4\64\4\4\151\4\4\4\5\5\5\62\5\5\5\5\352\5\131\131\234" +
		"\234\234\234\234\234\234\234\234\234\234\200\276\277\350\50\67\344\365\66\71\123" +
		"\71\324\72\72\144\302\44\63\101\116\306\310\327\u0101\u0102\u010a\u010c\33\152\152" +
		"\152\152\u011b\37\75\145\153\153\153\153\307\u011c\73\73\170\325\325\6\6\6\102\6" +
		"\6\102\154\6\154\154\235\154\6\235\235\235\235\235\235\40\146\155\155\155\155\360" +
		"\361\u0107\27\41\43\124\156\124\156\156\236\124\156\236\323\236\236\236\236\236\236" +
		"\236\236\236\236\236\236\236\236\u0104\237\237\237\237\237\237\237\237\237\237\237" +
		"\237\61\76\100\220\221\223\301\363\366\u010b\u0114\u0118\u011d\355\157\157\157\157" +
		"\160\160\160\160\161\161\161\161\340\340\u0119\341\341\u011a\326\162\162\162\162" +
		"\336\163\163\163\163\335\335\335\240\240\240\240\240\240\240\240\240\240\240\240" +
		"\240\240\240\240\132\164\132\132\164\164\132\164\132\132\132\132\132\132\132\132" +
		"\132\132\132\132\132\132\132\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17" +
		"\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10" +
		"\10\241\10\117\117\165\10\10\117\241\10\241\241\241\117\241\241\215\10\10\10\117" +
		"\241\241\241\10\241\241\241\10\241\241\10\10\10\10\10\10\11\11\11\11\11\11\11\11" +
		"\12\12\12\12\12\12\12\12\13\13\13\13\13\13\13\364\337\34\10\17\10\17\17\45\47\51" +
		"\10\56\103\10\10\115\117\103\117\165\176\201\117\117\10\215\117\165\165\10\10\241" +
		"\10\117\117\201\165\10\10\117\241\10\241\241\241\117\241\241\215\10\10\10\117\241" +
		"\241\241\10\241\241\241\10\241\241\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56" +
		"\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\241\10\117\117" +
		"\165\10\10\313\117\241\10\241\241\241\117\241\241\215\10\10\10\117\241\241\241\10" +
		"\241\241\241\10\241\241\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10" +
		"\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\241\10\117\117\165\10\10" +
		"\314\117\241\10\241\241\241\117\241\241\215\10\10\10\117\241\241\241\10\241\241\241" +
		"\10\241\241\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103" +
		"\117\165\176\202\117\117\10\215\117\165\165\10\10\241\10\117\117\202\165\10\10\117" +
		"\241\10\241\241\241\117\241\241\215\10\10\10\117\241\241\241\10\241\241\241\10\241" +
		"\241\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165" +
		"\171\176\117\117\10\215\117\165\165\10\10\241\10\117\117\165\10\10\117\241\10\241" +
		"\241\241\117\241\241\215\10\10\10\117\241\241\241\10\241\241\241\10\241\241\10\10" +
		"\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\172\176" +
		"\117\117\10\215\117\165\165\10\10\241\10\117\117\165\10\10\117\241\10\241\241\241" +
		"\117\241\241\215\10\10\10\117\241\241\241\10\241\241\241\10\241\241\10\10\10\10\10" +
		"\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\173\176\117\117\10" +
		"\215\117\165\165\10\10\241\10\117\117\165\10\10\117\241\10\241\241\241\117\241\241" +
		"\215\10\10\10\117\241\241\241\10\241\241\241\10\241\241\10\10\10\10\10\10\10\17\10" +
		"\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\174\176\117\117\10\215\117\165" +
		"\165\10\10\241\10\117\117\165\10\10\117\241\10\241\241\241\117\241\241\215\10\10" +
		"\10\117\241\241\241\10\241\241\241\10\241\241\10\10\10\10\10\10\10\17\10\17\17\45" +
		"\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\241" +
		"\10\117\117\165\305\10\10\117\241\10\241\241\241\117\241\241\215\10\10\10\117\241" +
		"\241\241\10\241\241\241\10\241\241\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56" +
		"\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\241\10\117\117" +
		"\165\10\10\117\241\10\241\241\241\117\241\241\215\10\10\10\117\241\241\241\10\241" +
		"\241\241\10\241\241\10\10\u010d\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10" +
		"\10\115\117\103\117\165\176\203\117\117\10\215\117\165\165\10\10\241\271\10\117\117" +
		"\203\165\10\10\117\241\10\241\241\241\117\241\241\215\10\10\10\117\241\241\241\10" +
		"\241\241\241\10\241\241\10\10\u010e\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103" +
		"\10\10\115\117\103\117\165\176\204\117\117\10\215\117\165\165\10\10\241\10\117\117" +
		"\204\165\10\10\117\241\10\241\241\241\117\241\241\215\10\10\10\117\241\241\241\10" +
		"\241\241\241\10\241\241\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10" +
		"\115\117\103\117\165\176\205\117\117\10\215\117\165\165\10\10\241\10\117\117\205" +
		"\165\10\10\117\241\10\241\241\241\117\241\241\215\10\10\10\117\241\241\241\10\241" +
		"\241\241\10\241\241\10\10\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115" +
		"\117\103\117\165\176\117\117\10\215\117\165\165\10\10\241\10\117\117\165\10\10\117" +
		"\241\10\241\241\241\117\241\241\215\10\10\10\117\241\241\241\10\241\241\241\10\241" +
		"\241\10\10\u010f\10\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103" +
		"\117\165\176\117\117\10\215\117\165\165\10\10\241\10\117\117\165\10\10\117\241\10" +
		"\241\241\241\117\241\241\215\10\10\10\117\241\241\241\10\241\241\241\10\241\241\10" +
		"\10\u0110\10\10\10\10\2\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165" +
		"\176\117\117\10\215\117\165\165\10\10\241\10\117\117\165\10\10\117\241\10\241\241" +
		"\241\117\241\241\215\10\10\10\117\241\241\241\10\241\241\241\10\241\241\10\10\10" +
		"\10\10\10\10\17\10\17\30\17\45\47\51\10\56\30\103\10\10\115\117\103\117\165\176\117" +
		"\117\10\215\117\165\165\10\10\241\10\117\117\165\10\10\117\241\10\241\241\241\117" +
		"\241\241\215\10\10\10\117\241\241\241\10\241\241\241\10\241\241\10\10\10\10\10\10" +
		"\10\17\10\17\17\45\47\51\10\56\65\103\10\10\115\117\103\117\165\176\117\117\10\215" +
		"\117\165\165\10\10\241\10\117\117\165\10\10\117\241\10\241\241\241\117\241\241\215" +
		"\10\10\10\117\241\241\241\10\241\241\241\10\241\241\10\10\10\10\10\10\10\17\10\17" +
		"\17\45\47\51\10\56\103\10\113\10\115\117\103\117\165\176\117\117\10\215\117\165\165" +
		"\10\10\241\10\117\117\165\10\10\117\241\10\241\241\241\117\241\241\215\10\10\10\117" +
		"\241\241\241\10\241\241\241\10\241\241\10\10\10\10\10\10\242\242\242\242\242\242" +
		"\242\242\242\242\242\242\242\233\u0120\3\52\70\31\31\35\53\104\120\104\133\133\212" +
		"\120\243\273\273\315\243\243\243\243\273\243\243\362\243\243\370\370\243\243\243" +
		"\243\14\14\14\14\14\14\226\231\244\272\311\14\244\321\244\244\244\244\244\226\356" +
		"\357\244\244\244\244\244\244\244\376\244\244\231\u0109\311\u0115\u011e\u0115\125" +
		"\206\206\166\222\167\167\224\224\150\225\105\106\127\107\107\110\110\303\u0105\u0111" +
		"\111\111\216\351\121\217\134\135\210\136\136\207\300\175\137\137\227\354\232\u0108" +
		"\245\317\346\347\367\u0103\246\246\246\246\246\u0100\246\247\247\247\247\247\247" +
		"\247\250\250\250\250\250\250\250\250\250\250\250\251\320\330\251\251\251\251\251" +
		"\252\252\252\332\252\252\332\252\332\375\252\252\253\253\253\253\253\253\253\253" +
		"\253\253\253\253\254\254\254\254\342\254\254\254\254\254\254\254\254\255\255\255" +
		"\255\255\255\255\255\255\371\373\255\255\255\255\256\256\256\256\256\256\256\256" +
		"\256\256\256\256\256\256\256\257\257\257\257\257\257\257\257\257\257\257\257\260" +
		"\260\260\260\260\260\260\260\260\260\260\260\260\260\260\261\261\261\261\261\261" +
		"\261\261\261\261\372\261\261\261\261\261\u0116\u011f\262\262\262\262\262\262\262" +
		"\262\262\262\262\262\140\140\316\141\141\213\141\141\141\141\141\141\213\141\141" +
		"\141\141\141\141\213\141\141\263\263\263\263\263\263\263\263\263\263\263\263\u0121" +
		"\23\55\112\114\214\312\15\15\15\15\15\15\15\377\57\74\143\20\26\42\21\21\21\264\264" +
		"\264\264\264\264\264\264\264\264\264\264\u0112\16\16\54\16\16\16\130\177\211\16\265" +
		"\16\265\333\265\265\333\265\333\265\265\22\36\32\77\126\304\353\u0106\u0113\122\274" +
		"\275\345\230\266\266\266\266\266\266\267\267\331\334\267\267\334\267\374\267\267" +
		"\u0117\142\142\270\142\270\270\270\343\270\270\270\270\270\270\270\270\322\60\24" +
		"\25");

	private static final short[] lapg_rlen = TMLexer.unpack_short(180,
		"\2\0\2\0\5\4\1\0\7\4\3\3\4\4\3\3\1\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2" +
		"\1\1\1\3\1\0\1\0\1\0\1\0\1\0\10\3\2\3\1\1\1\1\3\1\3\1\3\1\1\2\2\1\1\6\5\5\4\2\1\0" +
		"\3\2\2\1\1\1\1\1\4\3\1\4\2\1\1\2\1\3\3\1\1\1\0\3\2\2\1\1\3\4\3\3\3\1\2\2\1\1\1\1" +
		"\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\3\1\6\4\3\2\1\1\2\1\1\5\2\2\3\1\3\1\1\1\0\5" +
		"\3\1\1\0\3\1\1\1\1\1\3\5\1\1\1\1\1\3\1\1");

	private static final short[] lapg_rlex = TMLexer.unpack_short(180,
		"\170\170\171\171\76\76\172\172\77\77\100\101\102\103\103\104\104\105\106\107\107" +
		"\110\110\111\111\111\111\111\111\111\111\111\111\111\111\111\112\113\113\113\114" +
		"\114\114\115\173\173\174\174\175\175\176\176\177\177\116\116\117\120\121\121\121" +
		"\121\200\200\122\123\124\124\125\125\125\126\126\127\127\127\127\130\201\201\130" +
		"\130\130\130\130\131\131\131\132\202\202\132\133\133\134\134\135\135\203\203\136" +
		"\204\204\137\137\137\137\137\140\140\140\141\141\142\142\142\143\143\143\144\144" +
		"\145\145\145\146\146\147\147\147\150\151\151\152\152\152\152\152\152\205\205\152" +
		"\152\153\206\206\154\154\154\155\156\156\156\207\207\157\160\160\210\210\160\211" +
		"\211\212\212\160\160\161\161\161\161\162\162\163\163\163\164\165\165\166\167");

	protected static final String[] lapg_syms = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'='",
		"'=>'",
		"';'",
		"'.'",
		"'..'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"'(?!'",
		"')'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexem_transition",
		"lexem_attrs",
		"lexem_attribute",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"assoc",
		"directive",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule0",
		"rhsPrefix",
		"rhsSuffix",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"rhsBracketsPair",
		"rhsAnnotations",
		"annotations",
		"annotation",
		"negative_la",
		"expression",
		"literal",
		"map_entries",
		"map_separator",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"import__optlist",
		"option_optlist",
		"parsing_algorithmopt",
		"typeopt",
		"lexem_transitionopt",
		"iconopt",
		"lexem_attrsopt",
		"commandopt",
		"lexer_state_list",
		"identifieropt",
		"inputref_list",
		"rule0_list",
		"rhsSuffixopt",
		"rhsBracketsPair_list",
		"annotation_list",
		"symref_list",
		"map_entriesopt",
		"expression_list",
		"expression_list_opt",
	};

	public interface Tokens extends Lexems {
		// non-terminals
		public static final int input = 62;
		public static final int header = 63;
		public static final int lexer_section = 64;
		public static final int parser_section = 65;
		public static final int parsing_algorithm = 66;
		public static final int import_ = 67;
		public static final int option = 68;
		public static final int identifier = 69;
		public static final int symref = 70;
		public static final int type = 71;
		public static final int type_part_list = 72;
		public static final int type_part = 73;
		public static final int pattern = 74;
		public static final int lexer_parts = 75;
		public static final int lexer_part = 76;
		public static final int named_pattern = 77;
		public static final int lexeme = 78;
		public static final int lexem_transition = 79;
		public static final int lexem_attrs = 80;
		public static final int lexem_attribute = 81;
		public static final int state_selector = 82;
		public static final int stateref = 83;
		public static final int lexer_state = 84;
		public static final int grammar_parts = 85;
		public static final int grammar_part = 86;
		public static final int nonterm = 87;
		public static final int nonterm_type = 88;
		public static final int assoc = 89;
		public static final int directive = 90;
		public static final int inputref = 91;
		public static final int references = 92;
		public static final int references_cs = 93;
		public static final int rules = 94;
		public static final int rule0 = 95;
		public static final int rhsPrefix = 96;
		public static final int rhsSuffix = 97;
		public static final int rhsParts = 98;
		public static final int rhsPart = 99;
		public static final int rhsAnnotated = 100;
		public static final int rhsAssignment = 101;
		public static final int rhsOptional = 102;
		public static final int rhsCast = 103;
		public static final int rhsUnordered = 104;
		public static final int rhsClass = 105;
		public static final int rhsPrimary = 106;
		public static final int rhsBracketsPair = 107;
		public static final int rhsAnnotations = 108;
		public static final int annotations = 109;
		public static final int annotation = 110;
		public static final int negative_la = 111;
		public static final int expression = 112;
		public static final int literal = 113;
		public static final int map_entries = 114;
		public static final int map_separator = 115;
		public static final int name = 116;
		public static final int qualified_id = 117;
		public static final int command = 118;
		public static final int syntax_problem = 119;
		public static final int import__optlist = 120;
		public static final int option_optlist = 121;
		public static final int parsing_algorithmopt = 122;
		public static final int typeopt = 123;
		public static final int lexem_transitionopt = 124;
		public static final int iconopt = 125;
		public static final int lexem_attrsopt = 126;
		public static final int commandopt = 127;
		public static final int lexer_state_list = 128;
		public static final int identifieropt = 129;
		public static final int inputref_list = 130;
		public static final int rule0_list = 131;
		public static final int rhsSuffixopt = 132;
		public static final int rhsBracketsPair_list = 133;
		public static final int annotation_list = 134;
		public static final int symref_list = 135;
		public static final int map_entriesopt = 136;
		public static final int expression_list = 137;
		public static final int expression_list_opt = 138;
	}

	public interface Rules {
		public static final int nonterm_type_nontermTypeAST = 77;  // nonterm_type ::= Lreturns symref
		public static final int nonterm_type_nontermTypeHint = 80;  // nonterm_type ::= Linline Lclass identifieropt
		public static final int nonterm_type_nontermTypeHint2 = 81;  // nonterm_type ::= Lclass identifieropt
		public static final int nonterm_type_nontermTypeHint3 = 82;  // nonterm_type ::= Linterface identifieropt
		public static final int nonterm_type_nontermTypeHint4 = 83;  // nonterm_type ::= Lvoid
		public static final int nonterm_type_nontermTypeRaw = 84;  // nonterm_type ::= type
		public static final int directive_directivePrio = 88;  // directive ::= '%' assoc references ';'
		public static final int directive_directiveInput = 91;  // directive ::= '%' Linput inputref_list ';'
		public static final int rhsOptional_rhsQuantifier = 125;  // rhsOptional ::= rhsCast '?'
		public static final int rhsCast_rhsAsLiteral = 128;  // rhsCast ::= rhsClass Las literal
		public static final int rhsPrimary_rhsSymbol = 132;  // rhsPrimary ::= symref
		public static final int rhsPrimary_rhsNested = 133;  // rhsPrimary ::= '(' rules ')'
		public static final int rhsPrimary_rhsList = 134;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		public static final int rhsPrimary_rhsList2 = 135;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		public static final int rhsPrimary_rhsQuantifier = 136;  // rhsPrimary ::= rhsPrimary '*'
		public static final int rhsPrimary_rhsQuantifier2 = 137;  // rhsPrimary ::= rhsPrimary '+'
		public static final int rhsPrimary_rhsIgnored = 140;  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list ')'
		public static final int rhsPrimary_rhsIgnored2 = 141;  // rhsPrimary ::= '$' '(' rules ')'
		public static final int expression_instance = 159;  // expression ::= Lnew name '(' map_entriesopt ')'
		public static final int expression_array = 164;  // expression ::= '[' expression_list_opt ']'
		public static final int literal_literal = 166;  // literal ::= scon
		public static final int literal_literal2 = 167;  // literal ::= icon
		public static final int literal_literal3 = 168;  // literal ::= Ltrue
		public static final int literal_literal4 = 169;  // literal ::= Lfalse
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int lapg_symbols_ok = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				lapg_symbols_ok++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (lapg_symbols_ok >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (lapg_symbols_ok <= 1) {
						tmNext = tmLexer.next();
					}
					lapg_symbols_ok = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (lapg_symbols_ok >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 32) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 32;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 32);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", lapg_syms[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol lapg_gg = new LapgSymbol();
		lapg_gg.value = (lapg_rlen[rule] != 0) ? tmStack[tmHead + 1 - lapg_rlen[rule]].value : null;
		lapg_gg.symbol = lapg_rlex[rule];
		lapg_gg.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + lapg_syms[lapg_rlex[rule]]);
		}
		LapgSymbol startsym = (lapg_rlen[rule] != 0) ? tmStack[tmHead + 1 - lapg_rlen[rule]] : tmNext;
		lapg_gg.line = startsym.line;
		lapg_gg.offset = startsym.offset;
		lapg_gg.endoffset = (lapg_rlen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(lapg_gg, rule, lapg_rlen[rule]);
		for (int e = lapg_rlen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = lapg_gg;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, lapg_gg.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol lapg_gg, int rule, int ruleLength) {
		switch (rule) {
			case 0:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)lapg_gg.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 1:  // import__optlist ::=
				lapg_gg.value = new ArrayList();
				break;
			case 2:  // option_optlist ::= option_optlist option
				((List<TmaOption>)lapg_gg.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 3:  // option_optlist ::=
				lapg_gg.value = new ArrayList();
				break;
			case 4:  // input ::= header import__optlist option_optlist lexer_section parser_section
				lapg_gg.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* importOptlist */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* optionOptlist */,
						((TmaLexerSection)tmStack[tmHead - 1].value) /* lexerSection */,
						((TmaParserSection)tmStack[tmHead].value) /* parserSection */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 5:  // input ::= header import__optlist option_optlist lexer_section
				lapg_gg.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* importOptlist */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* optionOptlist */,
						((TmaLexerSection)tmStack[tmHead].value) /* lexerSection */,
						null /* parserSection */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				lapg_gg.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 9:  // header ::= Llanguage name parsing_algorithmopt ';'
				lapg_gg.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 10:  // lexer_section ::= '::' Llexer lexer_parts
				lapg_gg.value = new TmaLexerSection(
						((List<TmaLexerPartsItem>)tmStack[tmHead].value) /* lexerParts */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 11:  // parser_section ::= '::' Lparser grammar_parts
				lapg_gg.value = new TmaParserSection(
						((List<TmaGrammarPartsItem>)tmStack[tmHead].value) /* grammarParts */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 12:  // parsing_algorithm ::= Llalr '(' icon ')'
				lapg_gg.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // import_ ::= Limport ID scon ';'
				lapg_gg.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 14:  // import_ ::= Limport scon ';'
				lapg_gg.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 15:  // option ::= ID '=' expression
				lapg_gg.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* ID */,
						((ITmaExpression)tmStack[tmHead].value) /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 16:  // option ::= syntax_problem
				lapg_gg.value = new TmaOption(
						null /* ID */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 17:  // identifier ::= ID
				lapg_gg.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 18:  // symref ::= ID
				lapg_gg.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 19:  // type ::= '(' scon ')'
				 lapg_gg.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 20:  // type ::= '(' type_part_list ')'
				 lapg_gg.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 36:  // pattern ::= regexp
				lapg_gg.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 37:  // lexer_parts ::= lexer_part
				lapg_gg.value = new ArrayList();
				((List<TmaLexerPartsItem>)lapg_gg.value).add(new TmaLexerPartsItem(
						((ITmaLexerPart)tmStack[tmHead].value) /* lexerPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset));
				break;
			case 38:  // lexer_parts ::= lexer_parts lexer_part
				((List<TmaLexerPartsItem>)lapg_gg.value).add(new TmaLexerPartsItem(
						((ITmaLexerPart)tmStack[tmHead].value) /* lexerPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 39:  // lexer_parts ::= lexer_parts syntax_problem
				((List<TmaLexerPartsItem>)lapg_gg.value).add(new TmaLexerPartsItem(
						null /* lexerPart */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 43:  // named_pattern ::= ID '=' pattern
				lapg_gg.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 54:  // lexeme ::= identifier typeopt ':' pattern lexem_transitionopt iconopt lexem_attrsopt commandopt
				lapg_gg.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* lexemTransition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemAttrs)tmStack[tmHead - 1].value) /* lexemAttrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						null /* input */, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 55:  // lexeme ::= identifier typeopt ':'
				lapg_gg.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* lexemTransition */,
						null /* priority */,
						null /* lexemAttrs */,
						null /* command */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 56:  // lexem_transition ::= '=>' stateref
				lapg_gg.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 57:  // lexem_attrs ::= '(' lexem_attribute ')'
				lapg_gg.value = new TmaLexemAttrs(
						((TmaLexemAttribute)tmStack[tmHead - 1].value) /* lexemAttribute */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 58:  // lexem_attribute ::= Lsoft
				lapg_gg.value = TmaLexemAttribute.LSOFT;
				break;
			case 59:  // lexem_attribute ::= Lclass
				lapg_gg.value = TmaLexemAttribute.LCLASS;
				break;
			case 60:  // lexem_attribute ::= Lspace
				lapg_gg.value = TmaLexemAttribute.LSPACE;
				break;
			case 61:  // lexem_attribute ::= Llayout
				lapg_gg.value = TmaLexemAttribute.LLAYOUT;
				break;
			case 62:  // lexer_state_list ::= lexer_state_list ',' lexer_state
				((List<TmaLexerState>)lapg_gg.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 63:  // lexer_state_list ::= lexer_state
				lapg_gg.value = new ArrayList();
				((List<TmaLexerState>)lapg_gg.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 64:  // state_selector ::= '[' lexer_state_list ']'
				lapg_gg.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 65:  // stateref ::= ID
				lapg_gg.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 66:  // lexer_state ::= identifier '=>' stateref
				lapg_gg.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 67:  // lexer_state ::= identifier
				lapg_gg.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 68:  // grammar_parts ::= grammar_part
				lapg_gg.value = new ArrayList();
				((List<TmaGrammarPartsItem>)lapg_gg.value).add(new TmaGrammarPartsItem(
						((ITmaGrammarPart)tmStack[tmHead].value) /* grammarPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset));
				break;
			case 69:  // grammar_parts ::= grammar_parts grammar_part
				((List<TmaGrammarPartsItem>)lapg_gg.value).add(new TmaGrammarPartsItem(
						((ITmaGrammarPart)tmStack[tmHead].value) /* grammarPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 70:  // grammar_parts ::= grammar_parts syntax_problem
				((List<TmaGrammarPartsItem>)lapg_gg.value).add(new TmaGrammarPartsItem(
						null /* grammarPart */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 73:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				lapg_gg.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 74:  // nonterm ::= annotations identifier '::=' rules ';'
				lapg_gg.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 75:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				lapg_gg.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 76:  // nonterm ::= identifier '::=' rules ';'
				lapg_gg.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 77:  // nonterm_type ::= Lreturns symref
				lapg_gg.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 80:  // nonterm_type ::= Linline Lclass identifieropt
				lapg_gg.value = new TmaNontermTypeHint(
						true /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 81:  // nonterm_type ::= Lclass identifieropt
				lapg_gg.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 82:  // nonterm_type ::= Linterface identifieropt
				lapg_gg.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 83:  // nonterm_type ::= Lvoid
				lapg_gg.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 84:  // nonterm_type ::= type
				lapg_gg.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* type */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 85:  // assoc ::= Lleft
				lapg_gg.value = TmaAssoc.LLEFT;
				break;
			case 86:  // assoc ::= Lright
				lapg_gg.value = TmaAssoc.LRIGHT;
				break;
			case 87:  // assoc ::= Lnonassoc
				lapg_gg.value = TmaAssoc.LNONASSOC;
				break;
			case 88:  // directive ::= '%' assoc references ';'
				lapg_gg.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 89:  // inputref_list ::= inputref_list ',' inputref
				((List<TmaInputref>)lapg_gg.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 90:  // inputref_list ::= inputref
				lapg_gg.value = new ArrayList();
				((List<TmaInputref>)lapg_gg.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 91:  // directive ::= '%' Linput inputref_list ';'
				lapg_gg.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 92:  // inputref ::= symref Lnoeoi
				lapg_gg.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* symref */,
						true /* noeoi */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 93:  // inputref ::= symref
				lapg_gg.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						false /* noeoi */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 94:  // references ::= symref
				lapg_gg.value = new ArrayList();
				((List<TmaSymref>)lapg_gg.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 95:  // references ::= references symref
				((List<TmaSymref>)lapg_gg.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 96:  // references_cs ::= symref
				lapg_gg.value = new ArrayList();
				((List<TmaSymref>)lapg_gg.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 97:  // references_cs ::= references_cs ',' symref
				((List<TmaSymref>)lapg_gg.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 98:  // rule0_list ::= rule0_list '|' rule0
				((List<TmaRule0>)lapg_gg.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 99:  // rule0_list ::= rule0
				lapg_gg.value = new ArrayList();
				((List<TmaRule0>)lapg_gg.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 103:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				lapg_gg.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* rhsPrefix */,
						((List<TmaRhsPartsItem>)tmStack[tmHead - 1].value) /* rhsParts */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* rhsSuffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 104:  // rule0 ::= rhsPrefix rhsSuffixopt
				lapg_gg.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* rhsPrefix */,
						null /* rhsParts */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* rhsSuffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 105:  // rule0 ::= rhsParts rhsSuffixopt
				lapg_gg.value = new TmaRule0(
						null /* rhsPrefix */,
						((List<TmaRhsPartsItem>)tmStack[tmHead - 1].value) /* rhsParts */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* rhsSuffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 106:  // rule0 ::= rhsSuffixopt
				lapg_gg.value = new TmaRule0(
						null /* rhsPrefix */,
						null /* rhsParts */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* rhsSuffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 107:  // rule0 ::= syntax_problem
				lapg_gg.value = new TmaRule0(
						null /* rhsPrefix */,
						null /* rhsParts */,
						null /* rhsSuffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 108:  // rhsPrefix ::= '[' annotations ']'
				lapg_gg.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* alias */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 109:  // rhsPrefix ::= '[' annotations identifier ']'
				lapg_gg.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 2].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* alias */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 110:  // rhsPrefix ::= '[' identifier ']'
				lapg_gg.value = new TmaRhsPrefix(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* alias */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 111:  // rhsSuffix ::= '%' Lprio symref
				lapg_gg.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 112:  // rhsSuffix ::= '%' Lshift symref
				lapg_gg.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 113:  // rhsParts ::= rhsPart
				lapg_gg.value = new ArrayList();
				((List<TmaRhsPartsItem>)lapg_gg.value).add(new TmaRhsPartsItem(
						((ITmaRhsPart)tmStack[tmHead].value) /* rhsPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset));
				break;
			case 114:  // rhsParts ::= rhsParts rhsPart
				((List<TmaRhsPartsItem>)lapg_gg.value).add(new TmaRhsPartsItem(
						((ITmaRhsPart)tmStack[tmHead].value) /* rhsPart */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 115:  // rhsParts ::= rhsParts syntax_problem
				((List<TmaRhsPartsItem>)lapg_gg.value).add(new TmaRhsPartsItem(
						null /* rhsPart */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset));
				break;
			case 120:  // rhsAnnotated ::= rhsAnnotations rhsAssignment
				lapg_gg.value = new TmaRhsAnnotated(
						((TmaRhsAnnotations)tmStack[tmHead - 1].value) /* rhsAnnotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* rhsAssignment */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 122:  // rhsAssignment ::= identifier '=' rhsOptional
				lapg_gg.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 123:  // rhsAssignment ::= identifier '+=' rhsOptional
				lapg_gg.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 125:  // rhsOptional ::= rhsCast '?'
				lapg_gg.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 127:  // rhsCast ::= rhsClass Las symref
				lapg_gg.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* rhsClass */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 128:  // rhsCast ::= rhsClass Las literal
				lapg_gg.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* rhsClass */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 129:  // rhsUnordered ::= rhsPart '&' rhsPart
				lapg_gg.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 131:  // rhsClass ::= identifier ':' rhsPrimary
				lapg_gg.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 132:  // rhsPrimary ::= symref
				lapg_gg.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 133:  // rhsPrimary ::= '(' rules ')'
				lapg_gg.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 134:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				lapg_gg.value = new TmaRhsList(
						((List<TmaRhsPartsItem>)tmStack[tmHead - 4].value) /* rhsParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* references */,
						TmaRhsList.TmaQuantifierKind.PLUS /* quantifier */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 135:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				lapg_gg.value = new TmaRhsList(
						((List<TmaRhsPartsItem>)tmStack[tmHead - 4].value) /* rhsParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* references */,
						TmaRhsList.TmaQuantifierKind.MULT /* quantifier */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 136:  // rhsPrimary ::= rhsPrimary '*'
				lapg_gg.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 137:  // rhsPrimary ::= rhsPrimary '+'
				lapg_gg.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 138:  // rhsBracketsPair_list ::= rhsBracketsPair_list ',' rhsBracketsPair
				((List<TmaRhsBracketsPair>)lapg_gg.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 139:  // rhsBracketsPair_list ::= rhsBracketsPair
				lapg_gg.value = new ArrayList();
				((List<TmaRhsBracketsPair>)lapg_gg.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 140:  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list ')'
				lapg_gg.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 3].value) /* rules */,
						((List<TmaRhsBracketsPair>)tmStack[tmHead - 1].value) /* brackets */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 141:  // rhsPrimary ::= '$' '(' rules ')'
				lapg_gg.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* brackets */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 142:  // rhsBracketsPair ::= symref '..' symref
				lapg_gg.value = new TmaRhsBracketsPair(
						((TmaSymref)tmStack[tmHead - 2].value) /* lhs */,
						((TmaSymref)tmStack[tmHead].value) /* rhs */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 143:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)lapg_gg.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 144:  // annotation_list ::= annotation
				lapg_gg.value = new ArrayList();
				((List<TmaAnnotation>)lapg_gg.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 145:  // rhsAnnotations ::= annotation_list
				lapg_gg.value = new TmaRhsAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotationList */,
						null /* negativeLa */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 146:  // rhsAnnotations ::= negative_la annotation_list
				lapg_gg.value = new TmaRhsAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotationList */,
						((TmaNegativeLa)tmStack[tmHead - 1].value) /* negativeLa */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 147:  // rhsAnnotations ::= negative_la
				lapg_gg.value = new TmaRhsAnnotations(
						null /* annotationList */,
						((TmaNegativeLa)tmStack[tmHead].value) /* negativeLa */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 148:  // annotations ::= annotation_list
				lapg_gg.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 149:  // annotation ::= '@' ID '{' expression '}'
				lapg_gg.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 150:  // annotation ::= '@' ID
				lapg_gg.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 151:  // annotation ::= '@' syntax_problem
				lapg_gg.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 152:  // symref_list ::= symref_list '|' symref
				((List<TmaSymref>)lapg_gg.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 153:  // symref_list ::= symref
				lapg_gg.value = new ArrayList();
				((List<TmaSymref>)lapg_gg.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 154:  // negative_la ::= '(?!' symref_list ')'
				lapg_gg.value = new TmaNegativeLa(
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* unwantedSymbols */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 159:  // expression ::= Lnew name '(' map_entriesopt ')'
				lapg_gg.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntriesItem>)tmStack[tmHead - 1].value) /* mapEntries */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 160:  // expression_list ::= expression_list ',' expression
				((List<ITmaExpression>)lapg_gg.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 161:  // expression_list ::= expression
				lapg_gg.value = new ArrayList();
				((List<ITmaExpression>)lapg_gg.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 164:  // expression ::= '[' expression_list_opt ']'
				lapg_gg.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 166:  // literal ::= scon
				lapg_gg.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 167:  // literal ::= icon
				lapg_gg.value = new TmaLiteral(
						null /* sval */,
						((Integer)tmStack[tmHead].value) /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 168:  // literal ::= Ltrue
				lapg_gg.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						true /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 169:  // literal ::= Lfalse
				lapg_gg.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 170:  // map_entries ::= ID map_separator expression
				lapg_gg.value = new ArrayList();
				((List<TmaMapEntriesItem>)lapg_gg.value).add(new TmaMapEntriesItem(
						((String)tmStack[tmHead - 2].value) /* ID */,
						((ITmaExpression)tmStack[tmHead].value) /* expression */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset));
				break;
			case 171:  // map_entries ::= map_entries ',' ID map_separator expression
				((List<TmaMapEntriesItem>)lapg_gg.value).add(new TmaMapEntriesItem(
						((String)tmStack[tmHead - 2].value) /* ID */,
						((ITmaExpression)tmStack[tmHead].value) /* expression */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset));
				break;
			case 175:  // name ::= qualified_id
				lapg_gg.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 177:  // qualified_id ::= qualified_id '.' ID
				 lapg_gg.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 178:  // command ::= code
				lapg_gg.value = new TmaCommand(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 179:  // syntax_problem ::= error
				lapg_gg.value = new TmaSyntaxProblem(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 290);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 291);
	}
}
