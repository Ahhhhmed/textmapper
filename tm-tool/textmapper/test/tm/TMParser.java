/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(309,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\253\0\254\0\uffcd\uffff\270\0\22" +
		"\0\255\0\256\0\uffff\uffff\241\0\240\0\252\0\265\0\uff93\uffff\uff8b\uffff\uff7f" +
		"\uffff\246\0\uff4f\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\6\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\0\0\uffff\uffff\uffff\uffff\251\0\uff49\uffff\uffff" +
		"\uffff\uffff\uffff\11\0\266\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uff1d" +
		"\uffff\2\0\20\0\245\0\uffff\uffff\uff17\uffff\uffff\uffff\uff11\uffff\uffff\uffff" +
		"\16\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\4\0\262\0\263\0\261\0\uffff" +
		"\uffff\uffff\uffff\244\0\uffff\uffff\14\0\15\0\uffff\uffff\uff0b\uffff\uff03\uffff" +
		"\ufefd\uffff\45\0\51\0\52\0\50\0\17\0\uffff\uffff\257\0\uffff\uffff\10\0\21\0\ufecb" +
		"\uffff\77\0\uffff\uffff\uffff\uffff\uffff\uffff\54\0\uffff\uffff\46\0\47\0\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\ufec3\uffff\104\0\107\0\110\0\uffff\uffff\233\0\ufe91" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\100\0\44\0\53\0\uffff\uffff\35\0\36\0" +
		"\31\0\32\0\uffff\uffff\27\0\30\0\34\0\37\0\41\0\40\0\33\0\uffff\uffff\26\0\ufe5d" +
		"\uffff\uffff\uffff\130\0\131\0\132\0\uffff\uffff\ufe29\uffff\237\0\ufdf3\uffff\uffff" +
		"\uffff\uffff\uffff\ufdb5\uffff\ufd87\uffff\125\0\126\0\uffff\uffff\105\0\106\0\uffff" +
		"\uffff\232\0\260\0\101\0\102\0\76\0\23\0\43\0\uffff\uffff\24\0\25\0\ufd59\uffff\ufd1f" +
		"\uffff\135\0\uffff\uffff\141\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufd17" +
		"\uffff\uffff\uffff\ufcd9\uffff\uffff\uffff\267\0\uffff\uffff\207\0\uffff\uffff\146" +
		"\0\ufc89\uffff\150\0\ufc4d\uffff\ufc0f\uffff\167\0\172\0\174\0\ufbcd\uffff\170\0" +
		"\ufb89\uffff\ufb43\uffff\uffff\uffff\171\0\156\0\ufaf9\uffff\155\0\ufaf1\uffff\115" +
		"\0\116\0\ufac3\uffff\ufabd\uffff\ufab7\uffff\ufa79\uffff\uffff\uffff\42\0\uffff\uffff" +
		"\56\0\ufa3b\uffff\137\0\136\0\uffff\uffff\133\0\142\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufa03\uffff\uf9c5\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\uffff\114\0\uf985\uffff\153\0\uf947\uffff\166\0\154\0\uffff" +
		"\uffff\200\0\uffff\uffff\213\0\214\0\173\0\uf905\uffff\uf8c5\uffff\uffff\uffff\120" +
		"\0\123\0\124\0\uffff\uffff\uffff\uffff\uf8bf\uffff\70\0\60\0\uf881\uffff\134\0\235" +
		"\0\162\0\163\0\161\0\157\0\uffff\uffff\210\0\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uf84b\uffff\223\0\226\0\uffff\uffff\uffff\uffff\175\0\uf81b\uffff\176" +
		"\0\152\0\uf7d1\uffff\202\0\203\0\145\0\122\0\143\0\uf78f\uffff\113\0\112\0\uffff" +
		"\uffff\uffff\uffff\62\0\uf789\uffff\160\0\uffff\uffff\uffff\uffff\220\0\uffff\uffff" +
		"\225\0\222\0\uffff\uffff\221\0\uffff\uffff\uffff\uffff\111\0\72\0\73\0\74\0\75\0" +
		"\uffff\uffff\64\0\66\0\uffff\uffff\uffff\uffff\216\0\uffff\uffff\224\0\uf755\uffff" +
		"\uf74d\uffff\144\0\71\0\212\0\211\0\uffff\uffff\uffff\uffff\217\0\231\0\215\0\uffff" +
		"\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(2232,
		"\10\1\40\1\41\1\47\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1" +
		"\65\1\66\1\67\1\70\1\71\1\72\1\73\1\uffff\ufffe\2\uffff\3\uffff\21\uffff\40\uffff" +
		"\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff" +
		"\52\uffff\51\uffff\42\uffff\43\uffff\44\uffff\22\250\uffff\ufffe\23\uffff\71\uffff" +
		"\14\7\uffff\ufffe\15\uffff\14\264\23\264\24\264\71\264\uffff\ufffe\47\uffff\10\3" +
		"\40\3\41\3\51\3\52\3\53\3\54\3\55\3\56\3\57\3\60\3\61\3\62\3\63\3\64\3\65\3\66\3" +
		"\67\3\70\3\71\3\72\3\73\3\uffff\ufffe\17\uffff\22\247\uffff\ufffe\41\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff" +
		"\24\243\uffff\ufffe\10\uffff\0\5\uffff\ufffe\17\uffff\24\242\uffff\ufffe\71\uffff" +
		"\14\7\uffff\ufffe\12\uffff\20\21\23\21\uffff\ufffe\23\uffff\20\55\uffff\ufffe\21" +
		"\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54" +
		"\uffff\53\uffff\52\uffff\51\uffff\0\12\10\12\uffff\ufffe\13\uffff\17\103\22\103\uffff" +
		"\ufffe\6\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\0\13\uffff\ufffe\37\uffff\22" +
		"\234\23\234\36\234\41\234\50\234\51\234\52\234\53\234\54\234\55\234\56\234\57\234" +
		"\60\234\61\234\62\234\63\234\64\234\65\234\66\234\67\234\70\234\71\234\72\234\73" +
		"\234\uffff\ufffe\1\uffff\0\67\10\67\21\67\40\67\41\67\51\67\52\67\53\67\54\67\55" +
		"\67\56\67\57\67\60\67\61\67\62\67\63\67\64\67\65\67\66\67\67\67\70\67\71\67\72\67" +
		"\73\67\uffff\ufffe\76\uffff\22\236\23\236\36\236\37\236\41\236\50\236\51\236\52\236" +
		"\53\236\54\236\55\236\56\236\57\236\60\236\61\236\62\236\63\236\64\236\65\236\66" +
		"\236\67\236\70\236\71\236\72\236\73\236\uffff\ufffe\6\uffff\21\uffff\23\uffff\36" +
		"\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55" +
		"\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11\151\14\151\uffff" +
		"\ufffe\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53" +
		"\uffff\52\uffff\51\uffff\7\117\20\117\uffff\ufffe\41\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\7\117\20\117\uffff" +
		"\ufffe\13\uffff\0\57\3\57\10\57\21\57\23\57\40\57\41\57\51\57\52\57\53\57\54\57\55" +
		"\57\56\57\57\57\60\57\61\57\62\57\63\57\64\57\65\57\66\57\67\57\70\57\71\57\72\57" +
		"\73\57\75\57\uffff\ufffe\61\uffff\14\140\17\140\uffff\ufffe\6\uffff\21\uffff\23\uffff" +
		"\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11\151\24\151\uffff" +
		"\ufffe\12\21\20\21\32\21\6\22\11\22\14\22\23\22\24\22\30\22\31\22\33\22\35\22\36" +
		"\22\37\22\40\22\41\22\45\22\46\22\50\22\51\22\52\22\53\22\54\22\55\22\56\22\57\22" +
		"\60\22\61\22\62\22\63\22\64\22\65\22\66\22\67\22\70\22\71\22\72\22\73\22\75\22\uffff" +
		"\ufffe\6\uffff\23\uffff\36\uffff\37\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11" +
		"\151\14\151\24\151\uffff\ufffe\6\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff" +
		"\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff" +
		"\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff" +
		"\51\uffff\50\uffff\75\uffff\11\151\14\151\24\151\uffff\ufffe\35\uffff\6\164\11\164" +
		"\14\164\23\164\24\164\36\164\37\164\40\164\41\164\45\164\50\164\51\164\52\164\53" +
		"\164\54\164\55\164\56\164\57\164\60\164\61\164\62\164\63\164\64\164\65\164\66\164" +
		"\67\164\70\164\71\164\72\164\73\164\75\164\uffff\ufffe\33\uffff\6\177\11\177\14\177" +
		"\23\177\24\177\35\177\36\177\37\177\40\177\41\177\45\177\50\177\51\177\52\177\53" +
		"\177\54\177\55\177\56\177\57\177\60\177\61\177\62\177\63\177\64\177\65\177\66\177" +
		"\67\177\70\177\71\177\72\177\73\177\75\177\uffff\ufffe\46\uffff\6\201\11\201\14\201" +
		"\23\201\24\201\33\201\35\201\36\201\37\201\40\201\41\201\45\201\50\201\51\201\52" +
		"\201\53\201\54\201\55\201\56\201\57\201\60\201\61\201\62\201\63\201\64\201\65\201" +
		"\66\201\67\201\70\201\71\201\72\201\73\201\75\201\uffff\ufffe\30\uffff\31\uffff\6" +
		"\205\11\205\14\205\23\205\24\205\33\205\35\205\36\205\37\205\40\205\41\205\45\205" +
		"\46\205\50\205\51\205\52\205\53\205\54\205\55\205\56\205\57\205\60\205\61\205\62" +
		"\205\63\205\64\205\65\205\66\205\67\205\70\205\71\205\72\205\73\205\75\205\uffff" +
		"\ufffe\11\uffff\14\147\24\147\uffff\ufffe\41\uffff\73\uffff\72\uffff\71\uffff\70" +
		"\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57" +
		"\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\7\117\20\117\uffff\ufffe" +
		"\20\uffff\7\121\uffff\ufffe\20\uffff\7\121\uffff\ufffe\6\uffff\21\uffff\23\uffff" +
		"\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11\151\14\151\uffff" +
		"\ufffe\6\uffff\21\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72" +
		"\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61" +
		"\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50" +
		"\uffff\75\uffff\11\151\14\151\uffff\ufffe\3\uffff\0\61\10\61\21\61\23\61\40\61\41" +
		"\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61" +
		"\66\61\67\61\70\61\71\61\72\61\73\61\75\61\uffff\ufffe\6\uffff\23\uffff\36\uffff" +
		"\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\45\uffff\50\uffff\75\uffff\11\151\24\151\uffff" +
		"\ufffe\6\uffff\21\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72" +
		"\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61" +
		"\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50" +
		"\uffff\75\uffff\11\151\14\151\24\151\uffff\ufffe\6\uffff\23\uffff\36\uffff\37\uffff" +
		"\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\54\uffff" +
		"\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11\151\14\151\24\151\uffff\ufffe\35" +
		"\uffff\6\165\11\165\14\165\23\165\24\165\36\165\37\165\40\165\41\165\45\165\50\165" +
		"\51\165\52\165\53\165\54\165\55\165\56\165\57\165\60\165\61\165\62\165\63\165\64" +
		"\165\65\165\66\165\67\165\70\165\71\165\72\165\73\165\75\165\uffff\ufffe\6\uffff" +
		"\21\uffff\23\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff" +
		"\11\151\14\151\24\151\uffff\ufffe\20\uffff\7\121\uffff\ufffe\6\uffff\21\uffff\23" +
		"\uffff\36\uffff\37\uffff\40\uffff\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\55\uffff\54\uffff\53\uffff\52\uffff\51\uffff\50\uffff\75\uffff\11\151\14\151" +
		"\uffff\ufffe\23\uffff\0\63\10\63\21\63\40\63\41\63\51\63\52\63\53\63\54\63\55\63" +
		"\56\63\57\63\60\63\61\63\62\63\63\63\64\63\65\63\66\63\67\63\70\63\71\63\72\63\73" +
		"\63\75\63\uffff\ufffe\41\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\54\uffff\53\uffff\52\uffff\51\uffff\11\22\24\22\35\22\uffff\ufffe\30\uffff\31\uffff" +
		"\6\206\11\206\14\206\23\206\24\206\33\206\35\206\36\206\37\206\40\206\41\206\45\206" +
		"\46\206\50\206\51\206\52\206\53\206\54\206\55\206\56\206\57\206\60\206\61\206\62" +
		"\206\63\206\64\206\65\206\66\206\67\206\70\206\71\206\72\206\73\206\75\206\uffff" +
		"\ufffe\35\204\6\204\11\204\14\204\23\204\24\204\36\204\37\204\40\204\41\204\45\204" +
		"\50\204\51\204\52\204\53\204\54\204\55\204\56\204\57\204\60\204\61\204\62\204\63" +
		"\204\64\204\65\204\66\204\67\204\70\204\71\204\72\204\73\204\75\204\uffff\ufffe\17" +
		"\uffff\7\127\uffff\ufffe\75\uffff\0\65\10\65\21\65\40\65\41\65\51\65\52\65\53\65" +
		"\54\65\55\65\56\65\57\65\60\65\61\65\62\65\63\65\64\65\65\65\66\65\67\65\70\65\71" +
		"\65\72\65\73\65\uffff\ufffe\11\227\35\uffff\24\227\uffff\ufffe\11\230\35\230\24\230" +
		"\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(142,
		"\0\2\4\17\31\31\31\46\52\54\61\66\72\105\112\113\125\135\161\172\234\252\253\257" +
		"\263\272\275\276\303\310\323\343\367\u010c\u0153\u015b\u0163\u016a\u016b\u016c\u016d" +
		"\u017d\u01c6\u020e\u0256\u029f\u02e7\u032f\u0377\u03bf\u0407\u044f\u049a\u04e3\u052c" +
		"\u0574\u05bc\u0604\u064d\u0695\u06dd\u06dd\u06ea\u06eb\u06ec\u06ed\u06ee\u06ef\u06f1" +
		"\u06f2\u06f3\u070e\u073a\u073d\u073f\u0743\u0745\u0746\u0748\u074a\u074c\u074d\u074e" +
		"\u074f\u0751\u0753\u0755\u0756\u0758\u075a\u075c\u075f\u0760\u0762\u0764\u0766\u0767" +
		"\u076d\u0774\u077b\u0786\u078e\u079a\u07a6\u07b3\u07c2\u07d1\u07dd\u07ec\u07fc\u0801" +
		"\u0805\u0807\u0816\u0826\u082d\u0835\u0836\u0838\u083b\u083e\u084b\u0860\u0861\u0862" +
		"\u0864\u0865\u0866\u0867\u0868\u0869\u086a\u086d\u0870\u0871\u0877\u0882\u0883\u0892" +
		"\u0893\u0894\u0895");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(2197,
		"\u0131\u0132\123\170\1\6\34\37\47\66\74\124\143\233\334\1\6\37\43\66\74\143\233\302" +
		"\334\113\134\200\236\247\251\274\275\316\317\325\340\350\133\207\212\276\36\52\265" +
		"\373\u0112\u0126\u0127\51\56\103\115\243\56\115\120\225\32\46\64\77\230\232\245\346" +
		"\347\365\u010a\21\124\156\166\222\u0122\24\57\122\124\156\166\222\230\u0107\u0124" +
		"\56\115\126\243\272\273\341\374\1\6\37\65\66\74\105\124\143\156\166\200\222\233\236" +
		"\274\275\317\340\350\25\122\124\156\166\222\313\314\362\20\26\30\104\124\133\156" +
		"\166\200\212\222\236\237\241\247\251\262\274\275\316\317\320\321\322\323\325\332" +
		"\340\350\353\366\367\u0115\u0117\42\60\62\151\156\166\222\315\365\373\u010f\u0112" +
		"\u011e\u0124\310\124\156\166\222\124\156\166\222\124\156\166\222\261\376\u0121\261" +
		"\376\u0121\243\124\156\166\222\256\320\366\367\u0115\u0117\124\156\166\222\252\327" +
		"\373\u0101\u0112\u0126\u0127\200\236\247\251\262\274\275\316\317\321\322\323\325" +
		"\332\340\350\113\124\134\142\156\166\200\222\235\236\247\251\274\275\316\317\325" +
		"\332\340\350\1\6\36\37\66\74\105\132\134\143\200\233\236\251\274\275\316\317\325" +
		"\340\350\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144" +
		"\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247\251\262\267\274\275" +
		"\300\305\311\312\314\316\317\320\321\322\323\325\332\334\340\342\350\364\366\367" +
		"\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d\1\6\37\66\74\143\233\334\1\6\37\66" +
		"\74\143\233\334\1\6\37\66\74\143\233\316\260\22\200\236\247\251\262\274\275\316\317" +
		"\321\322\323\325\332\340\350\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124" +
		"\132\133\134\140\143\144\145\156\166\171\175\200\202\203\204\212\222\232\233\235" +
		"\236\247\251\262\267\274\275\300\305\311\312\314\316\317\320\321\322\323\325\332" +
		"\334\340\342\350\364\366\367\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d\1\2\6" +
		"\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166" +
		"\171\175\200\202\203\204\222\232\233\234\235\236\247\251\262\267\274\275\300\305" +
		"\311\312\314\316\317\320\321\322\323\325\332\334\340\342\350\364\366\367\370\u010f" +
		"\u0110\u0115\u0117\u0118\u012c\u012d\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105" +
		"\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\234" +
		"\235\236\247\251\262\267\274\275\300\305\311\312\314\316\317\320\321\322\323\325" +
		"\332\334\340\342\350\364\366\367\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d\1" +
		"\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\133\134\140\143\144\145" +
		"\156\166\171\175\200\202\203\204\212\222\232\233\235\236\247\251\262\267\274\275" +
		"\300\305\311\312\314\316\317\320\321\322\323\325\332\334\340\342\350\364\366\367" +
		"\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d\1\2\6\13\27\33\34\36\37\41\65\66\74" +
		"\75\102\105\113\124\131\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222" +
		"\232\233\235\236\247\251\262\267\274\275\300\305\311\312\314\316\317\320\321\322" +
		"\323\325\332\334\340\342\350\364\366\367\370\u010f\u0110\u0115\u0117\u0118\u012c" +
		"\u012d\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\131\132\134\140\143" +
		"\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247\251\262\267\274" +
		"\275\300\305\311\312\314\316\317\320\321\322\323\325\332\334\340\342\350\364\366" +
		"\367\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d\1\2\6\13\27\33\34\36\37\41\65" +
		"\66\74\75\102\105\113\124\131\132\134\140\143\144\145\156\166\171\175\200\202\203" +
		"\204\222\232\233\235\236\247\251\262\267\274\275\300\305\311\312\314\316\317\320" +
		"\321\322\323\325\332\334\340\342\350\364\366\367\370\u010f\u0110\u0115\u0117\u0118" +
		"\u012c\u012d\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\131\132\134\140" +
		"\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247\251\262\267" +
		"\274\275\300\305\311\312\314\316\317\320\321\322\323\325\332\334\340\342\350\364" +
		"\366\367\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d\1\2\6\13\27\33\34\36\37\41" +
		"\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203" +
		"\204\222\226\232\233\235\236\247\251\262\267\274\275\300\305\311\312\314\316\317" +
		"\320\321\322\323\325\332\334\340\342\350\364\366\367\370\u010f\u0110\u0115\u0117" +
		"\u0118\u012c\u012d\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134" +
		"\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247\251\262" +
		"\267\274\275\300\305\311\312\314\316\317\320\321\322\323\325\332\334\340\342\350" +
		"\364\366\367\370\u010b\u010f\u0110\u0115\u0117\u0118\u012c\u012d\1\2\6\13\27\33\34" +
		"\36\37\41\65\66\74\75\102\105\113\124\132\133\134\140\143\144\145\156\166\171\175" +
		"\200\201\202\203\204\212\222\232\233\235\236\247\251\262\267\274\275\300\305\311" +
		"\312\314\316\317\320\321\322\323\325\332\334\340\342\350\364\366\367\370\u010b\u010f" +
		"\u0110\u0115\u0117\u0118\u012c\u012d\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105" +
		"\113\124\132\133\134\140\143\144\145\156\166\171\175\200\202\203\204\212\222\232" +
		"\233\235\236\247\251\262\267\274\275\300\305\311\312\314\316\317\320\321\322\323" +
		"\325\332\334\340\342\350\364\366\367\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d" +
		"\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\133\134\140\143\144\145" +
		"\156\166\171\175\200\202\203\204\212\222\232\233\235\236\247\251\262\267\274\275" +
		"\300\305\311\312\314\316\317\320\321\322\323\325\332\334\340\342\350\364\366\367" +
		"\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d\1\2\6\13\27\33\34\36\37\41\65\66\74" +
		"\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232" +
		"\233\235\236\247\251\262\267\274\275\300\305\311\312\314\316\317\320\321\322\323" +
		"\325\332\334\340\342\350\364\366\367\370\u010b\u010f\u0110\u0115\u0117\u0118\u012c" +
		"\u012d\1\2\6\13\27\33\34\36\37\41\65\66\74\75\102\105\113\124\132\134\140\143\144" +
		"\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247\251\262\267\274\275" +
		"\300\305\311\312\314\316\317\320\321\322\323\325\332\334\340\342\350\364\366\367" +
		"\370\u010b\u010f\u0110\u0115\u0117\u0118\u012c\u012d\0\1\2\6\13\27\33\34\36\37\41" +
		"\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202\203" +
		"\204\222\232\233\235\236\247\251\262\267\274\275\300\305\311\312\314\316\317\320" +
		"\321\322\323\325\332\334\340\342\350\364\366\367\370\u010f\u0110\u0115\u0117\u0118" +
		"\u012c\u012d\1\2\6\13\20\27\33\34\36\37\41\61\65\66\74\75\102\105\113\124\132\134" +
		"\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247\251\262" +
		"\267\274\275\300\305\311\312\314\316\317\320\321\322\323\325\332\334\340\342\350" +
		"\364\366\367\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d\1\2\6\13\27\33\34\36\37" +
		"\41\50\65\66\74\75\102\105\113\124\132\134\140\143\144\145\156\166\171\175\200\202" +
		"\203\204\222\232\233\235\236\247\251\262\267\274\275\300\305\311\312\314\316\317" +
		"\320\321\322\323\325\332\334\340\342\350\364\366\367\370\u010f\u0110\u0115\u0117" +
		"\u0118\u012c\u012d\1\2\6\13\27\33\34\36\37\41\65\66\67\74\75\102\105\113\124\132" +
		"\134\140\143\144\145\156\166\171\175\200\202\203\204\222\232\233\235\236\247\251" +
		"\262\267\274\275\300\305\311\312\314\316\317\320\321\322\323\325\332\334\340\342" +
		"\350\364\366\367\370\u010f\u0110\u0115\u0117\u0118\u012c\u012d\200\236\247\251\274" +
		"\275\316\317\325\332\340\350\u010d\176\0\0\36\52\20\61\22\36\65\102\105\113\134\140" +
		"\145\200\203\204\235\236\247\251\262\267\274\275\314\316\317\321\323\325\332\340" +
		"\350\1\6\37\66\74\143\171\175\200\202\232\233\236\247\251\262\274\275\305\311\312" +
		"\316\317\320\321\322\323\325\332\334\340\342\350\364\366\367\370\u010f\u0110\u0115" +
		"\u0117\u0118\u012c\u012d\104\133\212\124\156\124\156\166\222\123\170\65\65\105\65" +
		"\105\65\105\225\353\u010b\65\105\144\300\102\145\113\113\134\113\134\133\212\272" +
		"\273\341\131\113\134\171\305\175\364\342\200\236\274\275\317\350\200\236\274\275" +
		"\317\340\350\200\236\274\275\317\340\350\200\236\247\251\274\275\316\317\325\340" +
		"\350\200\236\247\274\275\317\340\350\200\236\247\251\274\275\316\317\325\332\340" +
		"\350\200\236\247\251\274\275\316\317\325\332\340\350\200\236\247\251\262\274\275" +
		"\316\317\325\332\340\350\200\236\247\251\262\274\275\316\317\321\323\325\332\340" +
		"\350\200\236\247\251\262\274\275\316\317\321\323\325\332\340\350\200\236\247\251" +
		"\274\275\316\317\325\332\340\350\200\236\247\251\262\274\275\316\317\321\323\325" +
		"\332\340\350\200\236\247\251\262\274\275\316\317\321\322\323\325\332\340\350\320" +
		"\366\367\u0115\u0117\320\366\u0115\u0117\u0110\u012d\113\134\200\235\236\247\251" +
		"\274\275\316\317\325\332\340\350\113\134\142\200\235\236\247\251\274\275\316\317" +
		"\325\332\340\350\1\6\37\66\74\143\233\1\6\37\66\74\143\233\334\41\56\115\2\13\27" +
		"\2\13\27\200\236\247\251\274\275\316\317\325\332\340\350\u010d\1\6\36\37\66\74\105" +
		"\132\134\143\200\233\236\251\274\275\316\317\325\340\350\3\22\20\61\104\225\302\353" +
		"\u010d\102\203\204\267\272\273\341\171\200\236\274\275\317\350\200\236\247\251\274" +
		"\275\316\317\325\340\350\u0110\113\134\200\235\236\247\251\274\275\316\317\325\332" +
		"\340\350\41\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(2197,
		"\u0133\u0134\147\147\4\4\46\4\64\4\4\151\4\4\4\5\5\5\62\5\5\5\5\352\5\131\131\234" +
		"\234\234\234\234\234\234\234\234\234\234\200\274\275\350\50\67\340\u0115\u0115\u0115" +
		"\u0115\66\71\123\71\321\72\72\144\300\44\63\101\116\304\306\324\u0108\u0109\u0110" +
		"\u0119\33\152\152\152\152\u012c\37\75\145\153\153\153\153\305\u0118\u012d\73\73\170" +
		"\322\342\342\342\322\6\6\6\102\6\6\102\154\6\154\154\235\154\6\235\235\235\235\235" +
		"\235\40\146\155\155\155\155\360\361\u010e\27\41\43\124\156\124\156\156\236\124\156" +
		"\236\317\320\236\236\236\236\236\236\236\366\236\236\236\236\236\236\236\u010b\366" +
		"\366\366\366\61\76\100\220\221\223\277\363\u0111\u0116\u0121\u0125\u0129\u012e\355" +
		"\157\157\157\157\160\160\160\160\161\161\161\161\335\335\u012a\336\336\u012b\323" +
		"\162\162\162\162\333\367\367\367\367\367\163\163\163\163\332\332\u0117\332\u0117" +
		"\u0117\u0117\237\237\237\237\237\237\237\237\237\237\237\237\237\237\237\237\132" +
		"\164\132\132\164\164\132\164\132\132\132\132\132\132\132\132\132\132\132\132\7\7" +
		"\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\17\45\47\51\10\56\103\10\10\115" +
		"\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117" +
		"\240\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240\240\10\240" +
		"\10\240\10\370\370\10\10\10\370\370\10\10\10\11\11\11\11\11\11\11\11\12\12\12\12" +
		"\12\12\12\12\13\13\13\13\13\13\13\364\334\34\241\241\241\241\241\241\241\241\241" +
		"\241\241\241\241\241\241\241\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103" +
		"\117\165\176\201\117\117\10\215\117\165\165\10\10\240\10\117\117\201\165\10\10\117" +
		"\240\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240\240\10\240" +
		"\10\240\10\370\370\10\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10" +
		"\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10" +
		"\10\311\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240" +
		"\240\10\240\10\240\10\370\370\10\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10" +
		"\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117" +
		"\117\165\10\10\312\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240" +
		"\10\240\240\240\10\240\10\240\10\370\370\10\10\10\370\370\10\10\10\10\17\10\17\17" +
		"\45\47\51\10\56\103\10\10\115\117\103\117\165\176\202\117\117\10\215\117\165\165" +
		"\10\10\240\10\117\117\202\165\10\10\117\240\240\240\240\117\240\240\215\10\10\10" +
		"\117\240\240\370\240\10\240\240\240\10\240\10\240\10\370\370\10\10\10\370\370\10" +
		"\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\171\176\117\117" +
		"\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240\240\240\117\240\240" +
		"\215\10\10\10\117\240\240\370\240\10\240\240\240\10\240\10\240\10\370\370\10\10\10" +
		"\370\370\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\172" +
		"\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240\240\240" +
		"\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240\240\10\240\10\240\10\370" +
		"\370\10\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103" +
		"\117\165\173\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240" +
		"\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240\240\10\240\10" +
		"\240\10\370\370\10\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10" +
		"\115\117\103\117\165\174\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165" +
		"\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240" +
		"\240\10\240\10\240\10\370\370\10\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10" +
		"\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117" +
		"\117\165\303\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240" +
		"\10\240\240\240\10\240\10\240\10\370\370\10\10\10\370\370\10\10\10\10\17\10\17\17" +
		"\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10" +
		"\240\10\117\117\165\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240" +
		"\370\240\10\240\240\240\10\240\10\240\10\370\370\10\u011a\10\10\370\370\10\10\10" +
		"\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\203\117\117\10\215" +
		"\117\165\165\10\10\240\267\10\117\117\203\165\10\10\117\240\240\240\240\117\240\240" +
		"\215\10\10\10\117\240\240\370\240\10\240\240\240\10\240\10\240\10\370\370\10\u011b" +
		"\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165" +
		"\176\204\117\117\10\215\117\165\165\10\10\240\10\117\117\204\165\10\10\117\240\240" +
		"\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240\240\10\240\10\240" +
		"\10\370\370\10\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\10\115" +
		"\117\103\117\165\176\205\117\117\10\215\117\165\165\10\10\240\10\117\117\205\165" +
		"\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240" +
		"\240\10\240\10\240\10\370\370\10\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10" +
		"\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117" +
		"\117\165\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10" +
		"\240\240\240\10\240\10\240\10\370\370\10\u011c\10\10\370\370\10\10\10\10\17\10\17" +
		"\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10\215\117\165\165\10" +
		"\10\240\10\117\117\165\10\10\117\240\240\240\240\117\240\240\215\10\10\10\117\240" +
		"\240\370\240\10\240\240\240\10\240\10\240\10\370\370\10\u011d\10\10\370\370\10\10" +
		"\10\2\10\17\10\17\17\45\47\51\10\56\103\10\10\115\117\103\117\165\176\117\117\10" +
		"\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240\240\240\117\240\240\215" +
		"\10\10\10\117\240\240\370\240\10\240\240\240\10\240\10\240\10\370\370\10\10\10\370" +
		"\370\10\10\10\10\17\10\17\30\17\45\47\51\10\56\30\103\10\10\115\117\103\117\165\176" +
		"\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240\240\240\117" +
		"\240\240\215\10\10\10\117\240\240\370\240\10\240\240\240\10\240\10\240\10\370\370" +
		"\10\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10\56\65\103\10\10\115\117\103" +
		"\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10\117\240\240" +
		"\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240\240\10\240\10\240" +
		"\10\370\370\10\10\10\370\370\10\10\10\10\17\10\17\17\45\47\51\10\56\103\10\113\10" +
		"\115\117\103\117\165\176\117\117\10\215\117\165\165\10\10\240\10\117\117\165\10\10" +
		"\117\240\240\240\240\117\240\240\215\10\10\10\117\240\240\370\240\10\240\240\240" +
		"\10\240\10\240\10\370\370\10\10\10\370\370\10\10\10\242\242\242\242\242\242\242\242" +
		"\242\242\242\242\242\233\u0131\3\52\70\31\31\35\53\104\120\104\133\133\212\120\243" +
		"\271\271\313\243\243\243\243\271\243\243\362\243\243\374\374\243\243\243\243\14\14" +
		"\14\14\14\14\226\231\244\270\307\14\244\244\244\244\244\244\226\356\357\244\244\371" +
		"\244\244\244\244\244\u0102\244\u0106\244\231\371\371\u0114\307\u0122\371\371\u0128" +
		"\u012f\u0122\125\206\206\166\222\167\167\224\224\150\225\105\106\127\107\107\110" +
		"\110\301\u010c\u011e\111\111\216\351\121\217\134\135\210\136\136\207\276\343\343" +
		"\343\175\137\137\227\354\232\u010f\u0107\245\315\346\347\365\u010a\246\246\246\246" +
		"\246\u0104\246\247\247\247\247\247\247\247\250\250\250\250\250\250\250\250\250\250" +
		"\250\251\316\325\251\251\251\251\251\252\252\252\327\252\252\327\252\327\u0101\252" +
		"\252\253\253\253\253\253\253\253\253\253\253\253\253\254\254\254\254\337\254\254" +
		"\254\254\254\254\254\254\255\255\255\255\255\255\255\255\255\375\377\255\255\255" +
		"\255\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\257\257\257\257" +
		"\257\257\257\257\257\257\257\257\260\260\260\260\260\260\260\260\260\260\260\260" +
		"\260\260\260\261\261\261\261\261\261\261\261\261\261\376\261\261\261\261\261\372" +
		"\372\u0113\372\372\373\u0112\u0126\u0127\u0123\u0130\140\140\262\314\262\262\262" +
		"\262\262\262\262\262\262\262\262\141\141\213\141\141\141\141\141\141\141\141\141" +
		"\141\141\141\141\u0132\23\55\112\114\214\310\15\15\15\15\15\15\15\u0103\57\74\143" +
		"\20\26\42\21\21\21\263\263\263\263\263\263\263\263\263\263\263\263\u011f\16\16\54" +
		"\16\16\16\130\177\211\16\264\16\264\330\264\264\330\264\330\264\264\22\36\32\77\126" +
		"\302\353\u010d\u0120\122\272\273\341\344\345\u0105\230\265\265\265\265\265\265\266" +
		"\266\326\331\266\266\331\266\u0100\266\266\u0124\142\142\142\142\142\142\142\142" +
		"\142\142\142\142\142\142\142\60\24\25");

	private static final short[] tmRuleLen = TMLexer.unpack_short(185,
		"\2\0\2\0\5\4\1\0\7\4\3\3\4\4\3\3\1\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2" +
		"\1\1\1\3\1\0\1\0\1\0\1\0\1\0\10\3\2\3\1\1\1\1\3\1\3\1\3\1\1\2\2\1\1\6\5\5\4\2\1\0" +
		"\1\0\4\3\3\1\1\2\1\1\1\4\3\1\4\2\1\1\2\1\3\3\1\1\1\0\3\2\2\1\1\3\4\3\3\3\1\2\2\1" +
		"\1\1\1\2\1\3\3\1\2\1\3\3\3\1\3\1\3\6\6\2\2\3\1\6\4\4\2\1\3\2\1\3\3\3\2\1\1\5\2\2" +
		"\1\1\1\0\5\3\1\1\0\3\1\1\1\1\1\3\5\1\1\1\1\1\3\1\1");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(185,
		"\172\172\173\173\77\77\174\174\100\100\101\102\103\104\104\105\105\106\107\110\110" +
		"\111\111\112\112\112\112\112\112\112\112\112\112\112\112\112\113\114\114\114\115" +
		"\115\115\116\175\175\176\176\177\177\200\200\201\201\117\117\120\121\122\122\122" +
		"\122\202\202\123\124\125\125\126\126\126\127\127\130\130\130\130\131\203\203\204" +
		"\204\131\131\131\131\131\132\133\133\133\134\205\205\134\135\135\136\136\137\137" +
		"\206\206\140\207\207\141\141\141\141\141\142\142\142\143\143\144\144\144\145\145" +
		"\145\146\146\147\147\147\150\150\151\151\151\152\153\153\154\154\154\154\154\154" +
		"\210\210\154\154\154\155\155\155\155\156\156\156\157\211\211\160\161\161\161\162" +
		"\162\212\212\162\213\213\214\214\162\162\163\163\163\163\164\164\165\165\165\166" +
		"\167\167\170\171");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'='",
		"'=>'",
		"';'",
		"'.'",
		"'..'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'~'",
		"'&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"directive",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule0",
		"rhsPrefix",
		"rhsSuffix",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"setPrimary",
		"setExpression",
		"rhsBracketsPair",
		"annotations",
		"annotation",
		"expression",
		"literal",
		"map_entries",
		"map_separator",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"import__optlist",
		"option_optlist",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"lexer_state_list_Comma_separated",
		"identifieropt",
		"implementsopt",
		"inputref_list_Comma_separated",
		"rule0_list_Or_separated",
		"rhsSuffixopt",
		"rhsBracketsPair_list_Comma_separated",
		"annotation_list",
		"map_entriesopt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 63;
		static final int header = 64;
		static final int lexer_section = 65;
		static final int parser_section = 66;
		static final int parsing_algorithm = 67;
		static final int import_ = 68;
		static final int option = 69;
		static final int identifier = 70;
		static final int symref = 71;
		static final int type = 72;
		static final int type_part_list = 73;
		static final int type_part = 74;
		static final int pattern = 75;
		static final int lexer_parts = 76;
		static final int lexer_part = 77;
		static final int named_pattern = 78;
		static final int lexeme = 79;
		static final int lexeme_transition = 80;
		static final int lexeme_attrs = 81;
		static final int lexeme_attribute = 82;
		static final int state_selector = 83;
		static final int stateref = 84;
		static final int lexer_state = 85;
		static final int grammar_parts = 86;
		static final int grammar_part = 87;
		static final int nonterm = 88;
		static final int nonterm_type = 89;
		static final int _implements = 90;
		static final int assoc = 91;
		static final int directive = 92;
		static final int inputref = 93;
		static final int references = 94;
		static final int references_cs = 95;
		static final int rules = 96;
		static final int rule0 = 97;
		static final int rhsPrefix = 98;
		static final int rhsSuffix = 99;
		static final int rhsParts = 100;
		static final int rhsPart = 101;
		static final int rhsAnnotated = 102;
		static final int rhsAssignment = 103;
		static final int rhsOptional = 104;
		static final int rhsCast = 105;
		static final int rhsUnordered = 106;
		static final int rhsClass = 107;
		static final int rhsPrimary = 108;
		static final int setPrimary = 109;
		static final int setExpression = 110;
		static final int rhsBracketsPair = 111;
		static final int annotations = 112;
		static final int annotation = 113;
		static final int expression = 114;
		static final int literal = 115;
		static final int map_entries = 116;
		static final int map_separator = 117;
		static final int name = 118;
		static final int qualified_id = 119;
		static final int command = 120;
		static final int syntax_problem = 121;
		static final int import__optlist = 122;
		static final int option_optlist = 123;
		static final int parsing_algorithmopt = 124;
		static final int typeopt = 125;
		static final int lexeme_transitionopt = 126;
		static final int iconopt = 127;
		static final int lexeme_attrsopt = 128;
		static final int commandopt = 129;
		static final int lexer_state_list_Comma_separated = 130;
		static final int identifieropt = 131;
		static final int implementsopt = 132;
		static final int inputref_list_Comma_separated = 133;
		static final int rule0_list_Or_separated = 134;
		static final int rhsSuffixopt = 135;
		static final int rhsBracketsPair_list_Comma_separated = 136;
		static final int annotation_list = 137;
		static final int map_entriesopt = 138;
		static final int expression_list_Comma_separated = 139;
		static final int expression_list_Comma_separated_opt = 140;
	}

	public interface Rules {
		static final int nonterm_type_nontermTypeAST = 77;  // nonterm_type ::= Lreturns symref
		static final int nonterm_type_nontermTypeHint = 82;  // nonterm_type ::= Linline Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint2 = 83;  // nonterm_type ::= Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint3 = 84;  // nonterm_type ::= Linterface identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint4 = 85;  // nonterm_type ::= Lvoid
		static final int nonterm_type_nontermTypeRaw = 86;  // nonterm_type ::= type
		static final int directive_directivePrio = 91;  // directive ::= '%' assoc references ';'
		static final int directive_directiveInput = 94;  // directive ::= '%' Linput inputref_list_Comma_separated ';'
		static final int rhsOptional_rhsQuantifier = 128;  // rhsOptional ::= rhsCast '?'
		static final int rhsCast_rhsAsLiteral = 131;  // rhsCast ::= rhsClass Las literal
		static final int rhsPrimary_rhsSymbol = 135;  // rhsPrimary ::= symref
		static final int rhsPrimary_rhsNested = 136;  // rhsPrimary ::= '(' rules ')'
		static final int rhsPrimary_rhsList = 137;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		static final int rhsPrimary_rhsList2 = 138;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		static final int rhsPrimary_rhsQuantifier = 139;  // rhsPrimary ::= rhsPrimary '*'
		static final int rhsPrimary_rhsQuantifier2 = 140;  // rhsPrimary ::= rhsPrimary '+'
		static final int rhsPrimary_rhsIgnored = 143;  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
		static final int rhsPrimary_rhsIgnored2 = 144;  // rhsPrimary ::= '$' '(' rules ')'
		static final int rhsPrimary_rhsSet = 145;  // rhsPrimary ::= Lset '(' setExpression ')'
		static final int setPrimary_setSymbol = 146;  // setPrimary ::= ID symref
		static final int setPrimary_setSymbol2 = 147;  // setPrimary ::= symref
		static final int setPrimary_setCompound = 148;  // setPrimary ::= '(' setExpression ')'
		static final int setPrimary_setComplement = 149;  // setPrimary ::= '~' setPrimary
		static final int setExpression_setBinary = 151;  // setExpression ::= setExpression '|' setExpression
		static final int setExpression_setBinary2 = 152;  // setExpression ::= setExpression '&' setExpression
		static final int expression_instance = 164;  // expression ::= Lnew name '(' map_entriesopt ')'
		static final int expression_array = 169;  // expression ::= '[' expression_list_Comma_separated_opt ']'
		static final int literal_literal = 171;  // literal ::= scon
		static final int literal_literal2 = 172;  // literal ::= icon
		static final int literal_literal3 = 173;  // literal ::= Ltrue
		static final int literal_literal4 = 174;  // literal ::= Lfalse
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 32) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 32;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 32);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 0:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 1:  // import__optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 2:  // option_optlist ::= option_optlist option
				((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 3:  // option_optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 4:  // input ::= header import__optlist option_optlist lexer_section parser_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead - 1].value) /* lexer */,
						((List<ITmaGrammarPart>)tmStack[tmHead].value) /* parser */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 5:  // input ::= header import__optlist option_optlist lexer_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead].value) /* lexer */,
						null /* parser */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 9:  // header ::= Llanguage name parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 10:  // lexer_section ::= '::' Llexer lexer_parts
				tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value);
				break;
			case 11:  // parser_section ::= '::' Lparser grammar_parts
				tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value);
				break;
			case 12:  // parsing_algorithm ::= Llalr '(' icon ')'
				tmLeft.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // import_ ::= Limport ID scon ';'
				tmLeft.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 14:  // import_ ::= Limport scon ';'
				tmLeft.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 15:  // option ::= ID '=' expression
				tmLeft.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* key */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 16:  // option ::= syntax_problem
				tmLeft.value = new TmaOption(
						null /* key */,
						null /* value */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 17:  // identifier ::= ID
				tmLeft.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 18:  // symref ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 19:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 20:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 36:  // pattern ::= regexp
				tmLeft.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 37:  // lexer_parts ::= lexer_part
				tmLeft.value = new ArrayList();
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 38:  // lexer_parts ::= lexer_parts lexer_part
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 39:  // lexer_parts ::= lexer_parts syntax_problem
				((List<ITmaLexerPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 43:  // named_pattern ::= ID '=' pattern
				tmLeft.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 54:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* transition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemeAttrs)tmStack[tmHead - 1].value) /* attrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						null /* input */, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 55:  // lexeme ::= identifier typeopt ':'
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* transition */,
						null /* priority */,
						null /* attrs */,
						null /* command */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 56:  // lexeme_transition ::= '=>' stateref
				tmLeft.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 57:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				tmLeft.value = new TmaLexemeAttrs(
						((TmaLexemeAttribute)tmStack[tmHead - 1].value) /* kind */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 58:  // lexeme_attribute ::= Lsoft
				tmLeft.value = TmaLexemeAttribute.LSOFT;
				break;
			case 59:  // lexeme_attribute ::= Lclass
				tmLeft.value = TmaLexemeAttribute.LCLASS;
				break;
			case 60:  // lexeme_attribute ::= Lspace
				tmLeft.value = TmaLexemeAttribute.LSPACE;
				break;
			case 61:  // lexeme_attribute ::= Llayout
				tmLeft.value = TmaLexemeAttribute.LLAYOUT;
				break;
			case 62:  // lexer_state_list_Comma_separated ::= lexer_state_list_Comma_separated ',' lexer_state
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 63:  // lexer_state_list_Comma_separated ::= lexer_state
				tmLeft.value = new ArrayList();
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 64:  // state_selector ::= '[' lexer_state_list_Comma_separated ']'
				tmLeft.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 65:  // stateref ::= ID
				tmLeft.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 66:  // lexer_state ::= identifier '=>' stateref
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 67:  // lexer_state ::= identifier
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 68:  // grammar_parts ::= grammar_part
				tmLeft.value = new ArrayList();
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 69:  // grammar_parts ::= grammar_parts grammar_part
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 70:  // grammar_parts ::= grammar_parts syntax_problem
				((List<ITmaGrammarPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 73:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 74:  // nonterm ::= annotations identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 75:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 76:  // nonterm ::= identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 77:  // nonterm_type ::= Lreturns symref
				tmLeft.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 82:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						true /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 83:  // nonterm_type ::= Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 84:  // nonterm_type ::= Linterface identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 85:  // nonterm_type ::= Lvoid
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* _implements */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 86:  // nonterm_type ::= type
				tmLeft.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* typeText */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 87:  // implements ::= ':' references_cs
				tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value);
				break;
			case 88:  // assoc ::= Lleft
				tmLeft.value = TmaAssoc.LLEFT;
				break;
			case 89:  // assoc ::= Lright
				tmLeft.value = TmaAssoc.LRIGHT;
				break;
			case 90:  // assoc ::= Lnonassoc
				tmLeft.value = TmaAssoc.LNONASSOC;
				break;
			case 91:  // directive ::= '%' assoc references ';'
				tmLeft.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 92:  // inputref_list_Comma_separated ::= inputref_list_Comma_separated ',' inputref
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 93:  // inputref_list_Comma_separated ::= inputref
				tmLeft.value = new ArrayList();
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 94:  // directive ::= '%' Linput inputref_list_Comma_separated ';'
				tmLeft.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 95:  // inputref ::= symref Lnoeoi
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* reference */,
						true /* noeoi */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 96:  // inputref ::= symref
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						false /* noeoi */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 97:  // references ::= symref
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 98:  // references ::= references symref
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 99:  // references_cs ::= symref
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 100:  // references_cs ::= references_cs ',' symref
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 101:  // rule0_list_Or_separated ::= rule0_list_Or_separated '|' rule0
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 102:  // rule0_list_Or_separated ::= rule0
				tmLeft.value = new ArrayList();
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 106:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 107:  // rule0 ::= rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 108:  // rule0 ::= rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 109:  // rule0 ::= rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 110:  // rule0 ::= syntax_problem
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* suffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 111:  // rhsPrefix ::= '[' annotations ']'
				tmLeft.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* alias */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 112:  // rhsPrefix ::= '[' annotations identifier ']'
				tmLeft.value = new TmaRhsPrefix(
						((TmaAnnotations)tmStack[tmHead - 2].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* alias */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 113:  // rhsPrefix ::= '[' identifier ']'
				tmLeft.value = new TmaRhsPrefix(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* alias */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 114:  // rhsSuffix ::= '%' Lprio symref
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 115:  // rhsSuffix ::= '%' Lshift symref
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 116:  // rhsParts ::= rhsPart
				tmLeft.value = new ArrayList();
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 117:  // rhsParts ::= rhsParts rhsPart
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 118:  // rhsParts ::= rhsParts syntax_problem
				((List<ITmaRhsPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 123:  // rhsAnnotated ::= annotations rhsAssignment
				tmLeft.value = new TmaRhsAnnotated(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 125:  // rhsAssignment ::= identifier '=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 126:  // rhsAssignment ::= identifier '+=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 128:  // rhsOptional ::= rhsCast '?'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 129:  // rhsCast ::= rhsClass
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* target */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 130:  // rhsCast ::= rhsClass Las symref
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaSymref)tmStack[tmHead].value) /* target */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 131:  // rhsCast ::= rhsClass Las literal
				tmLeft.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 132:  // rhsUnordered ::= rhsPart '&' rhsPart
				tmLeft.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 134:  // rhsClass ::= identifier ':' rhsPrimary
				tmLeft.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 135:  // rhsPrimary ::= symref
				tmLeft.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 136:  // rhsPrimary ::= '(' rules ')'
				tmLeft.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 137:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						true /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 138:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						false /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 139:  // rhsPrimary ::= rhsPrimary '*'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 140:  // rhsPrimary ::= rhsPrimary '+'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 141:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair_list_Comma_separated ',' rhsBracketsPair
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 142:  // rhsBracketsPair_list_Comma_separated ::= rhsBracketsPair
				tmLeft.value = new ArrayList();
				((List<TmaRhsBracketsPair>)tmLeft.value).add(((TmaRhsBracketsPair)tmStack[tmHead].value));
				break;
			case 143:  // rhsPrimary ::= '$' '(' rules ';' rhsBracketsPair_list_Comma_separated ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 3].value) /* rules */,
						((List<TmaRhsBracketsPair>)tmStack[tmHead - 1].value) /* brackets */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 144:  // rhsPrimary ::= '$' '(' rules ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* brackets */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 145:  // rhsPrimary ::= Lset '(' setExpression ')'
				tmLeft.value = new TmaRhsSet(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* expr */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 146:  // setPrimary ::= ID symref
				tmLeft.value = new TmaSetSymbol(
						((String)tmStack[tmHead - 1].value) /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 147:  // setPrimary ::= symref
				tmLeft.value = new TmaSetSymbol(
						null /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 148:  // setPrimary ::= '(' setExpression ')'
				tmLeft.value = new TmaSetCompound(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 149:  // setPrimary ::= '~' setPrimary
				tmLeft.value = new TmaSetComplement(
						((ITmaSetExpression)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 151:  // setExpression ::= setExpression '|' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.OR /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 152:  // setExpression ::= setExpression '&' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.AMPERSAND /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 153:  // rhsBracketsPair ::= symref '..' symref
				tmLeft.value = new TmaRhsBracketsPair(
						((TmaSymref)tmStack[tmHead - 2].value) /* lhs */,
						((TmaSymref)tmStack[tmHead].value) /* rhs */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 154:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 155:  // annotation_list ::= annotation
				tmLeft.value = new ArrayList();
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 156:  // annotations ::= annotation_list
				tmLeft.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 157:  // annotation ::= '@' ID '{' expression '}'
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 158:  // annotation ::= '@' ID
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 159:  // annotation ::= '@' syntax_problem
				tmLeft.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 164:  // expression ::= Lnew name '(' map_entriesopt ')'
				tmLeft.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntriesItem>)tmStack[tmHead - 1].value) /* mapEntries */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 165:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 166:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 169:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				tmLeft.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 171:  // literal ::= scon
				tmLeft.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 172:  // literal ::= icon
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						((Integer)tmStack[tmHead].value) /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 173:  // literal ::= Ltrue
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						true /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 174:  // literal ::= Lfalse
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 175:  // map_entries ::= ID map_separator expression
				tmLeft.value = new ArrayList();
				((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* expression */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset));
				break;
			case 176:  // map_entries ::= map_entries ',' ID map_separator expression
				((List<TmaMapEntriesItem>)tmLeft.value).add(new TmaMapEntriesItem(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* expression */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset));
				break;
			case 180:  // name ::= qualified_id
				tmLeft.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 182:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 183:  // command ::= code
				tmLeft.value = new TmaCommand(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 184:  // syntax_problem ::= error
				tmLeft.value = new TmaSyntaxProblem(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 307);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 308);
	}
}
