/**
 * Copyright 2002-2014 Evgeny Gryaznov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.textmapper.tool.parser;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import org.textmapper.tool.parser.TMLexer.ErrorReporter;
import org.textmapper.tool.parser.TMLexer.Tokens;
import org.textmapper.tool.parser.TMTree.TextSource;
import org.textmapper.tool.parser.ast.*;
import org.textmapper.tool.parser.TMLexer.LapgSymbol;

public class TMParser {

	public static class ParseException extends Exception {
		private static final long serialVersionUID = 1L;

		public ParseException() {
		}
	}

	private final ErrorReporter reporter;

	public TMParser(ErrorReporter reporter) {
		this.reporter = reporter;
	}


	private static final boolean DEBUG_SYNTAX = false;
	TextSource source;
	private static final int[] tmAction = TMLexer.unpack_int(381,
		"\uffff\uffff\uffff\uffff\uffff\uffff\ufffd\uffff\247\0\250\0\uffc1\uffff\257\0\uff7b" +
		"\uffff\251\0\252\0\uffff\uffff\242\0\241\0\245\0\254\0\uff15\uffff\uff0d\uffff\uff01" +
		"\uffff\333\0\ufec5\uffff\uffff\uffff\ufebf\uffff\14\0\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\264\0\uffff\uffff\uffff\uffff\uffff\uffff\260\0\uffff\uffff\uffff\uffff\244" +
		"\0\ufe7f\uffff\220\0\231\0\uffff\uffff\323\0\321\0\230\0\uffff\uffff\ufe1b\uffff" +
		"\uffff\uffff\ufe15\uffff\uffff\uffff\uffff\uffff\3\0\255\0\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\uffff\ufddd\uffff\262\0\12\0\332\0\uffff\uffff\uffff\uffff\221" +
		"\0\uffff\uffff\222\0\uffff\uffff\327\0\ufdd7\uffff\uffff\uffff\ufdd1\uffff\uffff" +
		"\uffff\10\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\0\0\223\0\320\0\13\0" +
		"\322\0\uffff\uffff\uffff\uffff\243\0\uffff\uffff\6\0\7\0\uffff\uffff\uffff\uffff" +
		"\ufdcb\uffff\ufdc3\uffff\ufdbd\uffff\41\0\45\0\46\0\47\0\44\0\11\0\uffff\uffff\246" +
		"\0\326\0\2\0\uffff\uffff\ufd7d\uffff\301\0\uffff\uffff\uffff\uffff\uffff\uffff\266" +
		"\0\uffff\uffff\42\0\43\0\uffff\uffff\uffff\uffff\uffff\uffff\ufd75\uffff\66\0\71" +
		"\0\72\0\uffff\uffff\315\0\ufd37\uffff\16\0\uffff\uffff\uffff\uffff\uffff\uffff\62" +
		"\0\40\0\50\0\uffff\uffff\31\0\32\0\25\0\26\0\uffff\uffff\23\0\24\0\30\0\33\0\35\0" +
		"\34\0\27\0\uffff\uffff\22\0\ufcf7\uffff\uffff\uffff\112\0\113\0\114\0\uffff\uffff" +
		"\uffff\uffff\ufcb5\uffff\216\0\ufc73\uffff\uffff\uffff\uffff\uffff\uffff\uffff\ufc27" +
		"\uffff\ufbed\uffff\107\0\110\0\uffff\uffff\uffff\uffff\67\0\70\0\uffff\uffff\314" +
		"\0\61\0\63\0\64\0\300\0\17\0\37\0\uffff\uffff\20\0\21\0\ufbb3\uffff\ufb6b\uffff\307" +
		"\0\uffff\uffff\uffff\uffff\123\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\ufb63\uffff\uffff\uffff\uffff\uffff\uffff\uffff\256\0\uffff\uffff\174\0\uffff\uffff" +
		"\311\0\uffff\uffff\ufb17\uffff\312\0\ufacd\uffff\ufac3\uffff\ufa77\uffff\154\0\157" +
		"\0\161\0\ufa27\uffff\155\0\uf9d5\uffff\uf981\uffff\uffff\uffff\156\0\140\0\uf929" +
		"\uffff\137\0\317\0\uffff\uffff\uf921\uffff\103\0\302\0\uf8e7\uffff\uf8e1\uffff\uf8db" +
		"\uffff\uf88f\uffff\uffff\uffff\uf843\uffff\uffff\uffff\uffff\uffff\36\0\uffff\uffff" +
		"\270\0\uf7f7\uffff\121\0\116\0\uffff\uffff\225\0\226\0\224\0\227\0\uffff\uffff\115" +
		"\0\124\0\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uf7b1\uffff\236\0\uffff" +
		"\uffff\uffff\uffff\uf7a5\uffff\uffff\uffff\uf759\uffff\uffff\uffff\uffff\uffff\uffff" +
		"\uffff\uffff\uffff\102\0\144\0\uffff\uffff\uf70d\uffff\uf703\uffff\uffff\uffff\133" +
		"\0\136\0\uf6b7\uffff\uf6ad\uffff\153\0\135\0\uffff\uffff\165\0\uffff\uffff\200\0" +
		"\201\0\143\0\160\0\uf65d\uffff\uffff\uffff\217\0\uf60f\uffff\uffff\uffff\304\0\105" +
		"\0\106\0\uffff\uffff\uffff\uffff\uf609\uffff\uffff\uffff\uf5bd\uffff\uf571\uffff" +
		"\uffff\uffff\53\0\272\0\uf525\uffff\306\0\uffff\uffff\120\0\214\0\145\0\146\0\232" +
		"\0\uffff\uffff\uffff\uffff\uffff\uffff\141\0\uffff\uffff\175\0\uffff\uffff\uffff" +
		"\uffff\150\0\uffff\uffff\uffff\uffff\uffff\uffff\uf4e1\uffff\205\0\210\0\uffff\uffff" +
		"\uffff\uffff\162\0\uf4a3\uffff\163\0\142\0\132\0\uf44b\uffff\131\0\134\0\uf441\uffff" +
		"\167\0\170\0\310\0\316\0\104\0\125\0\uf3f1\uffff\101\0\100\0\uffff\uffff\76\0\uffff" +
		"\uffff\uffff\uffff\uf3eb\uffff\uffff\uffff\274\0\uf39f\uffff\uffff\uffff\234\0\235" +
		"\0\uf35d\uffff\uf355\uffff\uffff\uffff\147\0\202\0\uffff\uffff\207\0\204\0\uffff" +
		"\uffff\203\0\uffff\uffff\130\0\uffff\uffff\77\0\75\0\74\0\uffff\uffff\55\0\56\0\57" +
		"\0\60\0\uffff\uffff\276\0\51\0\117\0\uffff\uffff\206\0\uf34d\uffff\uf345\uffff\126" +
		"\0\73\0\54\0\177\0\176\0\uffff\uffff\uffff\uffff\ufffe\uffff\ufffe\uffff");

	private static final short[] tmLalr = TMLexer.unpack_short(3264,
		"\10\261\45\261\46\261\54\261\56\261\57\261\60\261\61\261\62\261\63\261\64\261\65" +
		"\261\66\261\67\261\70\261\71\261\72\261\73\261\74\261\75\261\76\261\77\261\100\261" +
		"\101\261\102\261\103\261\104\261\105\261\106\261\uffff\ufffe\2\uffff\3\uffff\23\uffff" +
		"\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100" +
		"\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67" +
		"\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56" +
		"\uffff\47\uffff\50\uffff\51\uffff\24\335\uffff\ufffe\31\uffff\0\15\6\15\10\15\11" +
		"\15\17\15\21\15\24\15\25\15\26\15\27\15\30\15\32\15\33\15\34\15\36\15\41\15\43\15" +
		"\44\15\45\15\46\15\52\15\53\15\55\15\56\15\57\15\60\15\61\15\62\15\63\15\64\15\65" +
		"\15\66\15\67\15\70\15\71\15\72\15\73\15\74\15\75\15\76\15\77\15\100\15\101\15\102" +
		"\15\103\15\104\15\105\15\106\15\110\15\uffff\ufffe\25\uffff\104\uffff\17\265\uffff" +
		"\ufffe\20\uffff\17\253\25\253\26\253\104\253\uffff\ufffe\54\uffff\10\263\45\263\46" +
		"\263\56\263\57\263\60\263\61\263\62\263\63\263\64\263\65\263\66\263\67\263\70\263" +
		"\71\263\72\263\73\263\74\263\75\263\76\263\77\263\100\263\101\263\102\263\103\263" +
		"\104\263\105\263\106\263\uffff\ufffe\21\uffff\24\334\uffff\ufffe\2\uffff\3\uffff" +
		"\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77" +
		"\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\47" +
		"\uffff\50\uffff\32\325\uffff\ufffe\31\uffff\13\13\22\13\35\13\6\15\11\15\17\15\21" +
		"\15\25\15\26\15\27\15\32\15\33\15\34\15\36\15\41\15\43\15\44\15\45\15\46\15\52\15" +
		"\53\15\55\15\56\15\57\15\60\15\61\15\62\15\63\15\64\15\65\15\66\15\67\15\70\15\71" +
		"\15\72\15\73\15\74\15\75\15\76\15\77\15\100\15\101\15\102\15\103\15\104\15\105\15" +
		"\106\15\110\15\uffff\ufffe\21\uffff\32\324\uffff\ufffe\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\26\331\uffff\ufffe\10\uffff\0" +
		"\1\uffff\ufffe\21\uffff\26\330\uffff\ufffe\104\uffff\17\265\uffff\ufffe\13\uffff" +
		"\22\13\25\13\uffff\ufffe\25\uffff\22\267\uffff\ufffe\6\uffff\23\uffff\45\uffff\46" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\0\4\10\4" +
		"\uffff\ufffe\16\uffff\21\65\24\65\uffff\ufffe\6\uffff\44\uffff\45\uffff\46\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\0\5\uffff\ufffe" +
		"\44\uffff\22\213\25\213\43\213\46\213\55\213\56\213\57\213\60\213\61\213\62\213\63" +
		"\213\64\213\65\213\66\213\67\213\70\213\71\213\72\213\73\213\74\213\75\213\76\213" +
		"\77\213\100\213\101\213\102\213\103\213\104\213\105\213\106\213\uffff\ufffe\1\uffff" +
		"\0\52\6\52\10\52\23\52\45\52\46\52\56\52\57\52\60\52\61\52\62\52\63\52\64\52\65\52" +
		"\66\52\67\52\70\52\71\52\72\52\73\52\74\52\75\52\76\52\77\52\100\52\101\52\102\52" +
		"\103\52\104\52\105\52\106\52\uffff\ufffe\111\uffff\22\215\25\215\43\215\44\215\46" +
		"\215\55\215\56\215\57\215\60\215\61\215\62\215\63\215\64\215\65\215\66\215\67\215" +
		"\70\215\71\215\72\215\73\215\74\215\75\215\76\215\77\215\100\215\101\215\102\215" +
		"\103\215\104\215\105\215\106\215\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43" +
		"\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\110\uffff\11\313\17\313\uffff\ufffe\46\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\303\22\303\uffff\ufffe" +
		"\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77" +
		"\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66" +
		"\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7" +
		"\303\22\303\uffff\ufffe\16\uffff\0\271\3\271\6\271\10\271\23\271\25\271\45\271\46" +
		"\271\56\271\57\271\60\271\61\271\62\271\63\271\64\271\65\271\66\271\67\271\70\271" +
		"\71\271\72\271\73\271\74\271\75\271\76\271\77\271\100\271\101\271\102\271\103\271" +
		"\104\271\105\271\106\271\110\271\uffff\ufffe\74\uffff\17\122\21\122\uffff\ufffe\6" +
		"\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105" +
		"\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff" +
		"\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff" +
		"\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\313" +
		"\26\313\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\46\uffff\106\uffff" +
		"\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75" +
		"\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64" +
		"\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11" +
		"\313\17\313\26\313\uffff\ufffe\6\uffff\11\313\17\313\26\313\uffff\ufffe\6\uffff\25" +
		"\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff" +
		"\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff" +
		"\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff" +
		"\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\313\17\313\26\313\uffff" +
		"\ufffe\41\uffff\6\151\11\151\17\151\25\151\26\151\27\151\43\151\44\151\45\151\46" +
		"\151\52\151\55\151\56\151\57\151\60\151\61\151\62\151\63\151\64\151\65\151\66\151" +
		"\67\151\70\151\71\151\72\151\73\151\74\151\75\151\76\151\77\151\100\151\101\151\102" +
		"\151\103\151\104\151\105\151\106\151\110\151\uffff\ufffe\36\uffff\6\164\11\164\17" +
		"\164\25\164\26\164\27\164\41\164\43\164\44\164\45\164\46\164\52\164\55\164\56\164" +
		"\57\164\60\164\61\164\62\164\63\164\64\164\65\164\66\164\67\164\70\164\71\164\72" +
		"\164\73\164\74\164\75\164\76\164\77\164\100\164\101\164\102\164\103\164\104\164\105" +
		"\164\106\164\110\164\uffff\ufffe\53\uffff\6\166\11\166\17\166\25\166\26\166\27\166" +
		"\36\166\41\166\43\166\44\166\45\166\46\166\52\166\55\166\56\166\57\166\60\166\61" +
		"\166\62\166\63\166\64\166\65\166\66\166\67\166\70\166\71\166\72\166\73\166\74\166" +
		"\75\166\76\166\77\166\100\166\101\166\102\166\103\166\104\166\105\166\106\166\110" +
		"\166\uffff\ufffe\33\uffff\34\uffff\6\172\11\172\17\172\25\172\26\172\27\172\36\172" +
		"\41\172\43\172\44\172\45\172\46\172\52\172\53\172\55\172\56\172\57\172\60\172\61" +
		"\172\62\172\63\172\64\172\65\172\66\172\67\172\70\172\71\172\72\172\73\172\74\172" +
		"\75\172\76\172\77\172\100\172\101\172\102\172\103\172\104\172\105\172\106\172\110" +
		"\172\uffff\ufffe\11\uffff\17\127\26\127\uffff\ufffe\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\7\303\22\303\uffff\ufffe\22\uffff" +
		"\7\305\uffff\ufffe\22\uffff\7\305\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\313\17\313\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\313\17" +
		"\313\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46" +
		"\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff" +
		"\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff" +
		"\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff" +
		"\110\uffff\11\313\17\313\uffff\ufffe\3\uffff\0\273\6\273\10\273\23\273\25\273\45" +
		"\273\46\273\56\273\57\273\60\273\61\273\62\273\63\273\64\273\65\273\66\273\67\273" +
		"\70\273\71\273\72\273\73\273\74\273\75\273\76\273\77\273\100\273\101\273\102\273" +
		"\103\273\104\273\105\273\106\273\110\273\uffff\ufffe\14\uffff\15\uffff\12\233\24" +
		"\233\42\233\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\52\uffff\55" +
		"\uffff\110\uffff\11\313\26\313\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43" +
		"\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff" +
		"\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff" +
		"\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff" +
		"\57\uffff\56\uffff\55\uffff\110\uffff\11\313\26\313\uffff\ufffe\6\uffff\11\313\17" +
		"\313\26\313\uffff\ufffe\6\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff" +
		"\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76" +
		"\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65" +
		"\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110" +
		"\uffff\11\313\17\313\26\313\uffff\ufffe\6\uffff\11\313\17\313\26\313\uffff\ufffe" +
		"\41\uffff\6\152\11\152\17\152\25\152\26\152\27\152\43\152\44\152\45\152\46\152\52" +
		"\152\55\152\56\152\57\152\60\152\61\152\62\152\63\152\64\152\65\152\66\152\67\152" +
		"\70\152\71\152\72\152\73\152\74\152\75\152\76\152\77\152\100\152\101\152\102\152" +
		"\103\152\104\152\105\152\106\152\110\152\uffff\ufffe\6\uffff\23\uffff\25\uffff\27" +
		"\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\313\17\313\26\313\uffff\ufffe\22" +
		"\uffff\7\305\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45" +
		"\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff" +
		"\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff" +
		"\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff" +
		"\55\uffff\110\uffff\11\313\17\313\uffff\ufffe\6\uffff\23\uffff\25\uffff\27\uffff" +
		"\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff\102" +
		"\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\313\17\313\uffff\ufffe\6\uffff" +
		"\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106\uffff\105\uffff" +
		"\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74" +
		"\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63" +
		"\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff\11\313\17" +
		"\313\uffff\ufffe\25\uffff\0\275\6\275\10\275\23\275\45\275\46\275\56\275\57\275\60" +
		"\275\61\275\62\275\63\275\64\275\65\275\66\275\67\275\70\275\71\275\72\275\73\275" +
		"\74\275\75\275\76\275\77\275\100\275\101\275\102\275\103\275\104\275\105\275\106" +
		"\275\110\275\uffff\ufffe\31\uffff\46\uffff\106\uffff\105\uffff\104\uffff\103\uffff" +
		"\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff\75\uffff\74\uffff\73\uffff\72\uffff" +
		"\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff\64\uffff\63\uffff\62\uffff\61\uffff" +
		"\60\uffff\57\uffff\56\uffff\11\15\26\15\41\15\uffff\ufffe\33\uffff\34\uffff\6\173" +
		"\11\173\17\173\25\173\26\173\27\173\36\173\41\173\43\173\44\173\45\173\46\173\52" +
		"\173\53\173\55\173\56\173\57\173\60\173\61\173\62\173\63\173\64\173\65\173\66\173" +
		"\67\173\70\173\71\173\72\173\73\173\74\173\75\173\76\173\77\173\100\173\101\173\102" +
		"\173\103\173\104\173\105\173\106\173\110\173\uffff\ufffe\6\uffff\11\313\17\313\26" +
		"\313\uffff\ufffe\41\171\6\171\11\171\17\171\25\171\26\171\27\171\43\171\44\171\45" +
		"\171\46\171\52\171\55\171\56\171\57\171\60\171\61\171\62\171\63\171\64\171\65\171" +
		"\66\171\67\171\70\171\71\171\72\171\73\171\74\171\75\171\76\171\77\171\100\171\101" +
		"\171\102\171\103\171\104\171\105\171\106\171\110\171\uffff\ufffe\21\uffff\7\111\uffff" +
		"\ufffe\6\uffff\23\uffff\25\uffff\27\uffff\43\uffff\44\uffff\45\uffff\46\uffff\106" +
		"\uffff\105\uffff\104\uffff\103\uffff\102\uffff\101\uffff\100\uffff\77\uffff\76\uffff" +
		"\75\uffff\74\uffff\73\uffff\72\uffff\71\uffff\70\uffff\67\uffff\66\uffff\65\uffff" +
		"\64\uffff\63\uffff\62\uffff\61\uffff\60\uffff\57\uffff\56\uffff\55\uffff\110\uffff" +
		"\11\313\17\313\uffff\ufffe\110\uffff\0\277\6\277\10\277\23\277\45\277\46\277\56\277" +
		"\57\277\60\277\61\277\62\277\63\277\64\277\65\277\66\277\67\277\70\277\71\277\72" +
		"\277\73\277\74\277\75\277\76\277\77\277\100\277\101\277\102\277\103\277\104\277\105" +
		"\277\106\277\uffff\ufffe\12\240\42\uffff\24\240\uffff\ufffe\12\237\42\237\24\237" +
		"\uffff\ufffe\11\211\41\uffff\26\211\uffff\ufffe\11\212\41\212\26\212\uffff\ufffe");

	private static final short[] lapg_sym_goto = TMLexer.unpack_short(167,
		"\0\2\4\25\44\44\44\73\103\105\112\115\121\122\123\125\145\152\166\201\230\237\310" +
		"\325\344\347\360\367\376\u0101\u0102\u0107\u010a\u010f\u011a\u011d\u0132\u014a\u0162" +
		"\u01b7\u01c4\u01d1\u01d7\u01d8\u01d9\u01da\u01ef\u0245\u029e\u02f4\u034a\u03a3\u03f9" +
		"\u044f\u04a5\u04fb\u0551\u05a7\u05fd\u0653\u06a9\u06ff\u0755\u07b0\u0809\u0862\u08b8" +
		"\u090e\u0964\u09bb\u0a11\u0a67\u0a67\u0a78\u0a79\u0a7a\u0a7b\u0a7c\u0a7d\u0a7f\u0a80" +
		"\u0a81\u0aa9\u0acf\u0adc\u0ae1\u0ae3\u0ae7\u0ae9\u0aea\u0aec\u0aee\u0af0\u0af1\u0af2" +
		"\u0af3\u0af5\u0af7\u0af9\u0afb\u0afc\u0afe\u0b00\u0b04\u0b07\u0b08\u0b0a\u0b0c\u0b0e" +
		"\u0b0f\u0b19\u0b24\u0b2f\u0b3a\u0b4d\u0b5c\u0b68\u0b78\u0b88\u0b9a\u0bae\u0bc2\u0bd2" +
		"\u0be6\u0bfb\u0c00\u0c04\u0c17\u0c2b\u0c2d\u0c35\u0c38\u0c3a\u0c3b\u0c3f\u0c42\u0c45" +
		"\u0c4b\u0c4d\u0c5a\u0c5d\u0c60\u0c71\u0c89\u0c8a\u0c8b\u0c8d\u0c8e\u0c8f\u0c90\u0c91" +
		"\u0c92\u0c93\u0c96\u0c99\u0c9a\u0ca4\u0cb7\u0cca\u0ccb\u0ccc\u0ccd\u0cce\u0ccf\u0cd0" +
		"\u0cd1\u0cd2");

	private static final short[] lapg_sym_from = TMLexer.unpack_short(3282,
		"\u0179\u017a\150\216\1\6\26\36\41\63\72\73\110\117\151\265\367\u010b\u0123\u0129" +
		"\u012a\1\6\26\41\57\72\73\110\117\265\343\u010b\u0123\u0129\u012a\107\131\140\161" +
		"\227\270\302\304\305\332\333\335\366\370\u0100\u0101\u0105\u0110\u011a\u011c\u011d" +
		"\u013f\u0150\160\237\240\243\334\336\337\u011e\40\66\321\u0138\u015c\u0172\u0173" +
		"\364\u0157\u0158\65\127\275\353\362\362\145\256\34\62\106\122\261\264\277\353\u0118" +
		"\u0119\u011b\u014c\u014e\u014f\u0154\u0167\21\151\204\214\253\24\52\53\101\147\151" +
		"\204\214\253\261\324\u0149\46\77\153\275\301\316\330\331\377\u0113\u0139\1\6\41\107" +
		"\110\117\131\151\204\214\227\253\265\270\332\333\335\370\u0110\u011a\u011c\u011d" +
		"\u0150\25\147\151\204\214\253\364\20\30\32\130\151\160\204\214\227\240\243\253\270" +
		"\272\273\302\305\316\332\333\335\337\366\370\371\372\373\374\u0101\u0102\u0109\u0110" +
		"\u011a\u011c\u011d\u0121\u0133\u0134\u0150\u015f\u0161\56\102\104\177\204\214\253" +
		"\365\u0132\u0138\u0159\u015c\u016c\227\270\302\305\332\333\335\366\370\u0101\u0110" +
		"\u011a\u011c\u011d\u0150\356\367\u0130\10\43\151\160\204\214\243\253\u0135\52\54" +
		"\151\204\214\253\324\151\204\214\253\315\u013b\u0170\315\u013b\u0170\275\151\204" +
		"\214\253\312\267\u012b\u012d\371\u0133\u0134\u015f\u0161\151\204\214\253\306\u0106" +
		"\u0138\u0142\u015c\u0172\u0173\364\u0157\u0158\227\270\302\305\316\332\333\335\366" +
		"\370\372\373\374\u0101\u0102\u0109\u0110\u011a\u011c\u011d\u0150\140\151\161\167" +
		"\204\214\227\253\270\301\302\305\332\333\335\366\370\u0101\u0109\u0110\u011a\u011c" +
		"\u011d\u0150\1\6\40\41\110\117\131\157\161\227\265\270\305\332\333\335\366\370\u0101" +
		"\u0110\u011a\u011c\u011d\u0150\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117" +
		"\120\126\131\140\144\151\157\161\165\171\172\173\204\214\217\223\224\227\230\232" +
		"\233\234\253\264\265\267\270\271\302\305\316\325\332\333\335\341\346\357\360\361" +
		"\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d" +
		"\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1\6\26\41" +
		"\72\73\110\117\265\u010b\u0123\u0129\u012a\1\6\26\41\72\73\110\117\265\u010b\u0123" +
		"\u0129\u012a\1\6\41\110\117\265\366\314\22\227\270\302\305\316\332\333\335\366\370" +
		"\372\373\374\u0101\u0102\u0109\u0110\u011a\u011c\u011d\u0150\1\2\6\13\26\31\35\36" +
		"\40\41\55\72\73\75\107\110\117\120\125\126\131\140\144\151\157\161\165\171\172\173" +
		"\204\214\217\223\224\227\230\232\233\234\253\264\265\267\270\271\302\305\316\325" +
		"\332\333\335\341\346\357\360\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b" +
		"\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150" +
		"\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126" +
		"\131\140\144\151\157\160\161\165\171\172\173\204\214\217\223\224\227\230\232\233" +
		"\234\240\243\253\264\265\267\270\271\302\305\316\325\332\333\335\337\341\346\357" +
		"\360\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a" +
		"\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163" +
		"\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161" +
		"\165\171\172\173\204\214\217\223\224\227\230\232\233\234\253\264\265\266\267\270" +
		"\271\302\305\316\325\332\333\335\341\346\357\360\361\366\370\371\372\373\374\u0101" +
		"\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133" +
		"\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75" +
		"\107\110\117\120\126\131\140\144\151\157\161\165\171\172\173\204\214\217\223\224" +
		"\227\230\232\233\234\253\264\265\266\267\270\271\302\305\316\325\332\333\335\341" +
		"\346\357\360\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114" +
		"\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161" +
		"\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151" +
		"\157\160\161\165\171\172\173\204\214\217\223\224\227\230\232\233\234\240\243\253" +
		"\264\265\267\270\271\302\305\316\325\332\333\335\337\341\346\357\360\361\366\370" +
		"\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123" +
		"\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31" +
		"\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\156\157\161\165\171" +
		"\172\173\204\214\217\223\224\227\230\232\233\234\253\264\265\267\270\271\302\305" +
		"\316\325\332\333\335\341\346\357\360\361\366\370\371\372\373\374\u0101\u0102\u0109" +
		"\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135" +
		"\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117" +
		"\120\126\131\140\144\151\156\157\161\165\171\172\173\204\214\217\223\224\227\230" +
		"\232\233\234\253\264\265\267\270\271\302\305\316\325\332\333\335\341\346\357\360" +
		"\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c" +
		"\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1" +
		"\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\156\157" +
		"\161\165\171\172\173\204\214\217\223\224\227\230\232\233\234\253\264\265\267\270" +
		"\271\302\305\316\325\332\333\335\341\346\357\360\361\366\370\371\372\373\374\u0101" +
		"\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133" +
		"\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75" +
		"\107\110\117\120\126\131\140\144\151\156\157\161\165\171\172\173\204\214\217\223" +
		"\224\227\230\232\233\234\253\264\265\267\270\271\302\305\316\325\332\333\335\341" +
		"\346\357\360\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114" +
		"\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161" +
		"\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151" +
		"\156\157\161\165\171\172\173\204\214\217\223\224\227\230\232\233\234\253\264\265" +
		"\267\270\271\302\305\316\325\332\333\335\341\346\357\360\361\366\370\371\372\373" +
		"\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d" +
		"\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41" +
		"\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161\165\171\172\173\204\214" +
		"\217\223\224\227\230\232\233\234\253\262\264\265\267\270\271\302\305\316\325\332" +
		"\333\335\341\346\357\360\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110" +
		"\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159" +
		"\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131" +
		"\140\144\151\157\161\165\171\172\173\204\214\217\223\224\227\230\232\233\234\253" +
		"\262\264\265\267\270\271\302\305\316\325\332\333\335\341\346\357\360\361\366\370" +
		"\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123" +
		"\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31" +
		"\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161\165\171\172" +
		"\173\204\214\217\223\224\227\230\232\233\234\253\262\264\265\267\270\271\302\305" +
		"\316\325\332\333\335\341\346\357\360\361\366\370\371\372\373\374\u0101\u0102\u0109" +
		"\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135" +
		"\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117" +
		"\120\126\131\140\144\151\157\161\165\171\172\173\204\214\217\223\224\227\230\232" +
		"\233\234\253\262\264\265\267\270\271\302\305\316\325\332\333\335\341\346\357\360" +
		"\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c" +
		"\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1" +
		"\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161" +
		"\165\171\172\173\204\214\217\223\224\227\230\232\233\234\253\257\264\265\267\270" +
		"\271\302\305\316\325\332\333\335\341\346\357\360\361\366\370\371\372\373\374\u0101" +
		"\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133" +
		"\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75" +
		"\107\110\117\120\126\131\140\144\151\157\161\165\171\172\173\204\214\217\223\224" +
		"\227\230\232\233\234\253\264\265\267\270\271\302\305\316\325\332\333\335\341\346" +
		"\357\360\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a" +
		"\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0151\u0159\u015f\u0161" +
		"\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151" +
		"\157\160\161\165\171\172\173\204\214\217\223\224\227\230\231\232\233\234\240\243" +
		"\253\264\265\267\270\271\302\305\316\325\332\333\335\337\341\346\357\360\361\366" +
		"\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d" +
		"\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0151\u0159\u015f\u0161\u0163\1" +
		"\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\160" +
		"\161\165\171\172\173\204\214\217\223\224\227\230\232\233\234\240\243\253\264\265" +
		"\267\270\271\302\305\316\325\332\333\335\337\341\346\357\360\361\366\370\371\372" +
		"\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b" +
		"\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36" +
		"\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\160\161\165\171\172\173" +
		"\204\214\217\223\224\227\230\232\233\234\240\243\253\264\265\267\270\271\302\305" +
		"\316\325\332\333\335\337\341\346\357\360\361\366\370\371\372\373\374\u0101\u0102" +
		"\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134" +
		"\u0135\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110" +
		"\117\120\126\131\140\144\151\157\161\165\171\172\173\204\214\217\223\224\227\230" +
		"\232\233\234\253\264\265\267\270\271\302\305\316\325\332\333\335\341\346\357\360" +
		"\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c" +
		"\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0151\u0159\u015f\u0161\u0163" +
		"\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\117\120\126\131\140\144\151\157\161" +
		"\165\171\172\173\204\214\217\223\224\227\230\232\233\234\253\264\265\267\270\271" +
		"\302\305\316\325\332\333\335\341\346\357\360\361\366\370\371\372\373\374\u0101\u0102" +
		"\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134" +
		"\u0135\u0150\u0151\u0159\u015f\u0161\u0163\0\1\2\6\13\26\31\35\36\40\41\55\72\73" +
		"\75\107\110\117\120\126\131\140\144\151\157\161\165\171\172\173\204\214\217\223\224" +
		"\227\230\232\233\234\253\264\265\267\270\271\302\305\316\325\332\333\335\341\346" +
		"\357\360\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a" +
		"\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163" +
		"\1\2\6\13\20\26\31\35\36\40\41\55\72\73\75\103\107\110\117\120\126\131\140\144\151" +
		"\157\161\165\171\172\173\204\214\217\223\224\227\230\232\233\234\253\264\265\267" +
		"\270\271\302\305\316\325\332\333\335\341\346\357\360\361\366\370\371\372\373\374" +
		"\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f" +
		"\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\64" +
		"\72\73\75\107\110\117\120\126\131\140\144\151\157\161\165\171\172\173\204\214\217" +
		"\223\224\227\230\232\233\234\253\264\265\267\270\271\302\305\316\325\332\333\335" +
		"\341\346\357\360\361\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u0111" +
		"\u0114\u011a\u011c\u011d\u0123\u012b\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f" +
		"\u0161\u0163\1\2\6\13\26\31\35\36\40\41\55\72\73\75\107\110\111\117\120\126\131\140" +
		"\144\151\157\161\165\171\172\173\204\214\217\223\224\227\230\232\233\234\253\264" +
		"\265\267\270\271\302\305\316\325\332\333\335\341\346\357\360\361\366\370\371\372" +
		"\373\374\u0101\u0102\u0109\u010b\u0110\u0111\u0114\u011a\u011c\u011d\u0123\u012b" +
		"\u012d\u012f\u0133\u0134\u0135\u0150\u0159\u015f\u0161\u0163\227\270\302\305\332" +
		"\333\335\366\370\u0101\u0109\u0110\u011a\u011c\u011d\u0150\u0153\225\0\0\40\66\20" +
		"\103\22\40\26\75\107\126\131\140\161\165\173\223\227\230\233\234\267\270\271\302" +
		"\305\316\325\332\333\335\361\366\370\372\374\u0101\u0102\u0109\u0110\u0111\u011a" +
		"\u011c\u011d\u012b\u012d\u0150\1\6\26\41\72\73\110\117\227\265\270\302\305\316\332" +
		"\333\335\366\370\371\372\373\374\u0101\u0102\u0109\u010b\u0110\u011a\u011c\u011d" +
		"\u0123\u0133\u0134\u0135\u0150\u015f\u0161\144\171\217\224\232\264\346\357\360\u0114" +
		"\u012f\u0159\u0163\130\160\240\243\337\151\204\151\204\214\253\150\216\107\107\131" +
		"\107\131\107\131\256\u0121\u0151\107\131\107\131\172\341\126\173\140\140\161\140" +
		"\161\160\240\243\337\330\331\u0113\156\140\161\217\346\224\u012f\u0114\227\270\332" +
		"\333\335\370\u011a\u011c\u011d\u0150\227\270\332\333\335\370\u0110\u011a\u011c\u011d" +
		"\u0150\227\270\332\333\335\370\u0110\u011a\u011c\u011d\u0150\227\270\332\333\335" +
		"\370\u0110\u011a\u011c\u011d\u0150\227\270\302\304\305\332\333\335\366\370\u0100" +
		"\u0101\u0105\u0110\u011a\u011c\u011d\u013f\u0150\227\270\302\305\332\333\335\366" +
		"\370\u0101\u0110\u011a\u011c\u011d\u0150\227\270\302\332\333\335\370\u0110\u011a" +
		"\u011c\u011d\u0150\227\270\302\305\332\333\335\366\370\u0101\u0109\u0110\u011a\u011c" +
		"\u011d\u0150\227\270\302\305\332\333\335\366\370\u0101\u0109\u0110\u011a\u011c\u011d" +
		"\u0150\227\270\302\305\316\332\333\335\366\370\u0101\u0102\u0109\u0110\u011a\u011c" +
		"\u011d\u0150\227\270\302\305\316\332\333\335\366\370\372\374\u0101\u0102\u0109\u0110" +
		"\u011a\u011c\u011d\u0150\227\270\302\305\316\332\333\335\366\370\372\374\u0101\u0102" +
		"\u0109\u0110\u011a\u011c\u011d\u0150\227\270\302\305\332\333\335\366\370\u0101\u0109" +
		"\u0110\u011a\u011c\u011d\u0150\227\270\302\305\316\332\333\335\366\370\372\374\u0101" +
		"\u0102\u0109\u0110\u011a\u011c\u011d\u0150\227\270\302\305\316\332\333\335\366\370" +
		"\372\373\374\u0101\u0102\u0109\u0110\u011a\u011c\u011d\u0150\371\u0133\u0134\u015f" +
		"\u0161\371\u0133\u015f\u0161\140\161\227\270\301\302\305\332\333\335\366\370\u0101" +
		"\u0109\u0110\u011a\u011c\u011d\u0150\140\161\167\227\270\301\302\305\332\333\335" +
		"\366\370\u0101\u0109\u0110\u011a\u011c\u011d\u0150\160\243\26\75\230\267\361\u0111" +
		"\u012b\u012d\10\43\u0135\26\75\262\26\72\73\u0123\267\u012b\u012d\267\u012b\u012d" +
		"\1\6\41\110\117\265\55\120\1\6\26\41\72\73\110\117\265\u010b\u0123\u0129\u012a\2" +
		"\13\31\2\13\31\227\270\302\305\332\333\335\366\370\u0101\u0109\u0110\u011a\u011c" +
		"\u011d\u0150\u0153\1\6\40\41\110\117\131\157\161\227\265\270\305\332\333\335\366" +
		"\370\u0101\u0110\u011a\u011c\u011d\u0150\3\22\20\103\130\256\343\u0121\u0153\126" +
		"\233\234\325\330\331\u0113\217\227\270\332\333\335\370\u011a\u011c\u011d\u0150\227" +
		"\270\302\304\305\332\333\335\366\370\u0100\u0101\u0105\u0110\u011a\u011c\u011d\u013f" +
		"\u0150\140\161\227\270\301\302\305\332\333\335\366\370\u0101\u0109\u0110\u011a\u011c" +
		"\u011d\u0150\230\26\26\26\55\55\6\6");

	private static final short[] lapg_sym_to = TMLexer.unpack_short(3282,
		"\u017b\u017c\175\175\4\4\4\62\4\106\4\4\4\4\177\4\u0130\4\4\4\4\5\5\5\5\104\5\5\5" +
		"\5\5\u0120\5\5\5\5\125\125\156\156\266\266\266\266\266\266\266\266\266\266\266\266" +
		"\266\266\266\266\266\266\266\227\332\333\335\u011a\u011c\u011d\u0150\64\111\u0110" +
		"\u015f\u015f\u015f\u015f\u012b\u012b\u012b\110\150\372\u0123\u0129\u012a\172\341" +
		"\60\105\124\143\345\354\375\u0124\u014a\u014b\u014d\u0164\u0165\u0166\u016f\u0175" +
		"\35\200\200\200\200\41\73\75\120\173\201\201\201\201\346\u0111\u0163\72\117\216\373" +
		"\376\u010e\u0114\u0114\u013d\u0114\373\6\6\6\126\6\6\126\202\202\202\267\202\6\267" +
		"\267\267\267\267\267\267\267\267\267\42\174\203\203\203\203\u012c\31\55\57\151\204" +
		"\151\204\204\270\151\151\204\270\370\371\270\270\270\270\270\270\151\270\270\u0133" +
		"\270\270\270\270\270\270\270\270\270\270\u0151\u0133\u0133\270\u0133\u0133\103\121" +
		"\123\251\252\254\340\u012e\u015b\u0160\u0170\u0171\u0176\271\271\271\271\271\271" +
		"\271\271\271\271\271\271\271\271\271\u0125\u0131\u015a\26\26\205\230\205\205\230" +
		"\205\26\74\76\206\206\206\206\u0112\207\207\207\207\u010c\u010c\u0177\u010d\u010d" +
		"\u0178\374\210\210\210\210\u010a\361\361\361\u0134\u0134\u0134\u0134\u0134\211\211" +
		"\211\211\u0109\u0109\u0161\u0109\u0161\u0161\u0161\u012d\u012d\u012d\272\272\272" +
		"\272\272\272\272\272\272\272\272\272\272\272\272\272\272\272\272\272\272\157\212" +
		"\157\157\212\212\157\212\157\157\157\157\157\157\157\157\157\157\157\157\157\157" +
		"\157\157\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\7\10\17\10\17\43\17\61\63" +
		"\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\115\115\170\246\115\213" +
		"\213\170\115\170\43\115\170\115\115\213\170\10\115\43\115\43\43\43\115\43\43\43\246" +
		"\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115" +
		"\170\u0135\u0135\10\43\170\u0135\u0135\170\11\11\11\11\11\11\11\11\11\11\11\11\11" +
		"\12\12\12\12\12\12\12\12\12\12\12\12\12\13\13\13\13\13\13\u012f\u010b\36\273\273" +
		"\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\273\10\17" +
		"\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\144\115\127\115\170\213\225\115" +
		"\115\170\246\115\213\213\170\115\170\43\115\170\115\115\213\170\10\115\43\115\43" +
		"\43\43\115\43\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170" +
		"\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17\43\17" +
		"\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\231\115\115\170\246" +
		"\115\213\213\170\115\170\43\115\170\115\115\231\231\213\170\10\115\43\115\43\43\43" +
		"\115\43\43\43\231\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170" +
		"\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17\43\17" +
		"\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\115\115\170\246\115" +
		"\213\213\170\115\170\43\115\170\115\115\213\170\10\357\115\43\115\43\43\43\115\43" +
		"\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10" +
		"\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17\43\17\61\63\65\10" +
		"\77\10\10\115\127\10\10\77\115\127\115\170\213\225\115\115\170\246\115\213\213\170" +
		"\115\170\43\115\170\115\115\213\170\10\360\115\43\115\43\43\43\115\43\43\43\246\170" +
		"\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115\170" +
		"\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17\43\17\61\63\65\10\77\10\10\115" +
		"\127\10\10\77\115\127\115\170\213\225\232\115\115\170\246\115\213\213\170\115\170" +
		"\43\115\170\115\115\232\232\213\170\10\115\43\115\43\43\43\115\43\43\43\232\246\170" +
		"\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115\170" +
		"\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17\43\17\61\63\65\10\77\10\10\115" +
		"\127\10\10\77\115\127\115\170\213\217\225\115\115\170\246\115\213\213\170\115\170" +
		"\43\115\170\115\115\213\170\10\115\43\115\43\43\43\115\43\43\43\246\170\170\170\115" +
		"\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115\170\u0135\u0135" +
		"\10\43\170\u0135\u0135\170\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77" +
		"\115\127\115\170\213\220\225\115\115\170\246\115\213\213\170\115\170\43\115\170\115" +
		"\115\213\170\10\115\43\115\43\43\43\115\43\43\43\246\170\170\170\115\43\43\u0135" +
		"\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135" +
		"\u0135\170\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170" +
		"\213\221\225\115\115\170\246\115\213\213\170\115\170\43\115\170\115\115\213\170\10" +
		"\115\43\115\43\43\43\115\43\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43" +
		"\43\10\43\115\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10" +
		"\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\222\225" +
		"\115\115\170\246\115\213\213\170\115\170\43\115\170\115\115\213\170\10\115\43\115" +
		"\43\43\43\115\43\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115" +
		"\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17\43" +
		"\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\223\225\115\115\170" +
		"\246\115\213\213\170\115\170\43\115\170\115\115\213\170\10\115\43\115\43\43\43\115" +
		"\43\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43" +
		"\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17\43\17\61\63\65" +
		"\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\115\115\170\246\115\213\213" +
		"\170\115\170\43\115\170\115\115\213\347\170\10\115\43\115\43\43\43\115\43\43\43\246" +
		"\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115" +
		"\170\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17\43\17\61\63\65\10\77\10\10" +
		"\115\127\10\10\77\115\127\115\170\213\225\115\115\170\246\115\213\213\170\115\170" +
		"\43\115\170\115\115\213\350\170\10\115\43\115\43\43\43\115\43\43\43\246\170\170\170" +
		"\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115\170\u0135\u0135" +
		"\10\43\170\u0135\u0135\170\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77" +
		"\115\127\115\170\213\225\115\115\170\246\115\213\213\170\115\170\43\115\170\115\115" +
		"\213\351\170\10\115\43\115\43\43\43\115\43\43\43\246\170\170\170\115\43\43\u0135" +
		"\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135" +
		"\u0135\170\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170" +
		"\213\225\115\115\170\246\115\213\213\170\115\170\43\115\170\115\115\213\352\170\10" +
		"\115\43\115\43\43\43\115\43\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43" +
		"\43\10\43\115\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10" +
		"\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\115" +
		"\115\170\246\115\213\213\170\115\170\43\115\170\115\115\213\344\170\10\115\43\115" +
		"\43\43\43\115\43\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115" +
		"\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17\43" +
		"\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\115\115\170\246" +
		"\115\213\213\170\115\170\43\115\170\115\115\213\170\10\115\43\115\43\43\43\115\43" +
		"\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10" +
		"\115\115\170\u0135\u0135\10\43\u0168\170\u0135\u0135\170\10\17\10\17\43\17\61\63" +
		"\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\233\115\115\170\246\115" +
		"\213\213\170\115\170\43\115\325\170\115\115\233\233\213\170\10\115\43\115\43\43\43" +
		"\115\43\43\43\233\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170" +
		"\43\43\43\10\115\115\170\u0135\u0135\10\43\u0169\170\u0135\u0135\170\10\17\10\17" +
		"\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\234\115\115" +
		"\170\246\115\213\213\170\115\170\43\115\170\115\115\234\234\213\170\10\115\43\115" +
		"\43\43\43\115\43\43\43\234\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43" +
		"\115\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17" +
		"\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\235\115\115" +
		"\170\246\115\213\213\170\115\170\43\115\170\115\115\235\235\213\170\10\115\43\115" +
		"\43\43\43\115\43\43\43\235\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43" +
		"\115\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\10\17\10\17" +
		"\43\17\61\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\115\115\170" +
		"\246\115\213\213\170\115\170\43\115\170\115\115\213\170\10\115\43\115\43\43\43\115" +
		"\43\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43" +
		"\10\115\115\170\u0135\u0135\10\43\u016a\170\u0135\u0135\170\10\17\10\17\43\17\61" +
		"\63\65\10\77\10\10\115\127\10\10\77\115\127\115\170\213\225\115\115\170\246\115\213" +
		"\213\170\115\170\43\115\170\115\115\213\170\10\115\43\115\43\43\43\115\43\43\43\246" +
		"\170\170\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115" +
		"\170\u0135\u0135\10\43\u016b\170\u0135\u0135\170\2\10\17\10\17\43\17\61\63\65\10" +
		"\77\10\10\115\127\10\10\77\115\127\115\170\213\225\115\115\170\246\115\213\213\170" +
		"\115\170\43\115\170\115\115\213\170\10\115\43\115\43\43\43\115\43\43\43\246\170\170" +
		"\170\115\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115\170\u0135" +
		"\u0135\10\43\170\u0135\u0135\170\10\17\10\17\32\43\17\61\63\65\10\77\10\10\115\32" +
		"\127\10\10\77\115\127\115\170\213\225\115\115\170\246\115\213\213\170\115\170\43" +
		"\115\170\115\115\213\170\10\115\43\115\43\43\43\115\43\43\43\246\170\170\170\115" +
		"\43\43\u0135\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115\170\u0135\u0135" +
		"\10\43\170\u0135\u0135\170\10\17\10\17\43\17\61\63\65\10\77\107\10\10\115\127\10" +
		"\10\77\115\127\115\170\213\225\115\115\170\246\115\213\213\170\115\170\43\115\170" +
		"\115\115\213\170\10\115\43\115\43\43\43\115\43\43\43\246\170\170\170\115\43\43\u0135" +
		"\43\10\43\43\43\43\10\43\115\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135" +
		"\u0135\170\10\17\10\17\43\17\61\63\65\10\77\10\10\115\127\10\140\10\77\115\127\115" +
		"\170\213\225\115\115\170\246\115\213\213\170\115\170\43\115\170\115\115\213\170\10" +
		"\115\43\115\43\43\43\115\43\43\43\246\170\170\170\115\43\43\u0135\43\10\43\43\43" +
		"\43\10\43\115\170\43\43\43\10\115\115\170\u0135\u0135\10\43\170\u0135\u0135\170\274" +
		"\274\274\274\274\274\274\274\274\274\274\274\274\274\274\274\274\265\u0179\3\66\112" +
		"\33\33\37\67\44\44\130\145\130\160\160\243\145\262\275\44\327\327\44\275\367\275" +
		"\275\275\327\275\275\275\44\275\275\u0139\u0139\275\275\275\275\44\275\275\275\44" +
		"\44\275\14\14\45\14\45\45\14\14\276\14\276\276\276\276\276\276\276\276\276\u0136" +
		"\276\276\276\276\276\276\u0143\276\276\276\276\45\u0136\u0136\u015e\276\u0136\u0136" +
		"\171\245\257\263\326\355\257\u0126\u0127\u0148\263\355\u0174\152\236\236\236\236" +
		"\214\253\215\215\255\255\176\256\131\132\154\133\133\134\134\342\u0152\u016c\135" +
		"\135\136\136\247\u011f\146\250\161\162\241\163\163\237\334\336\u011e\u0115\u0115" +
		"\u0115\224\164\164\260\u0122\264\u0159\u0149\277\365\u0118\u0119\u011b\u0132\u014c" +
		"\u014e\u014f\u0167\300\300\300\300\300\300\u0145\300\300\300\300\301\301\301\301" +
		"\301\301\301\301\301\301\301\302\302\302\302\302\302\302\302\302\302\302\303\303" +
		"\303\303\303\303\303\303\303\303\303\303\303\303\303\303\303\303\303\304\304\u0100" +
		"\u0105\304\304\304\u0105\304\u013f\304\304\304\304\304\305\366\u0101\305\305\305" +
		"\305\305\305\305\305\305\306\306\306\u0106\306\306\306\u0106\306\u0106\u0142\306" +
		"\306\306\306\306\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307\307" +
		"\310\310\310\310\u010f\310\310\310\310\310\310\u010f\310\310\310\310\310\310\311" +
		"\311\311\311\311\311\311\311\311\311\u013a\u013c\311\311\311\311\311\311\311\311" +
		"\312\312\312\312\312\312\312\312\312\312\312\312\312\312\312\312\312\312\312\312" +
		"\313\313\313\313\313\313\313\313\313\313\313\313\313\313\313\313\314\314\314\314" +
		"\314\314\314\314\314\314\314\314\314\314\314\314\314\314\314\314\315\315\315\315" +
		"\315\315\315\315\315\315\315\u013b\315\315\315\315\315\315\315\315\315\u0137\u0137" +
		"\u015d\u0137\u0137\u0138\u015c\u0172\u0173\165\165\316\316\377\u0102\u0102\316\316" +
		"\316\u0102\316\u0102\u0102\316\316\316\316\316\166\166\244\166\166\166\166\166\166" +
		"\166\166\166\166\166\166\166\166\166\166\166\240\337\46\46\323\362\u0128\u0146\362" +
		"\362\27\27\27\47\116\353\50\113\114\u0154\363\363\363\364\u0157\u0158\u017a\23\71" +
		"\137\141\356\100\142\15\15\51\15\51\51\15\15\15\u0144\51\u0155\u0156\20\30\56\21" +
		"\21\21\317\317\317\317\317\317\317\317\317\317\317\317\317\317\317\317\u016d\16\16" +
		"\70\16\16\16\155\226\242\320\16\320\u0107\320\320\320\u0107\320\u0107\320\320\320" +
		"\320\320\22\40\34\122\153\343\u0121\u0153\u016e\147\330\331\u0113\u0116\u0117\u0147" +
		"\261\321\321\321\321\321\321\321\321\321\321\322\322\u0103\u0104\u0108\322\322\322" +
		"\u0108\322\u013e\u0140\u0141\322\322\322\322\u0162\322\167\167\167\167\167\167\167" +
		"\167\167\167\167\167\167\167\167\167\167\167\167\324\52\53\54\101\102\24\25");

	private static final short[] tmRuleLen = TMLexer.unpack_short(222,
		"\5\4\7\4\3\3\4\4\3\3\1\1\2\1\1\3\3\2\1\1\1\1\1\1\1\1\1\1\1\1\3\2\1\1\2\2\1\1\1\1" +
		"\3\10\3\2\3\1\1\1\1\4\3\1\3\1\1\2\2\1\1\7\6\6\5\6\5\5\4\2\4\3\3\1\1\2\1\1\1\4\4\7" +
		"\5\2\1\1\2\1\3\1\4\3\3\2\3\2\2\1\1\3\3\2\2\3\3\4\3\1\2\2\1\1\1\1\2\1\3\3\1\2\1\3" +
		"\3\3\1\3\1\3\6\6\2\2\4\4\2\1\3\2\1\3\3\1\5\2\2\3\1\3\3\3\1\1\1\1\1\1\2\1\3\3\1\3" +
		"\3\1\1\5\3\1\3\1\1\1\1\1\1\3\1\1\2\0\2\0\1\0\1\0\1\0\1\0\1\0\1\0\3\1\1\0\1\0\3\1" +
		"\3\1\1\0\2\1\3\1\3\1\3\1\1\0\3\1\1\0\3\1\1\0");

	private static final short[] tmRuleSymbol = TMLexer.unpack_short(222,
		"\112\112\113\113\114\115\116\117\117\120\120\121\122\122\123\124\124\125\125\126" +
		"\126\126\126\126\126\126\126\126\126\126\126\126\127\130\130\130\131\131\131\131" +
		"\132\133\133\134\135\136\136\136\136\137\140\141\142\142\143\143\143\144\144\145" +
		"\145\145\145\145\145\145\145\146\146\146\146\146\146\147\150\150\150\151\151\151" +
		"\151\152\152\153\153\154\154\155\156\156\156\156\156\156\156\156\156\157\160\160" +
		"\160\161\161\162\162\163\163\163\164\164\164\165\165\166\166\166\167\167\170\170" +
		"\170\171\172\172\173\173\173\173\173\173\173\173\174\174\174\174\175\175\175\176" +
		"\177\177\177\200\201\202\202\203\204\204\204\204\205\205\206\206\206\206\207\207" +
		"\207\210\210\210\210\210\211\212\212\212\212\213\214\214\215\216\217\217\220\220" +
		"\221\221\222\222\223\223\224\224\225\225\226\226\227\227\230\230\231\231\232\232" +
		"\233\233\234\234\235\235\236\236\237\237\240\240\241\241\242\242\243\243\244\244" +
		"\245\245");

	protected static final String[] tmSymbolNames = new String[] {
		"eoi",
		"regexp",
		"scon",
		"icon",
		"_skip",
		"_skip_comment",
		"'%'",
		"'::='",
		"'::'",
		"'|'",
		"'||'",
		"'='",
		"'=='",
		"'!='",
		"'=>'",
		"';'",
		"'.'",
		"','",
		"':'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'{~'",
		"'}'",
		"'<'",
		"'>'",
		"'*'",
		"'+'",
		"'+='",
		"'?'",
		"'!'",
		"'~'",
		"'&'",
		"'&&'",
		"'$'",
		"'@'",
		"error",
		"ID",
		"Ltrue",
		"Lfalse",
		"Lnew",
		"Lseparator",
		"Las",
		"Limport",
		"Lset",
		"Lbrackets",
		"Linline",
		"Lprio",
		"Lshift",
		"Lreturns",
		"Linput",
		"Lleft",
		"Lright",
		"Lnonassoc",
		"Lparam",
		"Lstring",
		"Lbool",
		"Lint",
		"Lsymbol",
		"Lnoeoi",
		"Lsoft",
		"Lclass",
		"Linterface",
		"Lvoid",
		"Lspace",
		"Llayout",
		"Llanguage",
		"Llalr",
		"Llexer",
		"Lparser",
		"Lreduce",
		"code",
		"'{'",
		"input",
		"header",
		"lexer_section",
		"parser_section",
		"parsing_algorithm",
		"import_",
		"option",
		"identifier",
		"symref",
		"symref_noargs",
		"type",
		"type_part_list",
		"type_part",
		"pattern",
		"lexer_parts",
		"lexer_part",
		"named_pattern",
		"lexeme",
		"lexeme_transition",
		"lexeme_attrs",
		"lexeme_attribute",
		"lexer_directive",
		"state_selector",
		"stateref",
		"lexer_state",
		"grammar_parts",
		"grammar_part",
		"nonterm",
		"nonterm_type",
		"implements",
		"assoc",
		"directive",
		"inputref",
		"references",
		"references_cs",
		"rules",
		"rule0",
		"predicate",
		"rhsPrefix",
		"rhsSuffix",
		"ruleAction",
		"rhsParts",
		"rhsPart",
		"rhsAnnotated",
		"rhsAssignment",
		"rhsOptional",
		"rhsCast",
		"rhsUnordered",
		"rhsClass",
		"rhsPrimary",
		"setPrimary",
		"setExpression",
		"annotations",
		"annotation",
		"nonterm_params",
		"param_ref",
		"symref_args",
		"keyval_arg",
		"param_type",
		"param_value",
		"predicate_primary",
		"predicate_expression",
		"expression",
		"map_entry",
		"literal",
		"name",
		"qualified_id",
		"command",
		"syntax_problem",
		"import__optlist",
		"option_optlist",
		"parsing_algorithmopt",
		"typeopt",
		"lexeme_transitionopt",
		"iconopt",
		"lexeme_attrsopt",
		"commandopt",
		"lexer_state_list_Comma_separated",
		"identifieropt",
		"implementsopt",
		"inputref_list_Comma_separated",
		"rule0_list_Or_separated",
		"rhsSuffixopt",
		"annotation_list",
		"param_ref_list_Comma_separated",
		"param_value_list_Comma_separated",
		"keyval_arg_list_Comma_separated",
		"keyval_arg_list_Comma_separated_opt",
		"map_entry_list_Comma_separated",
		"map_entry_list_Comma_separated_opt",
		"expression_list_Comma_separated",
		"expression_list_Comma_separated_opt",
	};

	public interface Nonterminals extends Tokens {
		// non-terminals
		static final int input = 74;
		static final int header = 75;
		static final int lexer_section = 76;
		static final int parser_section = 77;
		static final int parsing_algorithm = 78;
		static final int import_ = 79;
		static final int option = 80;
		static final int identifier = 81;
		static final int symref = 82;
		static final int symref_noargs = 83;
		static final int type = 84;
		static final int type_part_list = 85;
		static final int type_part = 86;
		static final int pattern = 87;
		static final int lexer_parts = 88;
		static final int lexer_part = 89;
		static final int named_pattern = 90;
		static final int lexeme = 91;
		static final int lexeme_transition = 92;
		static final int lexeme_attrs = 93;
		static final int lexeme_attribute = 94;
		static final int lexer_directive = 95;
		static final int state_selector = 96;
		static final int stateref = 97;
		static final int lexer_state = 98;
		static final int grammar_parts = 99;
		static final int grammar_part = 100;
		static final int nonterm = 101;
		static final int nonterm_type = 102;
		static final int _implements = 103;
		static final int assoc = 104;
		static final int directive = 105;
		static final int inputref = 106;
		static final int references = 107;
		static final int references_cs = 108;
		static final int rules = 109;
		static final int rule0 = 110;
		static final int predicate = 111;
		static final int rhsPrefix = 112;
		static final int rhsSuffix = 113;
		static final int ruleAction = 114;
		static final int rhsParts = 115;
		static final int rhsPart = 116;
		static final int rhsAnnotated = 117;
		static final int rhsAssignment = 118;
		static final int rhsOptional = 119;
		static final int rhsCast = 120;
		static final int rhsUnordered = 121;
		static final int rhsClass = 122;
		static final int rhsPrimary = 123;
		static final int setPrimary = 124;
		static final int setExpression = 125;
		static final int annotations = 126;
		static final int annotation = 127;
		static final int nonterm_params = 128;
		static final int param_ref = 129;
		static final int symref_args = 130;
		static final int keyval_arg = 131;
		static final int param_type = 132;
		static final int param_value = 133;
		static final int predicate_primary = 134;
		static final int predicate_expression = 135;
		static final int expression = 136;
		static final int map_entry = 137;
		static final int literal = 138;
		static final int name = 139;
		static final int qualified_id = 140;
		static final int command = 141;
		static final int syntax_problem = 142;
		static final int import__optlist = 143;
		static final int option_optlist = 144;
		static final int parsing_algorithmopt = 145;
		static final int typeopt = 146;
		static final int lexeme_transitionopt = 147;
		static final int iconopt = 148;
		static final int lexeme_attrsopt = 149;
		static final int commandopt = 150;
		static final int lexer_state_list_Comma_separated = 151;
		static final int identifieropt = 152;
		static final int implementsopt = 153;
		static final int inputref_list_Comma_separated = 154;
		static final int rule0_list_Or_separated = 155;
		static final int rhsSuffixopt = 156;
		static final int annotation_list = 157;
		static final int param_ref_list_Comma_separated = 158;
		static final int param_value_list_Comma_separated = 159;
		static final int keyval_arg_list_Comma_separated = 160;
		static final int keyval_arg_list_Comma_separated_opt = 161;
		static final int map_entry_list_Comma_separated = 162;
		static final int map_entry_list_Comma_separated_opt = 163;
		static final int expression_list_Comma_separated = 164;
		static final int expression_list_Comma_separated_opt = 165;
	}

	public interface Rules {
		static final int lexer_directive_directiveBrackets = 49;  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs
		static final int nonterm_type_nontermTypeAST = 67;  // nonterm_type ::= Lreturns symref_noargs
		static final int nonterm_type_nontermTypeHint = 68;  // nonterm_type ::= Linline Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint2 = 69;  // nonterm_type ::= Lclass identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint3 = 70;  // nonterm_type ::= Linterface identifieropt implementsopt
		static final int nonterm_type_nontermTypeHint4 = 71;  // nonterm_type ::= Lvoid
		static final int nonterm_type_nontermTypeRaw = 72;  // nonterm_type ::= type
		static final int directive_directivePrio = 77;  // directive ::= '%' assoc references ';'
		static final int directive_directiveInput = 78;  // directive ::= '%' Linput inputref_list_Comma_separated ';'
		static final int directive_directiveParam = 79;  // directive ::= '%' Lparam identifier param_type '=' param_value ';'
		static final int directive_directiveParam2 = 80;  // directive ::= '%' Lparam identifier param_type ';'
		static final int rhsOptional_rhsQuantifier = 117;  // rhsOptional ::= rhsCast '?'
		static final int rhsCast_rhsAsLiteral = 120;  // rhsCast ::= rhsClass Las literal
		static final int rhsPrimary_rhsSymbol = 124;  // rhsPrimary ::= symref
		static final int rhsPrimary_rhsNested = 125;  // rhsPrimary ::= '(' rules ')'
		static final int rhsPrimary_rhsList = 126;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
		static final int rhsPrimary_rhsList2 = 127;  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
		static final int rhsPrimary_rhsQuantifier = 128;  // rhsPrimary ::= rhsPrimary '*'
		static final int rhsPrimary_rhsQuantifier2 = 129;  // rhsPrimary ::= rhsPrimary '+'
		static final int rhsPrimary_rhsIgnored = 130;  // rhsPrimary ::= '$' '(' rules ')'
		static final int rhsPrimary_rhsSet = 131;  // rhsPrimary ::= Lset '(' setExpression ')'
		static final int setPrimary_setSymbol = 132;  // setPrimary ::= ID symref
		static final int setPrimary_setSymbol2 = 133;  // setPrimary ::= symref
		static final int setPrimary_setCompound = 134;  // setPrimary ::= '(' setExpression ')'
		static final int setPrimary_setComplement = 135;  // setPrimary ::= '~' setPrimary
		static final int setExpression_setBinary = 137;  // setExpression ::= setExpression '|' setExpression
		static final int setExpression_setBinary2 = 138;  // setExpression ::= setExpression '&' setExpression
		static final int predicate_primary_boolPredicate = 154;  // predicate_primary ::= '!' param_ref
		static final int predicate_primary_boolPredicate2 = 155;  // predicate_primary ::= param_ref
		static final int predicate_primary_comparePredicate = 156;  // predicate_primary ::= param_ref '==' literal
		static final int predicate_primary_comparePredicate2 = 157;  // predicate_primary ::= param_ref '!=' literal
		static final int predicate_expression_predicateBinary = 159;  // predicate_expression ::= predicate_expression '&&' predicate_expression
		static final int predicate_expression_predicateBinary2 = 160;  // predicate_expression ::= predicate_expression '||' predicate_expression
		static final int expression_instance = 163;  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
		static final int expression_array = 164;  // expression ::= '[' expression_list_Comma_separated_opt ']'
		static final int literal_literal = 167;  // literal ::= scon
		static final int literal_literal2 = 168;  // literal ::= icon
		static final int literal_literal3 = 169;  // literal ::= Ltrue
		static final int literal_literal4 = 170;  // literal ::= Lfalse
	}

	/**
	 * -3-n   Lookahead (state id)
	 * -2     Error
	 * -1     Shift
	 * 0..n   Reduce (rule index)
	 */
	protected static int tmAction(int state, int symbol) {
		int p;
		if (tmAction[state] < -2) {
			for (p = -tmAction[state] - 3; tmLalr[p] >= 0; p += 2) {
				if (tmLalr[p] == symbol) {
					break;
				}
			}
			return tmLalr[p + 1];
		}
		return tmAction[state];
	}

	protected static int tmGoto(int state, int symbol) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol + 1] - 1;
		int i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if (i == state) {
				return lapg_sym_to[e];
			} else if (i < state) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	protected int tmHead;
	protected LapgSymbol[] tmStack;
	protected LapgSymbol tmNext;
	protected TMLexer tmLexer;

	private Object parse(TMLexer lexer, int initialState, int finalState) throws IOException, ParseException {

		tmLexer = lexer;
		tmStack = new LapgSymbol[1024];
		tmHead = 0;
		int tmShiftsAfterError = 4;

		tmStack[0] = new LapgSymbol();
		tmStack[0].state = initialState;
		tmNext = tmLexer.next();

		while (tmStack[tmHead].state != finalState) {
			int action = tmAction(tmStack[tmHead].state, tmNext.symbol);

			if (action >= 0) {
				reduce(action);
			} else if (action == -1) {
				shift();
				tmShiftsAfterError++;
			}

			if (action == -2 || tmStack[tmHead].state == -1) {
				if (restore()) {
					if (tmShiftsAfterError >= 4) {
						reporter.error(MessageFormat.format("syntax error before line {0}", tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
					}
					if (tmShiftsAfterError <= 1) {
						tmNext = tmLexer.next();
					}
					tmShiftsAfterError = 0;
					continue;
				}
				if (tmHead < 0) {
					tmHead = 0;
					tmStack[0] = new LapgSymbol();
					tmStack[0].state = initialState;
				}
				break;
			}
		}

		if (tmStack[tmHead].state != finalState) {
			if (tmShiftsAfterError >= 4) {
				reporter.error(MessageFormat.format("syntax error before line {0}",
								tmLexer.getTokenLine()), tmNext.line, tmNext.offset, tmNext.endoffset);
			}
			throw new ParseException();
		}
		return tmStack[tmHead - 1].value;
	}

	protected boolean restore() {
		if (tmNext.symbol == 0) {
			return false;
		}
		while (tmHead >= 0 && tmGoto(tmStack[tmHead].state, 37) == -1) {
			dispose(tmStack[tmHead]);
			tmStack[tmHead] = null;
			tmHead--;
		}
		if (tmHead >= 0) {
			tmStack[++tmHead] = new LapgSymbol();
			tmStack[tmHead].symbol = 37;
			tmStack[tmHead].value = null;
			tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, 37);
			tmStack[tmHead].line = tmNext.line;
			tmStack[tmHead].offset = tmNext.offset;
			tmStack[tmHead].endoffset = tmNext.endoffset;
			return true;
		}
		return false;
	}

	protected void shift() throws IOException {
		tmStack[++tmHead] = tmNext;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmNext.symbol);
		if (DEBUG_SYNTAX) {
			System.out.println(MessageFormat.format("shift: {0} ({1})", tmSymbolNames[tmNext.symbol], tmLexer.current()));
		}
		if (tmStack[tmHead].state != -1 && tmNext.symbol != 0) {
			tmNext = tmLexer.next();
		}
	}

	protected void reduce(int rule) {
		LapgSymbol tmLeft = new LapgSymbol();
		tmLeft.value = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]].value : null;
		tmLeft.symbol = tmRuleSymbol[rule];
		tmLeft.state = 0;
		if (DEBUG_SYNTAX) {
			System.out.println("reduce to " + tmSymbolNames[tmRuleSymbol[rule]]);
		}
		LapgSymbol startsym = (tmRuleLen[rule] != 0) ? tmStack[tmHead + 1 - tmRuleLen[rule]] : tmNext;
		tmLeft.line = startsym.line;
		tmLeft.offset = startsym.offset;
		tmLeft.endoffset = (tmRuleLen[rule] != 0) ? tmStack[tmHead].endoffset : tmNext.offset;
		applyRule(tmLeft, rule, tmRuleLen[rule]);
		for (int e = tmRuleLen[rule]; e > 0; e--) {
			cleanup(tmStack[tmHead]);
			tmStack[tmHead--] = null;
		}
		tmStack[++tmHead] = tmLeft;
		tmStack[tmHead].state = tmGoto(tmStack[tmHead - 1].state, tmLeft.symbol);
	}

	@SuppressWarnings("unchecked")
	protected void applyRule(LapgSymbol tmLeft, int tmRule, int tmLength) {
		switch (tmRule) {
			case 0:  // input ::= header import__optlist option_optlist lexer_section parser_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 4].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 3].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 2].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead - 1].value) /* lexer */,
						((List<ITmaGrammarPart>)tmStack[tmHead].value) /* parser */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 1:  // input ::= header import__optlist option_optlist lexer_section
				tmLeft.value = new TmaInput(
						((TmaHeader)tmStack[tmHead - 3].value) /* header */,
						((List<TmaImport>)tmStack[tmHead - 2].value) /* imports */,
						((List<TmaOption>)tmStack[tmHead - 1].value) /* options */,
						((List<ITmaLexerPart>)tmStack[tmHead].value) /* lexer */,
						null /* parser */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 2:  // header ::= Llanguage name '(' name ')' parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 5].value) /* name */,
						((TmaName)tmStack[tmHead - 3].value) /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 3:  // header ::= Llanguage name parsing_algorithmopt ';'
				tmLeft.value = new TmaHeader(
						((TmaName)tmStack[tmHead - 2].value) /* name */,
						null /* target */,
						((TmaParsingAlgorithm)tmStack[tmHead - 1].value) /* parsingAlgorithm */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 4:  // lexer_section ::= '::' Llexer lexer_parts
				tmLeft.value = ((List<ITmaLexerPart>)tmStack[tmHead].value);
				break;
			case 5:  // parser_section ::= '::' Lparser grammar_parts
				tmLeft.value = ((List<ITmaGrammarPart>)tmStack[tmHead].value);
				break;
			case 6:  // parsing_algorithm ::= Llalr '(' icon ')'
				tmLeft.value = new TmaParsingAlgorithm(
						((Integer)tmStack[tmHead - 1].value) /* la */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 7:  // import_ ::= Limport ID scon ';'
				tmLeft.value = new TmaImport(
						((String)tmStack[tmHead - 2].value) /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 8:  // import_ ::= Limport scon ';'
				tmLeft.value = new TmaImport(
						null /* alias */,
						((String)tmStack[tmHead - 1].value) /* file */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 9:  // option ::= ID '=' expression
				tmLeft.value = new TmaOption(
						((String)tmStack[tmHead - 2].value) /* key */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 10:  // option ::= syntax_problem
				tmLeft.value = new TmaOption(
						null /* key */,
						null /* value */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 11:  // identifier ::= ID
				tmLeft.value = new TmaIdentifier(
						((String)tmStack[tmHead].value) /* ID */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 12:  // symref ::= ID symref_args
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead - 1].value) /* name */,
						((TmaSymrefArgs)tmStack[tmHead].value) /* args */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 13:  // symref ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 14:  // symref_noargs ::= ID
				tmLeft.value = new TmaSymref(
						((String)tmStack[tmHead].value) /* name */,
						null /* args */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 15:  // type ::= '(' scon ')'
				 tmLeft.value = ((String)tmStack[tmHead - 1].value); 
				break;
			case 16:  // type ::= '(' type_part_list ')'
				 tmLeft.value = source.getText(tmStack[tmHead - 2].offset+1, tmStack[tmHead].endoffset-1); 
				break;
			case 32:  // pattern ::= regexp
				tmLeft.value = new TmaPattern(
						((String)tmStack[tmHead].value) /* regexp */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 33:  // lexer_parts ::= lexer_part
				tmLeft.value = new ArrayList();
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 34:  // lexer_parts ::= lexer_parts lexer_part
				((List<ITmaLexerPart>)tmLeft.value).add(((ITmaLexerPart)tmStack[tmHead].value));
				break;
			case 35:  // lexer_parts ::= lexer_parts syntax_problem
				((List<ITmaLexerPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 40:  // named_pattern ::= ID '=' pattern
				tmLeft.value = new TmaNamedPattern(
						((String)tmStack[tmHead - 2].value) /* name */,
						((TmaPattern)tmStack[tmHead].value) /* pattern */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 41:  // lexeme ::= identifier typeopt ':' pattern lexeme_transitionopt iconopt lexeme_attrsopt commandopt
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 7].value) /* name */,
						((String)tmStack[tmHead - 6].value) /* type */,
						((TmaPattern)tmStack[tmHead - 4].value) /* pattern */,
						((TmaStateref)tmStack[tmHead - 3].value) /* transition */,
						((Integer)tmStack[tmHead - 2].value) /* priority */,
						((TmaLexemeAttrs)tmStack[tmHead - 1].value) /* attrs */,
						((TmaCommand)tmStack[tmHead].value) /* command */,
						null /* input */, tmStack[tmHead - 7].line, tmStack[tmHead - 7].offset, tmStack[tmHead].endoffset);
				break;
			case 42:  // lexeme ::= identifier typeopt ':'
				tmLeft.value = new TmaLexeme(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((String)tmStack[tmHead - 1].value) /* type */,
						null /* pattern */,
						null /* transition */,
						null /* priority */,
						null /* attrs */,
						null /* command */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 43:  // lexeme_transition ::= '=>' stateref
				tmLeft.value = ((TmaStateref)tmStack[tmHead].value);
				break;
			case 44:  // lexeme_attrs ::= '(' lexeme_attribute ')'
				tmLeft.value = new TmaLexemeAttrs(
						((TmaLexemeAttribute)tmStack[tmHead - 1].value) /* kind */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 45:  // lexeme_attribute ::= Lsoft
				tmLeft.value = TmaLexemeAttribute.LSOFT;
				break;
			case 46:  // lexeme_attribute ::= Lclass
				tmLeft.value = TmaLexemeAttribute.LCLASS;
				break;
			case 47:  // lexeme_attribute ::= Lspace
				tmLeft.value = TmaLexemeAttribute.LSPACE;
				break;
			case 48:  // lexeme_attribute ::= Llayout
				tmLeft.value = TmaLexemeAttribute.LLAYOUT;
				break;
			case 49:  // lexer_directive ::= '%' Lbrackets symref_noargs symref_noargs
				tmLeft.value = new TmaDirectiveBrackets(
						((TmaSymref)tmStack[tmHead - 1].value) /* opening */,
						((TmaSymref)tmStack[tmHead].value) /* closing */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 50:  // state_selector ::= '[' lexer_state_list_Comma_separated ']'
				tmLeft.value = new TmaStateSelector(
						((List<TmaLexerState>)tmStack[tmHead - 1].value) /* states */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 51:  // stateref ::= ID
				tmLeft.value = new TmaStateref(
						((String)tmStack[tmHead].value) /* name */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 52:  // lexer_state ::= identifier '=>' stateref
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaStateref)tmStack[tmHead].value) /* defaultTransition */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 53:  // lexer_state ::= identifier
				tmLeft.value = new TmaLexerState(
						((TmaIdentifier)tmStack[tmHead].value) /* name */,
						null /* defaultTransition */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 54:  // grammar_parts ::= grammar_part
				tmLeft.value = new ArrayList();
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 55:  // grammar_parts ::= grammar_parts grammar_part
				((List<ITmaGrammarPart>)tmLeft.value).add(((ITmaGrammarPart)tmStack[tmHead].value));
				break;
			case 56:  // grammar_parts ::= grammar_parts syntax_problem
				((List<ITmaGrammarPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 59:  // nonterm ::= annotations identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 6].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 60:  // nonterm ::= annotations identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 61:  // nonterm ::= annotations identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 5].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 62:  // nonterm ::= annotations identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						((TmaAnnotations)tmStack[tmHead - 4].value) /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 63:  // nonterm ::= identifier nonterm_params nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 5].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 4].value) /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 64:  // nonterm ::= identifier nonterm_params '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaNontermParams)tmStack[tmHead - 3].value) /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 65:  // nonterm ::= identifier nonterm_type '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						null /* params */,
						((ITmaNontermType)tmStack[tmHead - 3].value) /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 66:  // nonterm ::= identifier '::=' rules ';'
				tmLeft.value = new TmaNonterm(
						null /* annotations */,
						((TmaIdentifier)tmStack[tmHead - 3].value) /* name */,
						null /* params */,
						null /* type */,
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 67:  // nonterm_type ::= Lreturns symref_noargs
				tmLeft.value = new TmaNontermTypeAST(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 68:  // nonterm_type ::= Linline Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						true /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 69:  // nonterm_type ::= Lclass identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LCLASS /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 70:  // nonterm_type ::= Linterface identifieropt implementsopt
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LINTERFACE /* kind */,
						((TmaIdentifier)tmStack[tmHead - 1].value) /* name */,
						((List<TmaSymref>)tmStack[tmHead].value) /* _implements */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 71:  // nonterm_type ::= Lvoid
				tmLeft.value = new TmaNontermTypeHint(
						false /* isInline */,
						TmaNontermTypeHint.TmaKindKind.LVOID /* kind */,
						null /* name */,
						null /* _implements */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 72:  // nonterm_type ::= type
				tmLeft.value = new TmaNontermTypeRaw(
						((String)tmStack[tmHead].value) /* typeText */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 73:  // implements ::= ':' references_cs
				tmLeft.value = ((List<TmaSymref>)tmStack[tmHead].value);
				break;
			case 74:  // assoc ::= Lleft
				tmLeft.value = TmaAssoc.LLEFT;
				break;
			case 75:  // assoc ::= Lright
				tmLeft.value = TmaAssoc.LRIGHT;
				break;
			case 76:  // assoc ::= Lnonassoc
				tmLeft.value = TmaAssoc.LNONASSOC;
				break;
			case 77:  // directive ::= '%' assoc references ';'
				tmLeft.value = new TmaDirectivePrio(
						((TmaAssoc)tmStack[tmHead - 2].value) /* assoc */,
						((List<TmaSymref>)tmStack[tmHead - 1].value) /* symbols */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 78:  // directive ::= '%' Linput inputref_list_Comma_separated ';'
				tmLeft.value = new TmaDirectiveInput(
						((List<TmaInputref>)tmStack[tmHead - 1].value) /* inputRefs */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 79:  // directive ::= '%' Lparam identifier param_type '=' param_value ';'
				tmLeft.value = new TmaDirectiveParam(
						((TmaIdentifier)tmStack[tmHead - 4].value) /* name */,
						((TmaParamType)tmStack[tmHead - 3].value) /* paramType */,
						((ITmaParamValue)tmStack[tmHead - 1].value) /* paramValue */,
						null /* input */, tmStack[tmHead - 6].line, tmStack[tmHead - 6].offset, tmStack[tmHead].endoffset);
				break;
			case 80:  // directive ::= '%' Lparam identifier param_type ';'
				tmLeft.value = new TmaDirectiveParam(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((TmaParamType)tmStack[tmHead - 1].value) /* paramType */,
						null /* paramValue */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 81:  // inputref ::= symref_noargs Lnoeoi
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead - 1].value) /* reference */,
						true /* noeoi */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 82:  // inputref ::= symref_noargs
				tmLeft.value = new TmaInputref(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						false /* noeoi */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 83:  // references ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 84:  // references ::= references symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 85:  // references_cs ::= symref_noargs
				tmLeft.value = new ArrayList();
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 86:  // references_cs ::= references_cs ',' symref_noargs
				((List<TmaSymref>)tmLeft.value).add(((TmaSymref)tmStack[tmHead].value));
				break;
			case 88:  // rule0 ::= rhsPrefix rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 3].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 89:  // rule0 ::= rhsPrefix rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 90:  // rule0 ::= rhsPrefix ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 2].value) /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 91:  // rule0 ::= rhsPrefix rhsSuffixopt
				tmLeft.value = new TmaRule0(
						((TmaRhsPrefix)tmStack[tmHead - 1].value) /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 92:  // rule0 ::= rhsParts ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 2].value) /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 93:  // rule0 ::= rhsParts rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						((List<ITmaRhsPart>)tmStack[tmHead - 1].value) /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 94:  // rule0 ::= ruleAction rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						((TmaRuleAction)tmStack[tmHead - 1].value) /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 95:  // rule0 ::= rhsSuffixopt
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* action */,
						((TmaRhsSuffix)tmStack[tmHead].value) /* suffix */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 96:  // rule0 ::= syntax_problem
				tmLeft.value = new TmaRule0(
						null /* prefix */,
						null /* list */,
						null /* action */,
						null /* suffix */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 97:  // predicate ::= '[' predicate_expression ']'
				tmLeft.value = ((ITmaPredicateExpression)tmStack[tmHead - 1].value);
				break;
			case 98:  // rhsPrefix ::= predicate annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* predicate */,
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 99:  // rhsPrefix ::= annotations ':'
				tmLeft.value = new TmaRhsPrefix(
						null /* predicate */,
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 100:  // rhsPrefix ::= predicate ':'
				tmLeft.value = new TmaRhsPrefix(
						((ITmaPredicateExpression)tmStack[tmHead - 1].value) /* predicate */,
						null /* annotations */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 101:  // rhsSuffix ::= '%' Lprio symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LPRIO /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 102:  // rhsSuffix ::= '%' Lshift symref_noargs
				tmLeft.value = new TmaRhsSuffix(
						TmaRhsSuffix.TmaKindKind.LSHIFT /* kind */,
						((TmaSymref)tmStack[tmHead].value) /* symref */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 103:  // ruleAction ::= '{~' identifier scon '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* action */,
						((String)tmStack[tmHead - 1].value) /* parameter */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 104:  // ruleAction ::= '{~' identifier '}'
				tmLeft.value = new TmaRuleAction(
						((TmaIdentifier)tmStack[tmHead - 1].value) /* action */,
						null /* parameter */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 105:  // rhsParts ::= rhsPart
				tmLeft.value = new ArrayList();
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 106:  // rhsParts ::= rhsParts rhsPart
				((List<ITmaRhsPart>)tmLeft.value).add(((ITmaRhsPart)tmStack[tmHead].value));
				break;
			case 107:  // rhsParts ::= rhsParts syntax_problem
				((List<ITmaRhsPart>)tmLeft.value).add(((TmaSyntaxProblem)tmStack[tmHead].value));
				break;
			case 112:  // rhsAnnotated ::= annotations rhsAssignment
				tmLeft.value = new TmaRhsAnnotated(
						((TmaAnnotations)tmStack[tmHead - 1].value) /* annotations */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 114:  // rhsAssignment ::= identifier '=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						false /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 115:  // rhsAssignment ::= identifier '+=' rhsOptional
				tmLeft.value = new TmaRhsAssignment(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* id */,
						true /* addition */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 117:  // rhsOptional ::= rhsCast '?'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.QUESTIONMARK /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 118:  // rhsCast ::= rhsClass
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* target */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 119:  // rhsCast ::= rhsClass Las symref
				tmLeft.value = new TmaRhsCast(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaSymref)tmStack[tmHead].value) /* target */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 120:  // rhsCast ::= rhsClass Las literal
				tmLeft.value = new TmaRhsAsLiteral(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* inner */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 121:  // rhsUnordered ::= rhsPart '&' rhsPart
				tmLeft.value = new TmaRhsUnordered(
						((ITmaRhsPart)tmStack[tmHead - 2].value) /* left */,
						((ITmaRhsPart)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 123:  // rhsClass ::= identifier ':' rhsPrimary
				tmLeft.value = new TmaRhsClass(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* identifier */,
						((ITmaRhsPart)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 124:  // rhsPrimary ::= symref
				tmLeft.value = new TmaRhsSymbol(
						((TmaSymref)tmStack[tmHead].value) /* reference */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 125:  // rhsPrimary ::= '(' rules ')'
				tmLeft.value = new TmaRhsNested(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 126:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '+'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						true /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 127:  // rhsPrimary ::= '(' rhsParts Lseparator references ')' '*'
				tmLeft.value = new TmaRhsList(
						((List<ITmaRhsPart>)tmStack[tmHead - 4].value) /* ruleParts */,
						((List<TmaSymref>)tmStack[tmHead - 2].value) /* separator */,
						false /* atLeastOne */,
						null /* input */, tmStack[tmHead - 5].line, tmStack[tmHead - 5].offset, tmStack[tmHead].endoffset);
				break;
			case 128:  // rhsPrimary ::= rhsPrimary '*'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.MULT /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 129:  // rhsPrimary ::= rhsPrimary '+'
				tmLeft.value = new TmaRhsQuantifier(
						((ITmaRhsPart)tmStack[tmHead - 1].value) /* inner */,
						TmaRhsQuantifier.TmaQuantifierKind.PLUS /* quantifier */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 130:  // rhsPrimary ::= '$' '(' rules ')'
				tmLeft.value = new TmaRhsIgnored(
						((List<TmaRule0>)tmStack[tmHead - 1].value) /* rules */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 131:  // rhsPrimary ::= Lset '(' setExpression ')'
				tmLeft.value = new TmaRhsSet(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* expr */,
						null /* input */, tmStack[tmHead - 3].line, tmStack[tmHead - 3].offset, tmStack[tmHead].endoffset);
				break;
			case 132:  // setPrimary ::= ID symref
				tmLeft.value = new TmaSetSymbol(
						((String)tmStack[tmHead - 1].value) /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 133:  // setPrimary ::= symref
				tmLeft.value = new TmaSetSymbol(
						null /* operator */,
						((TmaSymref)tmStack[tmHead].value) /* symbol */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 134:  // setPrimary ::= '(' setExpression ')'
				tmLeft.value = new TmaSetCompound(
						((ITmaSetExpression)tmStack[tmHead - 1].value) /* inner */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 135:  // setPrimary ::= '~' setPrimary
				tmLeft.value = new TmaSetComplement(
						((ITmaSetExpression)tmStack[tmHead].value) /* inner */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 137:  // setExpression ::= setExpression '|' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.OR /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 138:  // setExpression ::= setExpression '&' setExpression
				tmLeft.value = new TmaSetBinary(
						((ITmaSetExpression)tmStack[tmHead - 2].value) /* left */,
						TmaSetBinary.TmaKindKind.AMPERSAND /* kind */,
						((ITmaSetExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 139:  // annotations ::= annotation_list
				tmLeft.value = new TmaAnnotations(
						((List<TmaAnnotation>)tmStack[tmHead].value) /* annotations */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 140:  // annotation ::= '@' ID '{' expression '}'
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead - 3].value) /* name */,
						((ITmaExpression)tmStack[tmHead - 1].value) /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 141:  // annotation ::= '@' ID
				tmLeft.value = new TmaAnnotation(
						((String)tmStack[tmHead].value) /* name */,
						null /* expression */,
						null /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 142:  // annotation ::= '@' syntax_problem
				tmLeft.value = new TmaAnnotation(
						null /* name */,
						null /* expression */,
						((TmaSyntaxProblem)tmStack[tmHead].value) /* syntaxProblem */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 143:  // nonterm_params ::= '<' param_ref_list_Comma_separated '>'
				tmLeft.value = new TmaNontermParams(
						((List<TmaIdentifier>)tmStack[tmHead - 1].value) /* refs */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 145:  // symref_args ::= '<' param_value_list_Comma_separated '>'
				tmLeft.value = new TmaSymrefArgs(
						((List<ITmaParamValue>)tmStack[tmHead - 1].value) /* valueList */,
						null /* keyvalueList */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 146:  // symref_args ::= '<' keyval_arg_list_Comma_separated_opt '>'
				tmLeft.value = new TmaSymrefArgs(
						null /* valueList */,
						((List<TmaKeyvalArg>)tmStack[tmHead - 1].value) /* keyvalueList */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 147:  // keyval_arg ::= param_ref ':' param_value
				tmLeft.value = new TmaKeyvalArg(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* name */,
						((ITmaParamValue)tmStack[tmHead].value) /* val */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 148:  // param_type ::= Lint
				tmLeft.value = TmaParamType.LINT;
				break;
			case 149:  // param_type ::= Lstring
				tmLeft.value = TmaParamType.LSTRING;
				break;
			case 150:  // param_type ::= Lbool
				tmLeft.value = TmaParamType.LBOOL;
				break;
			case 151:  // param_type ::= Lsymbol
				tmLeft.value = TmaParamType.LSYMBOL;
				break;
			case 154:  // predicate_primary ::= '!' param_ref
				tmLeft.value = new TmaBoolPredicate(
						true /* isNegated */,
						((TmaIdentifier)tmStack[tmHead].value) /* paramRef */,
						null /* input */, tmStack[tmHead - 1].line, tmStack[tmHead - 1].offset, tmStack[tmHead].endoffset);
				break;
			case 155:  // predicate_primary ::= param_ref
				tmLeft.value = new TmaBoolPredicate(
						false /* isNegated */,
						((TmaIdentifier)tmStack[tmHead].value) /* paramRef */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 156:  // predicate_primary ::= param_ref '==' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EQUAL_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 157:  // predicate_primary ::= param_ref '!=' literal
				tmLeft.value = new TmaComparePredicate(
						((TmaIdentifier)tmStack[tmHead - 2].value) /* paramRef */,
						TmaComparePredicate.TmaKindKind.EXCLAMATION_EQUAL /* kind */,
						((TmaLiteral)tmStack[tmHead].value) /* literal */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 159:  // predicate_expression ::= predicate_expression '&&' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.AMPERSAND_AMPERSAND /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 160:  // predicate_expression ::= predicate_expression '||' predicate_expression
				tmLeft.value = new TmaPredicateBinary(
						((ITmaPredicateExpression)tmStack[tmHead - 2].value) /* left */,
						TmaPredicateBinary.TmaKindKind.OR_OR /* kind */,
						((ITmaPredicateExpression)tmStack[tmHead].value) /* right */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 163:  // expression ::= Lnew name '(' map_entry_list_Comma_separated_opt ')'
				tmLeft.value = new TmaInstance(
						((TmaName)tmStack[tmHead - 3].value) /* className */,
						((List<TmaMapEntry>)tmStack[tmHead - 1].value) /* entries */,
						null /* input */, tmStack[tmHead - 4].line, tmStack[tmHead - 4].offset, tmStack[tmHead].endoffset);
				break;
			case 164:  // expression ::= '[' expression_list_Comma_separated_opt ']'
				tmLeft.value = new TmaArray(
						((List<ITmaExpression>)tmStack[tmHead - 1].value) /* content */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 166:  // map_entry ::= ID ':' expression
				tmLeft.value = new TmaMapEntry(
						((String)tmStack[tmHead - 2].value) /* name */,
						((ITmaExpression)tmStack[tmHead].value) /* value */,
						null /* input */, tmStack[tmHead - 2].line, tmStack[tmHead - 2].offset, tmStack[tmHead].endoffset);
				break;
			case 167:  // literal ::= scon
				tmLeft.value = new TmaLiteral(
						((String)tmStack[tmHead].value) /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 168:  // literal ::= icon
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						((Integer)tmStack[tmHead].value) /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 169:  // literal ::= Ltrue
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						true /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 170:  // literal ::= Lfalse
				tmLeft.value = new TmaLiteral(
						null /* sval */,
						null /* ival */,
						false /* val */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 171:  // name ::= qualified_id
				tmLeft.value = new TmaName(
						((String)tmStack[tmHead].value) /* qualifiedId */,
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 173:  // qualified_id ::= qualified_id '.' ID
				 tmLeft.value = ((String)tmStack[tmHead - 2].value) + "." + ((String)tmStack[tmHead].value); 
				break;
			case 174:  // command ::= code
				tmLeft.value = new TmaCommand(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 175:  // syntax_problem ::= error
				tmLeft.value = new TmaSyntaxProblem(
						null /* input */, tmStack[tmHead].line, tmStack[tmHead].offset, tmStack[tmHead].endoffset);
				break;
			case 176:  // import__optlist ::= import__optlist import_
				((List<TmaImport>)tmLeft.value).add(((TmaImport)tmStack[tmHead].value));
				break;
			case 177:  // import__optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 178:  // option_optlist ::= option_optlist option
				((List<TmaOption>)tmLeft.value).add(((TmaOption)tmStack[tmHead].value));
				break;
			case 179:  // option_optlist ::=
				tmLeft.value = new ArrayList();
				break;
			case 192:  // lexer_state_list_Comma_separated ::= lexer_state_list_Comma_separated ',' lexer_state
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 193:  // lexer_state_list_Comma_separated ::= lexer_state
				tmLeft.value = new ArrayList();
				((List<TmaLexerState>)tmLeft.value).add(((TmaLexerState)tmStack[tmHead].value));
				break;
			case 198:  // inputref_list_Comma_separated ::= inputref_list_Comma_separated ',' inputref
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 199:  // inputref_list_Comma_separated ::= inputref
				tmLeft.value = new ArrayList();
				((List<TmaInputref>)tmLeft.value).add(((TmaInputref)tmStack[tmHead].value));
				break;
			case 200:  // rule0_list_Or_separated ::= rule0_list_Or_separated '|' rule0
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 201:  // rule0_list_Or_separated ::= rule0
				tmLeft.value = new ArrayList();
				((List<TmaRule0>)tmLeft.value).add(((TmaRule0)tmStack[tmHead].value));
				break;
			case 204:  // annotation_list ::= annotation_list annotation
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 205:  // annotation_list ::= annotation
				tmLeft.value = new ArrayList();
				((List<TmaAnnotation>)tmLeft.value).add(((TmaAnnotation)tmStack[tmHead].value));
				break;
			case 206:  // param_ref_list_Comma_separated ::= param_ref_list_Comma_separated ',' param_ref
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 207:  // param_ref_list_Comma_separated ::= param_ref
				tmLeft.value = new ArrayList();
				((List<TmaIdentifier>)tmLeft.value).add(((TmaIdentifier)tmStack[tmHead].value));
				break;
			case 208:  // param_value_list_Comma_separated ::= param_value_list_Comma_separated ',' param_value
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 209:  // param_value_list_Comma_separated ::= param_value
				tmLeft.value = new ArrayList();
				((List<ITmaParamValue>)tmLeft.value).add(((ITmaParamValue)tmStack[tmHead].value));
				break;
			case 210:  // keyval_arg_list_Comma_separated ::= keyval_arg_list_Comma_separated ',' keyval_arg
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 211:  // keyval_arg_list_Comma_separated ::= keyval_arg
				tmLeft.value = new ArrayList();
				((List<TmaKeyvalArg>)tmLeft.value).add(((TmaKeyvalArg)tmStack[tmHead].value));
				break;
			case 214:  // map_entry_list_Comma_separated ::= map_entry_list_Comma_separated ',' map_entry
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 215:  // map_entry_list_Comma_separated ::= map_entry
				tmLeft.value = new ArrayList();
				((List<TmaMapEntry>)tmLeft.value).add(((TmaMapEntry)tmStack[tmHead].value));
				break;
			case 218:  // expression_list_Comma_separated ::= expression_list_Comma_separated ',' expression
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
			case 219:  // expression_list_Comma_separated ::= expression
				tmLeft.value = new ArrayList();
				((List<ITmaExpression>)tmLeft.value).add(((ITmaExpression)tmStack[tmHead].value));
				break;
		}
	}

	/**
	 * disposes symbol dropped by error recovery mechanism
	 */
	protected void dispose(LapgSymbol value) {
	}

	/**
	 * cleans node removed from the stack
	 */
	protected void cleanup(LapgSymbol value) {
	}

	public TmaInput parseInput(TMLexer lexer) throws IOException, ParseException {
		return (TmaInput) parse(lexer, 0, 379);
	}

	public ITmaExpression parseExpression(TMLexer lexer) throws IOException, ParseException {
		return (ITmaExpression) parse(lexer, 1, 380);
	}
}
