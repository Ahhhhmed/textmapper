<?xml version="1.0" encoding="UTF-8"?>
<project basedir=".." default="all" name="org.textmapper.tool">
	<property name="tm.version" value="0.9.3"/>
	<property name="tm.qualifier" value="-SNAPSHOT"/>
	<property name="suffix" value="${tm.version}"/>

	<property name="tm.dir" location="tm-tool"/>
	<property name="tm.idea.dir" location="tm-idea"/>
	<property name="tm.eclipse.dir" location="tm-eclipse"/>

	<property name="build.folder" location="build"/>
	<property name="debug.level" value="source,lines,vars"/>
	<property name="target" value="1.5"/>
	<property name="source" value="1.5"/>

	<tstamp>
		<format property="tm.build.date" pattern="EEE MMM d HH:mm:ss z yyyy"/>
	</tstamp>

	<target name="all" depends="clean, test, deploy" />

	<target name="clean">
		<delete dir="${build.folder}"/>
	</target>

	<target name="rev" unless="tm.revision">
		<exec executable="git" outputproperty="tm.revision" osfamily="unix" failifexecutionfails="false"
			  failonerror="false">
			<arg value="rev-parse"/>
			<arg value="HEAD"/>
		</exec>
		<exec executable="cmd" outputproperty="tm.revision" osfamily="windows" failifexecutionfails="false"
			  failonerror="false">
			<arg value="/c"/>
			<arg value="git"/>
			<arg value="rev-parse"/>
			<arg value="HEAD"/>
		</exec>
		<condition property="tm.revision" value="SNAPSHOT">
			<not>
				<isset property="tm.revision"/>
			</not>
		</condition>
		<echo message="revision: ${tm.revision}"/>
	</target>

	<target name="loadVars">
		<property environment="env"/>
		<fail message="Please, define IDEA_PATH environment variable" unless="env.IDEA_PATH"/>
		<property name="ideaPath" location="${env.IDEA_PATH}"/>
		<fail message="Please, define IDEA_PLUGINS environment variable" unless="env.IDEA_PLUGINS"/>
		<property name="ideaPlugins" location="${env.IDEA_PLUGINS}"/>

		<echo message="IDEA: ${ideaPath}"/>
		<echo message="Plugins: ${ideaPlugins}"/>
	</target>

	<target name="build" depends="rev">
		<mkdir dir="${build.folder}/java.out/textmapper"/>
		<copy includeemptydirs="false" todir="${build.folder}/java.out/textmapper">
			<fileset dir="${tm.dir}/textmapper/resources"/>
		</copy>
		<javac debug="true" debuglevel="${debug.level}" destdir="${build.folder}/java.out/textmapper"
			   source="${source}" target="${target}" includeantruntime="true">
			<src path="${tm.dir}/textmapper/src"/>
			<src path="${tm.dir}/lapg/src"/>
			<src path="${tm.dir}/templates/src"/>
		</javac>
		<jar destfile="${build.folder}/textmapper.jar">
			<fileset dir="${build.folder}/java.out/textmapper"/>
			<manifest>
				<attribute name="Main-Class" value="org.textmapper.tool.Tool"/>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Built-Date" value="${tm.build.date}"/>
				<attribute name="Implementation-Vendor" value="Evgeny Gryaznov"/>
				<attribute name="Implementation-Title" value="Textmapper (a tool for language development)"/>
				<attribute name="Implementation-Version" value="${tm.version}${tm.qualifier}, ${tm.revision}"/>
			</manifest>
			<metainf dir="${tm.dir}" includes="*.txt"/>
		</jar>
	</target>

	<target name="source" depends="rev">
		<mkdir dir="${build.folder}/java.src/textmapper"/>
		<copy includeemptydirs="false" todir="${build.folder}/java.src/textmapper">
			<fileset dir="${tm.dir}/textmapper/src" includes="**/*.java, **/*.tm, **/*.ltp"/>
			<fileset dir="${tm.dir}/lapg/src" includes="**/*.java, **/*.tm, **/*.ltp"/>
			<fileset dir="${tm.dir}/templates/src" includes="**/*.java, **/*.tm, **/*.ltp"/>
		</copy>
		<jar destfile="${build.folder}/textmapper-src.jar">
			<fileset dir="${build.folder}/java.src/textmapper"/>
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Built-Date" value="${tm.build.date}"/>
				<attribute name="Implementation-Vendor" value="Evgeny Gryaznov"/>
				<attribute name="Implementation-Title" value="Textmapper (a tool for language development)"/>
				<attribute name="Implementation-Version" value="${tm.version}${tm.qualifier}, ${tm.revision}"/>
			</manifest>
			<metainf dir="${tm.dir}" includes="*.txt"/>
		</jar>
	</target>

	<target name="build.tests" depends="build">
		<mkdir dir="${build.folder}/java.out/textmapper.tests"/>
		<copy includeemptydirs="false" todir="${build.folder}/java.out/textmapper.tests">
			<fileset dir="${tm.dir}/textmapper/tests" excludes="**/*.launch, **/*.java"/>
			<fileset dir="${tm.dir}/lapg/tests" excludes="**/*.launch, **/*.java"/>
			<fileset dir="${tm.dir}/templates/tests" excludes="**/*.launch, **/*.java"/>
		</copy>
		<javac debug="true" debuglevel="${debug.level}" destdir="${build.folder}/java.out/textmapper.tests"
			   source="${source}" target="${target}" includeantruntime="false">
			<classpath>
				<pathelement location="${build.folder}/textmapper.jar"/>
				<fileset dir="${tm.dir}/libs" includes="junit*.jar"/>
			</classpath>
			<src path="${tm.dir}/textmapper/tests"/>
			<src path="${tm.dir}/lapg/tests"/>
			<src path="${tm.dir}/templates/tests"/>
		</javac>
	</target>

	<target name="test" depends="build.tests">
		<mkdir dir="${build.folder}/results"/>
		<junit haltonfailure="yes" printsummary="true" dir="${tm.dir}/textmapper" logfailedtests="true">
			<jvmarg value="-ea"/>
			<batchtest fork="yes" todir="${build.folder}/results">
				<fileset dir="${tm.dir}/lapg/tests">
					<include name="**/*Test.java"/>
				</fileset>
				<fileset dir="${tm.dir}/textmapper/tests">
					<include name="**/*Test.java"/>
				</fileset>
				<fileset dir="${tm.dir}/templates/tests">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
			<formatter type="xml"/>
			<classpath>
				<pathelement location="${build.folder}/java.out/textmapper.tests"/>
				<pathelement location="${build.folder}/textmapper.jar"/>
				<fileset dir="${tm.dir}/libs" includes="junit*.jar"/>
			</classpath>
		</junit>
	</target>

	<target name="deploy" depends="build, source">
		<copy file="${build.folder}/textmapper.jar"     tofile="${tm.dir}/libs/textmapper-${suffix}.jar"/>
		<copy file="${build.folder}/textmapper-src.jar" tofile="${tm.dir}/libs/textmapper-${suffix}-src.jar"/>
		<copy file="${build.folder}/textmapper.jar"     tofile="${tm.idea.dir}/org.textmapper.idea/lib/textmapper-${suffix}.jar"/>
		<copy file="${build.folder}/textmapper-src.jar" tofile="${tm.idea.dir}/org.textmapper.idea/lib/textmapper-${suffix}-src.jar"/>
		<copy file="${build.folder}/textmapper.jar"     tofile="${tm.eclipse.dir}/plugins/org.textmapper/textmapper.jar"/>
		<copy file="${build.folder}/textmapper-src.jar" tofile="${tm.eclipse.dir}/plugins/org.textmapper/textmapper-src.jar"/>
	</target>

	<!-- TODO Lapg task
	<target name="syntax">
		<taskdef name="lapg" classname="org.textmapper.lapg.ant.Lapg" classpath="${tm.dir}/libs/textmapper-${tm.version}.jar"/>
		<lapg source="syntax"/>
	</target> -->

	<target name="syntax">
		<echo message="Textmapper parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/textmapper/src/org/textmapper/tool/parser"/>
		<echo message="Action parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/textmapper/src/org/textmapper/tool/parser/action"/>
		<echo message="Rewrite test parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/textmapper/tests/org/textmapper/tool/compiler/input"/>
		<echo message="Regexp parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/lapg/src/org/textmapper/lapg/regex"/>
		<echo message="Lapg templates parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/templates/src/org/textmapper/templates/ast"/>
		<echo message="Types parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/templates/src/org/textmapper/templates/types"/>
		<echo message="java parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/templates/src/org/textmapper/templates/java"/>
		<echo message="XML parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/templates/src/org/textmapper/xml"/>
		<echo message="Sample1 parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/textmapper/tests/org/textmapper/tool/test/bootstrap/a"/>
		<echo message="Sample2 parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/textmapper/tests/org/textmapper/tool/test/bootstrap/b"/>
		<echo message="States parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/textmapper/tests/org/textmapper/tool/test/bootstrap/states"/>
		<echo message="lexeronly parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/textmapper/tests/org/textmapper/tool/test/bootstrap/lexeronly"/>
		<echo message="unicode test parser"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/textmapper/tests/org/textmapper/tool/test/bootstrap/unicode"/>
		<echo message="js lexer"/>
		<java jar="${tm.dir}/libs/textmapper-${suffix}.jar" fork="true" dir="${tm.dir}/tests/javascript/lexer"/>
	</target>

	<target name="compile-plugin" depends="rev, loadVars">
		<path id="javac2.classpath">
			<pathelement location="${ideaPath}/lib/javac2.jar"/>
			<pathelement location="${ideaPath}/lib/jdom.jar"/>
			<pathelement location="${ideaPath}/lib/asm.jar"/>
			<pathelement location="${ideaPath}/lib/asm-all.jar"/>
			<pathelement location="${ideaPath}/lib/asm4-all.jar"/>
			<pathelement location="${ideaPath}/lib/jgoodies-forms.jar"/>
		</path>
		<taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>

		<!-- tm-common.jar -->
		<mkdir dir="${build.folder}/java.out/tm-idea-common"/>
		<javac2 destdir="${build.folder}/java.out/tm-idea-common" source="${source}" target="${target}"
				includeantruntime="false" includejavaruntime="true">
			<src path="${tm.idea.dir}/org.textmapper.idea/common/src"/>
			<classpath>
				<fileset dir="${tm.idea.dir}/org.textmapper.idea/lib" includes="*.jar"/>
				<fileset dir="${ideaPath}/lib" includes="*.jar"/>
			</classpath>
		</javac2>

		<!-- jps/tm-jps-plugin.jar -->
		<mkdir dir="${build.folder}/java.out/tm-idea-jps"/>
		<javac2 destdir="${build.folder}/java.out/tm-idea-jps" source="${source}" target="${target}"
				includeantruntime="false" includejavaruntime="true">
			<src path="${tm.idea.dir}/org.textmapper.idea/jps-plugin/src"/>
			<classpath>
				<fileset dir="${tm.idea.dir}/org.textmapper.idea/lib" includes="*.jar"/>
				<fileset dir="${ideaPath}/lib" includes="*.jar"/>
				<pathelement path="${build.folder}/java.out/tm-idea-common"/>
			</classpath>
		</javac2>

		<!-- tm-plugin.jar -->
		<mkdir dir="${build.folder}/java.out/tm-idea-plugin"/>
		<copy includeemptydirs="false" todir="${build.folder}/java.out/tm-idea-plugin">
			<fileset dir="${tm.idea.dir}/org.textmapper.idea" includes="META-INF/plugin.xml"/>
			<fileset dir="${tm.idea.dir}/org.textmapper.idea/resources"/>
		</copy>
		<javac2 destdir="${build.folder}/java.out/tm-idea-plugin" source="${source}" target="${target}"
				includeantruntime="false" includejavaruntime="true">
			<src path="${tm.idea.dir}/org.textmapper.idea/src"/>
			<classpath>
				<fileset dir="${tm.idea.dir}/org.textmapper.idea/lib" includes="*.jar"/>
				<fileset dir="${ideaPath}/lib" includes="*.jar"/>
				<pathelement path="${build.folder}/java.out/tm-idea-common"/>
			</classpath>
		</javac2>
	</target>

	<target name="plugin" depends="compile-plugin">
		<copy includeemptydirs="false" todir="${build.folder}/tm-idea">
			<fileset dir="${tm.idea.dir}/org.textmapper.idea" includes="lib/**" excludes="lib/.libraries"/>
		</copy>

		<jar destfile="${build.folder}/tm-idea/lib/tm-common.jar">
			<fileset dir="${build.folder}/java.out/tm-idea-common"/>
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Built-Date" value="${tm.build.date}"/>
				<attribute name="Implementation-Vendor" value="Evgeny Gryaznov"/>
				<attribute name="Implementation-Title" value="Textmapper for IntelliJ IDEA Commons"/>
				<attribute name="Implementation-Version" value="${tm.version}${tm.qualifier}, ${tm.revision}"/>
			</manifest>
			<metainf dir="${tm.idea.dir}" includes="LICENSE.txt"/>
		</jar>
		<jar destfile="${build.folder}/tm-idea/lib/jps/tm-jps-plugin.jar">
			<fileset dir="${build.folder}/java.out/tm-idea-jps"/>
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Built-Date" value="${tm.build.date}"/>
				<attribute name="Implementation-Vendor" value="Evgeny Gryaznov"/>
				<attribute name="Implementation-Title" value="Textmapper for IntelliJ IDEA, JPS plug-in"/>
				<attribute name="Implementation-Version" value="${tm.version}${tm.qualifier}, ${tm.revision}"/>
			</manifest>
			<metainf dir="${tm.idea.dir}/org.textmapper.idea/jps-plugin/META-INF"/>
		</jar>
		<jar destfile="${build.folder}/tm-idea/lib/tm-plugin.jar">
			<fileset dir="${build.folder}/java.out/tm-idea-plugin"/>
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Built-Date" value="${tm.build.date}"/>
				<attribute name="Implementation-Vendor" value="Evgeny Gryaznov"/>
				<attribute name="Implementation-Title" value="Textmapper for IntelliJ IDEA"/>
				<attribute name="Implementation-Version" value="${tm.version}${tm.qualifier}, ${tm.revision}"/>
			</manifest>
			<metainf dir="${tm.idea.dir}" includes="LICENSE.txt"/>
		</jar>
	</target>

	<target name="install-plugin" depends="loadVars, plugin">
		<property name="pluginPath" value="${ideaPlugins}"/>
		<delete dir="${pluginPath}/textmapper" quiet="true"/>
		<echo message="Installing plug-in into ${pluginPath}/textmapper"/>
		<copy includeemptydirs="false" todir="${pluginPath}/textmapper/">
			<fileset dir="${build.folder}/tm-idea" includes="lib/**"/>
		</copy>
	</target>

	<target name="archive-plugin" depends="plugin">
		<zip destfile="${build.folder}/tm-idea-${suffix}.zip">
			<zipfileset dir="${build.folder}/tm-idea" prefix="textmapper"/>
			<zipfileset file="${tm.idea.dir}/README.txt"/>
		</zip>
	</target>

	<target name="archive-textmapper">
		<zip destfile="${build.folder}/textmapper-${suffix}.zip">
			<zipfileset file="${tm.dir}/libs/textmapper-${suffix}.jar" />
			<zipfileset file="${tm.dir}/libs/textmapper-${suffix}-src.jar"/>
			<zipfileset file="${tm.dir}/libs/textmapper.sh" filemode="755"/>
		</zip>
	</target>
</project>
