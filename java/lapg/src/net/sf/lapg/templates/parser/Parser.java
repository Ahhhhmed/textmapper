// Parser.java

package net.sf.lapg.templates.parser;

import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;

import net.sf.lapg.templates.ITemplate;
import net.sf.lapg.templates.ast.CompoundNode;
import net.sf.lapg.templates.ast.ExpressionNode;
import net.sf.lapg.templates.ast.ForeachNode;
import net.sf.lapg.templates.ast.IfNode;
import net.sf.lapg.templates.ast.IndexNode;
import net.sf.lapg.templates.ast.MethodCallNode;
import net.sf.lapg.templates.ast.Node;
import net.sf.lapg.templates.ast.SelectExpressionNode;
import net.sf.lapg.templates.ast.SelectNode;
import net.sf.lapg.templates.ast.TemplateNode;
import net.sf.lapg.templates.ast.TextNode;
import net.sf.lapg.templates.ast.ThisNode;

public class Parser {
	
	private ArrayList<ITemplate> templates;
	
	public Parser() {
	}
	
	private static final boolean DEBUG_SYNTAX = true;
	
	int killEnds = -1;
	byte[] buff;
	int l;
	
	private String rawText(int start, int end) {
		if( killEnds == start ) {
			while( start < end && (buff[start] == '\t' || buff[start] == ' ') )
				start++;
	
			if( start < end && buff[start] == '\r' )
				start++;
	
			if( start < end && buff[start] == '\n' )
				start++;
		}
		try {
			return new String(buff, start, end-start, "utf-8");
		} catch(UnsupportedEncodingException ex) {
			return "";
		}
	}
	
	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}
	
	void error( String s ) {
		System.err.println(s);
	}
	
	public boolean parse(String s) {
		l = 0;
		templates = new ArrayList<ITemplate>();
		try {
			buff = s.getBytes("utf-8");
		} catch( UnsupportedEncodingException ex ) {
			return false;
		}
		return parse();
	}
	
	public ITemplate[] getResult() {
		return templates.toArray(new ITemplate[templates.size()]);
	}

	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   1,   6,   1,   7,   1,   1,   8,   9,  10,   1,   1,  11,  12,  13,   1,
		  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,   1,   1,   1,   1,   1,  24,
		   1,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
		  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,   1,  54,
		   1,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
		  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,   1,  82,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private static final short[][] lapg_lexem = new short[][] {
		{  -2,   2,   2,   2,   2,   2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,   4,   4,   4,   4,  -1,  -1,   5,   6,   7,   8,   9,  10,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  13,  -1,  14,  12,  12,  12,  12,  12,  15,  16,  12,  12,  17,  12,  12,  12,  12,  18,  12,  12,  12,  12,  12,  19,  12,  12,  12,  12,  12,  12,  -1,  20, },
		{  -3,   2,   2,   2,   2,   2,   2,  -3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -1,  -1,  -1,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  -1, },
		{ -26, -26,   4,   4,   4,   4, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, },
		{  -1,  24,  24,  -1,  24,  24,  24,  24,  -1,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24, },
		{ -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, },
		{ -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, },
		{ -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, },
		{ -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, },
		{ -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, },
		{ -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  26,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  27,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  28,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  29,  12,  12,  12,  12,  12,  12,  12,  30,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  31,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  32,  12,  12,  33,  12,  12,  12,  12,  12,  12,  12,  12,  12,  34,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{ -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, },
		{  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -4,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -4,  -4,  -4,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -4,  -4, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5, },
		{  -1,  24,  24,  -1,  24,  24,  24,  24,  35,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  24,  -1,  24,  -1,  -1,  -1,  -1,  -1,  36,  36,  36,  36,  36,  36,  36,  36,  -1,  -1,  24,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  24,  -1,  -1,  24,  24,  -1,  -1,  -1,  24,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  24,  -1,  -1,  -1,  24,  -1,  24,  -1,  24,  -1,  37,  -1,  -1,  -1,  -1, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  38,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  39,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  40,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -12, -12, -12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -12, -12, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -13,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -13, -13, -13,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -13, -13, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  41,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  42,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  43,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  44,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, },
		{  -1,  24,  24,  -1,  24,  24,  24,  24,  35,  24,  24,  24,  24,  24,  45,  45,  45,  45,  45,  45,  45,  45,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  -1,  46,  46,  46,  46,  46,  46,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  46,  46,  46,  46,  46,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -9,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -9,  -9,  -9,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -9,  -9, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  47,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  48,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -14,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -14, -14, -14,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -14, -14, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  49,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  50,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  51,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -1,  24,  24,  -1,  24,  24,  24,  24,  35,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24, },
		{  -1,  24,  24,  -1,  24,  24,  24,  24,  35,  24,  24,  24,  24,  24,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  24,  46,  46,  46,  46,  46,  46,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  24,  24,  46,  46,  46,  46,  46,  46,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  52,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  53,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  54,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -17,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -17, -17, -17,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -17, -17, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -16,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -16, -16, -16,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -16, -16, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -10,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -10, -10, -10,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -10, -10, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  55,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  56,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  57,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  58,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -11,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -11, -11, -11,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -11, -11, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6,  -6,  12,  12,  12,  12,  12,  59,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -6,  -6, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -15,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -15, -15, -15,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, -15, -15, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,   4,  -1,  -3,   2,  -1,  -1,   1,  14,  13,  -1,  -1,   8,  11,  12,  -1,
		 -11, -17,  -1, -35,  25, -43, -49, -59,  -1,   3,   7,  -1,   9,  -1, -65,  -1,
		  20,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  17,   5,  36,  38,  40,  39, -81,  -1,
		 -91,  41,  35,  37,  -1, -97,  15,  32,-107,  -1,-115,  18,   6,-133,  29,  -1,
		-139,  31,-149,  -1,  42,  -1,  23,  30,  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   1,  -1,   3,  -1,   0,   0,  -1,  -2,  17,  -1,  16,  10,  -1,  -2,  20,  -1,
		  16,  24,  17,  24,  18,  24,  19,  24,  21,  24,  22,  24,  23,  24,  -1,  -2,
		  12,  -1,   4,  21,  15,  21,  -1,  -2,  17,  -1,  16,  10,  -1,  -2,  18,  -1,
		  22,  -1,  16,  16,  17,  16,  -1,  -2,  17,  -1,  16,  10,  -1,  -2,   4,  -1,
		   5,  -1,   6,  -1,   8,  -1,  14,  -1,  15,  -1,  21,  28,  -1,  -2,  18,  -1,
		  22,  -1,  21,  34,  23,  34,  -1,  -2,  23,  -1,  21,  27,  -1,  -2,  18,  -1,
		  22,  -1,  16,  22,  17,  22,  -1,  -2,  18,  -1,  22,  -1,  19,  33,  -1,  -2,
		  20,  -1,  16,  26,  17,  26,  18,  26,  19,  26,  21,  26,  22,  26,  23,  26,
		  -1,  -2,  17,  -1,  16,  10,  -1,  -2,  18,  -1,  22,  -1,  16,  19,  17,  19,
		  -1,  -2,   4,  -1,   5,  -1,   6,  -1,   8,  -1,  14,  -1,  15,  -1,  21,  28,
		  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,   7,  11,  17,  29,  33,  36,  38,  41,  44,  47,  48,  49,  50,  53,
		  62,  67,  71,  76,  77,  79,  81,  86,  87,  87,  88,  89,  91,  93,  95,  96,
		 100, 104, 108, 112, 115, 124, 128, 129, 132, 133, 135, 137, 138, 141, 144, 147,
	};

	private static final short[] lapg_sym_from = new short[] {
		  72,   0,   3,   5,  11,  15,  27,   5,  11,  15,  27,   0,   3,   5,  11,  15,
		  27,   6,  10,  18,  24,  30,  33,  35,  36,  39,  52,  63,  66,  30,  35,  63,
		  66,  30,  63,  66,  24,  39,  30,  63,  66,  10,  24,  39,  10,  24,  39,  31,
		  19,   2,  30,  63,  66,  10,  24,  30,  33,  35,  39,  52,  63,  66,  29,  34,
		  37,  38,  67,  16,  21,  23,  61,  22,  46,  53,  56,  64,  57,  17,  58,  47,
		  69,  22,  46,  53,  56,  64,  48,   0,   0,   0,   3,   0,   3,   5,  15,  11,
		  16,  21,  23,  61,   5,  11,  15,  27,   5,  11,  15,  27,   5,  11,  15,  27,
		  10,  24,  39,  10,  24,  30,  33,  35,  39,  52,  63,  66,   5,  11,  15,  27,
		  27,  10,  24,  39,  19,  30,  66,  30,  66,  35,  30,  63,  66,  30,  63,  66,
		  30,  63,  66,
	};

	private static final short[] lapg_sym_to = new short[] {
		  73,   1,   1,   8,   8,   8,   8,   9,   9,   9,   9,   2,   2,  10,  24,  10,
		  39,  16,  17,  31,  17,  17,  17,  17,  58,  17,  17,  17,  17,  42,  55,  42,
		  42,  43,  43,  43,  38,  61,  44,  44,  44,  18,  18,  18,  19,  19,  19,  52,
		  32,   6,  45,  45,  45,  20,  20,  20,  20,  20,  20,  20,  20,  20,  41,  54,
		  59,  60,  70,  28,  28,  28,  28,  35,  35,  35,  35,  35,  65,  30,  66,  62,
		  71,  36,  36,  36,  36,  36,  63,  72,   3,   4,   7,   5,   5,  11,  27,  25,
		  29,  34,  37,  67,  12,  26,  12,  26,  13,  13,  13,  13,  14,  14,  14,  14,
		  21,  21,  21,  22,  22,  46,  53,  56,  22,  64,  46,  46,  15,  15,  15,  15,
		  40,  23,  23,  23,  33,  47,  69,  48,  48,  57,  49,  68,  49,  50,  50,  50,
		  51,  51,  51,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   1,   3,   1,   5,   3,   2,   1,   1,   0,   1,   1,   1,   1,   4,
		   1,   3,   4,   4,   1,   0,   3,   4,   1,   1,   3,   1,   0,   4,   6,   4,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  25,  26,  26,  27,  27,  28,  30,  29,  29,  31,  31,  32,  32,  32,  32,  34,
		  35,  33,  37,  39,  40,  40,  39,  38,  36,  36,  36,  41,  41,  36,  36,  36,
		  43,  43,  44,  44,  45,  45,  45,  46,  46,  42,  42,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escid",
		"'${'",
		"identifier",
		"icon",
		"ccon",
		"Lend",
		"Lfalse",
		"Lforeach",
		"Lif",
		"Lin",
		"Lnot",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"'}'",
		"'-'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"skip_spaces",
		"instruction",
		"control_instruction",
		"simple_instruction",
		"sentence",
		"select_expression",
		"control_start",
		"control_end",
		"control_sentence",
		"Lnotopt",
		"expression_listopt",
		"expression_list",
		"index_expression",
		"expression",
		"literal_expression",
		"bcon",
	};

	public enum Tokens {
		eoi,
		any,
		escid,
		N24LBRACE,
		identifier,
		icon,
		ccon,
		Lend,
		Lfalse,
		Lforeach,
		Lif,
		Lin,
		Lnot,
		Ltemplate,
		Ltrue,
		Lthis,
		RBRACE,
		MINUS,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		skip_spaces,
		instruction,
		control_instruction,
		simple_instruction,
		sentence,
		select_expression,
		control_start,
		control_end,
		control_sentence,
		Lnotopt,
		expression_listopt,
		expression_list,
		index_expression,
		expression,
		literal_expression,
		bcon,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) { 
					lapg_current_offset++;
					if( chr == '\n' ) lapg_current_line++;
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 2:
					 lapg_n.sym = new String(token,1,lapg_size-1); break; 
				case 3:
					 group = 1; break; 
				case 4:
					 lapg_n.sym = new String(token,0,lapg_size); break; 
				case 5:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break; 
				case 6:
					 lapg_n.sym = new String(token,1,lapg_size-2); break; 
				case 16:
					 group = 0; break; 
				case 24:
					 continue;
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX )
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym)); 
							break;
						case 5:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-2].sym)); 
							break;
						case 7:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 8:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 9:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 10:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 13:
							 lapg_gg.sym = new SelectExpressionNode(((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 14:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset)); 
							break;
						case 15:
							 lapg_gg.sym = lapg_m[lapg_head-2].sym; if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 17:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 18:
							 lapg_gg.sym = lapg_m[lapg_head-2].sym; if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 19:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 22:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 23:
							 if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 24:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 25:
							 lapg_gg.sym = new ThisNode(); 
							break;
						case 26:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 29:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); 
							break;
						case 30:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); 
							break;
						case 31:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), lapg_m[lapg_head-1].sym); 
							break;
						case 39:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 40:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 41:
							 lapg_gg.sym = new ArrayList<Object>(); ((ArrayList)lapg_gg.sym).add(lapg_m[lapg_head-0].sym); 
							break;
						case 42:
							 ((ArrayList)lapg_gg.sym).add(lapg_m[lapg_head-0].sym); 
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) 
						lapg_m[lapg_head--] = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX )
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 74-1 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}
