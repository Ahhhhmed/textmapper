// Parser.java

package net.sf.lapg.templates.parser;

import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;

import net.sf.lapg.templates.ITemplate;
import net.sf.lapg.templates.ast.CompoundNode;
import net.sf.lapg.templates.ast.ConditionalNode;
import net.sf.lapg.templates.ast.ExpressionNode;
import net.sf.lapg.templates.ast.ForeachNode;
import net.sf.lapg.templates.ast.IfNode;
import net.sf.lapg.templates.ast.IndexNode;
import net.sf.lapg.templates.ast.LiteralNode;
import net.sf.lapg.templates.ast.MethodCallNode;
import net.sf.lapg.templates.ast.Node;
import net.sf.lapg.templates.ast.SelectNode;
import net.sf.lapg.templates.ast.TemplateNode;
import net.sf.lapg.templates.ast.TextNode;
import net.sf.lapg.templates.ast.ThisNode;

public class Parser {
	
	private ArrayList<ITemplate> templates;
	
	public Parser() {
	}
	
	private static final boolean DEBUG_SYNTAX = false;
	
	int killEnds = -1;
	byte[] buff;
	int l;
	
	private String rawText(int start, int end) {
		if( killEnds == start ) {
			while( start < end && (buff[start] == '\t' || buff[start] == ' ') )
				start++;
	
			if( start < end && buff[start] == '\r' )
				start++;
	
			if( start < end && buff[start] == '\n' )
				start++;
		}
		try {
			return new String(buff, start, end-start, "utf-8");
		} catch(UnsupportedEncodingException ex) {
			return "";
		}
	}
	
	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}
	
	void error( String s ) {
		System.err.println(s);
	}
	
	public boolean parse(String s) {
		l = 0;
		templates = new ArrayList<ITemplate>();
		try {
			buff = s.getBytes("utf-8");
		} catch( UnsupportedEncodingException ex ) {
			return false;
		}
		return parse();
	}
	
	public ITemplate[] getResult() {
		return templates.toArray(new ITemplate[templates.size()]);
	}

	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   6,   7,   1,   8,   1,   9,  10,  11,  12,   1,   1,  13,  14,  15,   1,
		  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,   1,   1,  26,  27,  28,  29,
		   1,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
		  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,   1,  59,
		   1,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,
		  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private static final short[][] lapg_lexem = new short[][] {
		{  -2,   2,   2,   2,   2,   2,   2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,   4,   4,   4,   4,   5,  -1,  -1,   6,   7,   8,   9,  10,  11,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  15,  16,  -1,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  -1,  19,  17,  17,  17,  17,  17,  20,  21,  17,  17,  22,  17,  17,  17,  17,  23,  17,  17,  17,  17,  17,  24,  17,  17,  17,  17,  17,  17,  -1,  25,  26, },
		{  -3,   2,   2,   2,   2,   2,   2,   2,  -3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  -1,  -1,  -1,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  -1,  -1, },
		{ -34, -34,   4,   4,   4,   4, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  30,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  31,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  32,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, },
		{ -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, },
		{ -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, },
		{ -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, },
		{ -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, },
		{ -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32,  34, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  35,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{ -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33,  36, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, },
		{ -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  37,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  38,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  39,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  40,  17,  17,  17,  17,  17,  17,  17,  41,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  42,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  43,  17,  17,  44,  17,  17,  17,  17,  17,  17,  17,  17,  17,  45,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  -1, },
		{ -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, },
		{  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  -4,  -4,  -4,  -4,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  -4,  -4,  -4,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  -4,  -4,  -4, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5, },
		{ -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, },
		{ -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  47,  47,  47,  47,  47,  47,  47,  47,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   7,   7,  -1,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,  -1,   7,  -1,   7,  -1,   7,  -1,  48,  -1,  -1,  -1,  -1,  -1, },
		{ -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, },
		{ -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, },
		{ -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  49,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  50,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  51,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -12, -12, -12, -12,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -12, -12, -12,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -12, -12, -12, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -13, -13, -13, -13,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -13, -13, -13,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -13, -13, -13, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  52,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  53,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  54,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  55,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  32,   7,   7,   7,   7,   7,  56,  56,  56,  56,  56,  56,  56,  56,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  -1,  -1,  -1,  -1,  57,  57,  57,  57,  57,  57,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  57,  57,  57,  57,  57,  57,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -9,  -9,  -9,  -9,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -9,  -9,  -9,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -9,  -9,  -9, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  58,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  59,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -14, -14, -14, -14,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -14, -14, -14,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -14, -14, -14, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  60,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  61,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  62,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  32,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  32,   7,   7,   7,   7,   7,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,   7,   7,   7,   7,  57,  57,  57,  57,  57,  57,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  33,   7,   7,  57,  57,  57,  57,  57,  57,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  63,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  64,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  65,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -17, -17, -17, -17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -17, -17, -17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -17, -17, -17, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -16, -16, -16, -16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -16, -16, -16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -16, -16, -16, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  66,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  67,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  68,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  69,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -11, -11, -11, -11,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -11, -11, -11,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -11, -11, -11, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  70,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -15, -15, -15, -15,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -15, -15, -15,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -15, -15, -15, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,   4,  -1,  -3,   2,  -1,  -1,   1,  14,  13,  -1,  -1,   8,  11,  12,  -1,
		 -11, -17,  26,  28,  37,  -1, -51,  36,  29,  -1, -69, -75, -83, -89,  27,-121,
		-149,-169,  -1,   3,   7,  -1,   9,  -1,-185,  -1,  20,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  17,   5,-203,  -1,-211,
		  -1,-217,  25,  15,-225,  18,  -1,-241,-275,-307,-339,-371,-403,-431,-459,   6,
		-479,  32,  -1,-485,  35,-493,  -1,-511,  -1,  23,  34,  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   1,  -1,   3,  -1,   0,   0,  -1,  -2,  17,  -1,  16,  10,  -1,  -2,  20,  -1,
		  16,  24,  17,  24,  18,  24,  19,  24,  21,  24,  22,  24,  23,  24,  24,  24,
		  25,  24,  26,  24,  27,  24,  28,  24,  29,  24,  30,  24,  31,  24,  -1,  -2,
		  12,  -1,   4,  21,   5,  21,   6,  21,   8,  21,  14,  21,  15,  21,  20,  21,
		  -1,  -2,  17,  -1,  16,  10,  -1,  -2,  25,  -1,  16,  16,  17,  16,  -1,  -2,
		  17,  -1,  16,  10,  -1,  -2,  18,  -1,  22,  -1,  16,  38,  17,  38,  19,  38,
		  21,  38,  23,  38,  24,  38,  25,  38,  26,  38,  27,  38,  28,  38,  29,  38,
		  30,  38,  31,  38,  -1,  -2,  28,  -1,  29,  -1,  30,  -1,  31,  -1,  16,  43,
		  17,  43,  19,  43,  21,  43,  23,  43,  24,  43,  25,  43,  26,  43,  27,  43,
		  -1,  -2,  26,  -1,  27,  -1,  16,  46,  17,  46,  19,  46,  21,  46,  23,  46,
		  24,  46,  25,  46,  -1,  -2,  24,  -1,  16,  48,  17,  48,  19,  48,  21,  48,
		  23,  48,  25,  48,  -1,  -2,   4,  -1,   5,  -1,   6,  -1,   8,  -1,  14,  -1,
		  15,  -1,  20,  -1,  21,  31,  -1,  -2,  25,  -1,  21,  50,  23,  50,  -1,  -2,
		  23,  -1,  21,  30,  -1,  -2,  25,  -1,  16,  22,  17,  22,  -1,  -2,  24,  -1,
		  16,  49,  17,  49,  19,  49,  21,  49,  23,  49,  25,  49,  -1,  -2,  20,  -1,
		  16,  33,  17,  33,  18,  33,  19,  33,  21,  33,  22,  33,  23,  33,  24,  33,
		  25,  33,  26,  33,  27,  33,  28,  33,  29,  33,  30,  33,  31,  33,  -1,  -2,
		  18,  -1,  22,  -1,  16,  41,  17,  41,  19,  41,  21,  41,  23,  41,  24,  41,
		  25,  41,  26,  41,  27,  41,  28,  41,  29,  41,  30,  41,  31,  41,  -1,  -2,
		  18,  -1,  22,  -1,  16,  42,  17,  42,  19,  42,  21,  42,  23,  42,  24,  42,
		  25,  42,  26,  42,  27,  42,  28,  42,  29,  42,  30,  42,  31,  42,  -1,  -2,
		  18,  -1,  22,  -1,  16,  39,  17,  39,  19,  39,  21,  39,  23,  39,  24,  39,
		  25,  39,  26,  39,  27,  39,  28,  39,  29,  39,  30,  39,  31,  39,  -1,  -2,
		  18,  -1,  22,  -1,  16,  40,  17,  40,  19,  40,  21,  40,  23,  40,  24,  40,
		  25,  40,  26,  40,  27,  40,  28,  40,  29,  40,  30,  40,  31,  40,  -1,  -2,
		  28,  -1,  29,  -1,  30,  -1,  31,  -1,  16,  44,  17,  44,  19,  44,  21,  44,
		  23,  44,  24,  44,  25,  44,  26,  44,  27,  44,  -1,  -2,  28,  -1,  29,  -1,
		  30,  -1,  31,  -1,  16,  45,  17,  45,  19,  45,  21,  45,  23,  45,  24,  45,
		  25,  45,  26,  45,  27,  45,  -1,  -2,  26,  -1,  27,  -1,  16,  47,  17,  47,
		  19,  47,  21,  47,  23,  47,  24,  47,  25,  47,  -1,  -2,  17,  -1,  16,  10,
		  -1,  -2,  25,  -1,  16,  19,  17,  19,  -1,  -2,   4,  -1,   5,  -1,   6,  -1,
		   8,  -1,  14,  -1,  15,  -1,  20,  -1,  21,  31,  -1,  -2,  25,  -1,  21,  51,
		  23,  51,  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,   7,  11,  17,  38,  56,  74,  76,  94,  97, 100, 101, 102, 103, 121,
		 139, 144, 148, 153, 154, 174, 177, 182, 183, 185, 192, 194, 196, 199, 202, 205,
		 208, 208, 209, 210, 212, 214, 216, 217, 221, 225, 229, 233, 236, 246, 250, 251,
		 254, 255, 273, 291, 293, 295, 309, 321, 332,
	};

	private static final short[] lapg_sym_from = new short[] {
		  91,   0,   3,   5,  11,  15,  37,   5,  11,  15,  37,   0,   3,   5,  11,  15,
		  37,   6,  10,  21,  25,  34,  40,  43,  46,  48,  49,  50,  51,  52,  53,  54,
		  55,  56,  58,  64,  82,  85,  10,  25,  34,  40,  43,  46,  48,  50,  51,  52,
		  53,  54,  55,  56,  58,  64,  82,  85,  10,  25,  34,  40,  43,  46,  48,  50,
		  51,  52,  53,  54,  55,  56,  58,  64,  82,  85,  34,  58,  10,  25,  34,  40,
		  43,  46,  48,  50,  51,  52,  53,  54,  55,  56,  58,  64,  82,  85,  10,  34,
		  58,  10,  34,  58,  41,  22,   2,  10,  25,  34,  40,  43,  46,  48,  50,  51,
		  52,  53,  54,  55,  56,  58,  64,  82,  85,  10,  25,  34,  40,  43,  46,  48,
		  50,  51,  52,  53,  54,  55,  56,  58,  64,  82,  85,  39,  45,  47,  57,  86,
		  16,  26,  28,  80,  29,  72,  73,  74,  75,  70,  10,  17,  25,  34,  40,  43,
		  46,  48,  50,  51,  52,  53,  54,  55,  56,  58,  64,  71,  82,  85,  44,  62,
		  88,  29,  72,  73,  74,  75,  63,  33,  68,  27,  44,  61,  65,  70,  83,  87,
		  32,  78,  32,  78,  31,  76,  77,  31,  76,  77,  31,  76,  77,  31,  76,  77,
		   0,   0,   0,   3,   0,   3,   5,  15,  11,  16,  26,  28,  80,   5,  11,  15,
		  37,   5,  11,  15,  37,   5,  11,  15,  37,  10,  34,  58,  10,  25,  34,  40,
		  43,  48,  58,  64,  82,  85,   5,  11,  15,  37,  37,  10,  34,  58,  22,  10,
		  25,  34,  40,  43,  46,  48,  50,  51,  52,  53,  54,  55,  56,  58,  64,  82,
		  85,  10,  25,  34,  40,  43,  46,  48,  50,  51,  52,  53,  54,  55,  56,  58,
		  64,  82,  85,  40,  85,  40,  85,  10,  25,  34,  40,  43,  46,  48,  54,  55,
		  56,  58,  64,  82,  85,  10,  25,  34,  40,  43,  46,  48,  56,  58,  64,  82,
		  85,  10,  25,  34,  40,  43,  46,  48,  58,  64,  82,  85,
	};

	private static final short[] lapg_sym_to = new short[] {
		  92,   1,   1,   8,   8,   8,   8,   9,   9,   9,   9,   2,   2,  10,  34,  10,
		  58,  16,  17,  41,  17,  17,  17,  17,  17,  17,  71,  17,  17,  17,  17,  17,
		  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,
		  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,
		  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  57,  80,  20,  20,  20,  20,
		  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,
		  21,  22,  22,  22,  64,  42,   6,  23,  23,  23,  23,  23,  23,  23,  23,  23,
		  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,
		  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  60,  67,  69,  79,  89,
		  38,  38,  38,  38,  48,  48,  48,  48,  48,  84,  25,  40,  25,  25,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  85,  25,  25,  66,  81,
		  90,  49,  49,  49,  49,  49,  82,  56,  56,  46,  46,  46,  46,  46,  46,  46,
		  54,  54,  55,  55,  50,  50,  50,  51,  51,  51,  52,  52,  52,  53,  53,  53,
		  91,   3,   4,   7,   5,   5,  11,  37,  35,  39,  45,  47,  86,  12,  36,  12,
		  36,  13,  13,  13,  13,  14,  14,  14,  14,  26,  26,  26,  27,  44,  27,  61,
		  65,  70,  27,  83,  87,  61,  15,  15,  15,  15,  59,  28,  28,  28,  43,  29,
		  29,  29,  29,  29,  29,  29,  72,  73,  74,  75,  29,  29,  29,  29,  29,  29,
		  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  62,  88,  63,  63,  31,  31,  31,  31,  31,  31,  31,  76,  77,
		  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  78,  32,  32,  32,
		  32,  33,  33,  33,  33,  33,  68,  33,  33,  33,  33,  33,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   1,   3,   1,   5,   3,   2,   1,   1,   0,   1,   1,   1,   1,   4,
		   1,   3,   4,   4,   1,   0,   3,   4,   1,   3,   1,   1,   1,   1,   1,   0,
		   4,   3,   6,   4,   1,   1,   1,   3,   3,   3,   3,   1,   3,   3,   1,   3,
		   1,   3,   1,   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  33,  34,  34,  35,  35,  36,  38,  37,  37,  39,  39,  40,  40,  40,  40,  42,
		  43,  41,  45,  47,  48,  48,  47,  46,  49,  49,  49,  49,  49,  49,  51,  51,
		  49,  49,  49,  49,  50,  50,  53,  53,  53,  53,  53,  54,  54,  54,  55,  55,
		  44,  44,  52,  52,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escid",
		"'${'",
		"identifier",
		"icon",
		"ccon",
		"Lend",
		"Lfalse",
		"Lforeach",
		"Lif",
		"Lin",
		"Lnot",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"'}'",
		"'-'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"skip_spaces",
		"instruction",
		"control_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"control_start",
		"control_end",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"expression_listopt",
		"expression_list",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escid,
		N24LBRACE,
		identifier,
		icon,
		ccon,
		Lend,
		Lfalse,
		Lforeach,
		Lif,
		Lin,
		Lnot,
		Ltemplate,
		Ltrue,
		Lthis,
		RBRACE,
		MINUS,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		skip_spaces,
		instruction,
		control_instruction,
		simple_instruction,
		sentence,
		expression,
		control_start,
		control_end,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		expression_listopt,
		expression_list,
		relational_expression,
		equality_expression,
		conditional_and_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) { 
					lapg_current_offset++;
					if( chr == '\n' ) lapg_current_line++;
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 2:
					 lapg_n.sym = new String(token,1,lapg_size-1); break; 
				case 3:
					 group = 1; break; 
				case 4:
					 lapg_n.sym = new String(token,0,lapg_size); break; 
				case 5:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break; 
				case 6:
					 lapg_n.sym = new String(token,1,lapg_size-2); break; 
				case 16:
					 group = 0; break; 
				case 32:
					 continue;
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX )
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym)); 
							break;
						case 5:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-2].sym)); 
							break;
						case 7:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 8:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 9:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 10:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 13:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 14:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset)); 
							break;
						case 15:
							 lapg_gg.sym = lapg_m[lapg_head-2].sym; if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 17:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 18:
							 lapg_gg.sym = lapg_m[lapg_head-2].sym; if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 19:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 22:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 23:
							 if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 24:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 25:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym; 
							break;
						case 26:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym); 
							break;
						case 27:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym); 
							break;
						case 28:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym); 
							break;
						case 29:
							 lapg_gg.sym = new ThisNode(); 
							break;
						case 32:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); 
							break;
						case 33:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 34:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); 
							break;
						case 35:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym)); 
							break;
						case 36:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 37:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 39:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 40:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 41:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 42:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 44:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 45:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 47:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 49:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 50:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 51:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) 
						lapg_m[lapg_head--] = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX )
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 93-1 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}
