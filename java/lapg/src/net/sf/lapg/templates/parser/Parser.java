// Parser.java

package net.sf.lapg.templates.parser;

import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;

import net.sf.lapg.templates.ITemplate;
import net.sf.lapg.templates.ast.CallTemplateNode;
import net.sf.lapg.templates.ast.CompoundNode;
import net.sf.lapg.templates.ast.ConditionalNode;
import net.sf.lapg.templates.ast.ExpressionNode;
import net.sf.lapg.templates.ast.ForeachNode;
import net.sf.lapg.templates.ast.IfNode;
import net.sf.lapg.templates.ast.IndexNode;
import net.sf.lapg.templates.ast.LiteralNode;
import net.sf.lapg.templates.ast.MethodCallNode;
import net.sf.lapg.templates.ast.Node;
import net.sf.lapg.templates.ast.SelectNode;
import net.sf.lapg.templates.ast.TemplateNode;
import net.sf.lapg.templates.ast.TextNode;
import net.sf.lapg.templates.ast.ThisNode;

public class Parser {
	
	private ArrayList<ITemplate> templates;
	
	public Parser() {
	}
	
	private static final boolean DEBUG_SYNTAX = false;
	
	int killEnds = -1;
	byte[] buff;
	int l;
	
	private String rawText(int start, int end) {
		if( killEnds == start ) {
			while( start < end && (buff[start] == '\t' || buff[start] == ' ') )
				start++;
	
			if( start < end && buff[start] == '\r' )
				start++;
	
			if( start < end && buff[start] == '\n' )
				start++;
		}
		try {
			return new String(buff, start, end-start, "utf-8");
		} catch(UnsupportedEncodingException ex) {
			return "";
		}
	}
	
	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}
	
	void error( String s ) {
		System.err.println(s);
	}
	
	public boolean parse(String s) {
		l = 0;
		templates = new ArrayList<ITemplate>();
		try {
			buff = s.getBytes("utf-8");
		} catch( UnsupportedEncodingException ex ) {
			return false;
		}
		return parse();
	}
	
	public ITemplate[] getResult() {
		return templates.toArray(new ITemplate[templates.size()]);
	}

	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   6,   7,   1,   8,   1,   9,  10,  11,  12,   1,   1,  13,  14,  15,   1,
		  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,   1,   1,  26,  27,  28,  29,
		   1,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
		  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,   1,  59,
		   1,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,
		  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private static final short[][] lapg_lexem = new short[][] {
		{  -2,   2,   2,   2,   2,   2,   2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,   4,   4,   4,   4,   5,  -1,  -1,   6,   7,   8,   9,  10,  11,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  15,  16,  -1,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  -1,  19,  17,  17,  17,  20,  17,  21,  22,  17,  17,  23,  17,  17,  17,  17,  24,  17,  17,  17,  17,  17,  25,  17,  17,  17,  17,  17,  17,  -1,  26,  27, },
		{  -3,   2,   2,   2,   2,   2,   2,   2,  -3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  28,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  -1,  -1,  -1,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  -1,  -1, },
		{ -36, -36,   4,   4,   4,   4, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  31,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  34,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, },
		{ -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, },
		{ -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, },
		{ -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, },
		{ -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, },
		{ -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34,  35, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  36,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{ -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35,  37, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, },
		{ -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  38,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  39,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  40,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  41,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  42,  17,  17,  17,  17,  17,  17,  17,  43,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  44,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  45,  17,  17,  46,  17,  17,  17,  17,  17,  17,  17,  17,  17,  47,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  48,  -1, },
		{ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, },
		{  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  -4,  -4,  -4,  -4,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  -4,  -4,  -4,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  -4,  -4,  -4, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5, },
		{ -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, },
		{ -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  49,  49,  49,  49,  49,  49,  49,  49,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   7,   7,  -1,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,  -1,   7,  -1,   7,  -1,   7,  -1,  50,  -1,  -1,  -1,  -1,  -1, },
		{ -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, },
		{ -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, },
		{ -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  51,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  52,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  53,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  54,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -14, -14, -14, -14,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -14, -14, -14,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -14, -14, -14, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -15, -15, -15, -15,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -15, -15, -15,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -15, -15, -15, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  55,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  56,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  57,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  58,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,  59,  59,  59,  59,  59,  59,  59,  59,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  34,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  -1,  -1,  -1,  -1,  60,  60,  60,  60,  60,  60,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  60,  60,  60,  60,  60,  60,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  61,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  62,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -12, -12, -12, -12,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -12, -12, -12,  17,  17,  17,  17,  17,  63,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -12, -12, -12, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -16, -16, -16, -16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -16, -16, -16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -16, -16, -16, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  64,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  65,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  66,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  34,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  33,   7,   7,   7,   7,   7,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,   7,   7,   7,   7,  60,  60,  60,  60,  60,  60,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  34,   7,   7,  60,  60,  60,  60,  60,  60,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -9,  -9,  -9,  -9,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -9,  -9,  -9,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -9,  -9,  -9, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  67,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  68,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  69,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -19, -19, -19, -19,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -19, -19, -19,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -19, -19, -19, },
		{ -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -18, -18, -18, -18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -18, -18, -18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -18, -18, -18, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -11, -11, -11, -11,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -11, -11, -11,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -11, -11, -11, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  70,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  71,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  72,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  73,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -13, -13, -13, -13,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -13, -13, -13,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -13, -13, -13, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  -6,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6,  17,  17,  17,  17,  17,  74,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -6,  -6,  -6, },
		{ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -17, -17, -17, -17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -17, -17, -17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -17, -17, -17, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,   4,  -1,  -3,   2,  -1,  -1,   1,  14,  13,  -1,  -1,   8,  11,  12,  -1,
		 -11, -17,  37,  39,  -1,  46,  -1, -51,  45,  40,  -1, -69, -75, -83, -89,  38,
		-121,-149,-169,  -1,   3,   7,  -1,   9,  -1,-185,  22,-203,  -1,  31,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  28,   5,
		-215,  -1,-223,-229,  -1,-247,  17,  -1,-255,  36,  15,-263,  29,  -1,-279,-313,
		-345,-377,-409,-441,-469,-497,   6,-517,  41,  -1,  -1,  23,  -1,  21,  19,-523,
		  44,-531,  -1,-549,  27,-557,  -1,  34,  43,  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   1,  -1,   3,  -1,   0,   0,  -1,  -2,  19,  -1,  18,  10,  -1,  -2,  22,  -1,
		  18,  35,  19,  35,  20,  35,  21,  35,  23,  35,  24,  35,  25,  35,  26,  35,
		  27,  35,  28,  35,  29,  35,  30,  35,  31,  35,  32,  35,  33,  35,  -1,  -2,
		  14,  -1,   4,  32,   5,  32,   6,  32,   9,  32,  16,  32,  17,  32,  22,  32,
		  -1,  -2,  19,  -1,  18,  10,  -1,  -2,  27,  -1,  18,  16,  19,  16,  -1,  -2,
		  19,  -1,  18,  10,  -1,  -2,  20,  -1,  24,  -1,  18,  47,  19,  47,  21,  47,
		  23,  47,  25,  47,  26,  47,  27,  47,  28,  47,  29,  47,  30,  47,  31,  47,
		  32,  47,  33,  47,  -1,  -2,  30,  -1,  31,  -1,  32,  -1,  33,  -1,  18,  52,
		  19,  52,  21,  52,  23,  52,  25,  52,  26,  52,  27,  52,  28,  52,  29,  52,
		  -1,  -2,  28,  -1,  29,  -1,  18,  55,  19,  55,  21,  55,  23,  55,  25,  55,
		  26,  55,  27,  55,  -1,  -2,  26,  -1,  18,  57,  19,  57,  21,  57,  23,  57,
		  25,  57,  27,  57,  -1,  -2,   4,  -1,   5,  -1,   6,  -1,   9,  -1,  16,  -1,
		  17,  -1,  22,  -1,  23,  26,  -1,  -2,  22,  -1,  24,  -1,  10,  18,  18,  18,
		  19,  18,  -1,  -2,  27,  -1,  23,  59,  25,  59,  -1,  -2,  25,  -1,  23,  25,
		  -1,  -2,   4,  -1,   5,  -1,   6,  -1,   9,  -1,  16,  -1,  17,  -1,  22,  -1,
		  23,  26,  -1,  -2,  10,  -1,  18,  20,  19,  20,  -1,  -2,  27,  -1,  18,  33,
		  19,  33,  -1,  -2,  26,  -1,  18,  58,  19,  58,  21,  58,  23,  58,  25,  58,
		  27,  58,  -1,  -2,  22,  -1,  18,  42,  19,  42,  20,  42,  21,  42,  23,  42,
		  24,  42,  25,  42,  26,  42,  27,  42,  28,  42,  29,  42,  30,  42,  31,  42,
		  32,  42,  33,  42,  -1,  -2,  20,  -1,  24,  -1,  18,  50,  19,  50,  21,  50,
		  23,  50,  25,  50,  26,  50,  27,  50,  28,  50,  29,  50,  30,  50,  31,  50,
		  32,  50,  33,  50,  -1,  -2,  20,  -1,  24,  -1,  18,  51,  19,  51,  21,  51,
		  23,  51,  25,  51,  26,  51,  27,  51,  28,  51,  29,  51,  30,  51,  31,  51,
		  32,  51,  33,  51,  -1,  -2,  20,  -1,  24,  -1,  18,  48,  19,  48,  21,  48,
		  23,  48,  25,  48,  26,  48,  27,  48,  28,  48,  29,  48,  30,  48,  31,  48,
		  32,  48,  33,  48,  -1,  -2,  20,  -1,  24,  -1,  18,  49,  19,  49,  21,  49,
		  23,  49,  25,  49,  26,  49,  27,  49,  28,  49,  29,  49,  30,  49,  31,  49,
		  32,  49,  33,  49,  -1,  -2,  30,  -1,  31,  -1,  32,  -1,  33,  -1,  18,  53,
		  19,  53,  21,  53,  23,  53,  25,  53,  26,  53,  27,  53,  28,  53,  29,  53,
		  -1,  -2,  30,  -1,  31,  -1,  32,  -1,  33,  -1,  18,  54,  19,  54,  21,  54,
		  23,  54,  25,  54,  26,  54,  27,  54,  28,  54,  29,  54,  -1,  -2,  28,  -1,
		  29,  -1,  18,  56,  19,  56,  21,  56,  23,  56,  25,  56,  26,  56,  27,  56,
		  -1,  -2,  19,  -1,  18,  10,  -1,  -2,  27,  -1,  18,  30,  19,  30,  -1,  -2,
		   4,  -1,   5,  -1,   6,  -1,   9,  -1,  16,  -1,  17,  -1,  22,  -1,  23,  26,
		  -1,  -2,  27,  -1,  23,  60,  25,  60,  -1,  -2,  27,  -1,  18,  24,  19,  24,
		  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,   7,  11,  17,  42,  62,  82,  85,  87, 107, 108, 111, 114, 115, 116,
		 117, 137, 157, 162, 166, 171, 172, 195, 199, 205, 206, 208, 216, 218, 220, 223,
		 226, 229, 232, 232, 233, 234, 236, 238, 240, 241, 245, 249, 253, 257, 260, 272,
		 273, 274, 275, 276, 277, 280, 283, 287, 288, 291, 292, 312, 332, 348, 362, 375,
	};

	private static final short[] lapg_sym_from = new short[] {
		 105,   0,   3,   5,  11,  15,  38,   5,  11,  15,  38,   0,   3,   5,  11,  15,
		  38,   6,  10,  20,  22,  26,  35,  41,  46,  49,  51,  52,  53,  54,  55,  56,
		  57,  58,  59,  61,  67,  68,  71,  89,  92,  97,  10,  26,  35,  41,  46,  49,
		  51,  53,  54,  55,  56,  57,  58,  59,  61,  67,  71,  89,  92,  97,  10,  26,
		  35,  41,  46,  49,  51,  53,  54,  55,  56,  57,  58,  59,  61,  67,  71,  89,
		  92,  97,  10,  35,  61,  35,  61,  10,  26,  35,  41,  46,  49,  51,  53,  54,
		  55,  56,  57,  58,  59,  61,  67,  71,  89,  92,  97,  69,  10,  35,  61,  10,
		  35,  61,  44,  23,   2,  10,  26,  35,  41,  46,  49,  51,  53,  54,  55,  56,
		  57,  58,  59,  61,  67,  71,  89,  92,  97,  10,  26,  35,  41,  46,  49,  51,
		  53,  54,  55,  56,  57,  58,  59,  61,  67,  71,  89,  92,  97,  40,  48,  50,
		  60,  98,  16,  27,  29,  87,  30,  79,  80,  81,  82,  77,  10,  17,  26,  35,
		  41,  43,  46,  49,  51,  53,  54,  55,  56,  57,  58,  59,  61,  67,  71,  78,
		  89,  92,  97,  47,  65,  90, 102,  30,  43,  79,  80,  81,  82,  66,  34,  75,
		  28,  47,  64,  72,  77,  95,  99, 101,  33,  85,  33,  85,  32,  83,  84,  32,
		  83,  84,  32,  83,  84,  32,  83,  84,   0,   0,   0,   3,   0,   3,   5,  15,
		  11,  16,  27,  29,  87,   5,  11,  15,  38,   5,  11,  15,  38,   5,  11,  15,
		  38,  10,  35,  61,  10,  26,  35,  41,  46,  51,  61,  67,  71,  89,  92,  97,
		  20,  43,  43,  69,  69,  41,  67,  97,  41,  67,  97,   5,  11,  15,  38,  38,
		  10,  35,  61,  23,  10,  26,  35,  41,  46,  49,  51,  53,  54,  55,  56,  57,
		  58,  59,  61,  67,  71,  89,  92,  97,  10,  26,  35,  41,  46,  49,  51,  53,
		  54,  55,  56,  57,  58,  59,  61,  67,  71,  89,  92,  97,  10,  26,  35,  41,
		  46,  49,  51,  57,  58,  59,  61,  67,  71,  89,  92,  97,  10,  26,  35,  41,
		  46,  49,  51,  59,  61,  67,  71,  89,  92,  97,  10,  26,  35,  41,  46,  49,
		  51,  61,  67,  71,  89,  92,  97,
	};

	private static final short[] lapg_sym_to = new short[] {
		 106,   1,   1,   8,   8,   8,   8,   9,   9,   9,   9,   2,   2,  10,  35,  10,
		  61,  16,  17,  42,  44,  17,  17,  17,  17,  17,  17,  78,  17,  17,  17,  17,
		  17,  17,  17,  17,  17,  91,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,
		  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,
		  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
		  19,  19,  20,  20,  20,  60,  87,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  92,  22,  22,  22,  23,
		  23,  23,  71,  45,   6,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,
		  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  63,  74,  76,
		  86, 103,  39,  39,  39,  39,  51,  51,  51,  51,  51,  96,  26,  41,  26,  26,
		  26,  67,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  97,
		  26,  26,  26,  73,  88, 100, 104,  52,  68,  52,  52,  52,  52,  89,  59,  59,
		  49,  49,  49,  49,  49,  49,  49,  49,  57,  57,  58,  58,  53,  53,  53,  54,
		  54,  54,  55,  55,  55,  56,  56,  56, 105,   3,   4,   7,   5,   5,  11,  38,
		  36,  40,  48,  50,  98,  12,  37,  12,  37,  13,  13,  13,  13,  14,  14,  14,
		  14,  27,  27,  27,  28,  47,  28,  64,  72,  77,  28,  64,  95,  99, 101,  64,
		  43,  69,  70,  93,  94,  65,  90, 102,  66,  66,  66,  15,  15,  15,  15,  62,
		  29,  29,  29,  46,  30,  30,  30,  30,  30,  30,  30,  79,  80,  81,  82,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,
		  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,
		  32,  32,  32,  83,  84,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,
		  33,  33,  33,  85,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  75,
		  34,  34,  34,  34,  34,  34,  34,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   1,   3,   1,   5,   3,   2,   1,   1,   0,   1,   1,   1,   1,   4,
		   1,   1,   0,   1,   0,   4,   1,   3,   2,   1,   0,   3,   3,   4,   4,   1,
		   0,   3,   4,   1,   3,   1,   1,   1,   1,   4,   3,   6,   4,   1,   1,   1,
		   3,   3,   3,   3,   1,   3,   3,   1,   3,   1,   3,   1,   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  35,  36,  36,  37,  37,  38,  40,  39,  39,  41,  41,  42,  42,  42,  42,  44,
		  45,  48,  48,  50,  50,  45,  47,  47,  51,  52,  52,  49,  43,  54,  56,  57,
		  57,  56,  55,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  59,  59,  60,
		  60,  60,  60,  60,  61,  61,  61,  62,  62,  46,  46,  53,  53,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escid",
		"'${'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lend",
		"Lfalse",
		"Lfor",
		"Lforeach",
		"Lif",
		"Lin",
		"Lnot",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"'}'",
		"'-'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"skip_spaces",
		"instruction",
		"control_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_id",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escid,
		N24LBRACE,
		identifier,
		icon,
		ccon,
		Lcall,
		Lend,
		Lfalse,
		Lfor,
		Lforeach,
		Lif,
		Lin,
		Lnot,
		Ltemplate,
		Ltrue,
		Lthis,
		RBRACE,
		MINUS,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		skip_spaces,
		instruction,
		control_instruction,
		simple_instruction,
		sentence,
		expression,
		template_id,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		relational_expression,
		equality_expression,
		conditional_and_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) { 
					lapg_current_offset++;
					if( chr == '\n' ) lapg_current_line++;
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 2:
					 lapg_n.sym = new String(token,1,lapg_size-1); break; 
				case 3:
					 group = 1; break; 
				case 4:
					 lapg_n.sym = new String(token,0,lapg_size); break; 
				case 5:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break; 
				case 6:
					 lapg_n.sym = new String(token,1,lapg_size-2); break; 
				case 18:
					 group = 0; break; 
				case 34:
					 continue;
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX )
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym)); 
							break;
						case 5:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-2].sym)); 
							break;
						case 7:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 8:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 9:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 10:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 13:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 14:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset)); 
							break;
						case 15:
							 lapg_gg.sym = lapg_m[lapg_head-2].sym; if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 21:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 23:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym); 
							break;
						case 24:
							 lapg_gg.sym = lapg_m[lapg_head-0].sym; 
							break;
						case 27:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym; 
							break;
						case 28:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 29:
							 lapg_gg.sym = lapg_m[lapg_head-2].sym; if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 30:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 33:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 34:
							 if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 35:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 36:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym; 
							break;
						case 37:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym); 
							break;
						case 38:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym); 
							break;
						case 39:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym); 
							break;
						case 40:
							 lapg_gg.sym = new ThisNode(); 
							break;
						case 41:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); 
							break;
						case 42:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 43:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); 
							break;
						case 44:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym)); 
							break;
						case 45:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 46:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 48:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 49:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 50:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 51:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 53:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 54:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 56:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 58:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 59:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 60:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) 
						lapg_m[lapg_head--] = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX )
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 107-1 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}
