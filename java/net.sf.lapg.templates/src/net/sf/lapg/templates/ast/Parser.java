// Parser.java

package net.sf.lapg.templates.ast;


import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.lapg.templates.api.ITemplate;


public class Parser {
	
private ArrayList<ITemplate> templates;
private String templatePackage;

public Parser() {
}

private static final boolean DEBUG_SYNTAX = false;

private String inputName;
private int killEnds = -1;
private byte[] buff;
private int l;

private String rawText(int start, int end) {
	if( killEnds == start ) {
		while( start < end && (buff[start] == '\t' || buff[start] == ' ') )
			start++;

		if( start < end && buff[start] == '\r' )
			start++;

		if( start < end && buff[start] == '\n' )
			start++;
	}
	try {
		return new String(buff, start, end-start, "utf-8");
	} catch(UnsupportedEncodingException ex) {
		return "";
	}
}

private void checkIsSpace(int start, int end) {
	String val = rawText(start,end).trim();
	if( val.length() > 0 )
		error("Unknown text ignored: `"+val+"`");
}

private void applyElse(CompoundNode node, ArrayList<Node> instructions) {
	if( node instanceof IfNode ) {
		((IfNode)node).setElseInstructions(instructions);
	} else {
		error("Unknown else node, instructions skipped");
	}
}

private Node createEscapedId(String escid, int line) {
	int sharp = escid.indexOf('#');
	if( sharp >= 0 ) {
		Integer index = new Integer(escid.substring(sharp+1));
		escid = escid.substring(0, sharp);
		return new IndexNode(new SelectNode(null,escid,inputName,line), new LiteralNode(index,inputName,line),inputName,line);
	
	} else {
		return new SelectNode(null,escid,inputName,line);
	}
}

private void skipSpaces(int offset) {
	killEnds = offset+1;
}

void error( String s ) {
	System.err.println(s);
}

public boolean parse(String s, String templatePackage, String inputName) {
	l = 0;
	this.templatePackage = templatePackage;
	this.inputName = inputName;
	templates = new ArrayList<ITemplate>();
	try {
		buff = s.getBytes("utf-8");
	} catch( UnsupportedEncodingException ex ) {
		return false;
	}
	return parse();
}

public ITemplate[] getResult() {
	return templates.toArray(new ITemplate[templates.size()]);
}



	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
		21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 32, 33, 34, 35,
		1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
		51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 1, 65,
		66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
		82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	};

	private int lapg_lexem[][] = unpackFromString(121,96,
		"-2,2:8,3,2:86,-1:2,4:4,5,-1:3,6,7,8,9,10,11,12,13,14,15,16,17:10,18,19,20,2" +
		"1,22,23:26,24,-1,25,23,26,27,23,28,23,29,30,31,23,32,23:3,33,34,23:4,35,36," +
		"23:6,-1,37,38,-3,2:8,-3,2:86,-1:9,39,-1:10,40,41:10,-1:5,42:26,-1:3,42,-1,4" +
		"2:26,43,-1:2,-58:2,4:4,-58:90,-39:33,44,-39:62,-38:96,-1:11,45,-1:85,8:2,-1" +
		",8:8,46,8:50,47,8:32,-42:96,-43:96,-36:96,-34:96,-45:96,-35:34,48,-35:60,49" +
		",-44:96,-37:96,-10:21,17:10,-10:65,-55:96,-53:33,50,-53:62,-1:33,51,-1:62,-" +
		"54:33,52,-54:62,-56:96,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:26,-9:3,-40:96," +
		"-41:96,-57:96,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:18,53,23:7,-9:24,23:10,-" +
		"9:5,23:26,-9:3,23,-9,54,23:25,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,55,23" +
		",56,23:7,57,23:4,-9:24,23:10,-9:5,23:26,-9:3,23,-9,58,23:7,59,23:5,60,23:11" +
		",-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:17,61,23:8,-9:24,23:10,-9:5,23:26,-9:" +
		"3,23,-9,23:5,62,23:7,63,23:12,-9:24,23:10,-9:5,23:26,-9:3,23,-9,64,23:25,-9" +
		":24,23:10,-9:5,23:26,-9:3,23,-9,23:14,65,23:5,66,23:5,-9:24,23:10,-9:5,23:2" +
		"6,-9:3,23,-9,23:22,67,23:3,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,68,23:2,6" +
		"9,23:9,70,23:8,-9:3,-1:94,71,-1,-32:96,-4:96,-8:96,-6:21,41:10,-6:65,-5:8,7" +
		"2,-5:12,42:10,-5:5,42:26,-5:3,42,-5,42:26,-5:3,-7:96,-49:96,-46:96,-11:96,-" +
		"1:7,8,-1:4,8,-1:8,73:8,-1:6,8,-1:27,8,-1:3,8:2,-1:3,8,-1:7,8,-1:3,8,-1,8,-1" +
		",8,-1,74,-1:5,-50:96,-33:96,-51:96,-48:96,-52:96,-9:21,23:10,-9:5,23:26,-9:" +
		"3,23,-9,23:18,75,23:7,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,76,23:6,77,23" +
		":7,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:18,78,23:7,-9:24,23:10,-9:5,23:26,-" +
		"9:3,23,-9,23:3,79,23:22,-9:24,23:10,-9:5,23:26,-9:3,23,-9,80,23:25,-9:24,23" +
		":10,-9:5,23:26,-9:3,23,-9,23:11,81,23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9," +
		"23:11,82,23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:17,83,23:8,-9:24,23:10," +
		"-9:5,23:26,-9:3,23,-9,23:4,84,23:21,-9:3,-22:21,23:10,-22:5,23:26,-22:3,23," +
		"-22,23:26,-22:3,-23:21,23:10,-23:5,23:26,-23:3,23,-23,23:26,-23:3,-9:21,23:" +
		"10,-9:5,23:26,-9:3,23,-9,23:15,85,23:10,-9:24,23:10,-9:5,23:26,-9:3,23,-9,2" +
		"3:19,86,23:6,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,87,23:14,-9:24,23:10,-" +
		"9:5,23:26,-9:3,23,-9,23:8,88,23:17,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:12," +
		"89,23:13,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:8,90,23:17,-9:24,23:10,-9:5,2" +
		"3:26,-9:3,23,-9,23:20,91,23:5,-9:3,-47:96,-1:21,92:10,-1:66,8:2,-1,8:8,46,8" +
		":8,93:8,8:34,47,8:32,-1:21,94:10,-1:5,94:6,-1:25,94:6,-1:23,-9:21,23:10,-9:" +
		"5,23:26,-9:3,23,-9,23:4,95,23:21,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,96" +
		",23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,97,23:21,-9:24,23:10,-9:5,23:" +
		"26,-9:3,23,-9,23:4,98,23:21,-9:3,-14:21,23:10,-14:5,23:26,-14:3,23,-14,23:2" +
		"6,-14:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:11,99,23:14,-9:24,23:10,-9:5,2" +
		"3:26,-9:3,23,-9,23:18,100,23:7,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,101,2" +
		"3:21,-9:3,-18:21,23:10,-18:5,23:26,-18:3,23,-18,23:4,102,23:21,-18:3,-9:21," +
		"23:10,-9:5,23:26,-9:3,23,-9,23:15,103,23:10,-9:3,-24:21,23:10,-24:5,23:26,-" +
		"24:3,23,-24,23:26,-24:3,-25:21,23:10,-25:5,23:26,-25:3,23,-25,23:26,-25:3,-" +
		"9:21,23:10,-9:5,23:26,-9:3,23,-9,23:11,104,23:14,-9:24,23:10,-9:5,23:26,-9:" +
		"3,23,-9,23:19,105,23:6,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:15,106,23:10,-9" +
		":24,23:10,-9:5,23:26,-9:3,23,-9,23:18,107,23:7,-9:24,23:10,-9:5,23:26,-9:3," +
		"23,-9,23:4,108,23:21,-9:3,-5:21,92:10,-5:65,-1,8:2,-1,8:8,46,8:50,47,8:32,-" +
		"1,8:2,-1,8:8,46,8:8,94:10,8:5,94:6,8:21,47,8:3,94:6,8:23,-9:21,23:10,-9:5,2" +
		"3:26,-9:3,23,-9,23:17,109,23:8,-9:3,-12:21,23:10,-12:5,23:26,-12:3,23,-12,2" +
		"3:26,-12:3,-13:21,23:10,-13:5,23:26,-13:3,23,-13,23:26,-13:3,-15:21,23:10,-" +
		"15:5,23:26,-15:3,23,-15,23:26,-15:3,-16:21,23:10,-16:5,23:26,-16:3,23,-16,2" +
		"3:26,-16:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:4,110,23:21,-9:3,-19:21,23:" +
		"10,-19:5,23:26,-19:3,23,-19,23:26,-19:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,1" +
		"11,23:25,-9:3,-21:21,23:10,-21:5,23:26,-21:3,23,-21,23:26,-21:3,-26:21,23:1" +
		"0,-26:5,23:26,-26:3,23,-26,23:26,-26:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23" +
		":2,112,23:23,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,113,23:14,-9:3,-30:21," +
		"23:10,-30:5,23:26,-30:3,23,-30,23:26,-30:3,-29:21,23:10,-29:5,23:26,-29:3,2" +
		"3,-29,23:26,-29:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:19,114,23:6,-9:3,-17" +
		":21,23:10,-17:5,23:26,-17:3,23,-17,23:26,-17:3,-9:21,23:10,-9:5,23:26,-9:3," +
		"23,-9,23:2,115,23:23,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:7,116,23:18,-9:24" +
		",23:10,-9:5,23:26,-9:3,23,-9,117,23:25,-9:3,-31:21,23:10,-31:5,23:26,-31:3," +
		"23,-31,23:26,-31:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:7,118,23:18,-9:3,-2" +
		"7:21,23:10,-27:5,23:26,-27:3,23,-27,23:26,-27:3,-9:21,23:10,-9:5,23:26,-9:3" +
		",23,-9,23:19,119,23:6,-9:3,-20:21,23:10,-20:5,23:26,-20:3,23,-20,23:26,-20:" +
		"3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:4,120,23:21,-9:3,-28:21,23:10,-28:5," +
		"23:26,-28:3,23,-28,23:26,-28:3");
	
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i = 0; i < size1; i++) {
			for (int j = 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex == -1) ? st : st.substring(0, commaIndex);
				st = st.substring(commaIndex + 1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j] = Integer.parseInt(workString);
					continue;
				}
				lengthString = workString.substring(colonIndex + 1);
				sequenceLength = Integer.parseInt(lengthString);
				workString = workString.substring(0, colonIndex);
				sequenceInteger = Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}

	private static final int[] lapg_action = new int[] {
		-3, 7, -1, 2, -11, 4, -1, -1, 3, 30, 29, 27, 28, -1, -1, 6,
		21, 24, 25, 26, -1, -19, -29, 70, 72, -1, -1, -1, 85, -1, -1, -1,
		-1, -81, -1, 74, -1, 84, 73, -1, -1, -1, -113, -1, -1, 32, -1, -145,
		71, 79, 94, -195, -241, -281, -317, -345, -369, 5, 20, -1, -1, -391, -397, 8,
		-405, 43, -1, -437, 19, -1, -449, -1, 65, -1, -1, 62, -1, -1, -1, 41,
		88, 87, -457, -1, -465, -1, -1, 23, 22, 31, 59, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 49, -1, 17,
		-1, -473, -1, -1, 10, 115, -1, -1, -479, -513, -1, -545, 33, -1, 40, 38,
		-1, -1, -1, 64, -1, -553, -1, 80, -1, 81, -1, 69, -1, -559, 95, 96,
		97, -611, -657, -703, -743, -783, -823, -863, -899, -935, -963, -1, -1, -1, -1, 16,
		-1, -987, 12, 75, -1, -1, -1, 44, -1, 37, 35, 42, -1, 60, -1, -1,
		-1, 52, -1, 82, 116, -1, 78, -995, -1, 66, 51, -1, 50, 18, -1027, -1,
		48, 45, -1, 91, 89, -1, -1, -1, 55, -1, -1, 114, -1, 92, 61, -1,
		-1, -1, 57, 54, 56, 83, 77, -1, 90, -1, 93, 58, -1, -2,
	};


	private static final short[] lapg_lalr = new short[] {
		1, -1, 5, -1, 0, 1, -1, -2, 1, -1, 5, -1, 0, 0, -1, -2,
		40, -1, 30, 9, 31, 9, 53, 9, -1, -2, 40, -1, 30, 68, 31, 68,
		32, 68, 33, 68, 34, 68, 35, 68, 36, 68, 38, 68, 39, 68, 41, 68,
		42, 68, 43, 68, 44, 68, 45, 68, 46, 68, 47, 68, 48, 68, 49, 68,
		50, 68, 51, 68, 52, 68, 53, 68, 54, 68, 55, 68, -1, -2, 23, -1,
		7, 63, 8, 63, 9, 63, 10, 63, 15, 63, 19, 63, 22, 63, 24, 63,
		27, 63, 28, 63, 33, 63, 37, 63, 38, 63, 40, 63, -1, -2, 7, -1,
		8, -1, 9, -1, 10, -1, 15, -1, 19, -1, 22, -1, 24, -1, 27, -1,
		28, -1, 33, -1, 37, -1, 38, -1, 40, -1, 39, 47, -1, -2, 38, -1,
		42, -1, 30, 86, 31, 86, 32, 86, 33, 86, 34, 86, 35, 86, 36, 86,
		39, 86, 41, 86, 43, 86, 44, 86, 45, 86, 46, 86, 47, 86, 48, 86,
		49, 86, 50, 86, 51, 86, 52, 86, 53, 86, 54, 86, 55, 86, -1, -2,
		34, -1, 35, -1, 36, -1, 30, 98, 31, 98, 32, 98, 33, 98, 39, 98,
		41, 98, 43, 98, 44, 98, 45, 98, 46, 98, 47, 98, 48, 98, 49, 98,
		50, 98, 51, 98, 52, 98, 53, 98, 54, 98, 55, 98, -1, -2, 32, -1,
		33, -1, 30, 101, 31, 101, 39, 101, 41, 101, 43, 101, 44, 101, 45, 101,
		46, 101, 47, 101, 48, 101, 49, 101, 50, 101, 51, 101, 52, 101, 53, 101,
		54, 101, 55, 101, -1, -2, 49, -1, 50, -1, 51, -1, 52, -1, 30, 106,
		31, 106, 39, 106, 41, 106, 43, 106, 44, 106, 45, 106, 46, 106, 47, 106,
		48, 106, 53, 106, 54, 106, 55, 106, -1, -2, 46, -1, 47, -1, 30, 109,
		31, 109, 39, 109, 41, 109, 43, 109, 44, 109, 45, 109, 48, 109, 53, 109,
		54, 109, 55, 109, -1, -2, 44, -1, 30, 111, 31, 111, 39, 111, 41, 111,
		43, 111, 45, 111, 48, 111, 53, 111, 54, 111, 55, 111, -1, -2, 45, -1,
		54, -1, 30, 113, 31, 113, 39, 113, 41, 113, 43, 113, 48, 113, 53, 113,
		55, 113, -1, -2, 7, -1, 41, 15, -1, -2, 53, -1, 30, 11, 31, 11,
		-1, -2, 7, -1, 8, -1, 9, -1, 10, -1, 15, -1, 19, -1, 22, -1,
		24, -1, 27, -1, 28, -1, 33, -1, 37, -1, 38, -1, 40, -1, 41, 47,
		-1, -2, 40, -1, 42, -1, 16, 34, 30, 34, 31, 34, -1, -2, 43, -1,
		30, 39, 31, 39, -1, -2, 48, -1, 39, 115, 43, 115, -1, -2, 43, -1,
		39, 46, 41, 46, -1, -2, 43, -1, 41, 14, -1, -2, 7, -1, 8, -1,
		9, -1, 10, -1, 15, -1, 19, -1, 22, -1, 24, -1, 27, -1, 28, -1,
		33, -1, 37, -1, 38, -1, 40, -1, 42, -1, 41, 47, -1, -2, 7, -1,
		8, -1, 9, -1, 10, -1, 15, -1, 19, -1, 22, -1, 24, -1, 27, -1,
		28, -1, 33, -1, 37, -1, 38, -1, 40, -1, 41, 47, -1, -2, 16, -1,
		30, 36, 31, 36, -1, -2, 1, -1, 5, 53, -1, -2, 40, -1, 30, 76,
		31, 76, 32, 76, 33, 76, 34, 76, 35, 76, 36, 76, 38, 76, 39, 76,
		41, 76, 42, 76, 43, 76, 44, 76, 45, 76, 46, 76, 47, 76, 48, 76,
		49, 76, 50, 76, 51, 76, 52, 76, 53, 76, 54, 76, 55, 76, -1, -2,
		34, -1, 35, -1, 36, -1, 30, 99, 31, 99, 32, 99, 33, 99, 39, 99,
		41, 99, 43, 99, 44, 99, 45, 99, 46, 99, 47, 99, 48, 99, 49, 99,
		50, 99, 51, 99, 52, 99, 53, 99, 54, 99, 55, 99, -1, -2, 34, -1,
		35, -1, 36, -1, 30, 100, 31, 100, 32, 100, 33, 100, 39, 100, 41, 100,
		43, 100, 44, 100, 45, 100, 46, 100, 47, 100, 48, 100, 49, 100, 50, 100,
		51, 100, 52, 100, 53, 100, 54, 100, 55, 100, -1, -2, 32, -1, 33, -1,
		30, 104, 31, 104, 39, 104, 41, 104, 43, 104, 44, 104, 45, 104, 46, 104,
		47, 104, 48, 104, 49, 104, 50, 104, 51, 104, 52, 104, 53, 104, 54, 104,
		55, 104, -1, -2, 32, -1, 33, -1, 30, 105, 31, 105, 39, 105, 41, 105,
		43, 105, 44, 105, 45, 105, 46, 105, 47, 105, 48, 105, 49, 105, 50, 105,
		51, 105, 52, 105, 53, 105, 54, 105, 55, 105, -1, -2, 32, -1, 33, -1,
		30, 102, 31, 102, 39, 102, 41, 102, 43, 102, 44, 102, 45, 102, 46, 102,
		47, 102, 48, 102, 49, 102, 50, 102, 51, 102, 52, 102, 53, 102, 54, 102,
		55, 102, -1, -2, 32, -1, 33, -1, 30, 103, 31, 103, 39, 103, 41, 103,
		43, 103, 44, 103, 45, 103, 46, 103, 47, 103, 48, 103, 49, 103, 50, 103,
		51, 103, 52, 103, 53, 103, 54, 103, 55, 103, -1, -2, 49, -1, 50, -1,
		51, -1, 52, -1, 30, 107, 31, 107, 39, 107, 41, 107, 43, 107, 44, 107,
		45, 107, 46, 107, 47, 107, 48, 107, 53, 107, 54, 107, 55, 107, -1, -2,
		49, -1, 50, -1, 51, -1, 52, -1, 30, 108, 31, 108, 39, 108, 41, 108,
		43, 108, 44, 108, 45, 108, 46, 108, 47, 108, 48, 108, 53, 108, 54, 108,
		55, 108, -1, -2, 46, -1, 47, -1, 30, 110, 31, 110, 39, 110, 41, 110,
		43, 110, 44, 110, 45, 110, 48, 110, 53, 110, 54, 110, 55, 110, -1, -2,
		44, -1, 30, 112, 31, 112, 39, 112, 41, 112, 43, 112, 45, 112, 48, 112,
		53, 112, 54, 112, 55, 112, -1, -2, 42, -1, 30, 13, 31, 13, -1, -2,
		7, -1, 8, -1, 9, -1, 10, -1, 15, -1, 19, -1, 22, -1, 24, -1,
		27, -1, 28, -1, 33, -1, 37, -1, 38, -1, 40, -1, 41, 47, -1, -2,
		7, -1, 8, -1, 9, -1, 10, -1, 15, -1, 19, -1, 22, -1, 24, -1,
		27, -1, 28, -1, 33, -1, 37, -1, 38, -1, 40, -1, 41, 47, -1, -2,
	};


	private static final short[] lapg_sym_goto = new short[] {
		0, 1, 11, 18, 25, 32, 42, 45, 109, 163, 217, 271, 273, 277, 278, 283,
		337, 343, 348, 353, 407, 412, 413, 467, 468, 522, 527, 528, 582, 636, 641, 649,
		656, 661, 720, 723, 726, 729, 783, 838, 841, 903, 913, 917, 922, 924, 925, 927,
		929, 932, 935, 938, 941, 944, 947, 948, 950, 950, 951, 952, 953, 955, 957, 960,
		962, 963, 964, 965, 966, 973, 976, 977, 978, 985, 992, 999, 1006, 1011, 1045, 1046,
		1047, 1048, 1049, 1050, 1051, 1057, 1063, 1070, 1073, 1074, 1075, 1076, 1078, 1083, 1084, 1138,
		1192, 1246, 1247, 1301, 1345, 1387, 1425, 1461, 1496, 1530,
	};

	private static final short[] lapg_sym_from = new short[] {
		220, 0, 4, 6, 14, 20, 60, 110, 133, 158, 199, 6, 14, 20, 60, 110,
		158, 199, 6, 14, 20, 60, 110, 158, 199, 6, 14, 20, 60, 110, 158, 199,
		0, 4, 6, 14, 20, 60, 110, 158, 178, 199, 60, 158, 199, 7, 13, 25,
		27, 29, 30, 31, 36, 39, 40, 41, 42, 43, 59, 61, 64, 66, 74, 76,
		77, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
		106, 107, 114, 119, 120, 121, 122, 125, 128, 129, 134, 136, 138, 160, 168, 174,
		175, 176, 183, 184, 187, 190, 191, 194, 201, 207, 208, 209, 215, 13, 27, 30,
		36, 39, 40, 41, 42, 43, 59, 64, 74, 76, 77, 91, 93, 94, 95, 96,
		97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120, 121, 125, 128,
		129, 134, 136, 138, 168, 174, 175, 176, 183, 184, 187, 190, 191, 194, 201, 207,
		208, 209, 215, 13, 27, 30, 36, 39, 40, 41, 42, 43, 59, 64, 74, 76,
		77, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
		107, 119, 120, 121, 125, 128, 129, 134, 136, 138, 168, 174, 175, 176, 183, 184,
		187, 190, 191, 194, 201, 207, 208, 209, 215, 13, 27, 30, 36, 39, 40, 41,
		42, 43, 59, 64, 74, 76, 77, 91, 93, 94, 95, 96, 97, 98, 99, 100,
		101, 102, 103, 104, 105, 106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138,
		168, 174, 175, 176, 183, 184, 187, 190, 191, 194, 201, 207, 208, 209, 215, 198,
		209, 13, 107, 187, 209, 107, 13, 59, 107, 187, 209, 13, 27, 30, 36, 39,
		40, 41, 42, 43, 59, 64, 74, 76, 77, 91, 93, 94, 95, 96, 97, 98,
		99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120, 121, 125, 128, 129, 134,
		136, 138, 168, 174, 175, 176, 183, 184, 187, 190, 191, 194, 201, 207, 208, 209,
		215, 13, 59, 107, 123, 187, 209, 13, 59, 107, 187, 209, 13, 59, 107, 187,
		209, 13, 27, 30, 36, 39, 40, 41, 42, 43, 59, 64, 74, 76, 77, 91,
		93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119,
		120, 121, 125, 128, 129, 134, 136, 138, 168, 174, 175, 176, 183, 184, 187, 190,
		191, 194, 201, 207, 208, 209, 215, 13, 59, 107, 187, 209, 73, 13, 27, 30,
		36, 39, 40, 41, 42, 43, 59, 64, 74, 76, 77, 91, 93, 94, 95, 96,
		97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120, 121, 125, 128,
		129, 134, 136, 138, 168, 174, 175, 176, 183, 184, 187, 190, 191, 194, 201, 207,
		208, 209, 215, 33, 13, 27, 30, 36, 39, 40, 41, 42, 43, 59, 64, 74,
		76, 77, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
		106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138, 168, 174, 175, 176, 183,
		184, 187, 190, 191, 194, 201, 207, 208, 209, 215, 13, 59, 107, 187, 209, 2,
		13, 27, 30, 36, 39, 40, 41, 42, 43, 59, 64, 74, 76, 77, 91, 93,
		94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120,
		121, 125, 128, 129, 134, 136, 138, 168, 174, 175, 176, 183, 184, 187, 190, 191,
		194, 201, 207, 208, 209, 215, 13, 27, 30, 36, 39, 40, 41, 42, 43, 59,
		64, 74, 76, 77, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
		104, 105, 106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138, 168, 174, 175,
		176, 183, 184, 187, 190, 191, 194, 201, 207, 208, 209, 215, 13, 59, 107, 187,
		209, 26, 44, 46, 78, 115, 156, 157, 217, 44, 46, 78, 115, 156, 157, 217,
		52, 147, 148, 149, 150, 13, 27, 30, 36, 39, 40, 41, 42, 43, 52, 59,
		64, 74, 76, 77, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
		104, 105, 106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138, 147, 148, 149,
		150, 168, 174, 175, 176, 183, 184, 187, 190, 191, 194, 201, 207, 208, 209, 215,
		51, 145, 146, 51, 145, 146, 51, 145, 146, 13, 27, 30, 36, 39, 40, 41,
		42, 43, 59, 64, 74, 76, 77, 91, 93, 94, 95, 96, 97, 98, 99, 100,
		101, 102, 103, 104, 105, 106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138,
		168, 174, 175, 176, 183, 184, 187, 190, 191, 194, 201, 207, 208, 209, 215, 13,
		27, 30, 36, 39, 40, 41, 42, 43, 47, 59, 64, 74, 76, 77, 91, 93,
		94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120,
		121, 125, 128, 129, 134, 136, 138, 168, 174, 175, 176, 183, 184, 187, 190, 191,
		194, 201, 207, 208, 209, 215, 83, 85, 140, 13, 21, 22, 25, 27, 30, 32,
		34, 36, 39, 40, 41, 42, 43, 59, 64, 67, 69, 74, 76, 77, 91, 93,
		94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120,
		121, 125, 128, 129, 134, 136, 138, 141, 168, 174, 175, 176, 183, 184, 187, 190,
		191, 194, 201, 207, 208, 209, 215, 86, 112, 118, 130, 132, 165, 166, 197, 202,
		204, 47, 67, 120, 161, 70, 84, 85, 113, 172, 55, 154, 56, 54, 153, 54,
		153, 82, 132, 181, 53, 151, 152, 53, 151, 152, 53, 151, 152, 53, 151, 152,
		62, 71, 155, 56, 66, 164, 0, 0, 0, 0, 4, 0, 4, 6, 20, 110,
		6, 14, 21, 21, 62, 62, 44, 46, 78, 115, 156, 157, 217, 25, 66, 114,
		61, 61, 6, 14, 20, 60, 110, 158, 199, 6, 14, 20, 60, 110, 158, 199,
		6, 14, 20, 60, 110, 158, 199, 6, 14, 20, 60, 110, 158, 199, 13, 59,
		107, 187, 209, 13, 27, 30, 36, 39, 42, 43, 59, 64, 74, 76, 77, 91,
		106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138, 168, 176, 183, 184, 187,
		190, 194, 201, 208, 209, 67, 67, 123, 123, 70, 70, 42, 64, 120, 121, 183,
		190, 42, 64, 120, 121, 183, 190, 6, 14, 20, 60, 110, 158, 199, 60, 158,
		199, 60, 133, 178, 178, 199, 13, 59, 107, 187, 209, 33, 13, 27, 30, 36,
		39, 40, 41, 42, 43, 59, 64, 74, 76, 77, 91, 93, 94, 95, 96, 97,
		98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120, 121, 125, 128, 129,
		134, 136, 138, 168, 174, 175, 176, 183, 184, 187, 190, 191, 194, 201, 207, 208,
		209, 215, 13, 27, 30, 36, 39, 40, 41, 42, 43, 59, 64, 74, 76, 77,
		91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
		119, 120, 121, 125, 128, 129, 134, 136, 138, 168, 174, 175, 176, 183, 184, 187,
		190, 191, 194, 201, 207, 208, 209, 215, 13, 27, 30, 36, 39, 40, 41, 42,
		43, 59, 64, 74, 76, 77, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101,
		102, 103, 104, 105, 106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138, 168,
		174, 175, 176, 183, 184, 187, 190, 191, 194, 201, 207, 208, 209, 215, 42, 13,
		27, 30, 36, 39, 40, 41, 42, 43, 59, 64, 74, 76, 77, 91, 93, 94,
		95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120, 121,
		125, 128, 129, 134, 136, 138, 168, 174, 175, 176, 183, 184, 187, 190, 191, 194,
		201, 207, 208, 209, 215, 13, 27, 30, 36, 39, 42, 43, 59, 64, 74, 76,
		77, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 119, 120,
		121, 125, 128, 129, 134, 136, 138, 168, 176, 183, 184, 187, 190, 194, 201, 208,
		209, 13, 27, 30, 36, 39, 42, 43, 59, 64, 74, 76, 77, 91, 98, 99,
		100, 101, 102, 103, 104, 105, 106, 107, 119, 120, 121, 125, 128, 129, 134, 136,
		138, 168, 176, 183, 184, 187, 190, 194, 201, 208, 209, 13, 27, 30, 36, 39,
		42, 43, 59, 64, 74, 76, 77, 91, 102, 103, 104, 105, 106, 107, 119, 120,
		121, 125, 128, 129, 134, 136, 138, 168, 176, 183, 184, 187, 190, 194, 201, 208,
		209, 13, 27, 30, 36, 39, 42, 43, 59, 64, 74, 76, 77, 91, 104, 105,
		106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138, 168, 176, 183, 184, 187,
		190, 194, 201, 208, 209, 13, 27, 30, 36, 39, 42, 43, 59, 64, 74, 76,
		77, 91, 105, 106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138, 168, 176,
		183, 184, 187, 190, 194, 201, 208, 209, 13, 27, 30, 36, 39, 42, 43, 59,
		64, 74, 76, 77, 91, 106, 107, 119, 120, 121, 125, 128, 129, 134, 136, 138,
		168, 176, 183, 184, 187, 190, 194, 201, 208, 209,
	};

	private static final short[] lapg_sym_to = new short[] {
		221, 1, 1, 9, 9, 9, 9, 9, 177, 9, 9, 10, 10, 10, 10, 10,
		10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12,
		2, 2, 13, 13, 59, 107, 59, 187, 198, 209, 108, 108, 108, 21, 22, 65,
		22, 71, 22, 73, 22, 22, 22, 22, 22, 22, 22, 111, 22, 65, 22, 22,
		22, 22, 141, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 65, 22, 22, 22, 167, 22, 22, 22, 22, 22, 22, 189, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23,
		23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
		23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
		23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
		23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 69, 69, 69, 69, 69, 69,
		69, 69, 25, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
		69, 69, 69, 69, 69, 69, 25, 69, 69, 69, 69, 69, 69, 69, 69, 69,
		69, 69, 69, 69, 69, 69, 25, 69, 69, 69, 69, 69, 69, 25, 69, 208,
		208, 26, 156, 156, 156, 157, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 29, 29, 29, 168, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31,
		31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 129, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 75, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 7,
		37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
		37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
		37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
		37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
		39, 68, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88,
		96, 96, 96, 96, 96, 40, 40, 40, 40, 40, 40, 40, 40, 40, 97, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 97, 97, 97,
		97, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		93, 93, 93, 94, 94, 94, 95, 95, 95, 41, 41, 41, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42,
		42, 42, 42, 42, 42, 42, 42, 42, 91, 42, 42, 42, 42, 42, 42, 42,
		42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
		42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
		42, 42, 42, 42, 42, 42, 135, 137, 182, 43, 61, 64, 66, 43, 43, 74,
		77, 43, 43, 43, 43, 43, 43, 43, 43, 121, 66, 43, 43, 43, 43, 43,
		43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
		43, 43, 43, 43, 43, 43, 43, 183, 43, 43, 43, 43, 43, 43, 43, 43,
		43, 43, 43, 43, 43, 43, 43, 139, 159, 163, 174, 175, 191, 192, 207, 214,
		215, 92, 122, 122, 122, 125, 136, 138, 160, 194, 104, 104, 105, 102, 102, 103,
		103, 134, 176, 201, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 101,
		114, 128, 184, 106, 119, 190, 220, 3, 4, 5, 8, 6, 6, 14, 60, 158,
		15, 57, 62, 63, 115, 116, 89, 90, 133, 162, 185, 186, 219, 67, 120, 161,
		112, 113, 16, 58, 16, 58, 16, 58, 210, 17, 17, 17, 17, 17, 17, 17,
		18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 44, 44,
		44, 44, 44, 45, 70, 72, 78, 79, 82, 86, 45, 117, 130, 131, 132, 140,
		155, 45, 164, 117, 117, 171, 172, 173, 179, 180, 181, 193, 197, 117, 203, 45,
		117, 206, 213, 217, 45, 123, 124, 169, 170, 126, 127, 83, 118, 165, 166, 202,
		204, 84, 84, 84, 84, 84, 84, 20, 20, 20, 20, 20, 20, 20, 109, 188,
		211, 110, 178, 199, 200, 212, 46, 46, 46, 46, 46, 76, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 85, 50,
		50, 50, 50, 50, 80, 81, 50, 50, 50, 50, 50, 50, 50, 50, 142, 143,
		144, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
		50, 50, 50, 50, 50, 50, 50, 195, 196, 50, 50, 50, 50, 50, 205, 50,
		50, 216, 50, 50, 218, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 145, 146, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 147, 148,
		149, 150, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53,
		53, 53, 53, 53, 53, 53, 53, 53, 151, 152, 53, 53, 53, 53, 53, 53,
		53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
		53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 153, 54,
		54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
		54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 154, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	};

	private static final short[] lapg_rlen = new short[] {
		1, 0, 1, 2, 1, 3, 2, 1, 1, 0, 1, 0, 6, 2, 1, 0,
		3, 1, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
		1, 1, 0, 1, 0, 4, 1, 0, 3, 2, 2, 1, 3, 2, 1, 0,
		3, 3, 5, 3, 1, 0, 7, 1, 2, 2, 4, 3, 4, 6, 1, 0,
		3, 2, 3, 1, 1, 3, 1, 1, 1, 1, 1, 4, 3, 6, 4, 1,
		3, 3, 3, 5, 1, 1, 1, 2, 2, 5, 7, 5, 6, 8, 1, 3,
		3, 3, 1, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 1,
		3, 1, 5, 1, 3,
	};

	private static final short[] lapg_rlex = new short[] {
		58, 58, 57, 59, 59, 60, 60, 60, 64, 64, 66, 66, 61, 67, 70, 70,
		65, 71, 71, 63, 62, 62, 68, 68, 72, 72, 72, 72, 72, 72, 72, 75,
		76, 78, 78, 80, 80, 76, 82, 82, 76, 76, 83, 69, 69, 81, 84, 84,
		79, 73, 73, 88, 89, 89, 74, 90, 90, 90, 91, 86, 92, 92, 93, 93,
		92, 92, 87, 87, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
		96, 96, 97, 97, 95, 95, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99,
		99, 99, 100, 100, 100, 101, 101, 101, 101, 101, 102, 102, 102, 103, 103, 104,
		104, 77, 77, 85, 85,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escdollar",
		"escid",
		"escint",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lcase",
		"Lend",
		"Lelse",
		"Leval",
		"Lfalse",
		"Lfor",
		"Lfile",
		"Lforeach",
		"Lgrep",
		"Lif",
		"Lin",
		"Lmap",
		"Lnot",
		"Lnull",
		"Lswitch",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"Lassert",
		"'}'",
		"'-}'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'->'",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"':'",
		"'?'",
		"'`'",
		"_skip",
		"input",
		"templatesopt",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"template_parametersopt",
		"template_parameters",
		"template_overridesopt",
		"template_overrides",
		"'[-]}'",
		"template_id",
		"identifier_listopt",
		"identifier_list",
		"instruction",
		"control_instruction",
		"switch_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"comma_expropt",
		"comma_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"else_node",
		"anyopt",
		"case_list",
		"one_case",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"complex_data",
		"map_entries",
		"unary_expression",
		"mult_expression",
		"additive_expression",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
		"conditional_or_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escdollar,
		escid,
		escint,
		N24LBRACE,
		N24DIV,
		identifier,
		icon,
		ccon,
		Lcall,
		Lcase,
		Lend,
		Lelse,
		Leval,
		Lfalse,
		Lfor,
		Lfile,
		Lforeach,
		Lgrep,
		Lif,
		Lin,
		Lmap,
		Lnot,
		Lnull,
		Lswitch,
		Ltemplate,
		Ltrue,
		Lthis,
		Lassert,
		RBRACE,
		MINUSRBRACE,
		PLUS,
		MINUS,
		MULT,
		DIV,
		PERC,
		EXCL,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		MINUSGREATER,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		COLON,
		QUESTMARK,
		N60,
		_skip,
		input,
		templatesopt,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		template_parametersopt,
		template_parameters,
		template_overridesopt,
		template_overrides,
		LBRACKETMINUSRBRACKETRBRACE,
		template_id,
		identifier_listopt,
		identifier_list,
		instruction,
		control_instruction,
		switch_instruction,
		simple_instruction,
		sentence,
		expression,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		comma_expropt,
		comma_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		else_node,
		anyopt,
		case_list,
		one_case,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		complex_data,
		map_entries,
		unary_expression,
		mult_expression,
		additive_expression,
		relational_expression,
		equality_expression,
		conditional_and_expression,
		conditional_or_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[2048];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;


		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;


		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 2047 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) { 
					lapg_current_offset++;
					if( chr == '\n' ) lapg_current_line++;
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 3:
					 lapg_n.sym = new String(token,1,lapg_size-1); break; 
				case 4:
					 lapg_n.sym = Integer.parseInt(new String(token,1,lapg_size-1)); break; 
				case 5:
					 group = 1; break; 
				case 7:
					 lapg_n.sym = new String(token,0,lapg_size); break; 
				case 8:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break; 
				case 9:
					 lapg_n.sym = new String(token,1,lapg_size-2); break; 
				case 30:
					 group = 0; break; 
				case 31:
					 group = 0; break; 
				case 56:
					 continue; 
			}



			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX )
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 5:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym)); 
							break;
						case 6:
							 templates.add(((TemplateNode)lapg_m[lapg_head-1].sym)); 
							break;
						case 12:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-2].sym), templatePackage, ((String)lapg_m[lapg_head-1].sym), inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 13:
							 lapg_gg.sym = ((String)lapg_m[lapg_head-0].sym); 
							break;
						case 16:
							 lapg_gg.sym = ((ArrayList)lapg_m[lapg_head-1].sym); 
							break;
						case 17:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 18:
							 ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 20:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 21:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 22:
							 skipSpaces(lapg_m[lapg_head-0].pos.offset+1); 
							break;
						case 27:
							 lapg_gg.sym = createEscapedId(((String)lapg_m[lapg_head-0].sym), lapg_m[lapg_head-0].pos.line); 
							break;
						case 28:
							 lapg_gg.sym = new IndexNode(null, new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line), inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 29:
							 lapg_gg.sym = new DollarNode(inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 30:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 31:
							 lapg_gg.sym = ((Node)lapg_m[lapg_head-1].sym); 
							break;
						case 37:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 40:
							 lapg_gg.sym = new EvalNode(((ExpressionNode)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName,lapg_m[lapg_head-2].pos.line); 
							break;
						case 41:
							 lapg_gg.sym = new AssertNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName,lapg_m[lapg_head-1].pos.line); 
							break;
						case 42:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-0].sym); 
							break;
						case 44:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym); 
							break;
						case 45:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-0].sym); 
							break;
						case 48:
							 lapg_gg.sym = ((ArrayList)lapg_m[lapg_head-1].sym); 
							break;
						case 49:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 50:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-3].sym)); applyElse(((CompoundNode)lapg_gg.sym),((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 54:
							 lapg_gg.sym = new SwitchNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-6].pos.line); checkIsSpace(lapg_m[lapg_head-2].pos.offset,lapg_m[lapg_head-2].endpos.offset); 
							break;
						case 55:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 56:
							 ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 57:
							 CaseNode.add(((ArrayList)lapg_gg.sym), ((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 58:
							 lapg_gg.sym = new CaseNode(((ExpressionNode)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 59:
							 lapg_gg.sym = ((CompoundNode)lapg_m[lapg_head-1].sym); 
							break;
						case 60:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 61:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 64:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 65:
							 lapg_gg.sym = new FileNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line); 
							break;
						case 68:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 69:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-1].sym); 
							break;
						case 70:
							 lapg_gg.sym = new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 71:
							 lapg_gg.sym = new LiteralNode(((Boolean)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 72:
							 lapg_gg.sym = new LiteralNode(((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 73:
							 lapg_gg.sym = new ThisNode(inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 74:
							 lapg_gg.sym = new LiteralNode(null, inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 75:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 76:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 77:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 78:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 80:
							 lapg_gg.sym = new ListNode(((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 81:
							 lapg_gg.sym = new ConcreteMapNode(((HashMap<ExpressionNode,ExpressionNode>)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 82:
							 lapg_gg.sym = new HashMap(); ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 83:
							 ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 84:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 85:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 87:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.NOT, ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line); 
							break;
						case 88:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.MINUS, ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line); 
							break;
						case 89:
							 lapg_gg.sym = new MapNode(null,((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-4].pos.line); 
							break;
						case 90:
							 lapg_gg.sym = new MapNode(((ExpressionNode)lapg_m[lapg_head-4].sym),((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-6].pos.line); 
							break;
						case 91:
							 error("TODO"); 
							break;
						case 92:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-3].sym),((ArrayList)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 93:
							 lapg_gg.sym = new CallTemplateNode(((ExpressionNode)lapg_m[lapg_head-4].sym),((ArrayList)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-7].pos.line); 
							break;
						case 95:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MULT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 96:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.DIV, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 97:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.REM, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 99:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.PLUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 100:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MINUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 102:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 103:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 104:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 105:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 107:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 108:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 110:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 112:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 114:
							 lapg_gg.sym = new TriplexNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym), inputName, lapg_m[lapg_head-4].pos.line); 
							break;
						case 115:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 116:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) 
						lapg_m[lapg_head--] = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );

					if( DEBUG_SYNTAX )
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 221 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}

