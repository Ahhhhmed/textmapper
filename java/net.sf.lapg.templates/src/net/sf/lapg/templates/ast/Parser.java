// Parser.java

package net.sf.lapg.templates.ast;

import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.lapg.templates.api.ITemplate;

public class Parser {

	private ArrayList<ITemplate> templates;
	private String templatePackage;

	public Parser() {
	}

	private static final boolean DEBUG_SYNTAX = false;

	private String inputName;
	private int killEnds = -1;
	private byte[] buff;
	private int l;

	private String rawText(int start, int end) {
		if( killEnds == start ) {
			while( start < end && (buff[start] == '\t' || buff[start] == ' ') ) {
				start++;
			}

			if( start < end && buff[start] == '\r' ) {
				start++;
			}

			if( start < end && buff[start] == '\n' ) {
				start++;
			}
		}
		try {
			return new String(buff, start, end-start, "utf-8");
		} catch(UnsupportedEncodingException ex) {
			return "";
		}
	}

	private void checkIsSpace(int start, int end) {
		String val = rawText(start,end).trim();
		if( val.length() > 0 ) {
			error("Unknown text ignored: `"+val+"`");
		}
	}

	private void applyElse(CompoundNode node, ArrayList<Node> instructions) {
		if( node instanceof IfNode ) {
			((IfNode)node).setElseInstructions(instructions);
		} else {
			error("Unknown else node, instructions skipped");
		}
	}

	private Node createEscapedId(String escid, int line) {
		int sharp = escid.indexOf('#');
		if( sharp >= 0 ) {
			Integer index = new Integer(escid.substring(sharp+1));
			escid = escid.substring(0, sharp);
			return new IndexNode(new SelectNode(null,escid,inputName,line), new LiteralNode(index,inputName,line),inputName,line);

		} else {
			return new SelectNode(null,escid,inputName,line);
		}
	}

	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}

	void error( String s ) {
		System.err.println(s);
	}

	public boolean parse(String s, String templatePackage, String inputName) {
		l = 0;
		this.templatePackage = templatePackage;
		this.inputName = inputName;
		templates = new ArrayList<ITemplate>();
		try {
			buff = s.getBytes("utf-8");
		} catch( UnsupportedEncodingException ex ) {
			return false;
		}
		return parse();
	}

	public ITemplate[] getResult() {
		return templates.toArray(new ITemplate[templates.size()]);
	}

	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
		  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,   1,  32,  33,  34,  35,
		   1,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,
		  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,   1,  65,
		   1,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,
		  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private final short[][] lapg_lexem = new short[][] {
		{  -2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,   4,   4,   4,   4,   5,  -1,  -1,  -1,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  19,  20,  21,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  -1,  25,  23,  26,  23,  27,  23,  28,  29,  23,  23,  30,  23,  23,  23,  31,  32,  23,  23,  23,  23,  33,  34,  23,  23,  23,  23,  23,  23,  -1,  35,  36, },
		{  -3,   2,   2,   2,   2,   2,   2,   2,   2,  -3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  37,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  -1,  -1,  -1,  -1,  -1,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -1,  -1,  -1,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  -1,  -1, },
		{ -55, -55,   4,   4,   4,   4, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, },
		{ -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37,  42, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, },
		{ -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  43,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{ -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, },
		{ -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, },
		{ -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, },
		{ -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, },
		{ -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, },
		{ -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33,  46, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33,  47, },
		{ -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, },
		{ -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, },
		{ -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, },
		{ -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51,  48, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  49,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{ -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52,  50, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, },
		{ -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, },
		{ -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  51,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  52,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  53,  23,  54,  23,  23,  23,  23,  23,  23,  23,  55,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  56,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  57,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  58,  23,  23,  23,  23,  23,  23,  23,  59,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  60,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  61,  23,  23,  23,  23,  23,  62,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  63,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  64,  23,  23,  65,  23,  23,  23,  23,  23,  23,  23,  23,  23,  66,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  67,  -1, },
		{ -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  68,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -5,  -5,  -5,  -5,  -5,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -5,  -5,  -5,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -5,  -5,  -5, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, },
		{ -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, },
		{ -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  69,  69,  69,  69,  69,  69,  69,  69,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,   8,   8,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,   8,  -1,   8,  -1,   8,  -1,  70,  -1,  -1,  -1,  -1,  -1, },
		{ -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, },
		{ -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, },
		{ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, },
		{ -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, },
		{ -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  71,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  72,  23,  23,  23,  23,  23,  23,  73,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  74,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  75,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  76,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  77,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  78,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -20, -20, -20, -20, -20,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -20, -20, -20,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -20, -20, -20, },
		{ -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -21, -21, -21, -21, -21,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -21, -21, -21,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -21, -21, -21, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  79,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  80,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  81,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  82,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  83,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  84,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  85,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  86,  86,  86,  86,  86,  86,  86,  86,  86,  86,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,  87,  87,  87,  87,  87,  87,  87,  87,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  -1,  -1,  -1,  -1,  -1,  88,  88,  88,  88,  88,  88,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  88,  88,  88,  88,  88,  88,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  89,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  90,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  91,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  92,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -14, -14, -14, -14, -14,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -14, -14, -14,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -14, -14, -14, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  93,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  94,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -18, -18, -18, -18, -18,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -18, -18, -18,  23,  23,  23,  23,  23,  95,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -18, -18, -18, },
		{ -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -22, -22, -22, -22, -22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -22, -22, -22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -22, -22, -22, },
		{ -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -23, -23, -23, -23, -23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -23, -23, -23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -23, -23, -23, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  96,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  97,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  98,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  99,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23, 100,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  86,  86,  86,  86,  86,  86,  86,  86,  86,  86,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,   8,   8,   8,   8,   8,  88,  88,  88,  88,  88,  88,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,  88,  88,  88,  88,  88,  88,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 101,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -12, -12, -12, -12, -12,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -12, -12, -12,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -12, -12, -12, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -13, -13, -13, -13, -13,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -13, -13, -13,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -13, -13, -13, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -15, -15, -15, -15, -15,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -15, -15, -15,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -15, -15, -15, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -16, -16, -16, -16, -16,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -16, -16, -16,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -16, -16, -16, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23, 102,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23, 103,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -24, -24, -24, -24, -24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -24, -24, -24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -24, -24, -24, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23, 104,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 105,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -28, -28, -28, -28, -28,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -28, -28, -28,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -28, -28, -28, },
		{ -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -27, -27, -27, -27, -27,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -27, -27, -27,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -27, -27, -27, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 106,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -17, -17, -17, -17, -17,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -17, -17, -17,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -17, -17, -17, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23, 107,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23, 108,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23, 109,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -29, -29, -29, -29, -29,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -29, -29, -29,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -29, -29, -29, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23, 110,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -25, -25, -25, -25, -25,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -25, -25, -25,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -25, -25, -25, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 111,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -19, -19, -19, -19, -19,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -19, -19, -19,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -19, -19, -19, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23, 112,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -26, -26, -26, -26, -26,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -26, -26, -26,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -26, -26, -26, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,   4,  -1,  -3,   2,  -1,  -1,   1,  27,  26,  24,  25,  -1,  -1,  18,  21,
		  22,  23,  -1, -11, -21,  66,  68,  -1,  -1,  81,  -1,  -1, -71,  -1,  70,  -1,
		  80,  69,  -1,  -1,  -1,-101,  -1,  -1,  29,  -1,-131,  67,  75,  88,-179,-223,
		-261,-295,-321,-343,  -1,   3,  17,  -1,-363,-369,   5,-377,  40,  -1,-407,  -1,
		-419,  -1,  -1,  59,  -1,  -1,  -1,  38,  84,  83,-427,  -1,-435,  -1,  -1,  20,
		  19,  28,  56,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1,  63,  46,  -1,  14,  -1,-443,  -1,  -1,   7, 109,  -1,
		-449,-481,  -1,-511,  30,  -1,  37,  35,  -1,  -1,  61,  -1,-519,  -1,  76,  -1,
		  77,  -1,  65,  -1,-525,  89,  90,  91,-575,-619,-663,-701,-739,-777,-815,-849,
		-883,-909,  -1,  16,  -1,  -1,  -1,  13,  -1,-931,   9,  71,  -1,  -1,  41,  -1,
		  34,  32,  39,  -1,  57,  -1,  -1,  49,  -1,  78, 110,  -1,  74,-939,  -1,  62,
		  48,  -1,  47,  15,  -1,  45,  42,  -1,  85,  -1,  -1,  -1,  52,  -1,  -1, 108,
		  87,  58,  -1,  -1,  -1,  54,  51,  53,  79,  73,  86,  -1,  55,  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   1,  -1,   5,  -1,   0,   0,  -1,  -2,  38,  -1,  28,   6,  29,   6,  51,   6,
		  -1,  -2,  38,  -1,  28,  64,  29,  64,  30,  64,  31,  64,  32,  64,  33,  64,
		  34,  64,  36,  64,  37,  64,  39,  64,  40,  64,  41,  64,  42,  64,  43,  64,
		  44,  64,  45,  64,  46,  64,  47,  64,  48,  64,  49,  64,  50,  64,  51,  64,
		  52,  64,  -1,  -2,  21,  -1,   7,  60,   8,  60,   9,  60,  10,  60,  15,  60,
		  20,  60,  22,  60,  25,  60,  26,  60,  31,  60,  35,  60,  36,  60,  38,  60,
		  -1,  -2,   7,  -1,   8,  -1,   9,  -1,  10,  -1,  15,  -1,  20,  -1,  22,  -1,
		  25,  -1,  26,  -1,  31,  -1,  35,  -1,  36,  -1,  38,  -1,  37,  44,  -1,  -2,
		  36,  -1,  40,  -1,  28,  82,  29,  82,  30,  82,  31,  82,  32,  82,  33,  82,
		  34,  82,  37,  82,  39,  82,  41,  82,  42,  82,  43,  82,  44,  82,  45,  82,
		  46,  82,  47,  82,  48,  82,  49,  82,  50,  82,  51,  82,  52,  82,  -1,  -2,
		  32,  -1,  33,  -1,  34,  -1,  28,  92,  29,  92,  30,  92,  31,  92,  37,  92,
		  39,  92,  41,  92,  42,  92,  43,  92,  44,  92,  45,  92,  46,  92,  47,  92,
		  48,  92,  49,  92,  50,  92,  51,  92,  52,  92,  -1,  -2,  30,  -1,  31,  -1,
		  28,  95,  29,  95,  37,  95,  39,  95,  41,  95,  42,  95,  43,  95,  44,  95,
		  45,  95,  46,  95,  47,  95,  48,  95,  49,  95,  50,  95,  51,  95,  52,  95,
		  -1,  -2,  47,  -1,  48,  -1,  49,  -1,  50,  -1,  28, 100,  29, 100,  37, 100,
		  39, 100,  41, 100,  42, 100,  43, 100,  44, 100,  45, 100,  46, 100,  51, 100,
		  52, 100,  -1,  -2,  44,  -1,  45,  -1,  28, 103,  29, 103,  37, 103,  39, 103,
		  41, 103,  42, 103,  43, 103,  46, 103,  51, 103,  52, 103,  -1,  -2,  42,  -1,
		  28, 105,  29, 105,  37, 105,  39, 105,  41, 105,  43, 105,  46, 105,  51, 105,
		  52, 105,  -1,  -2,  43,  -1,  52,  -1,  28, 107,  29, 107,  37, 107,  39, 107,
		  41, 107,  46, 107,  51, 107,  -1,  -2,   7,  -1,  39,  12,  -1,  -2,  51,  -1,
		  28,   8,  29,   8,  -1,  -2,   7,  -1,   8,  -1,   9,  -1,  10,  -1,  15,  -1,
		  20,  -1,  22,  -1,  25,  -1,  26,  -1,  31,  -1,  35,  -1,  36,  -1,  38,  -1,
		  39,  44,  -1,  -2,  38,  -1,  40,  -1,  16,  31,  28,  31,  29,  31,  -1,  -2,
		  41,  -1,  28,  36,  29,  36,  -1,  -2,  46,  -1,  37, 109,  41, 109,  -1,  -2,
		  41,  -1,  37,  43,  39,  43,  -1,  -2,  41,  -1,  39,  11,  -1,  -2,   7,  -1,
		   8,  -1,   9,  -1,  10,  -1,  15,  -1,  20,  -1,  22,  -1,  25,  -1,  26,  -1,
		  31,  -1,  35,  -1,  36,  -1,  38,  -1,  40,  -1,  39,  44,  -1,  -2,   7,  -1,
		   8,  -1,   9,  -1,  10,  -1,  15,  -1,  20,  -1,  22,  -1,  25,  -1,  26,  -1,
		  31,  -1,  35,  -1,  36,  -1,  38,  -1,  39,  44,  -1,  -2,  16,  -1,  28,  33,
		  29,  33,  -1,  -2,   1,  -1,   5,  50,  -1,  -2,  38,  -1,  28,  72,  29,  72,
		  30,  72,  31,  72,  32,  72,  33,  72,  34,  72,  36,  72,  37,  72,  39,  72,
		  40,  72,  41,  72,  42,  72,  43,  72,  44,  72,  45,  72,  46,  72,  47,  72,
		  48,  72,  49,  72,  50,  72,  51,  72,  52,  72,  -1,  -2,  32,  -1,  33,  -1,
		  34,  -1,  28,  93,  29,  93,  30,  93,  31,  93,  37,  93,  39,  93,  41,  93,
		  42,  93,  43,  93,  44,  93,  45,  93,  46,  93,  47,  93,  48,  93,  49,  93,
		  50,  93,  51,  93,  52,  93,  -1,  -2,  32,  -1,  33,  -1,  34,  -1,  28,  94,
		  29,  94,  30,  94,  31,  94,  37,  94,  39,  94,  41,  94,  42,  94,  43,  94,
		  44,  94,  45,  94,  46,  94,  47,  94,  48,  94,  49,  94,  50,  94,  51,  94,
		  52,  94,  -1,  -2,  30,  -1,  31,  -1,  28,  98,  29,  98,  37,  98,  39,  98,
		  41,  98,  42,  98,  43,  98,  44,  98,  45,  98,  46,  98,  47,  98,  48,  98,
		  49,  98,  50,  98,  51,  98,  52,  98,  -1,  -2,  30,  -1,  31,  -1,  28,  99,
		  29,  99,  37,  99,  39,  99,  41,  99,  42,  99,  43,  99,  44,  99,  45,  99,
		  46,  99,  47,  99,  48,  99,  49,  99,  50,  99,  51,  99,  52,  99,  -1,  -2,
		  30,  -1,  31,  -1,  28,  96,  29,  96,  37,  96,  39,  96,  41,  96,  42,  96,
		  43,  96,  44,  96,  45,  96,  46,  96,  47,  96,  48,  96,  49,  96,  50,  96,
		  51,  96,  52,  96,  -1,  -2,  30,  -1,  31,  -1,  28,  97,  29,  97,  37,  97,
		  39,  97,  41,  97,  42,  97,  43,  97,  44,  97,  45,  97,  46,  97,  47,  97,
		  48,  97,  49,  97,  50,  97,  51,  97,  52,  97,  -1,  -2,  47,  -1,  48,  -1,
		  49,  -1,  50,  -1,  28, 101,  29, 101,  37, 101,  39, 101,  41, 101,  42, 101,
		  43, 101,  44, 101,  45, 101,  46, 101,  51, 101,  52, 101,  -1,  -2,  47,  -1,
		  48,  -1,  49,  -1,  50,  -1,  28, 102,  29, 102,  37, 102,  39, 102,  41, 102,
		  42, 102,  43, 102,  44, 102,  45, 102,  46, 102,  51, 102,  52, 102,  -1,  -2,
		  44,  -1,  45,  -1,  28, 104,  29, 104,  37, 104,  39, 104,  41, 104,  42, 104,
		  43, 104,  46, 104,  51, 104,  52, 104,  -1,  -2,  42,  -1,  28, 106,  29, 106,
		  37, 106,  39, 106,  41, 106,  43, 106,  46, 106,  51, 106,  52, 106,  -1,  -2,
		  40,  -1,  28,  10,  29,  10,  -1,  -2,   7,  -1,   8,  -1,   9,  -1,  10,  -1,
		  15,  -1,  20,  -1,  22,  -1,  25,  -1,  26,  -1,  31,  -1,  35,  -1,  36,  -1,
		  38,  -1,  39,  44,  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,  11,  18,  25,  32,  42,  45, 103, 151, 199, 247, 249, 253, 254, 259,
		 307, 313, 318, 323, 324, 372, 373, 421, 426, 427, 475, 523, 528, 536, 543, 548,
		 601, 604, 607, 610, 658, 707, 710, 765, 773, 777, 782, 784, 785, 787, 789, 792,
		 795, 798, 801, 804, 807, 808, 808, 809, 810, 812, 814, 817, 818, 819, 820, 821,
		 822, 829, 832, 833, 834, 841, 848, 855, 862, 867, 897, 898, 899, 900, 901, 902,
		 903, 908, 913, 920, 923, 924, 925, 926, 928, 933, 934, 982,1030,1078,1079,1127,
		1167,1205,1239,1271,1302,1332,
	};

	private static final short[] lapg_sym_from = new short[] {
		 205,   0,   3,   5,  13,  18,  55, 103, 124, 150, 187,   5,  13,  18,  55, 103,
		 150, 187,   5,  13,  18,  55, 103, 150, 187,   5,  13,  18,  55, 103, 150, 187,
		   0,   3,   5,  13,  18,  55, 103, 150, 168, 187,  55, 150, 187,   6,  12,  23,
		  24,  26,  27,  31,  34,  35,  36,  37,  38,  52,  56,  59,  61,  68,  69,  83,
		  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100,
		 107, 112, 113, 114, 117, 120, 121, 125, 127, 129, 152, 159, 165, 166, 173, 174,
		 177, 180, 183, 189, 194, 195, 196,  12,  24,  31,  34,  35,  36,  37,  38,  52,
		  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
		  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174,
		 177, 180, 183, 189, 194, 195, 196,  12,  24,  31,  34,  35,  36,  37,  38,  52,
		  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
		  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174,
		 177, 180, 183, 189, 194, 195, 196,  12,  24,  31,  34,  35,  36,  37,  38,  52,
		  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
		  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174,
		 177, 180, 183, 189, 194, 195, 196, 186, 196,  52, 100, 177, 196, 100,  12,  52,
		 100, 177, 196,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,
		  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 112,
		 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174, 177, 180, 183, 189,
		 194, 195, 196,  12,  52, 100, 115, 177, 196,  12,  52, 100, 177, 196,  12,  52,
		 100, 177, 196,  66,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,
		  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100,
		 112, 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174, 177, 180, 183,
		 189, 194, 195, 196,  28,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,
		  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
		 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174, 177, 180,
		 183, 189, 194, 195, 196,  12,  52, 100, 177, 196,   2,  12,  24,  31,  34,  35,
		  36,  37,  38,  52,  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,
		  93,  94,  95,  96,  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159,
		 165, 166, 173, 174, 177, 180, 183, 189, 194, 195, 196,  12,  24,  31,  34,  35,
		  36,  37,  38,  52,  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,
		  93,  94,  95,  96,  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159,
		 165, 166, 173, 174, 177, 180, 183, 189, 194, 195, 196,  12,  52, 100, 177, 196,
		  39,  41,  70,  99, 108, 148, 149, 203,  39,  41,  70, 108, 148, 149, 203,  47,
		 138, 139, 140, 141,  12,  24,  31,  34,  35,  36,  37,  38,  47,  52,  59,  68,
		  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
		 100, 112, 113, 117, 120, 121, 125, 127, 129, 138, 139, 140, 141, 159, 165, 166,
		 173, 174, 177, 180, 183, 189, 194, 195, 196,  46, 136, 137,  46, 136, 137,  46,
		 136, 137,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,  85,
		  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 112, 113,
		 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174, 177, 180, 183, 189, 194,
		 195, 196,  12,  24,  31,  34,  35,  36,  37,  38,  42,  52,  59,  68,  69,  83,
		  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 112,
		 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174, 177, 180, 183, 189,
		 194, 195, 196,  75,  77, 131,  12,  19,  20,  23,  24,  29,  31,  34,  35,  36,
		  37,  38,  52,  59,  62,  63,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,
		  92,  93,  94,  95,  96,  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129,
		 132, 159, 165, 166, 173, 174, 177, 180, 183, 189, 194, 195, 196,  78, 105, 111,
		 123, 156, 157, 185, 190,  42,  62, 112, 153,  64,  76,  77, 106, 163,  50, 145,
		  51,  49, 144,  49, 144,  74, 123, 171,  48, 142, 143,  48, 142, 143,  48, 142,
		 143,  48, 142, 143,  57,  65, 146,  51,   0,   0,   0,   3,   0,   3,   5,  18,
		 103,  13,  19,  19,  57,  57,  39,  41,  70, 108, 148, 149, 203,  23,  61, 107,
		  56,  56,   5,  13,  18,  55, 103, 150, 187,   5,  13,  18,  55, 103, 150, 187,
		   5,  13,  18,  55, 103, 150, 187,   5,  13,  18,  55, 103, 150, 187,  12,  52,
		 100, 177, 196,  12,  24,  31,  34,  37,  38,  52,  59,  68,  69,  83,  98, 100,
		 112, 113, 117, 120, 121, 125, 127, 129, 159, 166, 173, 174, 177, 183, 189, 195,
		 196,  62,  62, 115, 115,  64,  64,  37,  59, 112, 113, 173,  37,  59, 112, 113,
		 173,   5,  13,  18,  55, 103, 150, 187,  55, 150, 187,  55, 124, 168, 168, 187,
		  12,  52, 100, 177, 196,  28,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,
		  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
		  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174, 177,
		 180, 183, 189, 194, 195, 196,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,
		  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
		  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174, 177,
		 180, 183, 189, 194, 195, 196,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,
		  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
		  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174, 177,
		 180, 183, 189, 194, 195, 196,  37,  12,  24,  31,  34,  35,  36,  37,  38,  52,
		  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
		  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 165, 166, 173, 174,
		 177, 180, 183, 189, 194, 195, 196,  12,  24,  31,  34,  37,  38,  52,  59,  68,
		  69,  83,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 112, 113,
		 117, 120, 121, 125, 127, 129, 159, 166, 173, 174, 177, 183, 189, 195, 196,  12,
		  24,  31,  34,  37,  38,  52,  59,  68,  69,  83,  90,  91,  92,  93,  94,  95,
		  96,  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 166, 173, 174,
		 177, 183, 189, 195, 196,  12,  24,  31,  34,  37,  38,  52,  59,  68,  69,  83,
		  94,  95,  96,  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 166,
		 173, 174, 177, 183, 189, 195, 196,  12,  24,  31,  34,  37,  38,  52,  59,  68,
		  69,  83,  96,  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 166,
		 173, 174, 177, 183, 189, 195, 196,  12,  24,  31,  34,  37,  38,  52,  59,  68,
		  69,  83,  97,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 166, 173,
		 174, 177, 183, 189, 195, 196,  12,  24,  31,  34,  37,  38,  52,  59,  68,  69,
		  83,  98, 100, 112, 113, 117, 120, 121, 125, 127, 129, 159, 166, 173, 174, 177,
		 183, 189, 195, 196,
	};

	private static final short[] lapg_sym_to = new short[] {
		 206,   1,   1,   8,   8,   8,   8,   8, 167,   8,   8,   9,   9,   9,   9,   9,
		   9,   9,  10,  10,  10,  10,  10,  10,  10,  11,  11,  11,  11,  11,  11,  11,
		   2,   2,  12,  52,  12, 100,  12, 177, 186, 196, 101, 101, 101,  19,  20,  60,
		  20,  65,  66,  20,  20,  20,  20,  20,  20,  20, 104,  20,  60,  20,  20,  20,
		 132,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,
		  60,  20,  20, 158,  20,  20,  20,  20,  20,  20, 179,  20,  20,  20,  20,  20,
		  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  23,  63,  63,  63,  63,  63,  63,  63,  23,
		  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,
		  63,  63,  23,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,
		  23,  63,  63,  63,  63,  63,  23, 195, 195,  99, 148, 148, 148, 149,  24,  24,
		  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
		  25,  25,  25,  26,  26,  26, 159,  26,  26,  27,  27,  27,  27,  27,  28,  28,
		  28,  28,  28, 121,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,
		  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,
		  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,
		  29,  29,  29,  29,  67,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,   6,  32,  32,  32,  32,  32,
		  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,
		  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,
		  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,
		  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
		  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
		  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,
		  79,  79,  79, 147,  79,  79,  79,  79,  80,  80,  80,  80,  80,  80,  80,  88,
		  88,  88,  88,  88,  35,  35,  35,  35,  35,  35,  35,  35,  89,  35,  35,  35,
		  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,
		  35,  35,  35,  35,  35,  35,  35,  35,  35,  89,  89,  89,  89,  35,  35,  35,
		  35,  35,  35,  35,  35,  35,  35,  35,  35,  85,  85,  85,  86,  86,  86,  87,
		  87,  87,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  37,  37,  37,  37,  37,  37,  37,  37,  83,  37,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,
		  37,  37,  37, 126, 128, 172,  38,  56,  59,  61,  38,  69,  38,  38,  38,  38,
		  38,  38,  38,  38, 113,  61,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,
		  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,
		 173,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38, 130, 151, 155,
		 165, 180, 181, 194, 201,  84, 114, 114, 114, 117, 127, 129, 152, 183,  96,  96,
		  97,  94,  94,  95,  95, 125, 166, 189,  90,  90,  90,  91,  91,  91,  92,  92,
		  92,  93,  93,  93, 107, 120, 174,  98, 205,   3,   4,   7,   5,   5,  13,  55,
		 150,  53,  57,  58, 108, 109,  81,  82, 124, 154, 175, 176, 204,  62, 112, 153,
		 105, 106,  14,  54,  14,  54,  14,  54, 197,  15,  15,  15,  15,  15,  15,  15,
		  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  39,  39,
		  39,  39,  39,  40,  64,  70,  71,  74,  78,  40, 110, 122, 123, 131, 146,  40,
		 110, 110, 162, 163, 164, 169, 170, 171, 182, 185, 110, 191,  40, 193, 200, 203,
		  40, 115, 116, 160, 161, 118, 119,  75, 111, 156, 157, 190,  76,  76,  76,  76,
		  76,  18,  18,  18,  18,  18,  18,  18, 102, 178, 198, 103, 168, 187, 188, 199,
		  41,  41,  41,  41,  41,  68,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,
		  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,
		  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,
		  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,
		  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,
		  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,
		  44,  44,  44,  44,  44,  44,  77,  45,  45,  45,  45,  72,  73,  45,  45,  45,
		  45,  45,  45,  45, 133, 134, 135,  45,  45,  45,  45,  45,  45,  45,  45,  45,
		  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45, 184,  45,  45,  45,
		  45, 192,  45,  45, 202,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,
		  46,  46, 136, 137,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,
		  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  47,
		  47,  47,  47,  47,  47,  47,  47,  47,  47,  47, 138, 139, 140, 141,  47,  47,
		  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,
		  47,  47,  47,  47,  47,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,
		 142, 143,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,
		  48,  48,  48,  48,  48,  48,  48,  49,  49,  49,  49,  49,  49,  49,  49,  49,
		  49,  49, 144,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,
		  49,  49,  49,  49,  49,  49,  49,  50,  50,  50,  50,  50,  50,  50,  50,  50,
		  50,  50, 145,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,
		  50,  50,  50,  50,  50,  50,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
		  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
		  51,  51,  51,  51,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   1,   3,   1,   1,   0,   1,   0,   6,   2,   1,   0,   3,   1,   3,
		   3,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   1,   1,   0,
		   1,   0,   4,   1,   0,   3,   2,   2,   1,   3,   2,   1,   0,   3,   3,   5,
		   3,   1,   0,   7,   1,   2,   2,   4,   3,   4,   6,   1,   0,   3,   3,   1,
		   1,   3,   1,   1,   1,   1,   1,   4,   3,   6,   4,   1,   3,   3,   3,   5,
		   1,   1,   1,   2,   2,   5,   7,   6,   1,   3,   3,   3,   1,   3,   3,   1,
		   3,   3,   3,   3,   1,   3,   3,   1,   3,   1,   3,   1,   5,   1,   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  54,  55,  55,  56,  56,  60,  60,  62,  62,  57,  63,  66,  66,  61,  67,  67,
		  59,  58,  58,  64,  64,  68,  68,  68,  68,  68,  68,  68,  71,  72,  74,  74,
		  76,  76,  72,  78,  78,  72,  72,  79,  65,  65,  77,  80,  80,  75,  69,  69,
		  84,  85,  85,  70,  86,  86,  86,  87,  82,  88,  88,  89,  89,  88,  83,  83,
		  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  92,  92,  93,  93,
		  91,  91,  94,  94,  94,  94,  94,  94,  95,  95,  95,  95,  96,  96,  96,  97,
		  97,  97,  97,  97,  98,  98,  98,  99,  99, 100, 100,  73,  73,  81,  81,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escdollar",
		"escid",
		"escint",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lcase",
		"Lend",
		"Lelse",
		"Leval",
		"Lfalse",
		"Lfor",
		"Lforeach",
		"Lif",
		"Lin",
		"Lmap",
		"Lnot",
		"Lnull",
		"Lswitch",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"Lassert",
		"'}'",
		"'-}'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'->'",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"':'",
		"'?'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"template_parametersopt",
		"template_parameters",
		"template_overridesopt",
		"template_overrides",
		"'[-]}'",
		"template_id",
		"identifier_listopt",
		"identifier_list",
		"instruction",
		"control_instruction",
		"switch_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"comma_expropt",
		"comma_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"else_node",
		"anyopt",
		"case_list",
		"one_case",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"complex_data",
		"map_entries",
		"unary_expression",
		"mult_expression",
		"additive_expression",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
		"conditional_or_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escdollar,
		escid,
		escint,
		N24LBRACE,
		N24DIV,
		identifier,
		icon,
		ccon,
		Lcall,
		Lcase,
		Lend,
		Lelse,
		Leval,
		Lfalse,
		Lfor,
		Lforeach,
		Lif,
		Lin,
		Lmap,
		Lnot,
		Lnull,
		Lswitch,
		Ltemplate,
		Ltrue,
		Lthis,
		Lassert,
		RBRACE,
		MINUSRBRACE,
		PLUS,
		MINUS,
		MULT,
		DIV,
		PERC,
		EXCL,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		MINUSGREATER,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		COLON,
		QUESTMARK,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		template_parametersopt,
		template_parameters,
		template_overridesopt,
		template_overrides,
		LBRACKETMINUSRBRACKETRBRACE,
		template_id,
		identifier_listopt,
		identifier_list,
		instruction,
		control_instruction,
		switch_instruction,
		simple_instruction,
		sentence,
		expression,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		comma_expropt,
		comma_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		else_node,
		anyopt,
		case_list,
		one_case,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		complex_data,
		map_entries,
		unary_expression,
		mult_expression,
		additive_expression,
		relational_expression,
		equality_expression,
		conditional_and_expression,
		conditional_or_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 ) {
				if( lapg_lalr[p] == symbol ) {
					break;
				}
			}
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state ) {
				return lapg_sym_to[e];
			} else if( i < state ) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) {
					token[lapg_size++] = (byte)chr;
				}
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) {
					lapg_current_offset++;
					if( chr == '\n' ) {
						lapg_current_line++;
					}
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 3:
					 lapg_n.sym = new String(token,1,lapg_size-1); break;
				case 4:
					 lapg_n.sym = Integer.parseInt(new String(token,1,lapg_size-1)); break;
				case 5:
					 group = 1; break;
				case 7:
					 lapg_n.sym = new String(token,0,lapg_size); break;
				case 8:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break;
				case 9:
					 lapg_n.sym = new String(token,1,lapg_size-2); break;
				case 28:
					 group = 0; break;
				case 29:
					 group = 0; break;
				case 53:
					 continue;
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX ) {
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					}
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym));
							break;
						case 9:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-2].sym), templatePackage, ((String)lapg_m[lapg_head-1].sym), inputName, lapg_m[lapg_head-5].pos.line);
							break;
						case 10:
							 lapg_gg.sym = lapg_m[lapg_head-0].sym;
							break;
						case 13:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 14:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym));
							break;
						case 15:
							 ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym));
							break;
						case 17:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 18:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 19:
							 skipSpaces(lapg_m[lapg_head-0].pos.offset+1);
							break;
						case 24:
							 lapg_gg.sym = createEscapedId(((String)lapg_m[lapg_head-0].sym), lapg_m[lapg_head-0].pos.line);
							break;
						case 25:
							 lapg_gg.sym = new IndexNode(null, new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line), inputName, lapg_m[lapg_head-0].pos.line);
							break;
						case 26:
							 lapg_gg.sym = new DollarNode(inputName, lapg_m[lapg_head-0].pos.line);
							break;
						case 27:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset),inputName, lapg_m[lapg_head-0].pos.line);
							break;
						case 28:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 34:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-3].pos.line);
							break;
						case 37:
							 lapg_gg.sym = new EvalNode(((ExpressionNode)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName,lapg_m[lapg_head-2].pos.line);
							break;
						case 38:
							 lapg_gg.sym = new AssertNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName,lapg_m[lapg_head-1].pos.line);
							break;
						case 39:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-0].sym);
							break;
						case 41:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym);
							break;
						case 42:
							 lapg_gg.sym = lapg_m[lapg_head-0].sym;
							break;
						case 45:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 46:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 47:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-3].sym)); applyElse(((CompoundNode)lapg_gg.sym),((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 51:
							 lapg_gg.sym = new SwitchNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-6].pos.line); checkIsSpace(lapg_m[lapg_head-2].pos.offset,lapg_m[lapg_head-2].endpos.offset);
							break;
						case 52:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym));
							break;
						case 53:
							 ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym));
							break;
						case 54:
							 CaseNode.add(((ArrayList)lapg_gg.sym), ((Node)lapg_m[lapg_head-0].sym));
							break;
						case 55:
							 lapg_gg.sym = new CaseNode(((ExpressionNode)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line);
							break;
						case 56:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 57:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-3].pos.line);
							break;
						case 58:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-5].pos.line);
							break;
						case 61:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 64:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line);
							break;
						case 65:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 66:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,inputName, lapg_m[lapg_head-0].pos.line);
							break;
						case 67:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,inputName, lapg_m[lapg_head-0].pos.line);
							break;
						case 68:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,inputName, lapg_m[lapg_head-0].pos.line);
							break;
						case 69:
							 lapg_gg.sym = new ThisNode(inputName, lapg_m[lapg_head-0].pos.line);
							break;
						case 70:
							 lapg_gg.sym = new LiteralNode(null, inputName, lapg_m[lapg_head-0].pos.line);
							break;
						case 71:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line);
							break;
						case 72:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 73:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-5].pos.line);
							break;
						case 74:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line);
							break;
						case 76:
							 lapg_gg.sym = new ListNode(((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 77:
							 lapg_gg.sym = new ConcreteMapNode(((HashMap<ExpressionNode,ExpressionNode>)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 78:
							 lapg_gg.sym = new HashMap(); ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 79:
							 ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 80:
							 lapg_gg.sym = Boolean.TRUE;
							break;
						case 81:
							 lapg_gg.sym = Boolean.FALSE;
							break;
						case 83:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.NOT, ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line);
							break;
						case 84:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.MINUS, ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line);
							break;
						case 85:
							 lapg_gg.sym = new MapNode(null,((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-4].pos.line);
							break;
						case 86:
							 lapg_gg.sym = new MapNode(((ExpressionNode)lapg_m[lapg_head-4].sym),((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-6].pos.line);
							break;
						case 87:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-3].sym),((ArrayList)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-5].pos.line);
							break;
						case 89:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MULT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 90:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.DIV, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 91:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.REM, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 93:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.PLUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 94:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MINUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 96:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 97:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 98:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 99:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 101:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 102:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 104:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 106:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line);
							break;
						case 108:
							 lapg_gg.sym = new TriplexNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym), inputName, lapg_m[lapg_head-4].pos.line);
							break;
						case 109:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 110:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) {
						lapg_m[lapg_head--] = null;
					}
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX ) {
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
					}
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 207-1 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}
