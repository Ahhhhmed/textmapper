// Parser.java

package net.sf.lapg.templates.ast;


import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.lapg.templates.api.ITemplate;


public class Parser {
	
private ArrayList<ITemplate> templates;
private String templatePackage;

public Parser() {
}

private static final boolean DEBUG_SYNTAX = false;

private String inputName;
private int killEnds = -1;
private byte[] buff;
private int l;

private String rawText(int start, int end) {
	if( killEnds == start ) {
		while( start < end && (buff[start] == '\t' || buff[start] == ' ') )
			start++;

		if( start < end && buff[start] == '\r' )
			start++;

		if( start < end && buff[start] == '\n' )
			start++;
	}
	try {
		return new String(buff, start, end-start, "utf-8");
	} catch(UnsupportedEncodingException ex) {
		return "";
	}
}

private void checkIsSpace(int start, int end) {
	String val = rawText(start,end).trim();
	if( val.length() > 0 )
		error("Unknown text ignored: `"+val+"`");
}

private void applyElse(CompoundNode node, ArrayList<Node> instructions) {
	if( node instanceof IfNode ) {
		((IfNode)node).setElseInstructions(instructions);
	} else {
		error("Unknown else node, instructions skipped");
	}
}

private Node createEscapedId(String escid, int line) {
	int sharp = escid.indexOf('#');
	if( sharp >= 0 ) {
		Integer index = new Integer(escid.substring(sharp+1));
		escid = escid.substring(0, sharp);
		return new IndexNode(new SelectNode(null,escid,inputName,line), new LiteralNode(index,inputName,line),inputName,line);
	
	} else {
		return new SelectNode(null,escid,inputName,line);
	}
}

private void skipSpaces(int offset) {
	killEnds = offset+1;
}

void error( String s ) {
	System.err.println(s);
}

public boolean parse(String s, String templatePackage, String inputName) {
	l = 0;
	this.templatePackage = templatePackage;
	this.inputName = inputName;
	templates = new ArrayList<ITemplate>();
	try {
		buff = s.getBytes("utf-8");
	} catch( UnsupportedEncodingException ex ) {
		return false;
	}
	return parse();
}

public ITemplate[] getResult() {
	return templates.toArray(new ITemplate[templates.size()]);
}



	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
		21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 32, 33, 34, 35,
		1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
		51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 1, 65,
		66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
		82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	};

	private int lapg_lexem[][] = unpackFromString(118,96,
		"-2,2:8,3,2:86,-1:2,4:4,5,-1:3,6,7,8,9,10,11,12,13,14,15,16,17:10,18,19,20,2" +
		"1,22,23:26,24,-1,25,23,26,27,23,28,23,29,30,31,23,32,23:3,33,34,23:4,35,36," +
		"23:6,-1,37,38,-3,2:8,-3,2:86,-1:9,39,-1:10,40,41:10,-1:5,42:26,-1:3,42,-1,4" +
		"2:26,43,-1:2,-57:2,4:4,-57:90,-38:33,44,-38:62,-37:96,-1:11,45,-1:85,8:2,-1" +
		",8:8,46,8:50,47,8:32,-41:96,-42:96,-35:96,-33:96,-44:96,-34:34,48,-34:60,49" +
		",-43:96,-36:96,-10:21,17:10,-10:65,-54:96,-52:33,50,-52:62,-1:33,51,-1:62,-" +
		"53:33,52,-53:62,-55:96,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:26,-9:3,-39:96," +
		"-40:96,-56:96,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:18,53,23:7,-9:24,23:10,-" +
		"9:5,23:26,-9:3,23,-9,54,23:25,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,55,23" +
		",56,23:7,57,23:4,-9:24,23:10,-9:5,23:26,-9:3,23,-9,58,23:13,59,23:11,-9:24," +
		"23:10,-9:5,23:26,-9:3,23,-9,23:17,60,23:8,-9:24,23:10,-9:5,23:26,-9:3,23,-9" +
		",23:5,61,23:7,62,23:12,-9:24,23:10,-9:5,23:26,-9:3,23,-9,63,23:25,-9:24,23:" +
		"10,-9:5,23:26,-9:3,23,-9,23:14,64,23:5,65,23:5,-9:24,23:10,-9:5,23:26,-9:3," +
		"23,-9,23:22,66,23:3,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,67,23:2,68,23:9," +
		"69,23:8,-9:3,-1:94,70,-1,-31:96,-4:96,-8:96,-6:21,41:10,-6:65,-5:8,71,-5:12" +
		",42:10,-5:5,42:26,-5:3,42,-5,42:26,-5:3,-7:96,-48:96,-45:96,-11:96,-1:7,8,-" +
		"1:4,8,-1:8,72:8,-1:6,8,-1:27,8,-1:3,8:2,-1:3,8,-1:7,8,-1:3,8,-1,8,-1,8,-1,7" +
		"3,-1:5,-49:96,-32:96,-50:96,-47:96,-51:96,-9:21,23:10,-9:5,23:26,-9:3,23,-9" +
		",23:18,74,23:7,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,75,23:6,76,23:7,-9:2" +
		"4,23:10,-9:5,23:26,-9:3,23,-9,23:18,77,23:7,-9:24,23:10,-9:5,23:26,-9:3,23," +
		"-9,23:3,78,23:22,-9:24,23:10,-9:5,23:26,-9:3,23,-9,79,23:25,-9:24,23:10,-9:" +
		"5,23:26,-9:3,23,-9,23:11,80,23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:17,8" +
		"1,23:8,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,82,23:21,-9:3,-21:21,23:10,-2" +
		"1:5,23:26,-21:3,23,-21,23:26,-21:3,-22:21,23:10,-22:5,23:26,-22:3,23,-22,23" +
		":26,-22:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:15,83,23:10,-9:24,23:10,-9:5" +
		",23:26,-9:3,23,-9,23:19,84,23:6,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,85," +
		"23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:8,86,23:17,-9:24,23:10,-9:5,23:2" +
		"6,-9:3,23,-9,23:12,87,23:13,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:8,88,23:17" +
		",-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:20,89,23:5,-9:3,-46:96,-1:21,90:10,-1" +
		":66,8:2,-1,8:8,46,8:8,91:8,8:34,47,8:32,-1:21,92:10,-1:5,92:6,-1:25,92:6,-1" +
		":23,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:4,93,23:21,-9:24,23:10,-9:5,23:26," +
		"-9:3,23,-9,23:11,94,23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,95,23:21,-" +
		"9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,96,23:21,-9:3,-14:21,23:10,-14:5,23:2" +
		"6,-14:3,23,-14,23:26,-14:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:11,97,23:14" +
		",-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:18,98,23:7,-9:3,-18:21,23:10,-18:5,23" +
		":26,-18:3,23,-18,23:4,99,23:21,-18:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:1" +
		"5,100,23:10,-9:3,-23:21,23:10,-23:5,23:26,-23:3,23,-23,23:26,-23:3,-24:21,2" +
		"3:10,-24:5,23:26,-24:3,23,-24,23:26,-24:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9" +
		",23:11,101,23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:19,102,23:6,-9:24,23:" +
		"10,-9:5,23:26,-9:3,23,-9,23:15,103,23:10,-9:24,23:10,-9:5,23:26,-9:3,23,-9," +
		"23:18,104,23:7,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,105,23:21,-9:3,-5:21," +
		"90:10,-5:65,-1,8:2,-1,8:8,46,8:50,47,8:32,-1,8:2,-1,8:8,46,8:8,92:10,8:5,92" +
		":6,8:21,47,8:3,92:6,8:23,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:17,106,23:8,-" +
		"9:3,-12:21,23:10,-12:5,23:26,-12:3,23,-12,23:26,-12:3,-13:21,23:10,-13:5,23" +
		":26,-13:3,23,-13,23:26,-13:3,-15:21,23:10,-15:5,23:26,-15:3,23,-15,23:26,-1" +
		"5:3,-16:21,23:10,-16:5,23:26,-16:3,23,-16,23:26,-16:3,-9:21,23:10,-9:5,23:2" +
		"6,-9:3,23,-9,23:4,107,23:21,-9:24,23:10,-9:5,23:26,-9:3,23,-9,108,23:25,-9:" +
		"3,-20:21,23:10,-20:5,23:26,-20:3,23,-20,23:26,-20:3,-25:21,23:10,-25:5,23:2" +
		"6,-25:3,23,-25,23:26,-25:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:2,109,23:23" +
		",-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,110,23:14,-9:3,-29:21,23:10,-29:5," +
		"23:26,-29:3,23,-29,23:26,-29:3,-28:21,23:10,-28:5,23:26,-28:3,23,-28,23:26," +
		"-28:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:19,111,23:6,-9:3,-17:21,23:10,-1" +
		"7:5,23:26,-17:3,23,-17,23:26,-17:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:2,1" +
		"12,23:23,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:7,113,23:18,-9:24,23:10,-9:5," +
		"23:26,-9:3,23,-9,114,23:25,-9:3,-30:21,23:10,-30:5,23:26,-30:3,23,-30,23:26" +
		",-30:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:7,115,23:18,-9:3,-26:21,23:10,-" +
		"26:5,23:26,-26:3,23,-26,23:26,-26:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:19" +
		",116,23:6,-9:3,-19:21,23:10,-19:5,23:26,-19:3,23,-19,23:26,-19:3,-9:21,23:1" +
		"0,-9:5,23:26,-9:3,23,-9,23:4,117,23:21,-9:3,-27:21,23:10,-27:5,23:26,-27:3," +
		"23,-27,23:26,-27:3");
	
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i = 0; i < size1; i++) {
			for (int j = 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex == -1) ? st : st.substring(0, commaIndex);
				st = st.substring(commaIndex + 1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j] = Integer.parseInt(workString);
					continue;
				}
				lengthString = workString.substring(colonIndex + 1);
				sequenceLength = Integer.parseInt(lengthString);
				workString = workString.substring(0, colonIndex);
				sequenceInteger = Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}

	private static final int[] lapg_action = new int[] {
		-1, 4, -1, -3, 2, -1, -1, 1, 27, 26, 24, 25, -1, -1, 18, 21,
		22, 23, -1, -11, -21, 66, 68, -1, -1, 81, -1, -1, -1, -73, -1, 70,
		-1, 80, 69, -1, -1, -1, -105, -1, -1, 29, -1, -137, 67, 75, 90, -187,
		-233, -273, -309, -337, -361, -1, 3, 17, -1, -383, -389, 5, -397, 40, -1, -429,
		-1, -441, -1, -1, -1, 59, -1, -1, -1, 38, 84, 83, -449, -1, -457, -1,
		-1, 20, 19, 28, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 63, 46, -1, 14, -1, -465, -1, -1, 7,
		111, -1, -1, -471, -505, -1, -537, 30, -1, 37, 35, -1, -1, -1, 61, -1,
		-545, -1, 76, -1, 77, -1, 65, -1, -551, 91, 92, 93, -603, -649, -695, -735,
		-775, -815, -855, -891, -927, -955, -1, 16, -1, -1, -1, 13, -1, -979, 9, 71,
		-1, -1, -1, 41, -1, 34, 32, 39, -1, 57, -1, -1, -1, 49, -1, 78,
		112, -1, 74, -987, -1, 62, 48, -1, 47, 15, -1019, -1, 45, 42, -1, 87,
		85, -1, -1, -1, 52, -1, -1, 110, -1, 88, 58, -1, -1, -1, 54, 51,
		53, 79, 73, -1, 86, -1, 89, 55, -1, -2,
	};


	private static final short[] lapg_lalr = new short[] {
		1, -1, 5, -1, 0, 0, -1, -2, 39, -1, 29, 6, 30, 6, 52, 6,
		-1, -2, 39, -1, 29, 64, 30, 64, 31, 64, 32, 64, 33, 64, 34, 64,
		35, 64, 37, 64, 38, 64, 40, 64, 41, 64, 42, 64, 43, 64, 44, 64,
		45, 64, 46, 64, 47, 64, 48, 64, 49, 64, 50, 64, 51, 64, 52, 64,
		53, 64, 54, 64, -1, -2, 22, -1, 7, 60, 8, 60, 9, 60, 10, 60,
		15, 60, 18, 60, 21, 60, 23, 60, 26, 60, 27, 60, 32, 60, 36, 60,
		37, 60, 39, 60, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1, 15, -1,
		18, -1, 21, -1, 23, -1, 26, -1, 27, -1, 32, -1, 36, -1, 37, -1,
		39, -1, 38, 44, -1, -2, 37, -1, 41, -1, 29, 82, 30, 82, 31, 82,
		32, 82, 33, 82, 34, 82, 35, 82, 38, 82, 40, 82, 42, 82, 43, 82,
		44, 82, 45, 82, 46, 82, 47, 82, 48, 82, 49, 82, 50, 82, 51, 82,
		52, 82, 53, 82, 54, 82, -1, -2, 33, -1, 34, -1, 35, -1, 29, 94,
		30, 94, 31, 94, 32, 94, 38, 94, 40, 94, 42, 94, 43, 94, 44, 94,
		45, 94, 46, 94, 47, 94, 48, 94, 49, 94, 50, 94, 51, 94, 52, 94,
		53, 94, 54, 94, -1, -2, 31, -1, 32, -1, 29, 97, 30, 97, 38, 97,
		40, 97, 42, 97, 43, 97, 44, 97, 45, 97, 46, 97, 47, 97, 48, 97,
		49, 97, 50, 97, 51, 97, 52, 97, 53, 97, 54, 97, -1, -2, 48, -1,
		49, -1, 50, -1, 51, -1, 29, 102, 30, 102, 38, 102, 40, 102, 42, 102,
		43, 102, 44, 102, 45, 102, 46, 102, 47, 102, 52, 102, 53, 102, 54, 102,
		-1, -2, 45, -1, 46, -1, 29, 105, 30, 105, 38, 105, 40, 105, 42, 105,
		43, 105, 44, 105, 47, 105, 52, 105, 53, 105, 54, 105, -1, -2, 43, -1,
		29, 107, 30, 107, 38, 107, 40, 107, 42, 107, 44, 107, 47, 107, 52, 107,
		53, 107, 54, 107, -1, -2, 44, -1, 53, -1, 29, 109, 30, 109, 38, 109,
		40, 109, 42, 109, 47, 109, 52, 109, 54, 109, -1, -2, 7, -1, 40, 12,
		-1, -2, 52, -1, 29, 8, 30, 8, -1, -2, 7, -1, 8, -1, 9, -1,
		10, -1, 15, -1, 18, -1, 21, -1, 23, -1, 26, -1, 27, -1, 32, -1,
		36, -1, 37, -1, 39, -1, 40, 44, -1, -2, 39, -1, 41, -1, 16, 31,
		29, 31, 30, 31, -1, -2, 42, -1, 29, 36, 30, 36, -1, -2, 47, -1,
		38, 111, 42, 111, -1, -2, 42, -1, 38, 43, 40, 43, -1, -2, 42, -1,
		40, 11, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1, 15, -1, 18, -1,
		21, -1, 23, -1, 26, -1, 27, -1, 32, -1, 36, -1, 37, -1, 39, -1,
		41, -1, 40, 44, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1, 15, -1,
		18, -1, 21, -1, 23, -1, 26, -1, 27, -1, 32, -1, 36, -1, 37, -1,
		39, -1, 40, 44, -1, -2, 16, -1, 29, 33, 30, 33, -1, -2, 1, -1,
		5, 50, -1, -2, 39, -1, 29, 72, 30, 72, 31, 72, 32, 72, 33, 72,
		34, 72, 35, 72, 37, 72, 38, 72, 40, 72, 41, 72, 42, 72, 43, 72,
		44, 72, 45, 72, 46, 72, 47, 72, 48, 72, 49, 72, 50, 72, 51, 72,
		52, 72, 53, 72, 54, 72, -1, -2, 33, -1, 34, -1, 35, -1, 29, 95,
		30, 95, 31, 95, 32, 95, 38, 95, 40, 95, 42, 95, 43, 95, 44, 95,
		45, 95, 46, 95, 47, 95, 48, 95, 49, 95, 50, 95, 51, 95, 52, 95,
		53, 95, 54, 95, -1, -2, 33, -1, 34, -1, 35, -1, 29, 96, 30, 96,
		31, 96, 32, 96, 38, 96, 40, 96, 42, 96, 43, 96, 44, 96, 45, 96,
		46, 96, 47, 96, 48, 96, 49, 96, 50, 96, 51, 96, 52, 96, 53, 96,
		54, 96, -1, -2, 31, -1, 32, -1, 29, 100, 30, 100, 38, 100, 40, 100,
		42, 100, 43, 100, 44, 100, 45, 100, 46, 100, 47, 100, 48, 100, 49, 100,
		50, 100, 51, 100, 52, 100, 53, 100, 54, 100, -1, -2, 31, -1, 32, -1,
		29, 101, 30, 101, 38, 101, 40, 101, 42, 101, 43, 101, 44, 101, 45, 101,
		46, 101, 47, 101, 48, 101, 49, 101, 50, 101, 51, 101, 52, 101, 53, 101,
		54, 101, -1, -2, 31, -1, 32, -1, 29, 98, 30, 98, 38, 98, 40, 98,
		42, 98, 43, 98, 44, 98, 45, 98, 46, 98, 47, 98, 48, 98, 49, 98,
		50, 98, 51, 98, 52, 98, 53, 98, 54, 98, -1, -2, 31, -1, 32, -1,
		29, 99, 30, 99, 38, 99, 40, 99, 42, 99, 43, 99, 44, 99, 45, 99,
		46, 99, 47, 99, 48, 99, 49, 99, 50, 99, 51, 99, 52, 99, 53, 99,
		54, 99, -1, -2, 48, -1, 49, -1, 50, -1, 51, -1, 29, 103, 30, 103,
		38, 103, 40, 103, 42, 103, 43, 103, 44, 103, 45, 103, 46, 103, 47, 103,
		52, 103, 53, 103, 54, 103, -1, -2, 48, -1, 49, -1, 50, -1, 51, -1,
		29, 104, 30, 104, 38, 104, 40, 104, 42, 104, 43, 104, 44, 104, 45, 104,
		46, 104, 47, 104, 52, 104, 53, 104, 54, 104, -1, -2, 45, -1, 46, -1,
		29, 106, 30, 106, 38, 106, 40, 106, 42, 106, 43, 106, 44, 106, 47, 106,
		52, 106, 53, 106, 54, 106, -1, -2, 43, -1, 29, 108, 30, 108, 38, 108,
		40, 108, 42, 108, 44, 108, 47, 108, 52, 108, 53, 108, 54, 108, -1, -2,
		41, -1, 29, 10, 30, 10, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1,
		15, -1, 18, -1, 21, -1, 23, -1, 26, -1, 27, -1, 32, -1, 36, -1,
		37, -1, 39, -1, 40, 44, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1,
		15, -1, 18, -1, 21, -1, 23, -1, 26, -1, 27, -1, 32, -1, 36, -1,
		37, -1, 39, -1, 40, 44, -1, -2,
	};


	private static final short[] lapg_sym_goto = new short[] {
		0, 1, 11, 18, 25, 32, 42, 45, 108, 161, 214, 267, 269, 273, 274, 279,
		332, 338, 343, 396, 401, 402, 455, 456, 509, 514, 515, 568, 621, 626, 634, 641,
		646, 704, 707, 710, 713, 766, 820, 823, 884, 894, 898, 903, 905, 906, 908, 910,
		913, 916, 919, 922, 925, 928, 929, 931, 931, 932, 933, 935, 937, 940, 941, 942,
		943, 944, 945, 952, 955, 956, 957, 964, 971, 978, 985, 990, 1023, 1024, 1025, 1026,
		1027, 1028, 1029, 1035, 1041, 1048, 1051, 1052, 1053, 1054, 1056, 1061, 1062, 1115, 1168, 1221,
		1222, 1275, 1318, 1359, 1396, 1431, 1465, 1498,
	};

	private static final short[] lapg_sym_from = new short[] {
		216, 0, 3, 5, 13, 18, 56, 105, 128, 154, 195, 5, 13, 18, 56, 105,
		154, 195, 5, 13, 18, 56, 105, 154, 195, 5, 13, 18, 56, 105, 154, 195,
		0, 3, 5, 13, 18, 56, 105, 154, 174, 195, 56, 154, 195, 6, 12, 23,
		24, 26, 27, 32, 35, 36, 37, 38, 39, 53, 57, 60, 62, 68, 70, 71,
		85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
		102, 109, 114, 115, 116, 117, 120, 123, 124, 129, 131, 133, 156, 164, 170, 171,
		172, 179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211, 12, 24, 32, 35,
		36, 37, 38, 39, 53, 60, 68, 70, 71, 85, 87, 88, 89, 90, 91, 92,
		93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129,
		131, 133, 164, 170, 171, 172, 179, 180, 183, 186, 187, 190, 197, 203, 204, 205,
		211, 12, 24, 32, 35, 36, 37, 38, 39, 53, 60, 68, 70, 71, 85, 87,
		88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 115,
		116, 120, 123, 124, 129, 131, 133, 164, 170, 171, 172, 179, 180, 183, 186, 187,
		190, 197, 203, 204, 205, 211, 12, 24, 32, 35, 36, 37, 38, 39, 53, 60,
		68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
		99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 170, 171, 172,
		179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211, 194, 205, 53, 102, 183,
		205, 102, 12, 53, 102, 183, 205, 12, 24, 32, 35, 36, 37, 38, 39, 53,
		60, 68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
		98, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 170, 171,
		172, 179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211, 12, 53, 102, 118,
		183, 205, 12, 53, 102, 183, 205, 12, 24, 32, 35, 36, 37, 38, 39, 53,
		60, 68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
		98, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 170, 171,
		172, 179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211, 12, 53, 102, 183,
		205, 67, 12, 24, 32, 35, 36, 37, 38, 39, 53, 60, 68, 70, 71, 85,
		87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114,
		115, 116, 120, 123, 124, 129, 131, 133, 164, 170, 171, 172, 179, 180, 183, 186,
		187, 190, 197, 203, 204, 205, 211, 29, 12, 24, 32, 35, 36, 37, 38, 39,
		53, 60, 68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
		97, 98, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 170,
		171, 172, 179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211, 12, 53, 102,
		183, 205, 2, 12, 24, 32, 35, 36, 37, 38, 39, 53, 60, 68, 70, 71,
		85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102,
		114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 170, 171, 172, 179, 180, 183,
		186, 187, 190, 197, 203, 204, 205, 211, 12, 24, 32, 35, 36, 37, 38, 39,
		53, 60, 68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
		97, 98, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 170,
		171, 172, 179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211, 12, 53, 102,
		183, 205, 40, 42, 72, 101, 110, 152, 153, 213, 40, 42, 72, 110, 152, 153,
		213, 48, 142, 143, 144, 145, 12, 24, 32, 35, 36, 37, 38, 39, 48, 53,
		60, 68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
		98, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 142, 143, 144,
		145, 164, 170, 171, 172, 179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211,
		47, 140, 141, 47, 140, 141, 47, 140, 141, 12, 24, 32, 35, 36, 37, 38,
		39, 53, 60, 68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95,
		96, 97, 98, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164,
		170, 171, 172, 179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211, 12, 24,
		32, 35, 36, 37, 38, 39, 43, 53, 60, 68, 70, 71, 85, 87, 88, 89,
		90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 115, 116, 120,
		123, 124, 129, 131, 133, 164, 170, 171, 172, 179, 180, 183, 186, 187, 190, 197,
		203, 204, 205, 211, 77, 79, 135, 12, 19, 20, 23, 24, 28, 30, 32, 35,
		36, 37, 38, 39, 53, 60, 63, 64, 68, 70, 71, 85, 87, 88, 89, 90,
		91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 115, 116, 120, 123,
		124, 129, 131, 133, 136, 164, 170, 171, 172, 179, 180, 183, 186, 187, 190, 197,
		203, 204, 205, 211, 80, 107, 113, 125, 127, 161, 162, 193, 198, 200, 43, 63,
		115, 157, 65, 78, 79, 108, 168, 51, 149, 52, 50, 148, 50, 148, 76, 127,
		177, 49, 146, 147, 49, 146, 147, 49, 146, 147, 49, 146, 147, 58, 66, 150,
		52, 62, 160, 0, 0, 0, 3, 0, 3, 5, 18, 105, 13, 19, 19, 58,
		58, 40, 42, 72, 110, 152, 153, 213, 23, 62, 109, 57, 57, 5, 13, 18,
		56, 105, 154, 195, 5, 13, 18, 56, 105, 154, 195, 5, 13, 18, 56, 105,
		154, 195, 5, 13, 18, 56, 105, 154, 195, 12, 53, 102, 183, 205, 12, 24,
		32, 35, 38, 39, 53, 60, 68, 70, 71, 85, 100, 102, 114, 115, 116, 120,
		123, 124, 129, 131, 133, 164, 172, 179, 180, 183, 186, 190, 197, 204, 205, 63,
		63, 118, 118, 65, 65, 38, 60, 115, 116, 179, 186, 38, 60, 115, 116, 179,
		186, 5, 13, 18, 56, 105, 154, 195, 56, 154, 195, 56, 128, 174, 174, 195,
		12, 53, 102, 183, 205, 29, 12, 24, 32, 35, 36, 37, 38, 39, 53, 60,
		68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
		99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 170, 171, 172,
		179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211, 12, 24, 32, 35, 36,
		37, 38, 39, 53, 60, 68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93,
		94, 95, 96, 97, 98, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131,
		133, 164, 170, 171, 172, 179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211,
		12, 24, 32, 35, 36, 37, 38, 39, 53, 60, 68, 70, 71, 85, 87, 88,
		89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 115, 116,
		120, 123, 124, 129, 131, 133, 164, 170, 171, 172, 179, 180, 183, 186, 187, 190,
		197, 203, 204, 205, 211, 38, 12, 24, 32, 35, 36, 37, 38, 39, 53, 60,
		68, 70, 71, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
		99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 170, 171, 172,
		179, 180, 183, 186, 187, 190, 197, 203, 204, 205, 211, 12, 24, 32, 35, 38,
		39, 53, 60, 68, 70, 71, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98,
		99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 172, 179, 180,
		183, 186, 190, 197, 204, 205, 12, 24, 32, 35, 38, 39, 53, 60, 68, 70,
		71, 85, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 115, 116, 120,
		123, 124, 129, 131, 133, 164, 172, 179, 180, 183, 186, 190, 197, 204, 205, 12,
		24, 32, 35, 38, 39, 53, 60, 68, 70, 71, 85, 96, 97, 98, 99, 100,
		102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 172, 179, 180, 183, 186,
		190, 197, 204, 205, 12, 24, 32, 35, 38, 39, 53, 60, 68, 70, 71, 85,
		98, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164, 172, 179,
		180, 183, 186, 190, 197, 204, 205, 12, 24, 32, 35, 38, 39, 53, 60, 68,
		70, 71, 85, 99, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133, 164,
		172, 179, 180, 183, 186, 190, 197, 204, 205, 12, 24, 32, 35, 38, 39, 53,
		60, 68, 70, 71, 85, 100, 102, 114, 115, 116, 120, 123, 124, 129, 131, 133,
		164, 172, 179, 180, 183, 186, 190, 197, 204, 205,
	};

	private static final short[] lapg_sym_to = new short[] {
		217, 1, 1, 8, 8, 8, 8, 8, 173, 8, 8, 9, 9, 9, 9, 9,
		9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11,
		2, 2, 12, 53, 12, 102, 12, 183, 194, 205, 103, 103, 103, 19, 20, 61,
		20, 66, 67, 20, 20, 20, 20, 20, 20, 20, 106, 20, 61, 20, 20, 20,
		20, 136, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 61, 20, 20, 20, 163, 20, 20, 20, 20, 20, 20, 185, 20, 20, 20,
		20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 23, 64, 64, 64, 64, 64, 64, 64, 23, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 23, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 23, 64, 64, 64, 64, 64, 64, 23, 64, 204, 204, 101, 152, 152,
		152, 153, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 164,
		26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29,
		29, 124, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 69, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32,
		32, 32, 6, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35,
		35, 35, 81, 81, 81, 151, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82,
		82, 90, 90, 90, 90, 90, 36, 36, 36, 36, 36, 36, 36, 36, 91, 36,
		36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
		36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 91, 91, 91,
		91, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
		87, 87, 87, 88, 88, 88, 89, 89, 89, 37, 37, 37, 37, 37, 37, 37,
		37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
		37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
		37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38,
		38, 38, 38, 38, 38, 38, 85, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 130, 132, 178, 39, 57, 60, 62, 39, 68, 71, 39, 39,
		39, 39, 39, 39, 39, 39, 116, 62, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 179, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 134, 155, 159, 170, 171, 187, 188, 203, 210, 211, 86, 117,
		117, 117, 120, 131, 133, 156, 190, 98, 98, 99, 96, 96, 97, 97, 129, 172,
		197, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 109, 123, 180,
		100, 114, 186, 216, 3, 4, 7, 5, 5, 13, 56, 154, 54, 58, 59, 110,
		111, 83, 84, 128, 158, 181, 182, 215, 63, 115, 157, 107, 108, 14, 55, 14,
		55, 14, 55, 206, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16,
		16, 16, 17, 17, 17, 17, 17, 17, 17, 40, 40, 40, 40, 40, 41, 65,
		72, 73, 76, 80, 41, 112, 125, 126, 127, 135, 150, 41, 160, 112, 112, 167,
		168, 169, 175, 176, 177, 189, 193, 112, 199, 41, 112, 202, 209, 213, 41, 118,
		119, 165, 166, 121, 122, 77, 113, 161, 162, 198, 200, 78, 78, 78, 78, 78,
		78, 18, 18, 18, 18, 18, 18, 18, 104, 184, 207, 105, 174, 195, 196, 208,
		42, 42, 42, 42, 42, 70, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
		43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
		43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
		43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44,
		44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
		44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
		44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
		45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
		45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
		45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
		45, 45, 45, 45, 45, 79, 46, 46, 46, 46, 74, 75, 46, 46, 46, 46,
		46, 46, 46, 46, 137, 138, 139, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 191, 192, 46,
		46, 46, 46, 46, 201, 46, 46, 212, 46, 46, 214, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 140, 141, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 142, 143, 144, 145, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 146, 147, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
		148, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
		50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 149, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	};

	private static final short[] lapg_rlen = new short[] {
		1, 2, 1, 3, 1, 1, 0, 1, 0, 6, 2, 1, 0, 3, 1, 3,
		3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 0,
		1, 0, 4, 1, 0, 3, 2, 2, 1, 3, 2, 1, 0, 3, 3, 5,
		3, 1, 0, 7, 1, 2, 2, 4, 3, 4, 6, 1, 0, 3, 3, 1,
		1, 3, 1, 1, 1, 1, 1, 4, 3, 6, 4, 1, 3, 3, 3, 5,
		1, 1, 1, 2, 2, 5, 7, 5, 6, 8, 1, 3, 3, 3, 1, 3,
		3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 1, 3, 1, 5, 1,
		3,
	};

	private static final short[] lapg_rlex = new short[] {
		56, 57, 57, 58, 58, 62, 62, 64, 64, 59, 65, 68, 68, 63, 69, 69,
		61, 60, 60, 66, 66, 70, 70, 70, 70, 70, 70, 70, 73, 74, 76, 76,
		78, 78, 74, 80, 80, 74, 74, 81, 67, 67, 79, 82, 82, 77, 71, 71,
		86, 87, 87, 72, 88, 88, 88, 89, 84, 90, 90, 91, 91, 90, 85, 85,
		92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 94, 94, 95, 95,
		93, 93, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 98, 98,
		98, 99, 99, 99, 99, 99, 100, 100, 100, 101, 101, 102, 102, 75, 75, 83,
		83,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escdollar",
		"escid",
		"escint",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lcase",
		"Lend",
		"Lelse",
		"Leval",
		"Lfalse",
		"Lfor",
		"Lforeach",
		"Lgrep",
		"Lif",
		"Lin",
		"Lmap",
		"Lnot",
		"Lnull",
		"Lswitch",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"Lassert",
		"'}'",
		"'-}'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'->'",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"':'",
		"'?'",
		"'`'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"template_parametersopt",
		"template_parameters",
		"template_overridesopt",
		"template_overrides",
		"'[-]}'",
		"template_id",
		"identifier_listopt",
		"identifier_list",
		"instruction",
		"control_instruction",
		"switch_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"comma_expropt",
		"comma_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"else_node",
		"anyopt",
		"case_list",
		"one_case",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"complex_data",
		"map_entries",
		"unary_expression",
		"mult_expression",
		"additive_expression",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
		"conditional_or_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escdollar,
		escid,
		escint,
		N24LBRACE,
		N24DIV,
		identifier,
		icon,
		ccon,
		Lcall,
		Lcase,
		Lend,
		Lelse,
		Leval,
		Lfalse,
		Lfor,
		Lforeach,
		Lgrep,
		Lif,
		Lin,
		Lmap,
		Lnot,
		Lnull,
		Lswitch,
		Ltemplate,
		Ltrue,
		Lthis,
		Lassert,
		RBRACE,
		MINUSRBRACE,
		PLUS,
		MINUS,
		MULT,
		DIV,
		PERC,
		EXCL,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		MINUSGREATER,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		COLON,
		QUESTMARK,
		N60,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		template_parametersopt,
		template_parameters,
		template_overridesopt,
		template_overrides,
		LBRACKETMINUSRBRACKETRBRACE,
		template_id,
		identifier_listopt,
		identifier_list,
		instruction,
		control_instruction,
		switch_instruction,
		simple_instruction,
		sentence,
		expression,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		comma_expropt,
		comma_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		else_node,
		anyopt,
		case_list,
		one_case,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		complex_data,
		map_entries,
		unary_expression,
		mult_expression,
		additive_expression,
		relational_expression,
		equality_expression,
		conditional_and_expression,
		conditional_or_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[2048];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;


		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;


		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 2047 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) { 
					lapg_current_offset++;
					if( chr == '\n' ) lapg_current_line++;
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 3:
					 lapg_n.sym = new String(token,1,lapg_size-1); break; 
				case 4:
					 lapg_n.sym = Integer.parseInt(new String(token,1,lapg_size-1)); break; 
				case 5:
					 group = 1; break; 
				case 7:
					 lapg_n.sym = new String(token,0,lapg_size); break; 
				case 8:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break; 
				case 9:
					 lapg_n.sym = new String(token,1,lapg_size-2); break; 
				case 29:
					 group = 0; break; 
				case 30:
					 group = 0; break; 
				case 55:
					 continue; 
			}



			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX )
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym)); 
							break;
						case 9:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-2].sym), templatePackage, ((String)lapg_m[lapg_head-1].sym), inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 10:
							 lapg_gg.sym = ((String)lapg_m[lapg_head-0].sym); 
							break;
						case 13:
							 lapg_gg.sym = ((ArrayList)lapg_m[lapg_head-1].sym); 
							break;
						case 14:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 15:
							 ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 17:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 18:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 19:
							 skipSpaces(lapg_m[lapg_head-0].pos.offset+1); 
							break;
						case 24:
							 lapg_gg.sym = createEscapedId(((String)lapg_m[lapg_head-0].sym), lapg_m[lapg_head-0].pos.line); 
							break;
						case 25:
							 lapg_gg.sym = new IndexNode(null, new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line), inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 26:
							 lapg_gg.sym = new DollarNode(inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 27:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 28:
							 lapg_gg.sym = ((Node)lapg_m[lapg_head-1].sym); 
							break;
						case 34:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 37:
							 lapg_gg.sym = new EvalNode(((ExpressionNode)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName,lapg_m[lapg_head-2].pos.line); 
							break;
						case 38:
							 lapg_gg.sym = new AssertNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName,lapg_m[lapg_head-1].pos.line); 
							break;
						case 39:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-0].sym); 
							break;
						case 41:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym); 
							break;
						case 42:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-0].sym); 
							break;
						case 45:
							 lapg_gg.sym = ((ArrayList)lapg_m[lapg_head-1].sym); 
							break;
						case 46:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 47:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-3].sym)); applyElse(((CompoundNode)lapg_gg.sym),((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 51:
							 lapg_gg.sym = new SwitchNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-6].pos.line); checkIsSpace(lapg_m[lapg_head-2].pos.offset,lapg_m[lapg_head-2].endpos.offset); 
							break;
						case 52:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 53:
							 ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 54:
							 CaseNode.add(((ArrayList)lapg_gg.sym), ((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 55:
							 lapg_gg.sym = new CaseNode(((ExpressionNode)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 56:
							 lapg_gg.sym = ((CompoundNode)lapg_m[lapg_head-1].sym); 
							break;
						case 57:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 58:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 61:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 64:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 65:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-1].sym); 
							break;
						case 66:
							 lapg_gg.sym = new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 67:
							 lapg_gg.sym = new LiteralNode(((Boolean)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 68:
							 lapg_gg.sym = new LiteralNode(((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 69:
							 lapg_gg.sym = new ThisNode(inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 70:
							 lapg_gg.sym = new LiteralNode(null, inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 71:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 72:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 73:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 74:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 76:
							 lapg_gg.sym = new ListNode(((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 77:
							 lapg_gg.sym = new ConcreteMapNode(((HashMap<ExpressionNode,ExpressionNode>)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 78:
							 lapg_gg.sym = new HashMap(); ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 79:
							 ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 80:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 81:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 83:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.NOT, ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line); 
							break;
						case 84:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.MINUS, ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line); 
							break;
						case 85:
							 lapg_gg.sym = new MapNode(null,((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-4].pos.line); 
							break;
						case 86:
							 lapg_gg.sym = new MapNode(((ExpressionNode)lapg_m[lapg_head-4].sym),((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-6].pos.line); 
							break;
						case 87:
							 error("TODO"); 
							break;
						case 88:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-3].sym),((ArrayList)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 89:
							 lapg_gg.sym = new CallTemplateNode(((ExpressionNode)lapg_m[lapg_head-4].sym),((ArrayList)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-7].pos.line); 
							break;
						case 91:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MULT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 92:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.DIV, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 93:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.REM, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 95:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.PLUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 96:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MINUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 98:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 99:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 100:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 101:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 103:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 104:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 106:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 108:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 110:
							 lapg_gg.sym = new TriplexNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym), inputName, lapg_m[lapg_head-4].pos.line); 
							break;
						case 111:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 112:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) 
						lapg_m[lapg_head--] = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );

					if( DEBUG_SYNTAX )
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 217 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}

