// Parser.java

package net.sf.lapg.templates.ast;


import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.lapg.templates.api.ITemplate;


public class Parser {
	
private ArrayList<ITemplate> templates;
private String templatePackage;

public Parser() {
}

private static final boolean DEBUG_SYNTAX = false;

private String inputName;
private int killEnds = -1;
private byte[] buff;
private int l;

private String rawText(int start, int end) {
	if( killEnds == start ) {
		while( start < end && (buff[start] == '\t' || buff[start] == ' ') )
			start++;

		if( start < end && buff[start] == '\r' )
			start++;

		if( start < end && buff[start] == '\n' )
			start++;
	}
	try {
		return new String(buff, start, end-start, "utf-8");
	} catch(UnsupportedEncodingException ex) {
		return "";
	}
}

private void checkIsSpace(int start, int end) {
	String val = rawText(start,end).trim();
	if( val.length() > 0 )
		error("Unknown text ignored: `"+val+"`");
}

private void applyElse(CompoundNode node, ArrayList<Node> instructions) {
	if( node instanceof IfNode ) {
		((IfNode)node).setElseInstructions(instructions);
	} else {
		error("Unknown else node, instructions skipped");
	}
}

private Node createEscapedId(String escid, int line) {
	int sharp = escid.indexOf('#');
	if( sharp >= 0 ) {
		Integer index = new Integer(escid.substring(sharp+1));
		escid = escid.substring(0, sharp);
		return new IndexNode(new SelectNode(null,escid,inputName,line), new LiteralNode(index,inputName,line),inputName,line);
	
	} else {
		return new SelectNode(null,escid,inputName,line);
	}
}

private void skipSpaces(int offset) {
	killEnds = offset+1;
}

void error( String s ) {
	System.err.println(s);
}

public boolean parse(String s, String templatePackage, String inputName) {
	l = 0;
	this.templatePackage = templatePackage;
	this.inputName = inputName;
	templates = new ArrayList<ITemplate>();
	try {
		buff = s.getBytes("utf-8");
	} catch( UnsupportedEncodingException ex ) {
		return false;
	}
	return parse();
}

public ITemplate[] getResult() {
	return templates.toArray(new ITemplate[templates.size()]);
}



	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
		21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 32, 33, 34, 35,
		1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
		51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 1, 65,
		66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
		82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	};

	private int lapg_lexem[][] = unpackFromString(121,96,
		"-2,2:8,3,2:86,-1:2,4:4,5,-1:3,6,7,8,9,10,11,12,13,14,15,16,17:10,18,19,20,2" +
		"1,22,23:26,24,-1,25,23,26,27,23,28,23,29,30,31,23,32,23:3,33,34,23:4,35,36," +
		"23:6,-1,37,38,-3,2:8,-3,2:86,-1:9,39,-1:10,40,41:10,-1:5,42:26,-1:3,42,-1,4" +
		"2:26,43,-1:2,-58:2,4:4,-58:90,-39:33,44,-39:62,-38:96,-1:11,45,-1:85,8:2,-1" +
		",8:8,46,8:50,47,8:32,-42:96,-43:96,-36:96,-34:96,-45:96,-35:34,48,-35:60,49" +
		",-44:96,-37:96,-10:21,17:10,-10:65,-55:96,-53:33,50,-53:62,-1:33,51,-1:62,-" +
		"54:33,52,-54:62,-56:96,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:26,-9:3,-40:96," +
		"-41:96,-57:96,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:18,53,23:7,-9:24,23:10,-" +
		"9:5,23:26,-9:3,23,-9,54,23:25,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,55,23" +
		",56,23:7,57,23:4,-9:24,23:10,-9:5,23:26,-9:3,23,-9,58,23:7,59,23:5,60,23:11" +
		",-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:17,61,23:8,-9:24,23:10,-9:5,23:26,-9:" +
		"3,23,-9,23:5,62,23:7,63,23:12,-9:24,23:10,-9:5,23:26,-9:3,23,-9,64,23:25,-9" +
		":24,23:10,-9:5,23:26,-9:3,23,-9,23:14,65,23:5,66,23:5,-9:24,23:10,-9:5,23:2" +
		"6,-9:3,23,-9,23:22,67,23:3,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,68,23:2,6" +
		"9,23:9,70,23:8,-9:3,-1:94,71,-1,-32:96,-4:96,-8:96,-6:21,41:10,-6:65,-5:8,7" +
		"2,-5:12,42:10,-5:5,42:26,-5:3,42,-5,42:26,-5:3,-7:96,-49:96,-46:96,-11:96,-" +
		"1:7,8,-1:4,8,-1:8,73:8,-1:6,8,-1:27,8,-1:3,8:2,-1:3,8,-1:7,8,-1:3,8,-1,8,-1" +
		",8,-1,74,-1:5,-50:96,-33:96,-51:96,-48:96,-52:96,-9:21,23:10,-9:5,23:26,-9:" +
		"3,23,-9,23:18,75,23:7,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,76,23:6,77,23" +
		":7,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:18,78,23:7,-9:24,23:10,-9:5,23:26,-" +
		"9:3,23,-9,23:3,79,23:22,-9:24,23:10,-9:5,23:26,-9:3,23,-9,80,23:25,-9:24,23" +
		":10,-9:5,23:26,-9:3,23,-9,23:11,81,23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9," +
		"23:11,82,23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:17,83,23:8,-9:24,23:10," +
		"-9:5,23:26,-9:3,23,-9,23:4,84,23:21,-9:3,-22:21,23:10,-22:5,23:26,-22:3,23," +
		"-22,23:26,-22:3,-23:21,23:10,-23:5,23:26,-23:3,23,-23,23:26,-23:3,-9:21,23:" +
		"10,-9:5,23:26,-9:3,23,-9,23:15,85,23:10,-9:24,23:10,-9:5,23:26,-9:3,23,-9,2" +
		"3:19,86,23:6,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,87,23:14,-9:24,23:10,-" +
		"9:5,23:26,-9:3,23,-9,23:8,88,23:17,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:12," +
		"89,23:13,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:8,90,23:17,-9:24,23:10,-9:5,2" +
		"3:26,-9:3,23,-9,23:20,91,23:5,-9:3,-47:96,-1:21,92:10,-1:66,8:2,-1,8:8,46,8" +
		":8,93:8,8:34,47,8:32,-1:21,94:10,-1:5,94:6,-1:25,94:6,-1:23,-9:21,23:10,-9:" +
		"5,23:26,-9:3,23,-9,23:4,95,23:21,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,96" +
		",23:14,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,97,23:21,-9:24,23:10,-9:5,23:" +
		"26,-9:3,23,-9,23:4,98,23:21,-9:3,-14:21,23:10,-14:5,23:26,-14:3,23,-14,23:2" +
		"6,-14:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:11,99,23:14,-9:24,23:10,-9:5,2" +
		"3:26,-9:3,23,-9,23:18,100,23:7,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:4,101,2" +
		"3:21,-9:3,-18:21,23:10,-18:5,23:26,-18:3,23,-18,23:4,102,23:21,-18:3,-9:21," +
		"23:10,-9:5,23:26,-9:3,23,-9,23:15,103,23:10,-9:3,-24:21,23:10,-24:5,23:26,-" +
		"24:3,23,-24,23:26,-24:3,-25:21,23:10,-25:5,23:26,-25:3,23,-25,23:26,-25:3,-" +
		"9:21,23:10,-9:5,23:26,-9:3,23,-9,23:11,104,23:14,-9:24,23:10,-9:5,23:26,-9:" +
		"3,23,-9,23:19,105,23:6,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:15,106,23:10,-9" +
		":24,23:10,-9:5,23:26,-9:3,23,-9,23:18,107,23:7,-9:24,23:10,-9:5,23:26,-9:3," +
		"23,-9,23:4,108,23:21,-9:3,-5:21,92:10,-5:65,-1,8:2,-1,8:8,46,8:50,47,8:32,-" +
		"1,8:2,-1,8:8,46,8:8,94:10,8:5,94:6,8:21,47,8:3,94:6,8:23,-9:21,23:10,-9:5,2" +
		"3:26,-9:3,23,-9,23:17,109,23:8,-9:3,-12:21,23:10,-12:5,23:26,-12:3,23,-12,2" +
		"3:26,-12:3,-13:21,23:10,-13:5,23:26,-13:3,23,-13,23:26,-13:3,-15:21,23:10,-" +
		"15:5,23:26,-15:3,23,-15,23:26,-15:3,-16:21,23:10,-16:5,23:26,-16:3,23,-16,2" +
		"3:26,-16:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:4,110,23:21,-9:3,-19:21,23:" +
		"10,-19:5,23:26,-19:3,23,-19,23:26,-19:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,1" +
		"11,23:25,-9:3,-21:21,23:10,-21:5,23:26,-21:3,23,-21,23:26,-21:3,-26:21,23:1" +
		"0,-26:5,23:26,-26:3,23,-26,23:26,-26:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23" +
		":2,112,23:23,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:11,113,23:14,-9:3,-30:21," +
		"23:10,-30:5,23:26,-30:3,23,-30,23:26,-30:3,-29:21,23:10,-29:5,23:26,-29:3,2" +
		"3,-29,23:26,-29:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:19,114,23:6,-9:3,-17" +
		":21,23:10,-17:5,23:26,-17:3,23,-17,23:26,-17:3,-9:21,23:10,-9:5,23:26,-9:3," +
		"23,-9,23:2,115,23:23,-9:24,23:10,-9:5,23:26,-9:3,23,-9,23:7,116,23:18,-9:24" +
		",23:10,-9:5,23:26,-9:3,23,-9,117,23:25,-9:3,-31:21,23:10,-31:5,23:26,-31:3," +
		"23,-31,23:26,-31:3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:7,118,23:18,-9:3,-2" +
		"7:21,23:10,-27:5,23:26,-27:3,23,-27,23:26,-27:3,-9:21,23:10,-9:5,23:26,-9:3" +
		",23,-9,23:19,119,23:6,-9:3,-20:21,23:10,-20:5,23:26,-20:3,23,-20,23:26,-20:" +
		"3,-9:21,23:10,-9:5,23:26,-9:3,23,-9,23:4,120,23:21,-9:3,-28:21,23:10,-28:5," +
		"23:26,-28:3,23,-28,23:26,-28:3");
	
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i = 0; i < size1; i++) {
			for (int j = 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex == -1) ? st : st.substring(0, commaIndex);
				st = st.substring(commaIndex + 1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j] = Integer.parseInt(workString);
					continue;
				}
				lengthString = workString.substring(colonIndex + 1);
				sequenceLength = Integer.parseInt(lengthString);
				workString = workString.substring(0, colonIndex);
				sequenceInteger = Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}

	private static final int[] lapg_action = new int[] {
		-1, 4, -1, -3, 2, -1, -1, 1, 27, 26, 24, 25, -1, -1, 18, 21,
		22, 23, -1, -11, -21, 67, 69, -1, -1, 82, -1, -1, -1, -1, -73, -1,
		71, -1, 81, 70, -1, -1, -1, -105, -1, -1, 29, -1, -137, 68, 76, 91,
		-187, -233, -273, -309, -337, -361, -1, 3, 17, -1, -383, -389, 5, -397, 40, -1,
		-429, -1, -441, -1, 62, -1, -1, 59, -1, -1, -1, 38, 85, 84, -449, -1,
		-457, -1, -1, 20, 19, 28, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 46, -1, 14, -1, -465, -1,
		-1, 7, 112, -1, -1, -471, -505, -1, -537, 30, -1, 37, 35, -1, -1, -1,
		61, -1, -545, -1, 77, -1, 78, -1, 66, -1, -551, 92, 93, 94, -603, -649,
		-695, -735, -775, -815, -855, -891, -927, -955, -1, 16, -1, -1, -1, 13, -1, -979,
		9, 72, -1, -1, -1, 41, -1, 34, 32, 39, -1, 57, -1, -1, -1, 49,
		-1, 79, 113, -1, 75, -987, -1, 63, 48, -1, 47, 15, -1019, -1, 45, 42,
		-1, 88, 86, -1, -1, -1, 52, -1, -1, 111, -1, 89, 58, -1, -1, -1,
		54, 51, 53, 80, 74, -1, 87, -1, 90, 55, -1, -2,
	};


	private static final short[] lapg_lalr = new short[] {
		1, -1, 5, -1, 0, 0, -1, -2, 40, -1, 30, 6, 31, 6, 53, 6,
		-1, -2, 40, -1, 30, 65, 31, 65, 32, 65, 33, 65, 34, 65, 35, 65,
		36, 65, 38, 65, 39, 65, 41, 65, 42, 65, 43, 65, 44, 65, 45, 65,
		46, 65, 47, 65, 48, 65, 49, 65, 50, 65, 51, 65, 52, 65, 53, 65,
		54, 65, 55, 65, -1, -2, 23, -1, 7, 60, 8, 60, 9, 60, 10, 60,
		15, 60, 19, 60, 22, 60, 24, 60, 27, 60, 28, 60, 33, 60, 37, 60,
		38, 60, 40, 60, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1, 15, -1,
		19, -1, 22, -1, 24, -1, 27, -1, 28, -1, 33, -1, 37, -1, 38, -1,
		40, -1, 39, 44, -1, -2, 38, -1, 42, -1, 30, 83, 31, 83, 32, 83,
		33, 83, 34, 83, 35, 83, 36, 83, 39, 83, 41, 83, 43, 83, 44, 83,
		45, 83, 46, 83, 47, 83, 48, 83, 49, 83, 50, 83, 51, 83, 52, 83,
		53, 83, 54, 83, 55, 83, -1, -2, 34, -1, 35, -1, 36, -1, 30, 95,
		31, 95, 32, 95, 33, 95, 39, 95, 41, 95, 43, 95, 44, 95, 45, 95,
		46, 95, 47, 95, 48, 95, 49, 95, 50, 95, 51, 95, 52, 95, 53, 95,
		54, 95, 55, 95, -1, -2, 32, -1, 33, -1, 30, 98, 31, 98, 39, 98,
		41, 98, 43, 98, 44, 98, 45, 98, 46, 98, 47, 98, 48, 98, 49, 98,
		50, 98, 51, 98, 52, 98, 53, 98, 54, 98, 55, 98, -1, -2, 49, -1,
		50, -1, 51, -1, 52, -1, 30, 103, 31, 103, 39, 103, 41, 103, 43, 103,
		44, 103, 45, 103, 46, 103, 47, 103, 48, 103, 53, 103, 54, 103, 55, 103,
		-1, -2, 46, -1, 47, -1, 30, 106, 31, 106, 39, 106, 41, 106, 43, 106,
		44, 106, 45, 106, 48, 106, 53, 106, 54, 106, 55, 106, -1, -2, 44, -1,
		30, 108, 31, 108, 39, 108, 41, 108, 43, 108, 45, 108, 48, 108, 53, 108,
		54, 108, 55, 108, -1, -2, 45, -1, 54, -1, 30, 110, 31, 110, 39, 110,
		41, 110, 43, 110, 48, 110, 53, 110, 55, 110, -1, -2, 7, -1, 41, 12,
		-1, -2, 53, -1, 30, 8, 31, 8, -1, -2, 7, -1, 8, -1, 9, -1,
		10, -1, 15, -1, 19, -1, 22, -1, 24, -1, 27, -1, 28, -1, 33, -1,
		37, -1, 38, -1, 40, -1, 41, 44, -1, -2, 40, -1, 42, -1, 16, 31,
		30, 31, 31, 31, -1, -2, 43, -1, 30, 36, 31, 36, -1, -2, 48, -1,
		39, 112, 43, 112, -1, -2, 43, -1, 39, 43, 41, 43, -1, -2, 43, -1,
		41, 11, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1, 15, -1, 19, -1,
		22, -1, 24, -1, 27, -1, 28, -1, 33, -1, 37, -1, 38, -1, 40, -1,
		42, -1, 41, 44, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1, 15, -1,
		19, -1, 22, -1, 24, -1, 27, -1, 28, -1, 33, -1, 37, -1, 38, -1,
		40, -1, 41, 44, -1, -2, 16, -1, 30, 33, 31, 33, -1, -2, 1, -1,
		5, 50, -1, -2, 40, -1, 30, 73, 31, 73, 32, 73, 33, 73, 34, 73,
		35, 73, 36, 73, 38, 73, 39, 73, 41, 73, 42, 73, 43, 73, 44, 73,
		45, 73, 46, 73, 47, 73, 48, 73, 49, 73, 50, 73, 51, 73, 52, 73,
		53, 73, 54, 73, 55, 73, -1, -2, 34, -1, 35, -1, 36, -1, 30, 96,
		31, 96, 32, 96, 33, 96, 39, 96, 41, 96, 43, 96, 44, 96, 45, 96,
		46, 96, 47, 96, 48, 96, 49, 96, 50, 96, 51, 96, 52, 96, 53, 96,
		54, 96, 55, 96, -1, -2, 34, -1, 35, -1, 36, -1, 30, 97, 31, 97,
		32, 97, 33, 97, 39, 97, 41, 97, 43, 97, 44, 97, 45, 97, 46, 97,
		47, 97, 48, 97, 49, 97, 50, 97, 51, 97, 52, 97, 53, 97, 54, 97,
		55, 97, -1, -2, 32, -1, 33, -1, 30, 101, 31, 101, 39, 101, 41, 101,
		43, 101, 44, 101, 45, 101, 46, 101, 47, 101, 48, 101, 49, 101, 50, 101,
		51, 101, 52, 101, 53, 101, 54, 101, 55, 101, -1, -2, 32, -1, 33, -1,
		30, 102, 31, 102, 39, 102, 41, 102, 43, 102, 44, 102, 45, 102, 46, 102,
		47, 102, 48, 102, 49, 102, 50, 102, 51, 102, 52, 102, 53, 102, 54, 102,
		55, 102, -1, -2, 32, -1, 33, -1, 30, 99, 31, 99, 39, 99, 41, 99,
		43, 99, 44, 99, 45, 99, 46, 99, 47, 99, 48, 99, 49, 99, 50, 99,
		51, 99, 52, 99, 53, 99, 54, 99, 55, 99, -1, -2, 32, -1, 33, -1,
		30, 100, 31, 100, 39, 100, 41, 100, 43, 100, 44, 100, 45, 100, 46, 100,
		47, 100, 48, 100, 49, 100, 50, 100, 51, 100, 52, 100, 53, 100, 54, 100,
		55, 100, -1, -2, 49, -1, 50, -1, 51, -1, 52, -1, 30, 104, 31, 104,
		39, 104, 41, 104, 43, 104, 44, 104, 45, 104, 46, 104, 47, 104, 48, 104,
		53, 104, 54, 104, 55, 104, -1, -2, 49, -1, 50, -1, 51, -1, 52, -1,
		30, 105, 31, 105, 39, 105, 41, 105, 43, 105, 44, 105, 45, 105, 46, 105,
		47, 105, 48, 105, 53, 105, 54, 105, 55, 105, -1, -2, 46, -1, 47, -1,
		30, 107, 31, 107, 39, 107, 41, 107, 43, 107, 44, 107, 45, 107, 48, 107,
		53, 107, 54, 107, 55, 107, -1, -2, 44, -1, 30, 109, 31, 109, 39, 109,
		41, 109, 43, 109, 45, 109, 48, 109, 53, 109, 54, 109, 55, 109, -1, -2,
		42, -1, 30, 10, 31, 10, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1,
		15, -1, 19, -1, 22, -1, 24, -1, 27, -1, 28, -1, 33, -1, 37, -1,
		38, -1, 40, -1, 41, 44, -1, -2, 7, -1, 8, -1, 9, -1, 10, -1,
		15, -1, 19, -1, 22, -1, 24, -1, 27, -1, 28, -1, 33, -1, 37, -1,
		38, -1, 40, -1, 41, 44, -1, -2,
	};


	private static final short[] lapg_sym_goto = new short[] {
		0, 1, 11, 18, 25, 32, 42, 45, 109, 163, 217, 271, 273, 277, 278, 283,
		337, 343, 348, 353, 407, 412, 413, 467, 468, 522, 527, 528, 582, 636, 641, 649,
		656, 661, 720, 723, 726, 729, 783, 838, 841, 903, 913, 917, 922, 924, 925, 927,
		929, 932, 935, 938, 941, 944, 947, 948, 950, 950, 951, 952, 954, 956, 959, 960,
		961, 962, 963, 964, 971, 974, 975, 976, 983, 990, 997, 1004, 1009, 1043, 1044, 1045,
		1046, 1047, 1048, 1049, 1055, 1061, 1068, 1071, 1072, 1073, 1074, 1076, 1081, 1082, 1136, 1190,
		1244, 1245, 1299, 1343, 1385, 1423, 1459, 1494, 1528,
	};

	private static final short[] lapg_sym_from = new short[] {
		218, 0, 3, 5, 13, 18, 57, 107, 130, 156, 197, 5, 13, 18, 57, 107,
		156, 197, 5, 13, 18, 57, 107, 156, 197, 5, 13, 18, 57, 107, 156, 197,
		0, 3, 5, 13, 18, 57, 107, 156, 176, 197, 57, 156, 197, 6, 12, 23,
		24, 26, 27, 28, 33, 36, 37, 38, 39, 40, 54, 58, 61, 63, 70, 72,
		73, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
		102, 104, 111, 116, 117, 118, 119, 122, 125, 126, 131, 133, 135, 158, 166, 172,
		173, 174, 181, 182, 185, 188, 189, 192, 199, 205, 206, 207, 213, 12, 24, 27,
		33, 36, 37, 38, 39, 40, 54, 61, 70, 72, 73, 87, 89, 90, 91, 92,
		93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 116, 117, 118, 122, 125,
		126, 131, 133, 135, 166, 172, 173, 174, 181, 182, 185, 188, 189, 192, 199, 205,
		206, 207, 213, 12, 24, 27, 33, 36, 37, 38, 39, 40, 54, 61, 70, 72,
		73, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
		104, 116, 117, 118, 122, 125, 126, 131, 133, 135, 166, 172, 173, 174, 181, 182,
		185, 188, 189, 192, 199, 205, 206, 207, 213, 12, 24, 27, 33, 36, 37, 38,
		39, 40, 54, 61, 70, 72, 73, 87, 89, 90, 91, 92, 93, 94, 95, 96,
		97, 98, 99, 100, 101, 102, 104, 116, 117, 118, 122, 125, 126, 131, 133, 135,
		166, 172, 173, 174, 181, 182, 185, 188, 189, 192, 199, 205, 206, 207, 213, 196,
		207, 54, 104, 185, 207, 104, 12, 54, 104, 185, 207, 12, 24, 27, 33, 36,
		37, 38, 39, 40, 54, 61, 70, 72, 73, 87, 89, 90, 91, 92, 93, 94,
		95, 96, 97, 98, 99, 100, 101, 102, 104, 116, 117, 118, 122, 125, 126, 131,
		133, 135, 166, 172, 173, 174, 181, 182, 185, 188, 189, 192, 199, 205, 206, 207,
		213, 12, 54, 104, 120, 185, 207, 12, 54, 104, 185, 207, 12, 54, 104, 185,
		207, 12, 24, 27, 33, 36, 37, 38, 39, 40, 54, 61, 70, 72, 73, 87,
		89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 116,
		117, 118, 122, 125, 126, 131, 133, 135, 166, 172, 173, 174, 181, 182, 185, 188,
		189, 192, 199, 205, 206, 207, 213, 12, 54, 104, 185, 207, 69, 12, 24, 27,
		33, 36, 37, 38, 39, 40, 54, 61, 70, 72, 73, 87, 89, 90, 91, 92,
		93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 116, 117, 118, 122, 125,
		126, 131, 133, 135, 166, 172, 173, 174, 181, 182, 185, 188, 189, 192, 199, 205,
		206, 207, 213, 30, 12, 24, 27, 33, 36, 37, 38, 39, 40, 54, 61, 70,
		72, 73, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
		102, 104, 116, 117, 118, 122, 125, 126, 131, 133, 135, 166, 172, 173, 174, 181,
		182, 185, 188, 189, 192, 199, 205, 206, 207, 213, 12, 54, 104, 185, 207, 2,
		12, 24, 27, 33, 36, 37, 38, 39, 40, 54, 61, 70, 72, 73, 87, 89,
		90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 116, 117,
		118, 122, 125, 126, 131, 133, 135, 166, 172, 173, 174, 181, 182, 185, 188, 189,
		192, 199, 205, 206, 207, 213, 12, 24, 27, 33, 36, 37, 38, 39, 40, 54,
		61, 70, 72, 73, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
		100, 101, 102, 104, 116, 117, 118, 122, 125, 126, 131, 133, 135, 166, 172, 173,
		174, 181, 182, 185, 188, 189, 192, 199, 205, 206, 207, 213, 12, 54, 104, 185,
		207, 41, 43, 74, 103, 112, 154, 155, 215, 41, 43, 74, 112, 154, 155, 215,
		49, 144, 145, 146, 147, 12, 24, 27, 33, 36, 37, 38, 39, 40, 49, 54,
		61, 70, 72, 73, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
		100, 101, 102, 104, 116, 117, 118, 122, 125, 126, 131, 133, 135, 144, 145, 146,
		147, 166, 172, 173, 174, 181, 182, 185, 188, 189, 192, 199, 205, 206, 207, 213,
		48, 142, 143, 48, 142, 143, 48, 142, 143, 12, 24, 27, 33, 36, 37, 38,
		39, 40, 54, 61, 70, 72, 73, 87, 89, 90, 91, 92, 93, 94, 95, 96,
		97, 98, 99, 100, 101, 102, 104, 116, 117, 118, 122, 125, 126, 131, 133, 135,
		166, 172, 173, 174, 181, 182, 185, 188, 189, 192, 199, 205, 206, 207, 213, 12,
		24, 27, 33, 36, 37, 38, 39, 40, 44, 54, 61, 70, 72, 73, 87, 89,
		90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 116, 117,
		118, 122, 125, 126, 131, 133, 135, 166, 172, 173, 174, 181, 182, 185, 188, 189,
		192, 199, 205, 206, 207, 213, 79, 81, 137, 12, 19, 20, 23, 24, 27, 29,
		31, 33, 36, 37, 38, 39, 40, 54, 61, 64, 65, 70, 72, 73, 87, 89,
		90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 116, 117,
		118, 122, 125, 126, 131, 133, 135, 138, 166, 172, 173, 174, 181, 182, 185, 188,
		189, 192, 199, 205, 206, 207, 213, 82, 109, 115, 127, 129, 163, 164, 195, 200,
		202, 44, 64, 117, 159, 66, 80, 81, 110, 170, 52, 151, 53, 51, 150, 51,
		150, 78, 129, 179, 50, 148, 149, 50, 148, 149, 50, 148, 149, 50, 148, 149,
		59, 67, 152, 53, 63, 162, 0, 0, 0, 3, 0, 3, 5, 18, 107, 13,
		19, 19, 59, 59, 41, 43, 74, 112, 154, 155, 215, 23, 63, 111, 58, 58,
		5, 13, 18, 57, 107, 156, 197, 5, 13, 18, 57, 107, 156, 197, 5, 13,
		18, 57, 107, 156, 197, 5, 13, 18, 57, 107, 156, 197, 12, 54, 104, 185,
		207, 12, 24, 27, 33, 36, 39, 40, 54, 61, 70, 72, 73, 87, 102, 104,
		116, 117, 118, 122, 125, 126, 131, 133, 135, 166, 174, 181, 182, 185, 188, 192,
		199, 206, 207, 64, 64, 120, 120, 66, 66, 39, 61, 117, 118, 181, 188, 39,
		61, 117, 118, 181, 188, 5, 13, 18, 57, 107, 156, 197, 57, 156, 197, 57,
		130, 176, 176, 197, 12, 54, 104, 185, 207, 30, 12, 24, 27, 33, 36, 37,
		38, 39, 40, 54, 61, 70, 72, 73, 87, 89, 90, 91, 92, 93, 94, 95,
		96, 97, 98, 99, 100, 101, 102, 104, 116, 117, 118, 122, 125, 126, 131, 133,
		135, 166, 172, 173, 174, 181, 182, 185, 188, 189, 192, 199, 205, 206, 207, 213,
		12, 24, 27, 33, 36, 37, 38, 39, 40, 54, 61, 70, 72, 73, 87, 89,
		90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 116, 117,
		118, 122, 125, 126, 131, 133, 135, 166, 172, 173, 174, 181, 182, 185, 188, 189,
		192, 199, 205, 206, 207, 213, 12, 24, 27, 33, 36, 37, 38, 39, 40, 54,
		61, 70, 72, 73, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
		100, 101, 102, 104, 116, 117, 118, 122, 125, 126, 131, 133, 135, 166, 172, 173,
		174, 181, 182, 185, 188, 189, 192, 199, 205, 206, 207, 213, 39, 12, 24, 27,
		33, 36, 37, 38, 39, 40, 54, 61, 70, 72, 73, 87, 89, 90, 91, 92,
		93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 116, 117, 118, 122, 125,
		126, 131, 133, 135, 166, 172, 173, 174, 181, 182, 185, 188, 189, 192, 199, 205,
		206, 207, 213, 12, 24, 27, 33, 36, 39, 40, 54, 61, 70, 72, 73, 87,
		92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 116, 117, 118, 122,
		125, 126, 131, 133, 135, 166, 174, 181, 182, 185, 188, 192, 199, 206, 207, 12,
		24, 27, 33, 36, 39, 40, 54, 61, 70, 72, 73, 87, 94, 95, 96, 97,
		98, 99, 100, 101, 102, 104, 116, 117, 118, 122, 125, 126, 131, 133, 135, 166,
		174, 181, 182, 185, 188, 192, 199, 206, 207, 12, 24, 27, 33, 36, 39, 40,
		54, 61, 70, 72, 73, 87, 98, 99, 100, 101, 102, 104, 116, 117, 118, 122,
		125, 126, 131, 133, 135, 166, 174, 181, 182, 185, 188, 192, 199, 206, 207, 12,
		24, 27, 33, 36, 39, 40, 54, 61, 70, 72, 73, 87, 100, 101, 102, 104,
		116, 117, 118, 122, 125, 126, 131, 133, 135, 166, 174, 181, 182, 185, 188, 192,
		199, 206, 207, 12, 24, 27, 33, 36, 39, 40, 54, 61, 70, 72, 73, 87,
		101, 102, 104, 116, 117, 118, 122, 125, 126, 131, 133, 135, 166, 174, 181, 182,
		185, 188, 192, 199, 206, 207, 12, 24, 27, 33, 36, 39, 40, 54, 61, 70,
		72, 73, 87, 102, 104, 116, 117, 118, 122, 125, 126, 131, 133, 135, 166, 174,
		181, 182, 185, 188, 192, 199, 206, 207,
	};

	private static final short[] lapg_sym_to = new short[] {
		219, 1, 1, 8, 8, 8, 8, 8, 175, 8, 8, 9, 9, 9, 9, 9,
		9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11,
		2, 2, 12, 54, 12, 104, 12, 185, 196, 207, 105, 105, 105, 19, 20, 62,
		20, 67, 20, 69, 20, 20, 20, 20, 20, 20, 20, 108, 20, 62, 20, 20,
		20, 20, 138, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 62, 20, 20, 20, 165, 20, 20, 20, 20, 20, 20, 187, 20, 20,
		20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 65, 65, 65, 65, 65, 65,
		65, 65, 23, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 23, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 23, 65, 65, 65, 65, 65, 65, 23, 65, 206,
		206, 103, 154, 154, 154, 155, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 26, 26, 26, 166, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28,
		28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 126, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 71, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 6,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36,
		36, 83, 83, 83, 153, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84,
		92, 92, 92, 92, 92, 37, 37, 37, 37, 37, 37, 37, 37, 37, 93, 37,
		37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
		37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 93, 93, 93,
		93, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
		89, 89, 89, 90, 90, 90, 91, 91, 91, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 87, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 132, 134, 180, 40, 58, 61, 63, 40, 40, 70,
		73, 40, 40, 40, 40, 40, 40, 40, 40, 118, 63, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 181, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 136, 157, 161, 172, 173, 189, 190, 205, 212,
		213, 88, 119, 119, 119, 122, 133, 135, 158, 192, 100, 100, 101, 98, 98, 99,
		99, 131, 174, 199, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97,
		111, 125, 182, 102, 116, 188, 218, 3, 4, 7, 5, 5, 13, 57, 156, 55,
		59, 60, 112, 113, 85, 86, 130, 160, 183, 184, 217, 64, 117, 159, 109, 110,
		14, 56, 14, 56, 14, 56, 208, 15, 15, 15, 15, 15, 15, 15, 16, 16,
		16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 41, 41, 41, 41,
		41, 42, 66, 68, 74, 75, 78, 82, 42, 114, 127, 128, 129, 137, 152, 42,
		162, 114, 114, 169, 170, 171, 177, 178, 179, 191, 195, 114, 201, 42, 114, 204,
		211, 215, 42, 120, 121, 167, 168, 123, 124, 79, 115, 163, 164, 200, 202, 80,
		80, 80, 80, 80, 80, 18, 18, 18, 18, 18, 18, 18, 106, 186, 209, 107,
		176, 197, 198, 210, 43, 43, 43, 43, 43, 72, 44, 44, 44, 44, 44, 44,
		44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
		44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
		44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
		45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
		45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
		45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
		45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 81, 47, 47, 47,
		47, 47, 76, 77, 47, 47, 47, 47, 47, 47, 47, 47, 139, 140, 141, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 193, 194, 47, 47, 47, 47, 47, 203, 47, 47, 214,
		47, 47, 216, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		142, 143, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 144, 145, 146, 147,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50,
		50, 50, 50, 50, 50, 50, 148, 149, 50, 50, 50, 50, 50, 50, 50, 50,
		50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 150, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		151, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
		53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
		53, 53, 53, 53, 53, 53, 53, 53,
	};

	private static final short[] lapg_rlen = new short[] {
		1, 2, 1, 3, 1, 1, 0, 1, 0, 6, 2, 1, 0, 3, 1, 3,
		3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 0,
		1, 0, 4, 1, 0, 3, 2, 2, 1, 3, 2, 1, 0, 3, 3, 5,
		3, 1, 0, 7, 1, 2, 2, 4, 3, 4, 6, 1, 0, 3, 2, 3,
		1, 1, 3, 1, 1, 1, 1, 1, 4, 3, 6, 4, 1, 3, 3, 3,
		5, 1, 1, 1, 2, 2, 5, 7, 5, 6, 8, 1, 3, 3, 3, 1,
		3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 1, 3, 1, 5,
		1, 3,
	};

	private static final short[] lapg_rlex = new short[] {
		57, 58, 58, 59, 59, 63, 63, 65, 65, 60, 66, 69, 69, 64, 70, 70,
		62, 61, 61, 67, 67, 71, 71, 71, 71, 71, 71, 71, 74, 75, 77, 77,
		79, 79, 75, 81, 81, 75, 75, 82, 68, 68, 80, 83, 83, 78, 72, 72,
		87, 88, 88, 73, 89, 89, 89, 90, 85, 91, 91, 92, 92, 91, 91, 86,
		86, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 95, 95, 96,
		96, 94, 94, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 99,
		99, 99, 100, 100, 100, 100, 100, 101, 101, 101, 102, 102, 103, 103, 76, 76,
		84, 84,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escdollar",
		"escid",
		"escint",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lcase",
		"Lend",
		"Lelse",
		"Leval",
		"Lfalse",
		"Lfor",
		"Lfile",
		"Lforeach",
		"Lgrep",
		"Lif",
		"Lin",
		"Lmap",
		"Lnot",
		"Lnull",
		"Lswitch",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"Lassert",
		"'}'",
		"'-}'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'->'",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"':'",
		"'?'",
		"'`'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"template_parametersopt",
		"template_parameters",
		"template_overridesopt",
		"template_overrides",
		"'[-]}'",
		"template_id",
		"identifier_listopt",
		"identifier_list",
		"instruction",
		"control_instruction",
		"switch_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"comma_expropt",
		"comma_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"else_node",
		"anyopt",
		"case_list",
		"one_case",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"complex_data",
		"map_entries",
		"unary_expression",
		"mult_expression",
		"additive_expression",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
		"conditional_or_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escdollar,
		escid,
		escint,
		N24LBRACE,
		N24DIV,
		identifier,
		icon,
		ccon,
		Lcall,
		Lcase,
		Lend,
		Lelse,
		Leval,
		Lfalse,
		Lfor,
		Lfile,
		Lforeach,
		Lgrep,
		Lif,
		Lin,
		Lmap,
		Lnot,
		Lnull,
		Lswitch,
		Ltemplate,
		Ltrue,
		Lthis,
		Lassert,
		RBRACE,
		MINUSRBRACE,
		PLUS,
		MINUS,
		MULT,
		DIV,
		PERC,
		EXCL,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		MINUSGREATER,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		COLON,
		QUESTMARK,
		N60,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		template_parametersopt,
		template_parameters,
		template_overridesopt,
		template_overrides,
		LBRACKETMINUSRBRACKETRBRACE,
		template_id,
		identifier_listopt,
		identifier_list,
		instruction,
		control_instruction,
		switch_instruction,
		simple_instruction,
		sentence,
		expression,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		comma_expropt,
		comma_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		else_node,
		anyopt,
		case_list,
		one_case,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		complex_data,
		map_entries,
		unary_expression,
		mult_expression,
		additive_expression,
		relational_expression,
		equality_expression,
		conditional_and_expression,
		conditional_or_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[2048];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;


		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;


		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 2047 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) { 
					lapg_current_offset++;
					if( chr == '\n' ) lapg_current_line++;
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 3:
					 lapg_n.sym = new String(token,1,lapg_size-1); break; 
				case 4:
					 lapg_n.sym = Integer.parseInt(new String(token,1,lapg_size-1)); break; 
				case 5:
					 group = 1; break; 
				case 7:
					 lapg_n.sym = new String(token,0,lapg_size); break; 
				case 8:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break; 
				case 9:
					 lapg_n.sym = new String(token,1,lapg_size-2); break; 
				case 30:
					 group = 0; break; 
				case 31:
					 group = 0; break; 
				case 56:
					 continue; 
			}



			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX )
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym)); 
							break;
						case 9:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-2].sym), templatePackage, ((String)lapg_m[lapg_head-1].sym), inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 10:
							 lapg_gg.sym = ((String)lapg_m[lapg_head-0].sym); 
							break;
						case 13:
							 lapg_gg.sym = ((ArrayList)lapg_m[lapg_head-1].sym); 
							break;
						case 14:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 15:
							 ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 17:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 18:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 19:
							 skipSpaces(lapg_m[lapg_head-0].pos.offset+1); 
							break;
						case 24:
							 lapg_gg.sym = createEscapedId(((String)lapg_m[lapg_head-0].sym), lapg_m[lapg_head-0].pos.line); 
							break;
						case 25:
							 lapg_gg.sym = new IndexNode(null, new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line), inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 26:
							 lapg_gg.sym = new DollarNode(inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 27:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 28:
							 lapg_gg.sym = ((Node)lapg_m[lapg_head-1].sym); 
							break;
						case 34:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 37:
							 lapg_gg.sym = new EvalNode(((ExpressionNode)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName,lapg_m[lapg_head-2].pos.line); 
							break;
						case 38:
							 lapg_gg.sym = new AssertNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName,lapg_m[lapg_head-1].pos.line); 
							break;
						case 39:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-0].sym); 
							break;
						case 41:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym); 
							break;
						case 42:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-0].sym); 
							break;
						case 45:
							 lapg_gg.sym = ((ArrayList)lapg_m[lapg_head-1].sym); 
							break;
						case 46:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 47:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-3].sym)); applyElse(((CompoundNode)lapg_gg.sym),((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 51:
							 lapg_gg.sym = new SwitchNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-6].pos.line); checkIsSpace(lapg_m[lapg_head-2].pos.offset,lapg_m[lapg_head-2].endpos.offset); 
							break;
						case 52:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 53:
							 ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 54:
							 CaseNode.add(((ArrayList)lapg_gg.sym), ((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 55:
							 lapg_gg.sym = new CaseNode(((ExpressionNode)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 56:
							 lapg_gg.sym = ((CompoundNode)lapg_m[lapg_head-1].sym); 
							break;
						case 57:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 58:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 61:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 62:
							 lapg_gg.sym = new FileNode(((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line); 
							break;
						case 65:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 66:
							 lapg_gg.sym = ((ExpressionNode)lapg_m[lapg_head-1].sym); 
							break;
						case 67:
							 lapg_gg.sym = new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 68:
							 lapg_gg.sym = new LiteralNode(((Boolean)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 69:
							 lapg_gg.sym = new LiteralNode(((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 70:
							 lapg_gg.sym = new ThisNode(inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 71:
							 lapg_gg.sym = new LiteralNode(null, inputName, lapg_m[lapg_head-0].pos.line); 
							break;
						case 72:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 73:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 74:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 75:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-3].pos.line); 
							break;
						case 77:
							 lapg_gg.sym = new ListNode(((ArrayList)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 78:
							 lapg_gg.sym = new ConcreteMapNode(((HashMap<ExpressionNode,ExpressionNode>)lapg_m[lapg_head-1].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 79:
							 lapg_gg.sym = new HashMap(); ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 80:
							 ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 81:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 82:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 84:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.NOT, ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line); 
							break;
						case 85:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.MINUS, ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-1].pos.line); 
							break;
						case 86:
							 lapg_gg.sym = new MapNode(null,((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-4].pos.line); 
							break;
						case 87:
							 lapg_gg.sym = new MapNode(((ExpressionNode)lapg_m[lapg_head-4].sym),((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-6].pos.line); 
							break;
						case 88:
							 error("TODO"); 
							break;
						case 89:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-3].sym),((ArrayList)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-5].pos.line); 
							break;
						case 90:
							 lapg_gg.sym = new CallTemplateNode(((ExpressionNode)lapg_m[lapg_head-4].sym),((ArrayList)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,inputName, lapg_m[lapg_head-7].pos.line); 
							break;
						case 92:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MULT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 93:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.DIV, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 94:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.REM, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 96:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.PLUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 97:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MINUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 99:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 100:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 101:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 102:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 104:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 105:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 107:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 109:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),inputName, lapg_m[lapg_head-2].pos.line); 
							break;
						case 111:
							 lapg_gg.sym = new TriplexNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym), inputName, lapg_m[lapg_head-4].pos.line); 
							break;
						case 112:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 113:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) 
						lapg_m[lapg_head--] = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );

					if( DEBUG_SYNTAX )
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 219 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}

