// Parser.java

package net.sf.lapg.templates.ast;

import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.lapg.templates.api.ITemplate;

public class Parser {

	private ArrayList<ITemplate> templates;
	private String templatePackage;

	public Parser() {
	}

	private static final boolean DEBUG_SYNTAX = false;

	int killEnds = -1;
	byte[] buff;
	int l;

	private String rawText(int start, int end) {
		if( killEnds == start ) {
			while( start < end && (buff[start] == '\t' || buff[start] == ' ') ) {
				start++;
			}

			if( start < end && buff[start] == '\r' ) {
				start++;
			}

			if( start < end && buff[start] == '\n' ) {
				start++;
			}
		}
		try {
			return new String(buff, start, end-start, "utf-8");
		} catch(UnsupportedEncodingException ex) {
			return "";
		}
	}

	private void checkIsSpace(int start, int end) {
		String val = rawText(start,end).trim();
		if( val.length() > 0 ) {
			error("Unknown text ignored: `"+val+"`");
		}
	}

	private void applyElse(CompoundNode node, ArrayList<Node> instructions) {
		if( node instanceof IfNode ) {
			((IfNode)node).setElseInstructions(instructions);
		} else {
			error("Unknown else node, instructions skipped");
		}
	}

	private Node createEscapedId(String escid, int line) {
		int sharp = escid.indexOf('#');
		if( sharp >= 0 ) {
			Integer index = new Integer(escid.substring(sharp+1));
			escid = escid.substring(0, sharp);
			return new IndexNode(new SelectNode(null,escid,line), new LiteralNode(index,line),line);

		} else {
			return new SelectNode(null,escid,line);
		}
	}

	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}

	void error( String s ) {
		System.err.println(s);
	}

	public boolean parse(String s, String templatePackage) {
		l = 0;
		this.templatePackage = templatePackage;
		templates = new ArrayList<ITemplate>();
		try {
			buff = s.getBytes("utf-8");
		} catch( UnsupportedEncodingException ex ) {
			return false;
		}
		return parse();
	}

	public ITemplate[] getResult() {
		return templates.toArray(new ITemplate[templates.size()]);
	}

	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
		  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,   1,  32,  33,  34,  35,
		   1,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,
		  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,   1,  65,
		   1,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,
		  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private final short[][] lapg_lexem = new short[][] {
		{  -2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,   4,   4,   4,   4,   5,  -1,  -1,  -1,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  19,  20,  21,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  -1,  25,  23,  26,  23,  27,  23,  28,  29,  23,  23,  30,  23,  23,  23,  31,  32,  23,  23,  23,  23,  33,  34,  23,  23,  23,  23,  23,  23,  -1,  35,  36, },
		{  -3,   2,   2,   2,   2,   2,   2,   2,   2,  -3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  37,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  -1,  -1,  -1,  -1,  -1,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -1,  -1,  -1,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  -1,  -1, },
		{ -55, -55,   4,   4,   4,   4, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, },
		{ -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37,  42, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, },
		{ -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  43,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{ -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, },
		{ -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, },
		{ -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, },
		{ -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, },
		{ -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, },
		{ -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33,  46, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33,  47, },
		{ -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, },
		{ -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, },
		{ -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, },
		{ -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51,  48, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  49,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{ -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52,  50, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, },
		{ -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, },
		{ -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  51,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  52,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  53,  23,  54,  23,  23,  23,  23,  23,  23,  23,  55,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  56,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  57,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  58,  23,  23,  23,  23,  23,  23,  23,  59,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  60,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  61,  23,  23,  23,  23,  23,  62,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  63,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  64,  23,  23,  65,  23,  23,  23,  23,  23,  23,  23,  23,  23,  66,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  67,  -1, },
		{ -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  68,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -5,  -5,  -5,  -5,  -5,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -5,  -5,  -5,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -5,  -5,  -5, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, },
		{ -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, },
		{ -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  69,  69,  69,  69,  69,  69,  69,  69,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,   8,   8,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,   8,  -1,   8,  -1,   8,  -1,  70,  -1,  -1,  -1,  -1,  -1, },
		{ -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, },
		{ -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, },
		{ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, },
		{ -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, },
		{ -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  71,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  72,  23,  23,  23,  23,  23,  23,  73,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  74,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  75,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  76,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  77,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  78,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -20, -20, -20, -20, -20,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -20, -20, -20,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -20, -20, -20, },
		{ -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -21, -21, -21, -21, -21,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -21, -21, -21,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -21, -21, -21, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  79,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  80,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  81,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  82,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  83,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  84,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  85,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  86,  86,  86,  86,  86,  86,  86,  86,  86,  86,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,  87,  87,  87,  87,  87,  87,  87,  87,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  -1,  -1,  -1,  -1,  -1,  88,  88,  88,  88,  88,  88,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  88,  88,  88,  88,  88,  88,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  89,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  90,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  91,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  92,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -14, -14, -14, -14, -14,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -14, -14, -14,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -14, -14, -14, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  93,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  94,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -18, -18, -18, -18, -18,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -18, -18, -18,  23,  23,  23,  23,  23,  95,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -18, -18, -18, },
		{ -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -22, -22, -22, -22, -22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -22, -22, -22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -22, -22, -22, },
		{ -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -23, -23, -23, -23, -23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -23, -23, -23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -23, -23, -23, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  96,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  97,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  98,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  99,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23, 100,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  86,  86,  86,  86,  86,  86,  86,  86,  86,  86,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,   8,   8,   8,   8,   8,  88,  88,  88,  88,  88,  88,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,  88,  88,  88,  88,  88,  88,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 101,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -12, -12, -12, -12, -12,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -12, -12, -12,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -12, -12, -12, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -13, -13, -13, -13, -13,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -13, -13, -13,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -13, -13, -13, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -15, -15, -15, -15, -15,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -15, -15, -15,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -15, -15, -15, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -16, -16, -16, -16, -16,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -16, -16, -16,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -16, -16, -16, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23, 102,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23, 103,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -24, -24, -24, -24, -24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -24, -24, -24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -24, -24, -24, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23, 104,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 105,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -28, -28, -28, -28, -28,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -28, -28, -28,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -28, -28, -28, },
		{ -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -27, -27, -27, -27, -27,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -27, -27, -27,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -27, -27, -27, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 106,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -17, -17, -17, -17, -17,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -17, -17, -17,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -17, -17, -17, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23, 107,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23, 108,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23, 109,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -29, -29, -29, -29, -29,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -29, -29, -29,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -29, -29, -29, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23, 110,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -25, -25, -25, -25, -25,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -25, -25, -25,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -25, -25, -25, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 111,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -19, -19, -19, -19, -19,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -19, -19, -19,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -19, -19, -19, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23, 112,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -26, -26, -26, -26, -26,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -26, -26, -26,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -26, -26, -26, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,   4,  -1,  -3,   2,  -1,  -1,   1,  24,  23,  21,  22,  -1,  -1,  15,  18,
		  19,  20,  -1, -11, -19,  60,  62,  -1,  -1,  75,  -1,  -1, -69,  -1,  64,  -1,
		  74,  63,  -1,  -1,  -1, -99,  -1,  -1,  26,  -1,-129,  61,  69,  82,-177,-221,
		-259,-293,-319,-341,  -1,   3,  14,  -1,-361,  -1,   5,-367,  34,  -1,-397,  -1,
		  32,  -1,  -1,  53,  -1,  -1,  -1,  33,  78,  77,-409,  -1,-417,  -1,  -1,  17,
		  16,  25,  50,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1,  57,  40,  -1,  11,  -1,-425,   7, 103,  -1,-431,-463,
		  -1,-493,  27,  -1,  -1,  55,  -1,-501,  -1,  70,  -1,  71,  -1,  59,  -1,-507,
		  83,  84,  85,-557,-601,-645,-683,-721,-759,-797,-831,-865,-891,  -1,  13,  -1,
		  -1,  -1,  10,  -1,  65,  -1,  -1,  35,  -1,  31,  29,  -1,  51,  -1,  -1,  43,
		  -1,  72, 104,  -1,  68,-913,  -1,  56,  42,  -1,  41,  12,  -1,  39,  36,  -1,
		  79,  -1,  -1,  -1,  46,  -1,  -1, 102,  81,  52,  -1,  -1,  -1,  48,  45,  47,
		  73,  67,  80,  -1,  49,  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   1,  -1,   5,  -1,   0,   0,  -1,  -2,  38,  -1,  28,   6,  29,   6,  -1,  -2,
		  38,  -1,  28,  58,  29,  58,  30,  58,  31,  58,  32,  58,  33,  58,  34,  58,
		  36,  58,  37,  58,  39,  58,  40,  58,  41,  58,  42,  58,  43,  58,  44,  58,
		  45,  58,  46,  58,  47,  58,  48,  58,  49,  58,  50,  58,  51,  58,  52,  58,
		  -1,  -2,  21,  -1,   7,  54,   8,  54,   9,  54,  10,  54,  15,  54,  20,  54,
		  22,  54,  25,  54,  26,  54,  31,  54,  35,  54,  36,  54,  38,  54,  -1,  -2,
		   7,  -1,   8,  -1,   9,  -1,  10,  -1,  15,  -1,  20,  -1,  22,  -1,  25,  -1,
		  26,  -1,  31,  -1,  35,  -1,  36,  -1,  38,  -1,  37,  38,  -1,  -2,  36,  -1,
		  40,  -1,  28,  76,  29,  76,  30,  76,  31,  76,  32,  76,  33,  76,  34,  76,
		  37,  76,  39,  76,  41,  76,  42,  76,  43,  76,  44,  76,  45,  76,  46,  76,
		  47,  76,  48,  76,  49,  76,  50,  76,  51,  76,  52,  76,  -1,  -2,  32,  -1,
		  33,  -1,  34,  -1,  28,  86,  29,  86,  30,  86,  31,  86,  37,  86,  39,  86,
		  41,  86,  42,  86,  43,  86,  44,  86,  45,  86,  46,  86,  47,  86,  48,  86,
		  49,  86,  50,  86,  51,  86,  52,  86,  -1,  -2,  30,  -1,  31,  -1,  28,  89,
		  29,  89,  37,  89,  39,  89,  41,  89,  42,  89,  43,  89,  44,  89,  45,  89,
		  46,  89,  47,  89,  48,  89,  49,  89,  50,  89,  51,  89,  52,  89,  -1,  -2,
		  47,  -1,  48,  -1,  49,  -1,  50,  -1,  28,  94,  29,  94,  37,  94,  39,  94,
		  41,  94,  42,  94,  43,  94,  44,  94,  45,  94,  46,  94,  51,  94,  52,  94,
		  -1,  -2,  44,  -1,  45,  -1,  28,  97,  29,  97,  37,  97,  39,  97,  41,  97,
		  42,  97,  43,  97,  46,  97,  51,  97,  52,  97,  -1,  -2,  42,  -1,  28,  99,
		  29,  99,  37,  99,  39,  99,  41,  99,  43,  99,  46,  99,  51,  99,  52,  99,
		  -1,  -2,  43,  -1,  52,  -1,  28, 101,  29, 101,  37, 101,  39, 101,  41, 101,
		  46, 101,  51, 101,  -1,  -2,   7,  -1,  39,   9,  -1,  -2,   7,  -1,   8,  -1,
		   9,  -1,  10,  -1,  15,  -1,  20,  -1,  22,  -1,  25,  -1,  26,  -1,  31,  -1,
		  35,  -1,  36,  -1,  38,  -1,  39,  38,  -1,  -2,  38,  -1,  40,  -1,  16,  28,
		  28,  28,  29,  28,  -1,  -2,  46,  -1,  37, 103,  41, 103,  -1,  -2,  41,  -1,
		  37,  37,  39,  37,  -1,  -2,  41,  -1,  39,   8,  -1,  -2,   7,  -1,   8,  -1,
		   9,  -1,  10,  -1,  15,  -1,  20,  -1,  22,  -1,  25,  -1,  26,  -1,  31,  -1,
		  35,  -1,  36,  -1,  38,  -1,  40,  -1,  39,  38,  -1,  -2,   7,  -1,   8,  -1,
		   9,  -1,  10,  -1,  15,  -1,  20,  -1,  22,  -1,  25,  -1,  26,  -1,  31,  -1,
		  35,  -1,  36,  -1,  38,  -1,  39,  38,  -1,  -2,  16,  -1,  28,  30,  29,  30,
		  -1,  -2,   1,  -1,   5,  44,  -1,  -2,  38,  -1,  28,  66,  29,  66,  30,  66,
		  31,  66,  32,  66,  33,  66,  34,  66,  36,  66,  37,  66,  39,  66,  40,  66,
		  41,  66,  42,  66,  43,  66,  44,  66,  45,  66,  46,  66,  47,  66,  48,  66,
		  49,  66,  50,  66,  51,  66,  52,  66,  -1,  -2,  32,  -1,  33,  -1,  34,  -1,
		  28,  87,  29,  87,  30,  87,  31,  87,  37,  87,  39,  87,  41,  87,  42,  87,
		  43,  87,  44,  87,  45,  87,  46,  87,  47,  87,  48,  87,  49,  87,  50,  87,
		  51,  87,  52,  87,  -1,  -2,  32,  -1,  33,  -1,  34,  -1,  28,  88,  29,  88,
		  30,  88,  31,  88,  37,  88,  39,  88,  41,  88,  42,  88,  43,  88,  44,  88,
		  45,  88,  46,  88,  47,  88,  48,  88,  49,  88,  50,  88,  51,  88,  52,  88,
		  -1,  -2,  30,  -1,  31,  -1,  28,  92,  29,  92,  37,  92,  39,  92,  41,  92,
		  42,  92,  43,  92,  44,  92,  45,  92,  46,  92,  47,  92,  48,  92,  49,  92,
		  50,  92,  51,  92,  52,  92,  -1,  -2,  30,  -1,  31,  -1,  28,  93,  29,  93,
		  37,  93,  39,  93,  41,  93,  42,  93,  43,  93,  44,  93,  45,  93,  46,  93,
		  47,  93,  48,  93,  49,  93,  50,  93,  51,  93,  52,  93,  -1,  -2,  30,  -1,
		  31,  -1,  28,  90,  29,  90,  37,  90,  39,  90,  41,  90,  42,  90,  43,  90,
		  44,  90,  45,  90,  46,  90,  47,  90,  48,  90,  49,  90,  50,  90,  51,  90,
		  52,  90,  -1,  -2,  30,  -1,  31,  -1,  28,  91,  29,  91,  37,  91,  39,  91,
		  41,  91,  42,  91,  43,  91,  44,  91,  45,  91,  46,  91,  47,  91,  48,  91,
		  49,  91,  50,  91,  51,  91,  52,  91,  -1,  -2,  47,  -1,  48,  -1,  49,  -1,
		  50,  -1,  28,  95,  29,  95,  37,  95,  39,  95,  41,  95,  42,  95,  43,  95,
		  44,  95,  45,  95,  46,  95,  51,  95,  52,  95,  -1,  -2,  47,  -1,  48,  -1,
		  49,  -1,  50,  -1,  28,  96,  29,  96,  37,  96,  39,  96,  41,  96,  42,  96,
		  43,  96,  44,  96,  45,  96,  46,  96,  51,  96,  52,  96,  -1,  -2,  44,  -1,
		  45,  -1,  28,  98,  29,  98,  37,  98,  39,  98,  41,  98,  42,  98,  43,  98,
		  46,  98,  51,  98,  52,  98,  -1,  -2,  42,  -1,  28, 100,  29, 100,  37, 100,
		  39, 100,  41, 100,  43, 100,  46, 100,  51, 100,  52, 100,  -1,  -2,   7,  -1,
		   8,  -1,   9,  -1,  10,  -1,  15,  -1,  20,  -1,  22,  -1,  25,  -1,  26,  -1,
		  31,  -1,  35,  -1,  36,  -1,  38,  -1,  39,  38,  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,  11,  18,  25,  32,  42,  45, 101, 148, 195, 242, 244, 248, 249, 254,
		 301, 307, 312, 317, 318, 365, 366, 413, 418, 419, 466, 513, 518, 526, 533, 538,
		 590, 593, 596, 599, 646, 694, 697, 751, 759, 762, 766, 768, 769, 771, 773, 776,
		 779, 782, 785, 788, 790, 791, 791, 792, 793, 795, 797, 800, 801, 802, 803, 810,
		 811, 812, 819, 826, 833, 840, 845, 874, 876, 877, 878, 879, 880, 885, 890, 897,
		 900, 901, 902, 903, 905, 910, 911, 958,1005,1052,1053,1100,1139,1176,1209,1240,
		1270,1299,
	};

	private static final short[] lapg_sym_from = new short[] {
		 197,   0,   3,   5,  13,  18,  55, 103, 119, 145, 179,   5,  13,  18,  55, 103,
		 145, 179,   5,  13,  18,  55, 103, 145, 179,   5,  13,  18,  55, 103, 145, 179,
		   0,   3,   5,  13,  18,  55, 103, 145, 160, 179,  55, 145, 179,   6,  12,  23,
		  24,  26,  27,  31,  34,  35,  36,  37,  38,  52,  56,  59,  61,  68,  69,  83,
		  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100,
		 110, 111, 112, 115, 116, 120, 122, 124, 147, 152, 157, 158, 165, 166, 169, 172,
		 175, 181, 186, 187, 188,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,
		  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
		 100, 110, 111, 115, 116, 120, 122, 124, 152, 157, 158, 165, 166, 169, 172, 175,
		 181, 186, 187, 188,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,
		  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100,
		 110, 111, 115, 116, 120, 122, 124, 152, 157, 158, 165, 166, 169, 172, 175, 181,
		 186, 187, 188,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,
		  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 110,
		 111, 115, 116, 120, 122, 124, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186,
		 187, 188, 178, 188,  52, 100, 169, 188, 100,  12,  52, 100, 169, 188,  12,  24,
		  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,  85,  86,  87,  88,  89,
		  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122,
		 124, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187, 188,  12,  52, 100,
		 113, 169, 188,  12,  52, 100, 169, 188,  12,  52, 100, 169, 188,  66,  12,  24,
		  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,  85,  86,  87,  88,  89,
		  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122,
		 124, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187, 188,  28,  12,  24,
		  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,  85,  86,  87,  88,  89,
		  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122,
		 124, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187, 188,  12,  52, 100,
		 169, 188,   2,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,
		  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 110,
		 111, 115, 116, 120, 122, 124, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186,
		 187, 188,  12,  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,  85,
		  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 110, 111,
		 115, 116, 120, 122, 124, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187,
		 188,  12,  52, 100, 169, 188,  39,  41,  57,  70,  99, 143, 144, 195,  39,  41,
		  57,  70, 143, 144, 195,  47, 133, 134, 135, 136,  12,  24,  31,  34,  35,  36,
		  37,  38,  47,  52,  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,
		  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122, 124, 133, 134,
		 135, 136, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187, 188,  46, 131,
		 132,  46, 131, 132,  46, 131, 132,  12,  24,  31,  34,  35,  36,  37,  38,  52,
		  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
		  97,  98, 100, 110, 111, 115, 116, 120, 122, 124, 152, 157, 158, 165, 166, 169,
		 172, 175, 181, 186, 187, 188,  12,  24,  31,  34,  35,  36,  37,  38,  42,  52,
		  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
		  97,  98, 100, 110, 111, 115, 116, 120, 122, 124, 152, 157, 158, 165, 166, 169,
		 172, 175, 181, 186, 187, 188,  75,  77, 126,  12,  19,  20,  23,  24,  29,  31,
		  34,  35,  36,  37,  38,  52,  59,  62,  63,  68,  69,  83,  85,  86,  87,  88,
		  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120,
		 122, 124, 127, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187, 188,  78,
		 105, 109, 118, 149, 150, 177, 182,  42,  62, 110,  76,  77, 106, 155,  50, 140,
		  51,  49, 139,  49, 139,  74, 118, 163,  48, 137, 138,  48, 137, 138,  48, 137,
		 138,  48, 137, 138,  65, 141,  51,   0,   0,   0,   3,   0,   3,   5,  18, 103,
		  13,  19,  19,  39,  41,  57,  70, 143, 144, 195,  56,  56,   5,  13,  18,  55,
		 103, 145, 179,   5,  13,  18,  55, 103, 145, 179,   5,  13,  18,  55, 103, 145,
		 179,   5,  13,  18,  55, 103, 145, 179,  12,  52, 100, 169, 188,  12,  24,  31,
		  34,  37,  38,  52,  59,  68,  69,  83,  98, 100, 110, 111, 115, 116, 120, 122,
		 124, 152, 158, 165, 166, 169, 175, 181, 187, 188,  23,  61,  62,  62, 113, 113,
		  37,  59, 110, 111, 165,  37,  59, 110, 111, 165,   5,  13,  18,  55, 103, 145,
		 179,  55, 145, 179,  55, 119, 160, 160, 179,  12,  52, 100, 169, 188,  28,  12,
		  24,  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,  85,  86,  87,  88,
		  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120,
		 122, 124, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187, 188,  12,  24,
		  31,  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,  85,  86,  87,  88,  89,
		  90,  91,  92,  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122,
		 124, 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187, 188,  12,  24,  31,
		  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,
		  91,  92,  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122, 124,
		 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187, 188,  37,  12,  24,  31,
		  34,  35,  36,  37,  38,  52,  59,  68,  69,  83,  85,  86,  87,  88,  89,  90,
		  91,  92,  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122, 124,
		 152, 157, 158, 165, 166, 169, 172, 175, 181, 186, 187, 188,  12,  24,  31,  34,
		  37,  38,  52,  59,  68,  69,  83,  88,  89,  90,  91,  92,  93,  94,  95,  96,
		  97,  98, 100, 110, 111, 115, 116, 120, 122, 124, 152, 158, 165, 166, 169, 175,
		 181, 187, 188,  12,  24,  31,  34,  37,  38,  52,  59,  68,  69,  83,  90,  91,
		  92,  93,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122, 124, 152,
		 158, 165, 166, 169, 175, 181, 187, 188,  12,  24,  31,  34,  37,  38,  52,  59,
		  68,  69,  83,  94,  95,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122, 124,
		 152, 158, 165, 166, 169, 175, 181, 187, 188,  12,  24,  31,  34,  37,  38,  52,
		  59,  68,  69,  83,  96,  97,  98, 100, 110, 111, 115, 116, 120, 122, 124, 152,
		 158, 165, 166, 169, 175, 181, 187, 188,  12,  24,  31,  34,  37,  38,  52,  59,
		  68,  69,  83,  97,  98, 100, 110, 111, 115, 116, 120, 122, 124, 152, 158, 165,
		 166, 169, 175, 181, 187, 188,  12,  24,  31,  34,  37,  38,  52,  59,  68,  69,
		  83,  98, 100, 110, 111, 115, 116, 120, 122, 124, 152, 158, 165, 166, 169, 175,
		 181, 187, 188,
	};

	private static final short[] lapg_sym_to = new short[] {
		 198,   1,   1,   8,   8,   8,   8,   8, 159,   8,   8,   9,   9,   9,   9,   9,
		   9,   9,  10,  10,  10,  10,  10,  10,  10,  11,  11,  11,  11,  11,  11,  11,
		   2,   2,  12,  52,  12, 100,  12, 169, 178, 188, 101, 101, 101,  19,  20,  60,
		  20,  65,  66,  20,  20,  20,  20,  20,  20,  20, 104,  20,  60,  20,  20,  20,
		 127,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,
		  20,  20, 151,  20,  20,  20,  20,  20, 171,  20,  20,  20,  20,  20,  20,  20,
		  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  23,  63,  63,  63,  63,  63,  63,  63,  23,  63,  63,  63,  63,
		  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  23,  63,
		  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  23,  63,  63,  63,  63,
		  63,  23, 187, 187,  99, 143, 143, 143, 144,  24,  24,  24,  24,  24,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,
		 152,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28, 116,  29,  29,
		  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,
		  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,
		  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  67,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,
		  31,  31,   6,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,
		  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,
		  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,
		  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
		  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
		  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
		  33,  34,  34,  34,  34,  34,  79,  79,  79,  79, 142,  79,  79,  79,  80,  80,
		  80,  80,  80,  80,  80,  88,  88,  88,  88,  88,  35,  35,  35,  35,  35,  35,
		  35,  35,  89,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,
		  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  89,  89,
		  89,  89,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  85,  85,
		  85,  86,  86,  86,  87,  87,  87,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  37,  83,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37, 121, 123, 164,  38,  56,  59,  61,  38,  69,  38,
		  38,  38,  38,  38,  38,  38,  38, 111,  61,  38,  38,  38,  38,  38,  38,  38,
		  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,
		  38,  38, 165,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38, 125,
		 146, 148, 157, 172, 173, 186, 193,  84, 112, 112, 122, 124, 147, 175,  96,  96,
		  97,  94,  94,  95,  95, 120, 158, 181,  90,  90,  90,  91,  91,  91,  92,  92,
		  92,  93,  93,  93, 115, 166,  98, 197,   3,   4,   7,   5,   5,  13,  55, 145,
		  53,  57,  58,  81,  82, 107, 119, 167, 168, 196, 105, 106,  14,  54,  14,  54,
		  14,  54, 189,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,
		  16,  17,  17,  17,  17,  17,  17,  17,  39,  39,  39,  39,  39,  40,  64,  70,
		  71,  74,  78,  40, 108, 117, 118, 126, 141,  40, 108, 108, 155, 156, 161, 162,
		 163, 174, 177, 108, 183,  40, 185, 192, 195,  40,  62, 110, 113, 114, 153, 154,
		  75, 109, 149, 150, 182,  76,  76,  76,  76,  76,  18,  18,  18,  18,  18,  18,
		  18, 102, 170, 190, 103, 160, 179, 180, 191,  41,  41,  41,  41,  41,  68,  42,
		  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,
		  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,
		  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,
		  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,
		  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,
		  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  77,  45,  45,  45,
		  45,  72,  73,  45,  45,  45,  45,  45,  45,  45, 128, 129, 130,  45,  45,  45,
		  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,
		  45, 176,  45,  45,  45,  45, 184,  45,  45, 194,  45,  45,  46,  46,  46,  46,
		  46,  46,  46,  46,  46,  46,  46, 131, 132,  46,  46,  46,  46,  46,  46,  46,
		  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,
		  46,  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47, 133, 134,
		 135, 136,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,
		  47,  47,  47,  47,  47,  47,  47,  47,  48,  48,  48,  48,  48,  48,  48,  48,
		  48,  48,  48, 137, 138,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,
		  48,  48,  48,  48,  48,  48,  48,  48,  48,  49,  49,  49,  49,  49,  49,  49,
		  49,  49,  49,  49, 139,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,
		  49,  49,  49,  49,  49,  49,  49,  49,  50,  50,  50,  50,  50,  50,  50,  50,
		  50,  50,  50, 140,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,
		  50,  50,  50,  50,  50,  50,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
		  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
		  51,  51,  51,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   1,   3,   1,   1,   0,   5,   1,   0,   3,   1,   3,   3,   2,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   1,   1,   0,   1,   0,   4,
		   2,   2,   1,   3,   2,   1,   0,   3,   3,   5,   3,   1,   0,   7,   1,   2,
		   2,   4,   3,   4,   6,   1,   0,   3,   3,   1,   1,   3,   1,   1,   1,   1,
		   1,   4,   3,   6,   4,   1,   3,   3,   3,   5,   1,   1,   1,   2,   2,   5,
		   7,   6,   1,   3,   3,   3,   1,   3,   3,   1,   3,   3,   3,   3,   1,   3,
		   3,   1,   3,   1,   3,   1,   5,   1,   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  54,  55,  55,  56,  56,  60,  60,  57,  63,  63,  61,  64,  64,  59,  58,  58,
		  62,  62,  65,  65,  65,  65,  65,  65,  65,  68,  69,  72,  72,  74,  74,  69,
		  69,  69,  71,  71,  75,  76,  76,  73,  66,  66,  80,  81,  81,  67,  82,  82,
		  82,  83,  78,  84,  84,  85,  85,  84,  79,  79,  86,  86,  86,  86,  86,  86,
		  86,  86,  86,  86,  86,  86,  88,  88,  89,  89,  87,  87,  90,  90,  90,  90,
		  90,  90,  91,  91,  91,  91,  92,  92,  92,  93,  93,  93,  93,  93,  94,  94,
		  94,  95,  95,  96,  96,  70,  70,  77,  77,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escdollar",
		"escid",
		"escint",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lcase",
		"Lend",
		"Lelse",
		"Leval",
		"Lfalse",
		"Lfor",
		"Lforeach",
		"Lif",
		"Lin",
		"Lmap",
		"Lnot",
		"Lnull",
		"Lswitch",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"Lassert",
		"'}'",
		"'-}'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'->'",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"':'",
		"'?'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"template_parametersopt",
		"template_parameters",
		"'[-]}'",
		"identifier_listopt",
		"identifier_list",
		"instruction",
		"control_instruction",
		"switch_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_id",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"else_node",
		"anyopt",
		"case_list",
		"one_case",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"complex_data",
		"map_entries",
		"unary_expression",
		"mult_expression",
		"additive_expression",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
		"conditional_or_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escdollar,
		escid,
		escint,
		N24LBRACE,
		N24DIV,
		identifier,
		icon,
		ccon,
		Lcall,
		Lcase,
		Lend,
		Lelse,
		Leval,
		Lfalse,
		Lfor,
		Lforeach,
		Lif,
		Lin,
		Lmap,
		Lnot,
		Lnull,
		Lswitch,
		Ltemplate,
		Ltrue,
		Lthis,
		Lassert,
		RBRACE,
		MINUSRBRACE,
		PLUS,
		MINUS,
		MULT,
		DIV,
		PERC,
		EXCL,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		MINUSGREATER,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		COLON,
		QUESTMARK,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		template_parametersopt,
		template_parameters,
		LBRACKETMINUSRBRACKETRBRACE,
		identifier_listopt,
		identifier_list,
		instruction,
		control_instruction,
		switch_instruction,
		simple_instruction,
		sentence,
		expression,
		template_id,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		else_node,
		anyopt,
		case_list,
		one_case,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		complex_data,
		map_entries,
		unary_expression,
		mult_expression,
		additive_expression,
		relational_expression,
		equality_expression,
		conditional_and_expression,
		conditional_or_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 ) {
				if( lapg_lalr[p] == symbol ) {
					break;
				}
			}
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state ) {
				return lapg_sym_to[e];
			} else if( i < state ) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) {
					token[lapg_size++] = (byte)chr;
				}
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) {
					lapg_current_offset++;
					if( chr == '\n' ) {
						lapg_current_line++;
					}
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 3:
					 lapg_n.sym = new String(token,1,lapg_size-1); break;
				case 4:
					 lapg_n.sym = Integer.parseInt(new String(token,1,lapg_size-1)); break;
				case 5:
					 group = 1; break;
				case 7:
					 lapg_n.sym = new String(token,0,lapg_size); break;
				case 8:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break;
				case 9:
					 lapg_n.sym = new String(token,1,lapg_size-2); break;
				case 28:
					 group = 0; break;
				case 29:
					 group = 0; break;
				case 53:
					 continue;
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX ) {
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					}
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym));
							break;
						case 7:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-2].sym), ((ArrayList)lapg_m[lapg_head-1].sym), templatePackage,lapg_m[lapg_head-4].pos.line);
							break;
						case 10:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 11:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym));
							break;
						case 12:
							 ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym));
							break;
						case 14:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 15:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 16:
							 skipSpaces(lapg_m[lapg_head-0].pos.offset+1);
							break;
						case 21:
							 lapg_gg.sym = createEscapedId(((String)lapg_m[lapg_head-0].sym), lapg_m[lapg_head-0].pos.line);
							break;
						case 22:
							 lapg_gg.sym = new IndexNode(null, new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-0].pos.line), lapg_m[lapg_head-0].pos.line);
							break;
						case 23:
							 lapg_gg.sym = new DollarNode(lapg_m[lapg_head-0].pos.line);
							break;
						case 24:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset),lapg_m[lapg_head-0].pos.line);
							break;
						case 25:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 31:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,lapg_m[lapg_head-3].pos.line);
							break;
						case 32:
							 lapg_gg.sym = new EvalNode(((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 33:
							 lapg_gg.sym = new AssertNode(((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 35:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym);
							break;
						case 36:
							 lapg_gg.sym = lapg_m[lapg_head-0].sym;
							break;
						case 39:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 40:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 41:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-3].sym)); applyElse(((CompoundNode)lapg_gg.sym),((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 45:
							 lapg_gg.sym = new SwitchNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-6].pos.line); checkIsSpace(lapg_m[lapg_head-2].pos.offset,lapg_m[lapg_head-2].endpos.offset);
							break;
						case 46:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym));
							break;
						case 47:
							 ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym));
							break;
						case 48:
							 CaseNode.add(((ArrayList)lapg_gg.sym), ((Node)lapg_m[lapg_head-0].sym));
							break;
						case 49:
							 lapg_gg.sym = new CaseNode(((ExpressionNode)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 50:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 51:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 52:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-5].pos.line);
							break;
						case 55:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 58:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-0].pos.line);
							break;
						case 59:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 60:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,lapg_m[lapg_head-0].pos.line);
							break;
						case 61:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,lapg_m[lapg_head-0].pos.line);
							break;
						case 62:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,lapg_m[lapg_head-0].pos.line);
							break;
						case 63:
							 lapg_gg.sym = new ThisNode(lapg_m[lapg_head-0].pos.line);
							break;
						case 64:
							 lapg_gg.sym = new LiteralNode(null, lapg_m[lapg_head-0].pos.line);
							break;
						case 65:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 66:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 67:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-5].pos.line);
							break;
						case 68:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 70:
							 lapg_gg.sym = new ListNode(((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 71:
							 lapg_gg.sym = new ConcreteMapNode(((HashMap<ExpressionNode,ExpressionNode>)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 72:
							 lapg_gg.sym = new HashMap(); ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 73:
							 ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 74:
							 lapg_gg.sym = Boolean.TRUE;
							break;
						case 75:
							 lapg_gg.sym = Boolean.FALSE;
							break;
						case 77:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.NOT, ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 78:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.MINUS, ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 79:
							 lapg_gg.sym = new MapNode(null,((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-4].pos.line);
							break;
						case 80:
							 lapg_gg.sym = new MapNode(((ExpressionNode)lapg_m[lapg_head-4].sym),((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-6].pos.line);
							break;
						case 81:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-3].sym),((ArrayList)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,lapg_m[lapg_head-5].pos.line);
							break;
						case 83:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MULT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 84:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.DIV, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 85:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.REM, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 87:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.PLUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 88:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MINUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 90:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 91:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 92:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 93:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 95:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 96:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 98:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 100:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 102:
							 lapg_gg.sym = new TriplexNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym), lapg_m[lapg_head-4].pos.line);
							break;
						case 103:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 104:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) {
						lapg_m[lapg_head--] = null;
					}
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX ) {
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
					}
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 199-1 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}
