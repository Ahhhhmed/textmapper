// Parser.java

package net.sf.lapg.templates.ast;

import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.lapg.templates.api.ITemplate;

public class Parser {

	private ArrayList<ITemplate> templates;
	private String templatePackage;

	public Parser() {
	}

	private static final boolean DEBUG_SYNTAX = false;

	int killEnds = -1;
	byte[] buff;
	int l;

	private String rawText(int start, int end) {
		if( killEnds == start ) {
			while( start < end && (buff[start] == '\t' || buff[start] == ' ') ) {
				start++;
			}

			if( start < end && buff[start] == '\r' ) {
				start++;
			}

			if( start < end && buff[start] == '\n' ) {
				start++;
			}
		}
		try {
			return new String(buff, start, end-start, "utf-8");
		} catch(UnsupportedEncodingException ex) {
			return "";
		}
	}

	private void checkIsSpace(int start, int end) {
		String val = rawText(start,end).trim();
		if( val.length() > 0 ) {
			error("Unknown text ignored: `"+val+"`");
		}
	}

	private void applyElse(CompoundNode node, ArrayList<Node> instructions) {
		if( node instanceof IfNode ) {
			((IfNode)node).setElseInstructions(instructions);
		} else {
			error("Unknown else node, instructions skipped");
		}
	}

	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}

	void error( String s ) {
		System.err.println(s);
	}

	public boolean parse(String s, String templatePackage) {
		l = 0;
		this.templatePackage = templatePackage;
		templates = new ArrayList<ITemplate>();
		try {
			buff = s.getBytes("utf-8");
		} catch( UnsupportedEncodingException ex ) {
			return false;
		}
		return parse();
	}

	public ITemplate[] getResult() {
		return templates.toArray(new ITemplate[templates.size()]);
	}

	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   6,   7,   1,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
		  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,   1,  31,  32,  33,  34,
		   1,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
		  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,   1,  64,
		   1,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
		  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private final short[][] lapg_lexem = new short[][] {
		{  -2,   2,   2,   2,   2,   2,   2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,   4,   4,   4,   4,   5,  -1,  -1,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  19,  20,  21,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  -1,  25,  23,  26,  23,  27,  23,  28,  29,  30,  23,  31,  23,  23,  23,  32,  33,  23,  23,  23,  23,  34,  35,  23,  23,  23,  23,  23,  23,  -1,  36,  37, },
		{  -3,   2,   2,   2,   2,   2,   2,   2,  -3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  38,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -1,  -1,  -1,  -1,  -1,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  -1,  -1,  -1,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  42,  -1,  -1, },
		{ -56, -56,   4,   4,   4,   4, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, },
		{ -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38,  43, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, },
		{ -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  46,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{ -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, },
		{ -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, },
		{ -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, },
		{ -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, },
		{ -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, },
		{ -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34,  47, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34,  48, },
		{ -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, },
		{ -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, },
		{ -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, },
		{ -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52,  49, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  50,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{ -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53,  51, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, },
		{ -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, },
		{ -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  52,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  53,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  54,  23,  55,  23,  23,  23,  23,  23,  23,  23,  56,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  57,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  58,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  59,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  60,  23,  23,  23,  23,  23,  23,  23,  61,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  62,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  63,  23,  23,  23,  23,  23,  64,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  65,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  66,  23,  23,  67,  23,  23,  23,  23,  23,  23,  23,  23,  23,  68,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  69,  -1, },
		{ -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  -5,  -5,  -5,  -5,  -5,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  -5,  -5,  -5,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  -5,  -5,  -5, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, },
		{ -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, },
		{ -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  70,  70,  70,  70,  70,  70,  70,  70,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,   8,   8,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,   8,  -1,   8,  -1,   8,  -1,  71,  -1,  -1,  -1,  -1,  -1, },
		{ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, },
		{ -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, },
		{ -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, },
		{ -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, },
		{ -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  72,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  73,  23,  23,  23,  23,  23,  23,  74,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  75,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  76,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  77,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  78,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  79,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  80,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -21, -21, -21, -21, -21,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -21, -21, -21,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -21, -21, -21, },
		{ -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -22, -22, -22, -22, -22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -22, -22, -22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -22, -22, -22, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  81,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  82,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  83,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  84,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  85,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  86,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  87,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,  88,  88,  88,  88,  88,  88,  88,  88,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  46,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  89,  89,  89,  89,  89,  89,  89,  89,  89,  89,  -1,  -1,  -1,  -1,  -1,  89,  89,  89,  89,  89,  89,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  89,  89,  89,  89,  89,  89,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  90,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  91,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  92,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  93,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -14, -14, -14, -14, -14,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -14, -14, -14,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -14, -14, -14, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  94,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  95,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -18, -18, -18, -18, -18,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -18, -18, -18,  23,  23,  23,  23,  23,  96,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -18, -18, -18, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  97,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -23, -23, -23, -23, -23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -23, -23, -23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -23, -23, -23, },
		{ -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -24, -24, -24, -24, -24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -24, -24, -24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -24, -24, -24, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  98,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  99,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 100,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 101,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23, 102,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  46,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  45,   8,   8,   8,   8,   8,   8,   8,   8,  89,  89,  89,  89,  89,  89,  89,  89,  89,  89,   8,   8,   8,   8,   8,  89,  89,  89,  89,  89,  89,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  46,   8,   8,  89,  89,  89,  89,  89,  89,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 103,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -12, -12, -12, -12, -12,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -12, -12, -12,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -12, -12, -12, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -13, -13, -13, -13, -13,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -13, -13, -13,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -13, -13, -13, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -15, -15, -15, -15, -15,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -15, -15, -15,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -15, -15, -15, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -16, -16, -16, -16, -16,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -16, -16, -16,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -16, -16, -16, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23, 104,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23, 105,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -20, -20, -20, -20, -20,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -20, -20, -20,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -20, -20, -20, },
		{ -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -25, -25, -25, -25, -25,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -25, -25, -25,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -25, -25, -25, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23, 106,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 107,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -29, -29, -29, -29, -29,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -29, -29, -29,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -29, -29, -29, },
		{ -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -28, -28, -28, -28, -28,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -28, -28, -28,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -28, -28, -28, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 108,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -17, -17, -17, -17, -17,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -17, -17, -17,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -17, -17, -17, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23, 109,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23, 110,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23, 111,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -30, -30, -30, -30, -30,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -30, -30, -30,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -30, -30, -30, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23, 112,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -26, -26, -26, -26, -26,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -26, -26, -26,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -26, -26, -26, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, 113,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -19, -19, -19, -19, -19,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -19, -19, -19,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -19, -19, -19, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  -9,  -9,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9,  23,  23,  23,  23,  23, 114,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  -9,  -9,  -9, },
		{ -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -27, -27, -27, -27, -27,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -27, -27, -27,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23, -27, -27, -27, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,   4,  -1,  -3,   2,  -1,  -1,   1,  24,  23,  21,  22,  -1,  -1,  15,  18,
		  19,  20,  -1, -11, -19,  60,  62,  -1,  -1,  75,  -1,  -1,  -1, -69,  -1,  64,
		  -1,  74,  63,  -1,  -1,  -1,-101,  -1,  -1,  26,  -1,-133,  61,  69,  83,-181,
		-225,-263,-297,-323,-345,  -1,   3,  14,  -1,-365,  -1,   5,-371,  34,  -1,-403,
		  -1,  32,  -1,  -1,  -1,  53,  -1,  -1,  -1,  33,  78,  77,-415,  -1,-423,  -1,
		  -1,  17,  16,  25,  50,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1,  57,  40,  -1,  11,  -1,-431,   7, 104,  -1,
		-437,-471,  -1,-503,  27,  -1,  -1,  -1,  55,  -1,-511,  -1,  70,  -1,  71,  -1,
		  59,  -1,-517,  84,  85,  86,-567,-611,-655,-693,-731,-769,-807,-841,-875,-901,
		  -1,  13,  -1,  -1,  -1,  10,  -1,  65,  -1,  -1,  35,  -1,  31,  29,  -1,  51,
		  -1,  -1,  -1,  43,  -1,  72, 105,  -1,  68,-923,  -1,  56,  42,  -1,  41,  12,
		  -1,  39,  36,  -1,  81,  79,  -1,  -1,  -1,  46,  -1,  -1, 103,  82,  52,  -1,
		  -1,  -1,  48,  45,  47,  73,  67,  80,  -1,  49,  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   1,  -1,   5,  -1,   0,   0,  -1,  -2,  39,  -1,  29,   6,  30,   6,  -1,  -2,
		  39,  -1,  29,  58,  30,  58,  31,  58,  32,  58,  33,  58,  34,  58,  35,  58,
		  37,  58,  38,  58,  40,  58,  41,  58,  42,  58,  43,  58,  44,  58,  45,  58,
		  46,  58,  47,  58,  48,  58,  49,  58,  50,  58,  51,  58,  52,  58,  53,  58,
		  -1,  -2,  22,  -1,   7,  54,   8,  54,   9,  54,  10,  54,  15,  54,  18,  54,
		  21,  54,  23,  54,  26,  54,  27,  54,  32,  54,  36,  54,  37,  54,  39,  54,
		  -1,  -2,   7,  -1,   8,  -1,   9,  -1,  10,  -1,  15,  -1,  18,  -1,  21,  -1,
		  23,  -1,  26,  -1,  27,  -1,  32,  -1,  36,  -1,  37,  -1,  39,  -1,  38,  38,
		  -1,  -2,  37,  -1,  41,  -1,  29,  76,  30,  76,  31,  76,  32,  76,  33,  76,
		  34,  76,  35,  76,  38,  76,  40,  76,  42,  76,  43,  76,  44,  76,  45,  76,
		  46,  76,  47,  76,  48,  76,  49,  76,  50,  76,  51,  76,  52,  76,  53,  76,
		  -1,  -2,  33,  -1,  34,  -1,  35,  -1,  29,  87,  30,  87,  31,  87,  32,  87,
		  38,  87,  40,  87,  42,  87,  43,  87,  44,  87,  45,  87,  46,  87,  47,  87,
		  48,  87,  49,  87,  50,  87,  51,  87,  52,  87,  53,  87,  -1,  -2,  31,  -1,
		  32,  -1,  29,  90,  30,  90,  38,  90,  40,  90,  42,  90,  43,  90,  44,  90,
		  45,  90,  46,  90,  47,  90,  48,  90,  49,  90,  50,  90,  51,  90,  52,  90,
		  53,  90,  -1,  -2,  48,  -1,  49,  -1,  50,  -1,  51,  -1,  29,  95,  30,  95,
		  38,  95,  40,  95,  42,  95,  43,  95,  44,  95,  45,  95,  46,  95,  47,  95,
		  52,  95,  53,  95,  -1,  -2,  45,  -1,  46,  -1,  29,  98,  30,  98,  38,  98,
		  40,  98,  42,  98,  43,  98,  44,  98,  47,  98,  52,  98,  53,  98,  -1,  -2,
		  43,  -1,  29, 100,  30, 100,  38, 100,  40, 100,  42, 100,  44, 100,  47, 100,
		  52, 100,  53, 100,  -1,  -2,  44,  -1,  53,  -1,  29, 102,  30, 102,  38, 102,
		  40, 102,  42, 102,  47, 102,  52, 102,  -1,  -2,   7,  -1,  40,   9,  -1,  -2,
		   7,  -1,   8,  -1,   9,  -1,  10,  -1,  15,  -1,  18,  -1,  21,  -1,  23,  -1,
		  26,  -1,  27,  -1,  32,  -1,  36,  -1,  37,  -1,  39,  -1,  40,  38,  -1,  -2,
		  39,  -1,  41,  -1,  16,  28,  29,  28,  30,  28,  -1,  -2,  47,  -1,  38, 104,
		  42, 104,  -1,  -2,  42,  -1,  38,  37,  40,  37,  -1,  -2,  42,  -1,  40,   8,
		  -1,  -2,   7,  -1,   8,  -1,   9,  -1,  10,  -1,  15,  -1,  18,  -1,  21,  -1,
		  23,  -1,  26,  -1,  27,  -1,  32,  -1,  36,  -1,  37,  -1,  39,  -1,  41,  -1,
		  40,  38,  -1,  -2,   7,  -1,   8,  -1,   9,  -1,  10,  -1,  15,  -1,  18,  -1,
		  21,  -1,  23,  -1,  26,  -1,  27,  -1,  32,  -1,  36,  -1,  37,  -1,  39,  -1,
		  40,  38,  -1,  -2,  16,  -1,  29,  30,  30,  30,  -1,  -2,   1,  -1,   5,  44,
		  -1,  -2,  39,  -1,  29,  66,  30,  66,  31,  66,  32,  66,  33,  66,  34,  66,
		  35,  66,  37,  66,  38,  66,  40,  66,  41,  66,  42,  66,  43,  66,  44,  66,
		  45,  66,  46,  66,  47,  66,  48,  66,  49,  66,  50,  66,  51,  66,  52,  66,
		  53,  66,  -1,  -2,  33,  -1,  34,  -1,  35,  -1,  29,  88,  30,  88,  31,  88,
		  32,  88,  38,  88,  40,  88,  42,  88,  43,  88,  44,  88,  45,  88,  46,  88,
		  47,  88,  48,  88,  49,  88,  50,  88,  51,  88,  52,  88,  53,  88,  -1,  -2,
		  33,  -1,  34,  -1,  35,  -1,  29,  89,  30,  89,  31,  89,  32,  89,  38,  89,
		  40,  89,  42,  89,  43,  89,  44,  89,  45,  89,  46,  89,  47,  89,  48,  89,
		  49,  89,  50,  89,  51,  89,  52,  89,  53,  89,  -1,  -2,  31,  -1,  32,  -1,
		  29,  93,  30,  93,  38,  93,  40,  93,  42,  93,  43,  93,  44,  93,  45,  93,
		  46,  93,  47,  93,  48,  93,  49,  93,  50,  93,  51,  93,  52,  93,  53,  93,
		  -1,  -2,  31,  -1,  32,  -1,  29,  94,  30,  94,  38,  94,  40,  94,  42,  94,
		  43,  94,  44,  94,  45,  94,  46,  94,  47,  94,  48,  94,  49,  94,  50,  94,
		  51,  94,  52,  94,  53,  94,  -1,  -2,  31,  -1,  32,  -1,  29,  91,  30,  91,
		  38,  91,  40,  91,  42,  91,  43,  91,  44,  91,  45,  91,  46,  91,  47,  91,
		  48,  91,  49,  91,  50,  91,  51,  91,  52,  91,  53,  91,  -1,  -2,  31,  -1,
		  32,  -1,  29,  92,  30,  92,  38,  92,  40,  92,  42,  92,  43,  92,  44,  92,
		  45,  92,  46,  92,  47,  92,  48,  92,  49,  92,  50,  92,  51,  92,  52,  92,
		  53,  92,  -1,  -2,  48,  -1,  49,  -1,  50,  -1,  51,  -1,  29,  96,  30,  96,
		  38,  96,  40,  96,  42,  96,  43,  96,  44,  96,  45,  96,  46,  96,  47,  96,
		  52,  96,  53,  96,  -1,  -2,  48,  -1,  49,  -1,  50,  -1,  51,  -1,  29,  97,
		  30,  97,  38,  97,  40,  97,  42,  97,  43,  97,  44,  97,  45,  97,  46,  97,
		  47,  97,  52,  97,  53,  97,  -1,  -2,  45,  -1,  46,  -1,  29,  99,  30,  99,
		  38,  99,  40,  99,  42,  99,  43,  99,  44,  99,  47,  99,  52,  99,  53,  99,
		  -1,  -2,  43,  -1,  29, 101,  30, 101,  38, 101,  40, 101,  42, 101,  44, 101,
		  47, 101,  52, 101,  53, 101,  -1,  -2,   7,  -1,   8,  -1,   9,  -1,  10,  -1,
		  15,  -1,  18,  -1,  21,  -1,  23,  -1,  26,  -1,  27,  -1,  32,  -1,  36,  -1,
		  37,  -1,  39,  -1,  40,  38,  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,  11,  18,  25,  32,  42,  45, 103, 152, 201, 250, 252, 256, 257, 262,
		 311, 317, 322, 371, 376, 377, 426, 427, 476, 481, 482, 531, 580, 585, 593, 600,
		 605, 659, 662, 665, 668, 717, 767, 770, 827, 836, 839, 843, 845, 846, 848, 850,
		 853, 856, 859, 862, 865, 867, 868, 868, 869, 870, 872, 874, 877, 878, 879, 880,
		 887, 888, 889, 896, 903, 910, 917, 922, 952, 954, 955, 956, 957, 958, 963, 968,
		 975, 978, 979, 980, 981, 983, 988, 989,1038,1087,1136,1137,1186,1226,1264,1298,
		1330,1361,1391,
	};

	private static final short[] lapg_sym_from = new short[] {
		 202,   0,   3,   5,  13,  18,  56, 105, 122, 148, 184,   5,  13,  18,  56, 105,
		 148, 184,   5,  13,  18,  56, 105, 148, 184,   5,  13,  18,  56, 105, 148, 184,
		   0,   3,   5,  13,  18,  56, 105, 148, 164, 184,  56, 148, 184,   6,  12,  23,
		  24,  26,  27,  32,  35,  36,  37,  38,  39,  53,  57,  60,  62,  68,  70,  71,
		  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100,
		 102, 112, 113, 114, 117, 118, 123, 125, 127, 150, 155, 160, 161, 162, 169, 170,
		 173, 176, 179, 186, 191, 192, 193,  12,  24,  32,  35,  36,  37,  38,  39,  53,
		  60,  68,  70,  71,  85,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
		  98,  99, 100, 102, 112, 113, 117, 118, 123, 125, 127, 155, 160, 161, 162, 169,
		 170, 173, 176, 179, 186, 191, 192, 193,  12,  24,  32,  35,  36,  37,  38,  39,
		  53,  60,  68,  70,  71,  85,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
		  97,  98,  99, 100, 102, 112, 113, 117, 118, 123, 125, 127, 155, 160, 161, 162,
		 169, 170, 173, 176, 179, 186, 191, 192, 193,  12,  24,  32,  35,  36,  37,  38,
		  39,  53,  60,  68,  70,  71,  85,  87,  88,  89,  90,  91,  92,  93,  94,  95,
		  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123, 125, 127, 155, 160, 161,
		 162, 169, 170, 173, 176, 179, 186, 191, 192, 193, 183, 193,  53, 102, 173, 193,
		 102,  12,  53, 102, 173, 193,  12,  24,  32,  35,  36,  37,  38,  39,  53,  60,
		  68,  70,  71,  85,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
		  99, 100, 102, 112, 113, 117, 118, 123, 125, 127, 155, 160, 161, 162, 169, 170,
		 173, 176, 179, 186, 191, 192, 193,  12,  53, 102, 115, 173, 193,  12,  53, 102,
		 173, 193,  12,  24,  32,  35,  36,  37,  38,  39,  53,  60,  68,  70,  71,  85,
		  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 102, 112,
		 113, 117, 118, 123, 125, 127, 155, 160, 161, 162, 169, 170, 173, 176, 179, 186,
		 191, 192, 193,  12,  53, 102, 173, 193,  67,  12,  24,  32,  35,  36,  37,  38,
		  39,  53,  60,  68,  70,  71,  85,  87,  88,  89,  90,  91,  92,  93,  94,  95,
		  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123, 125, 127, 155, 160, 161,
		 162, 169, 170, 173, 176, 179, 186, 191, 192, 193,  29,  12,  24,  32,  35,  36,
		  37,  38,  39,  53,  60,  68,  70,  71,  85,  87,  88,  89,  90,  91,  92,  93,
		  94,  95,  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123, 125, 127, 155,
		 160, 161, 162, 169, 170, 173, 176, 179, 186, 191, 192, 193,  12,  53, 102, 173,
		 193,   2,  12,  24,  32,  35,  36,  37,  38,  39,  53,  60,  68,  70,  71,  85,
		  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 102, 112,
		 113, 117, 118, 123, 125, 127, 155, 160, 161, 162, 169, 170, 173, 176, 179, 186,
		 191, 192, 193,  12,  24,  32,  35,  36,  37,  38,  39,  53,  60,  68,  70,  71,
		  85,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 102,
		 112, 113, 117, 118, 123, 125, 127, 155, 160, 161, 162, 169, 170, 173, 176, 179,
		 186, 191, 192, 193,  12,  53, 102, 173, 193,  40,  42,  58,  72, 101, 146, 147,
		 200,  40,  42,  58,  72, 146, 147, 200,  48, 136, 137, 138, 139,  12,  24,  32,
		  35,  36,  37,  38,  39,  48,  53,  60,  68,  70,  71,  85,  87,  88,  89,  90,
		  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123,
		 125, 127, 136, 137, 138, 139, 155, 160, 161, 162, 169, 170, 173, 176, 179, 186,
		 191, 192, 193,  47, 134, 135,  47, 134, 135,  47, 134, 135,  12,  24,  32,  35,
		  36,  37,  38,  39,  53,  60,  68,  70,  71,  85,  87,  88,  89,  90,  91,  92,
		  93,  94,  95,  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123, 125, 127,
		 155, 160, 161, 162, 169, 170, 173, 176, 179, 186, 191, 192, 193,  12,  24,  32,
		  35,  36,  37,  38,  39,  43,  53,  60,  68,  70,  71,  85,  87,  88,  89,  90,
		  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123,
		 125, 127, 155, 160, 161, 162, 169, 170, 173, 176, 179, 186, 191, 192, 193,  77,
		  79, 129,  12,  19,  20,  23,  24,  28,  30,  32,  35,  36,  37,  38,  39,  53,
		  60,  63,  64,  68,  70,  71,  85,  87,  88,  89,  90,  91,  92,  93,  94,  95,
		  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123, 125, 127, 130, 155, 160,
		 161, 162, 169, 170, 173, 176, 179, 186, 191, 192, 193,  80, 107, 111, 119, 121,
		 152, 153, 182, 187,  43,  63, 112,  78,  79, 108, 158,  51, 143,  52,  50, 142,
		  50, 142,  76, 121, 167,  49, 140, 141,  49, 140, 141,  49, 140, 141,  49, 140,
		 141,  66, 144,  52,   0,   0,   0,   3,   0,   3,   5,  18, 105,  13,  19,  19,
		  40,  42,  58,  72, 146, 147, 200,  57,  57,   5,  13,  18,  56, 105, 148, 184,
		   5,  13,  18,  56, 105, 148, 184,   5,  13,  18,  56, 105, 148, 184,   5,  13,
		  18,  56, 105, 148, 184,  12,  53, 102, 173, 193,  12,  24,  32,  35,  38,  39,
		  53,  60,  68,  70,  71,  85, 100, 102, 112, 113, 117, 118, 123, 125, 127, 155,
		 162, 169, 170, 173, 179, 186, 192, 193,  23,  62,  63,  63, 115, 115,  38,  60,
		 112, 113, 169,  38,  60, 112, 113, 169,   5,  13,  18,  56, 105, 148, 184,  56,
		 148, 184,  56, 122, 164, 164, 184,  12,  53, 102, 173, 193,  29,  12,  24,  32,
		  35,  36,  37,  38,  39,  53,  60,  68,  70,  71,  85,  87,  88,  89,  90,  91,
		  92,  93,  94,  95,  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123, 125,
		 127, 155, 160, 161, 162, 169, 170, 173, 176, 179, 186, 191, 192, 193,  12,  24,
		  32,  35,  36,  37,  38,  39,  53,  60,  68,  70,  71,  85,  87,  88,  89,  90,
		  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123,
		 125, 127, 155, 160, 161, 162, 169, 170, 173, 176, 179, 186, 191, 192, 193,  12,
		  24,  32,  35,  36,  37,  38,  39,  53,  60,  68,  70,  71,  85,  87,  88,  89,
		  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 102, 112, 113, 117, 118,
		 123, 125, 127, 155, 160, 161, 162, 169, 170, 173, 176, 179, 186, 191, 192, 193,
		  38,  12,  24,  32,  35,  36,  37,  38,  39,  53,  60,  68,  70,  71,  85,  87,
		  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 102, 112, 113,
		 117, 118, 123, 125, 127, 155, 160, 161, 162, 169, 170, 173, 176, 179, 186, 191,
		 192, 193,  12,  24,  32,  35,  38,  39,  53,  60,  68,  70,  71,  85,  90,  91,
		  92,  93,  94,  95,  96,  97,  98,  99, 100, 102, 112, 113, 117, 118, 123, 125,
		 127, 155, 162, 169, 170, 173, 179, 186, 192, 193,  12,  24,  32,  35,  38,  39,
		  53,  60,  68,  70,  71,  85,  92,  93,  94,  95,  96,  97,  98,  99, 100, 102,
		 112, 113, 117, 118, 123, 125, 127, 155, 162, 169, 170, 173, 179, 186, 192, 193,
		  12,  24,  32,  35,  38,  39,  53,  60,  68,  70,  71,  85,  96,  97,  98,  99,
		 100, 102, 112, 113, 117, 118, 123, 125, 127, 155, 162, 169, 170, 173, 179, 186,
		 192, 193,  12,  24,  32,  35,  38,  39,  53,  60,  68,  70,  71,  85,  98,  99,
		 100, 102, 112, 113, 117, 118, 123, 125, 127, 155, 162, 169, 170, 173, 179, 186,
		 192, 193,  12,  24,  32,  35,  38,  39,  53,  60,  68,  70,  71,  85,  99, 100,
		 102, 112, 113, 117, 118, 123, 125, 127, 155, 162, 169, 170, 173, 179, 186, 192,
		 193,  12,  24,  32,  35,  38,  39,  53,  60,  68,  70,  71,  85, 100, 102, 112,
		 113, 117, 118, 123, 125, 127, 155, 162, 169, 170, 173, 179, 186, 192, 193,
	};

	private static final short[] lapg_sym_to = new short[] {
		 203,   1,   1,   8,   8,   8,   8,   8, 163,   8,   8,   9,   9,   9,   9,   9,
		   9,   9,  10,  10,  10,  10,  10,  10,  10,  11,  11,  11,  11,  11,  11,  11,
		   2,   2,  12,  53,  12, 102,  12, 173, 183, 193, 103, 103, 103,  19,  20,  61,
		  20,  66,  67,  20,  20,  20,  20,  20,  20,  20, 106,  20,  61,  20,  20,  20,
		  20, 130,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,
		  20,  20,  20, 154,  20,  20,  20,  20,  20, 175,  20,  20,  20,  20,  20,  20,
		  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  64,  64,  64,  64,  64,  64,
		  64,  23,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,
		  64,  64,  64,  64,  64,  23,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,
		  64,  64,  64,  23,  64,  64,  64,  64,  64,  23, 192, 192, 101, 146, 146, 146,
		 147,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
		  25,  25,  25,  25,  25,  25,  25,  26,  26,  26, 155,  26,  26,  27,  27,  27,
		  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,
		  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,
		  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,
		  28,  28,  28,  29,  29,  29,  29,  29, 118,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  69,  31,  31,  31,  31,  31,
		  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,
		  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,
		  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,
		  32,   6,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
		  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
		  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
		  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,
		  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,
		  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,
		  34,  34,  34,  34,  35,  35,  35,  35,  35,  81,  81,  81,  81, 145,  81,  81,
		  81,  82,  82,  82,  82,  82,  82,  82,  90,  90,  90,  90,  90,  36,  36,  36,
		  36,  36,  36,  36,  36,  91,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  91,  91,  91,  91,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  87,  87,  87,  88,  88,  88,  89,  89,  89,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,
		  38,  38,  38,  38,  38,  85,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,
		  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,
		  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38, 124,
		 126, 168,  39,  57,  60,  62,  39,  68,  71,  39,  39,  39,  39,  39,  39,  39,
		  39, 113,  62,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,
		  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39, 169,  39,  39,
		  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39, 128, 149, 151, 160, 161,
		 176, 177, 191, 198,  86, 114, 114, 125, 127, 150, 179,  98,  98,  99,  96,  96,
		  97,  97, 123, 162, 186,  92,  92,  92,  93,  93,  93,  94,  94,  94,  95,  95,
		  95, 117, 170, 100, 202,   3,   4,   7,   5,   5,  13,  56, 148,  54,  58,  59,
		  83,  84, 109, 122, 171, 172, 201, 107, 108,  14,  55,  14,  55,  14,  55, 194,
		  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  17,  17,
		  17,  17,  17,  17,  17,  40,  40,  40,  40,  40,  41,  65,  72,  73,  76,  80,
		  41, 110, 119, 120, 121, 129, 144,  41, 110, 110, 158, 159, 165, 166, 167, 178,
		 182, 110, 188,  41, 190, 197, 200,  41,  63, 112, 115, 116, 156, 157,  77, 111,
		 152, 153, 187,  78,  78,  78,  78,  78,  18,  18,  18,  18,  18,  18,  18, 104,
		 174, 195, 105, 164, 184, 185, 196,  42,  42,  42,  42,  42,  70,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  44,  44,
		  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,
		  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,
		  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  45,
		  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,
		  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,
		  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,
		  79,  46,  46,  46,  46,  74,  75,  46,  46,  46,  46,  46,  46,  46,  46, 131,
		 132, 133,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,
		  46,  46,  46,  46,  46,  46, 180, 181,  46,  46,  46,  46, 189,  46,  46, 199,
		  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47, 134, 135,
		  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,
		  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  48,  48,  48,  48,  48,  48,
		  48,  48,  48,  48,  48,  48, 136, 137, 138, 139,  48,  48,  48,  48,  48,  48,
		  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,
		  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 140, 141,  49,  49,
		  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,
		  49,  49,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50, 142,  50,
		  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,
		  50,  50,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51, 143,  51,
		  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
		  51,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,
		  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   1,   3,   1,   1,   0,   5,   1,   0,   3,   1,   3,   3,   2,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   1,   1,   0,   1,   0,   4,
		   2,   2,   1,   3,   2,   1,   0,   3,   3,   5,   3,   1,   0,   7,   1,   2,
		   2,   4,   3,   4,   6,   1,   0,   3,   3,   1,   1,   3,   1,   1,   1,   1,
		   1,   4,   3,   6,   4,   1,   3,   3,   3,   5,   1,   1,   1,   2,   2,   5,
		   7,   5,   6,   1,   3,   3,   3,   1,   3,   3,   1,   3,   3,   3,   3,   1,
		   3,   3,   1,   3,   1,   3,   1,   5,   1,   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  55,  56,  56,  57,  57,  61,  61,  58,  64,  64,  62,  65,  65,  60,  59,  59,
		  63,  63,  66,  66,  66,  66,  66,  66,  66,  69,  70,  73,  73,  75,  75,  70,
		  70,  70,  72,  72,  76,  77,  77,  74,  67,  67,  81,  82,  82,  68,  83,  83,
		  83,  84,  79,  85,  85,  86,  86,  85,  80,  80,  87,  87,  87,  87,  87,  87,
		  87,  87,  87,  87,  87,  87,  89,  89,  90,  90,  88,  88,  91,  91,  91,  91,
		  91,  91,  91,  92,  92,  92,  92,  93,  93,  93,  94,  94,  94,  94,  94,  95,
		  95,  95,  96,  96,  97,  97,  71,  71,  78,  78,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escdollar",
		"escid",
		"escint",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lcase",
		"Lend",
		"Lelse",
		"Leval",
		"Lfalse",
		"Lfor",
		"Lforeach",
		"Lgrep",
		"Lif",
		"Lin",
		"Lmap",
		"Lnot",
		"Lnull",
		"Lswitch",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"Lassert",
		"'}'",
		"'-}'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'->'",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"':'",
		"'?'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"template_parametersopt",
		"template_parameters",
		"'[-]}'",
		"identifier_listopt",
		"identifier_list",
		"instruction",
		"control_instruction",
		"switch_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_id",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"else_node",
		"anyopt",
		"case_list",
		"one_case",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"complex_data",
		"map_entries",
		"unary_expression",
		"mult_expression",
		"additive_expression",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
		"conditional_or_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escdollar,
		escid,
		escint,
		N24LBRACE,
		N24DIV,
		identifier,
		icon,
		ccon,
		Lcall,
		Lcase,
		Lend,
		Lelse,
		Leval,
		Lfalse,
		Lfor,
		Lforeach,
		Lgrep,
		Lif,
		Lin,
		Lmap,
		Lnot,
		Lnull,
		Lswitch,
		Ltemplate,
		Ltrue,
		Lthis,
		Lassert,
		RBRACE,
		MINUSRBRACE,
		PLUS,
		MINUS,
		MULT,
		DIV,
		PERC,
		EXCL,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		MINUSGREATER,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		COLON,
		QUESTMARK,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		template_parametersopt,
		template_parameters,
		LBRACKETMINUSRBRACKETRBRACE,
		identifier_listopt,
		identifier_list,
		instruction,
		control_instruction,
		switch_instruction,
		simple_instruction,
		sentence,
		expression,
		template_id,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		else_node,
		anyopt,
		case_list,
		one_case,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		complex_data,
		map_entries,
		unary_expression,
		mult_expression,
		additive_expression,
		relational_expression,
		equality_expression,
		conditional_and_expression,
		conditional_or_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 ) {
				if( lapg_lalr[p] == symbol ) {
					break;
				}
			}
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state ) {
				return lapg_sym_to[e];
			} else if( i < state ) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) {
					token[lapg_size++] = (byte)chr;
				}
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) {
					lapg_current_offset++;
					if( chr == '\n' ) {
						lapg_current_line++;
					}
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 3:
					 lapg_n.sym = new String(token,1,lapg_size-1); break;
				case 4:
					 lapg_n.sym = Integer.parseInt(new String(token,1,lapg_size-1)); break;
				case 5:
					 group = 1; break;
				case 7:
					 lapg_n.sym = new String(token,0,lapg_size); break;
				case 8:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break;
				case 9:
					 lapg_n.sym = new String(token,1,lapg_size-2); break;
				case 29:
					 group = 0; break;
				case 30:
					 group = 0; break;
				case 54:
					 continue;
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX ) {
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					}
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym));
							break;
						case 7:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-2].sym), ((ArrayList)lapg_m[lapg_head-1].sym), templatePackage,lapg_m[lapg_head-4].pos.line);
							break;
						case 10:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 11:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym));
							break;
						case 12:
							 ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym));
							break;
						case 14:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 15:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 16:
							 skipSpaces(lapg_m[lapg_head-0].pos.offset+1);
							break;
						case 21:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-0].pos.line);
							break;
						case 22:
							 lapg_gg.sym = new IndexNode(null, new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-0].pos.line), lapg_m[lapg_head-0].pos.line);
							break;
						case 23:
							 lapg_gg.sym = new DollarNode(lapg_m[lapg_head-0].pos.line);
							break;
						case 24:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset),lapg_m[lapg_head-0].pos.line);
							break;
						case 25:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 31:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,lapg_m[lapg_head-3].pos.line);
							break;
						case 32:
							 lapg_gg.sym = new EvalNode(((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 33:
							 lapg_gg.sym = new AssertNode(((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 35:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym);
							break;
						case 36:
							 lapg_gg.sym = lapg_m[lapg_head-0].sym;
							break;
						case 39:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 40:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 41:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-3].sym)); applyElse(((CompoundNode)lapg_gg.sym),((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 45:
							 lapg_gg.sym = new SwitchNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-6].pos.line); checkIsSpace(lapg_m[lapg_head-2].pos.offset,lapg_m[lapg_head-2].endpos.offset);
							break;
						case 46:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym));
							break;
						case 47:
							 ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym));
							break;
						case 48:
							 CaseNode.add(((ArrayList)lapg_gg.sym), ((Node)lapg_m[lapg_head-0].sym));
							break;
						case 49:
							 lapg_gg.sym = new CaseNode(((ExpressionNode)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 50:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 51:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 52:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-5].pos.line);
							break;
						case 55:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 58:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-0].pos.line);
							break;
						case 59:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 60:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,lapg_m[lapg_head-0].pos.line);
							break;
						case 61:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,lapg_m[lapg_head-0].pos.line);
							break;
						case 62:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,lapg_m[lapg_head-0].pos.line);
							break;
						case 63:
							 lapg_gg.sym = new ThisNode(lapg_m[lapg_head-0].pos.line);
							break;
						case 64:
							 lapg_gg.sym = new LiteralNode(null, lapg_m[lapg_head-0].pos.line);
							break;
						case 65:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 66:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 67:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-5].pos.line);
							break;
						case 68:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 70:
							 lapg_gg.sym = new ListNode(((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 71:
							 lapg_gg.sym = new ConcreteMapNode(((HashMap<ExpressionNode,ExpressionNode>)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 72:
							 lapg_gg.sym = new HashMap(); ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 73:
							 ((HashMap<ExpressionNode,ExpressionNode>)lapg_gg.sym).put(((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 74:
							 lapg_gg.sym = Boolean.TRUE;
							break;
						case 75:
							 lapg_gg.sym = Boolean.FALSE;
							break;
						case 77:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.NOT, ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 78:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.MINUS, ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 79:
							 lapg_gg.sym = new MapNode(null,((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-4].pos.line);
							break;
						case 80:
							 lapg_gg.sym = new MapNode(((ExpressionNode)lapg_m[lapg_head-4].sym),((ExpressionNode)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-6].pos.line);
							break;
						case 81:
							 error("TODO");
							break;
						case 82:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-3].sym),((ArrayList)lapg_m[lapg_head-2].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,lapg_m[lapg_head-5].pos.line);
							break;
						case 84:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MULT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 85:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.DIV, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 86:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.REM, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 88:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.PLUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 89:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MINUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 91:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 92:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 93:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 94:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 96:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 97:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 99:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 101:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 103:
							 lapg_gg.sym = new TriplexNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym), lapg_m[lapg_head-4].pos.line);
							break;
						case 104:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 105:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) {
						lapg_m[lapg_head--] = null;
					}
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX ) {
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
					}
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 204-1 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}
