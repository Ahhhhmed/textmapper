// Parser.java

package net.sf.lapg.templates.ast;

import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.lapg.templates.api.ITemplate;

public class Parser {

	private ArrayList<ITemplate> templates;
	private String templatePackage;

	public Parser() {
	}

	private static final boolean DEBUG_SYNTAX = false;

	int killEnds = -1;
	byte[] buff;
	int l;

	private String rawText(int start, int end) {
		if( killEnds == start ) {
			while( start < end && (buff[start] == '\t' || buff[start] == ' ') ) {
				start++;
			}

			if( start < end && buff[start] == '\r' ) {
				start++;
			}

			if( start < end && buff[start] == '\n' ) {
				start++;
			}
		}
		try {
			return new String(buff, start, end-start, "utf-8");
		} catch(UnsupportedEncodingException ex) {
			return "";
		}
	}

	private void checkIsSpace(int start, int end) {
		String val = rawText(start,end).trim();
		if( val.length() > 0 ) {
			error("Unknown text ignored: `"+val+"`");
		}
	}

	private void applyElse(CompoundNode node, ArrayList<Node> instructions) {
		if( node instanceof IfNode ) {
			((IfNode)node).setElseInstructions(instructions);
		} else {
			error("Unknown else node, instructions skipped");
		}
	}

	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}

	void error( String s ) {
		System.err.println(s);
	}

	public boolean parse(String s, String templatePackage) {
		l = 0;
		this.templatePackage = templatePackage;
		templates = new ArrayList<ITemplate>();
		try {
			buff = s.getBytes("utf-8");
		} catch( UnsupportedEncodingException ex ) {
			return false;
		}
		return parse();
	}

	public ITemplate[] getResult() {
		return templates.toArray(new ITemplate[templates.size()]);
	}

	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   6,   7,   1,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
		  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,   1,  31,  32,  33,  34,
		   1,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
		  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,   1,  64,
		  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,
		  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private final short[][] lapg_lexem = new short[][] {
		{  -2,   2,   2,   2,   2,   2,   2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,   4,   4,   4,   4,   5,  -1,  -1,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  19,  20,  21,  -1,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  -1,  24,  22,  25,  26,  22,  27,  22,  28,  29,  22,  22,  30,  22,  22,  22,  22,  31,  22,  22,  22,  22,  32,  33,  22,  22,  22,  22,  22,  22,  -1,  34,  35, },
		{  -3,   2,   2,   2,   2,   2,   2,   2,  -3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  36,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  37,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  -1,  -1,  -1,  -1,  -1,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  -1,  -1,  -1,  39,  -1,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  40,  -1,  -1, },
		{ -53, -53,   4,   4,   4,   4, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, },
		{ -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36,  41, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, },
		{ -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  42,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  43,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{ -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, },
		{ -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, },
		{ -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, },
		{ -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, },
		{ -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, },
		{ -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32,  45, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32,  46, },
		{ -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, },
		{ -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, },
		{ -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, },
		{ -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50,  47, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  48,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{ -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51,  49, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, },
		{ -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, },
		{  -1,  50,  50,  -1,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  -1,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  51,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  52,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  53,  22,  54,  22,  22,  22,  22,  22,  22,  22,  55,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  56,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  57,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  58,  22,  22,  22,  22,  22,  22,  22,  59,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  60,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  61,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  62,  22,  22,  63,  22,  22,  22,  22,  22,  22,  22,  22,  22,  64,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  65,  -1, },
		{ -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  -5,  -5,  -5,  -5,  -5,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  -5,  -5,  -5,  39,  -5,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  -5,  -5,  -5, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7, },
		{ -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, },
		{ -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  66,  66,  66,  66,  66,  66,  66,  66,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,   8,   8,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,   8,  -1,   8,  -1,   8,  -1,  67,  -1,  -1,  -1,  -1,  -1, },
		{ -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, },
		{ -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, },
		{ -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, },
		{ -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, },
		{ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, },
		{  -1,  50,  50,  -1,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  68,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  69,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  70,  22,  22,  22,  22,  22,  22,  71,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  72,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  73,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  74,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  75,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  76,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -21, -21, -21, -21, -21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -21, -21, -21,  22, -21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -21, -21, -21, },
		{ -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -22, -22, -22, -22, -22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -22, -22, -22,  22, -22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -22, -22, -22, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  77,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  78,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  79,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  80,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  81,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  43,   8,   8,   8,   8,   8,   8,   8,   8,  82,  82,  82,  82,  82,  82,  82,  82,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  83,  83,  83,  83,  83,  83,  83,  83,  83,  83,  -1,  -1,  -1,  -1,  -1,  83,  83,  83,  83,  83,  83,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  83,  83,  83,  83,  83,  83,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  84,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  85,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  86,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  87,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -15, -15, -15, -15, -15,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -15, -15, -15,  22, -15,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -15, -15, -15, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  88,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  89,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -19, -19, -19, -19, -19,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -19, -19, -19,  22, -19,  22,  22,  22,  22,  90,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -19, -19, -19, },
		{ -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -23, -23, -23, -23, -23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -23, -23, -23,  22, -23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -23, -23, -23, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  91,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  92,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  93,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  94,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  43,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  43,   8,   8,   8,   8,   8,   8,   8,   8,  83,  83,  83,  83,  83,  83,  83,  83,  83,  83,   8,   8,   8,   8,   8,  83,  83,  83,  83,  83,  83,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  44,   8,   8,   8,  83,  83,  83,  83,  83,  83,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  95,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -13, -13, -13, -13, -13,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -13, -13, -13,  22, -13,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -13, -13, -13, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -14, -14, -14, -14, -14,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -14, -14, -14,  22, -14,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -14, -14, -14, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -16, -16, -16, -16, -16,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -16, -16, -16,  22, -16,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -16, -16, -16, },
		{ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -17, -17, -17, -17, -17,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -17, -17, -17,  22, -17,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -17, -17, -17, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  96,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  97,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  98,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  99,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -27, -27, -27, -27, -27,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -27, -27, -27,  22, -27,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -27, -27, -27, },
		{ -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -26, -26, -26, -26, -26,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -26, -26, -26,  22, -26,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -26, -26, -26, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, 100,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -18, -18, -18, -18, -18,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -18, -18, -18,  22, -18,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -18, -18, -18, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22, 101,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22, 102,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9, 103,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -28, -28, -28, -28, -28,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -28, -28, -28,  22, -28,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -28, -28, -28, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22, 104,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -24, -24, -24, -24, -24,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -24, -24, -24,  22, -24,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -24, -24, -24, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, 105,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -20, -20, -20, -20, -20,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -20, -20, -20,  22, -20,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -20, -20, -20, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  -9,  -9,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9,  22,  -9,  22,  22,  22,  22, 106,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -9,  -9,  -9, },
		{ -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -25, -25, -25, -25, -25,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -25, -25, -25,  22, -25,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -25, -25, -25, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,   4,  -1,  -3,   2,  -1,  -1,   1,  24,  23,  21,  22,  -1,  -1,  15,  18,
		  19,  20,  -1, -11, -19,  61,  63,  59,  -1,  -1,  76,  -1,  -1, -65,  -1,  75,
		  64,  -1,  -1,  -1, -91,  -1,  -1,-117,  -1,-125,  62,  80,-169,-207,-239,-267,
		-287,  -1,   3,  14,  -1,-303,  -1,   5,-309,  34,-335,-347,  -1,  -1,  53,  -1,
		  -1,-355,  79,  78,-363,-405,  -1,-415,  -1,  -1,  17,  16,  25,  -1,  50,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		  57,  40,  -1,  11,  -1,-423,   7,  -1,-429,  -1,-455,  27,  -1,  -1,-463,-471,
		  -1,  70,  -1,  71,  -1,  60,-477,  -1,-493,  67,  -1,  81,  82,  83,-539,-577,
		-615,-647,-679,-711,-743,-771,-799,  13,  -1,  -1,  -1,  10,  -1,  65,  -1,  35,
		  -1,  31,  29,  -1,-819,  43,  -1,-827,-835,  -1,  69,-845,  72,  56,  42,  -1,
		  41,  12,  39,-871,  -1,  -1,  -1,  46,  -1,  -1,-879,  -1,  -1,  48,  45,  47,
		-887,  68,  -1,  49,  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   1,  -1,   5,  -1,   0,   0,  -1,  -2,  37,  -1,  27,   6,  28,   6,  -1,  -2,
		  37,  -1,  27,  58,  28,  58,  29,  58,  30,  58,  31,  58,  32,  58,  33,  58,
		  35,  58,  36,  58,  38,  58,  39,  58,  40,  58,  41,  58,  42,  58,  43,  58,
		  44,  58,  45,  58,  46,  58,  47,  58,  48,  58,  49,  58,  -1,  -2,  21,  -1,
		   7,  54,   8,  54,   9,  54,  10,  54,  16,  54,  24,  54,  25,  54,  30,  54,
		  34,  54,  35,  54,  37,  54,  -1,  -2,   7,  -1,   8,  -1,   9,  -1,  10,  -1,
		  16,  -1,  24,  -1,  25,  -1,  30,  -1,  34,  -1,  35,  -1,  37,  -1,  36,  38,
		  -1,  -2,  42,  -1,  27,  26,  28,  26,  -1,  -2,  35,  -1,  39,  -1,  45,  -1,
		  27,  77,  28,  77,  29,  77,  30,  77,  31,  77,  32,  77,  33,  77,  36,  77,
		  38,  77,  40,  77,  41,  77,  42,  77,  43,  77,  44,  77,  46,  77,  47,  77,
		  48,  77,  49,  77,  -1,  -2,  31,  -1,  32,  -1,  33,  -1,  27,  84,  28,  84,
		  29,  84,  30,  84,  36,  84,  38,  84,  40,  84,  41,  84,  42,  84,  43,  84,
		  44,  84,  46,  84,  47,  84,  48,  84,  49,  84,  -1,  -2,  29,  -1,  30,  -1,
		  27,  87,  28,  87,  36,  87,  38,  87,  40,  87,  41,  87,  42,  87,  43,  87,
		  44,  87,  46,  87,  47,  87,  48,  87,  49,  87,  -1,  -2,  46,  -1,  47,  -1,
		  48,  -1,  49,  -1,  27,  92,  28,  92,  36,  92,  38,  92,  40,  92,  41,  92,
		  42,  92,  43,  92,  44,  92,  -1,  -2,  43,  -1,  44,  -1,  27,  95,  28,  95,
		  36,  95,  38,  95,  40,  95,  41,  95,  42,  95,  -1,  -2,  41,  -1,  27,  97,
		  28,  97,  36,  97,  38,  97,  40,  97,  42,  97,  -1,  -2,   7,  -1,  38,   9,
		  -1,  -2,   7,  -1,   8,  -1,   9,  -1,  10,  -1,  16,  -1,  24,  -1,  25,  -1,
		  30,  -1,  34,  -1,  35,  -1,  37,  -1,  38,  38,  -1,  -2,  37,  -1,  39,  -1,
		  17,  28,  27,  28,  28,  28,  -1,  -2,  42,  -1,  27,  32,  28,  32,  -1,  -2,
		  42,  -1,  27,  33,  28,  33,  -1,  -2,  37,  -1,  50,  -1,  29,  58,  30,  58,
		  31,  58,  32,  58,  33,  58,  35,  58,  36,  58,  39,  58,  40,  58,  41,  58,
		  42,  58,  43,  58,  44,  58,  45,  58,  46,  58,  47,  58,  48,  58,  49,  58,
		  -1,  -2,  42,  -1,  36,  99,  38,  99,  40,  99,  -1,  -2,  40,  -1,  36,  37,
		  38,  37,  -1,  -2,  40,  -1,  38,   8,  -1,  -2,   7,  -1,   8,  -1,   9,  -1,
		  10,  -1,  16,  -1,  24,  -1,  25,  -1,  30,  -1,  34,  -1,  35,  -1,  37,  -1,
		  38,  38,  -1,  -2,  17,  -1,  27,  30,  28,  30,  -1,  -2,  42,  -1,  27,  55,
		  28,  55,  -1,  -2,   1,  -1,   5,  44,  -1,  -2,  41,  -1,  27,  98,  28,  98,
		  36,  98,  38,  98,  40,  98,  42,  98,  -1,  -2,  37,  -1,  27,  66,  28,  66,
		  29,  66,  30,  66,  31,  66,  32,  66,  33,  66,  35,  66,  36,  66,  38,  66,
		  39,  66,  40,  66,  41,  66,  42,  66,  43,  66,  44,  66,  45,  66,  46,  66,
		  47,  66,  48,  66,  49,  66,  -1,  -2,  31,  -1,  32,  -1,  33,  -1,  27,  85,
		  28,  85,  29,  85,  30,  85,  36,  85,  38,  85,  40,  85,  41,  85,  42,  85,
		  43,  85,  44,  85,  46,  85,  47,  85,  48,  85,  49,  85,  -1,  -2,  31,  -1,
		  32,  -1,  33,  -1,  27,  86,  28,  86,  29,  86,  30,  86,  36,  86,  38,  86,
		  40,  86,  41,  86,  42,  86,  43,  86,  44,  86,  46,  86,  47,  86,  48,  86,
		  49,  86,  -1,  -2,  29,  -1,  30,  -1,  27,  90,  28,  90,  36,  90,  38,  90,
		  40,  90,  41,  90,  42,  90,  43,  90,  44,  90,  46,  90,  47,  90,  48,  90,
		  49,  90,  -1,  -2,  29,  -1,  30,  -1,  27,  91,  28,  91,  36,  91,  38,  91,
		  40,  91,  41,  91,  42,  91,  43,  91,  44,  91,  46,  91,  47,  91,  48,  91,
		  49,  91,  -1,  -2,  29,  -1,  30,  -1,  27,  88,  28,  88,  36,  88,  38,  88,
		  40,  88,  41,  88,  42,  88,  43,  88,  44,  88,  46,  88,  47,  88,  48,  88,
		  49,  88,  -1,  -2,  29,  -1,  30,  -1,  27,  89,  28,  89,  36,  89,  38,  89,
		  40,  89,  41,  89,  42,  89,  43,  89,  44,  89,  46,  89,  47,  89,  48,  89,
		  49,  89,  -1,  -2,  46,  -1,  47,  -1,  48,  -1,  49,  -1,  27,  93,  28,  93,
		  36,  93,  38,  93,  40,  93,  41,  93,  42,  93,  43,  93,  44,  93,  -1,  -2,
		  46,  -1,  47,  -1,  48,  -1,  49,  -1,  27,  94,  28,  94,  36,  94,  38,  94,
		  40,  94,  41,  94,  42,  94,  43,  94,  44,  94,  -1,  -2,  43,  -1,  44,  -1,
		  27,  96,  28,  96,  36,  96,  38,  96,  40,  96,  41,  96,  42,  96,  -1,  -2,
		  42,  -1,  27,  51,  28,  51,  -1,  -2,  42,  -1,  36,  73,  40,  73,  -1,  -2,
		  42,  -1,  36, 100,  38, 100,  40, 100,  -1,  -2,   7,  -1,   8,  -1,   9,  -1,
		  10,  -1,  16,  -1,  24,  -1,  25,  -1,  30,  -1,  34,  -1,  35,  -1,  37,  -1,
		  38,  38,  -1,  -2,  42,  -1,  27,  36,  28,  36,  -1,  -2,  42,  -1,  27,  52,
		  28,  52,  -1,  -2,  42,  -1,  36,  74,  40,  74,  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,  11,  18,  25,  32,  42,  45,  93, 131, 169, 208, 213, 215, 219, 220,
		 225, 263, 269, 274, 279, 280, 281, 286, 287, 325, 363, 368, 376, 383, 388, 431,
		 434, 437, 440, 478, 517, 520, 564, 569, 572, 576, 578, 594, 596, 598, 599, 602,
		 605, 608, 611, 614, 614, 615, 616, 618, 620, 623, 624, 625, 626, 633, 634, 635,
		 642, 649, 656, 663, 668, 691, 693, 694, 696, 697, 698, 702, 706, 713, 716, 717,
		 718, 719, 721, 726, 727, 765, 803, 804, 842, 875, 906, 933, 958, 982,
	};

	private static final short[] lapg_sym_from = new short[] {
		 180,   0,   3,   5,  13,  18,  52,  98, 111, 138, 166,   5,  13,  18,  52,  98,
		 138, 166,   5,  13,  18,  52,  98, 138, 166,   5,  13,  18,  52,  98, 138, 166,
		   0,   3,   5,  13,  18,  52,  98, 138, 150, 166,  52, 138, 166,   6,  12,  24,
		  25,  27,  28,  30,  33,  34,  35,  36,  37,  49,  53,  56,  63,  77,  79,  80,
		  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  95, 104, 105,
		 108, 109, 112, 114, 116, 140, 144, 155, 159, 164, 168, 171, 172,  12,  25,  30,
		  33,  34,  35,  36,  37,  49,  56,  63,  77,  79,  82,  83,  84,  85,  86,  87,
		  88,  89,  90,  91,  92,  93,  95, 104, 108, 109, 112, 114, 144, 155, 159, 164,
		 168, 171, 172,  12,  25,  30,  33,  34,  35,  36,  37,  49,  56,  63,  77,  79,
		  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  95, 104, 108, 109,
		 112, 114, 144, 155, 159, 164, 168, 171, 172,  12,  25,  30,  33,  34,  35,  36,
		  37,  49,  56,  63,  77,  79,  80,  82,  83,  84,  85,  86,  87,  88,  89,  90,
		  91,  92,  93,  95, 104, 108, 109, 112, 114, 144, 155, 159, 164, 168, 171, 172,
		  12,  49,  95, 159, 172, 165, 172,  49,  95, 159, 172,  95,  12,  49,  95, 159,
		 172,  12,  25,  30,  33,  34,  35,  36,  37,  49,  56,  63,  77,  79,  82,  83,
		  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  95, 104, 108, 109, 112, 114,
		 144, 155, 159, 164, 168, 171, 172,  12,  49,  95, 106, 159, 172,  12,  49,  95,
		 159, 172,  12,  49,  95, 159, 172,  61,  29,  12,  49,  95, 159, 172,   2,  12,
		  25,  30,  33,  34,  35,  36,  37,  49,  56,  63,  77,  79,  82,  83,  84,  85,
		  86,  87,  88,  89,  90,  91,  92,  93,  95, 104, 108, 109, 112, 114, 144, 155,
		 159, 164, 168, 171, 172,  12,  25,  30,  33,  34,  35,  36,  37,  49,  56,  63,
		  77,  79,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  95, 104,
		 108, 109, 112, 114, 144, 155, 159, 164, 168, 171, 172,  12,  49,  95, 159, 172,
		  38,  40,  54,  64,  94, 136, 137, 178,  38,  40,  54,  64, 136, 137, 178,  45,
		 128, 129, 130, 131,  12,  25,  30,  33,  34,  35,  36,  37,  45,  49,  56,  63,
		  77,  79,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  95, 104,
		 108, 109, 112, 114, 128, 129, 130, 131, 144, 155, 159, 164, 168, 171, 172,  44,
		 126, 127,  44, 126, 127,  44, 126, 127,  12,  25,  30,  33,  34,  35,  36,  37,
		  49,  56,  63,  77,  79,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,
		  93,  95, 104, 108, 109, 112, 114, 144, 155, 159, 164, 168, 171, 172,  12,  25,
		  30,  33,  34,  35,  36,  37,  41,  49,  56,  63,  77,  79,  82,  83,  84,  85,
		  86,  87,  88,  89,  90,  91,  92,  93,  95, 104, 108, 109, 112, 114, 144, 155,
		 159, 164, 168, 171, 172,  70,  72, 119,  12,  19,  20,  25,  30,  33,  34,  35,
		  36,  37,  49,  56,  58,  63,  68,  77,  79,  82,  83,  84,  85,  86,  87,  88,
		  89,  90,  91,  92,  93,  95, 104, 108, 109, 112, 114, 120, 122, 144, 155, 159,
		 164, 168, 171, 172,  73, 100, 103, 142, 169,  41,  58, 122,  71,  72, 101, 147,
		  48, 118,  39,  59,  64,  65,  69,  73, 110, 119, 147, 148, 151, 152, 163, 170,
		 176, 178,  47, 134,  47, 134,  41,  46, 132, 133,  46, 132, 133,  46, 132, 133,
		  46, 132, 133,  60,  68, 153,   0,   0,   0,   3,   0,   3,   5,  18,  98,  13,
		  19,  19,  38,  40,  54,  64, 136, 137, 178,  53,  53,   5,  13,  18,  52,  98,
		 138, 166,   5,  13,  18,  52,  98, 138, 166,   5,  13,  18,  52,  98, 138, 166,
		   5,  13,  18,  52,  98, 138, 166,  12,  49,  95, 159, 172,  12,  25,  30,  33,
		  36,  37,  49,  56,  63,  79,  95, 104, 108, 109, 112, 114, 144, 155, 159, 164,
		 168, 171, 172,  24,  81,  58,  58, 122, 106, 106,  36,  56, 104, 155,  36,  56,
		 104, 155,   5,  13,  18,  52,  98, 138, 166,  52, 138, 166,  52, 111, 150, 150,
		 166,  12,  49,  95, 159, 172,  29,  12,  25,  30,  33,  34,  35,  36,  37,  49,
		  56,  63,  77,  79,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,
		  95, 104, 108, 109, 112, 114, 144, 155, 159, 164, 168, 171, 172,  12,  25,  30,
		  33,  34,  35,  36,  37,  49,  56,  63,  77,  79,  82,  83,  84,  85,  86,  87,
		  88,  89,  90,  91,  92,  93,  95, 104, 108, 109, 112, 114, 144, 155, 159, 164,
		 168, 171, 172,  36,  12,  25,  30,  33,  34,  35,  36,  37,  49,  56,  63,  77,
		  79,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  95, 104, 108,
		 109, 112, 114, 144, 155, 159, 164, 168, 171, 172,  12,  25,  30,  33,  36,  37,
		  49,  56,  63,  77,  79,  85,  86,  87,  88,  89,  90,  91,  92,  93,  95, 104,
		 108, 109, 112, 114, 144, 155, 159, 164, 168, 171, 172,  12,  25,  30,  33,  36,
		  37,  49,  56,  63,  77,  79,  87,  88,  89,  90,  91,  92,  93,  95, 104, 108,
		 109, 112, 114, 144, 155, 159, 164, 168, 171, 172,  12,  25,  30,  33,  36,  37,
		  49,  56,  63,  77,  79,  91,  92,  93,  95, 104, 108, 109, 112, 114, 144, 155,
		 159, 164, 168, 171, 172,  12,  25,  30,  33,  36,  37,  49,  56,  63,  77,  79,
		  93,  95, 104, 108, 109, 112, 114, 144, 155, 159, 164, 168, 171, 172,  12,  25,
		  30,  33,  36,  37,  49,  56,  63,  77,  79,  95, 104, 108, 109, 112, 114, 144,
		 155, 159, 164, 168, 171, 172,
	};

	private static final short[] lapg_sym_to = new short[] {
		 181,   1,   1,   8,   8,   8,   8,   8, 149,   8,   8,   9,   9,   9,   9,   9,
		   9,   9,  10,  10,  10,  10,  10,  10,  10,  11,  11,  11,  11,  11,  11,  11,
		   2,   2,  12,  49,  12,  95,  12, 159, 165, 172,  96,  96,  96,  19,  20,  57,
		  20,  60,  61,  20,  20,  20,  20,  68,  20,  20,  99,  20,  20,  20,  20, 120,
		  57,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20, 143,
		  20,  20,  20,  20, 153, 161,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
		  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,
		  23,  23,  23,  23,  23,  23, 121,  23,  23,  23,  23,  23,  23,  23,  23,  23,
		  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,
		  24,  24,  24,  24,  24, 171, 171,  94, 136, 136, 136, 137,  25,  25,  25,  25,
		  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,
		  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,
		  26,  26,  26,  26,  26,  26,  26,  27,  27,  27, 144,  27,  27,  28,  28,  28,
		  28,  28,  29,  29,  29,  29,  29, 109,  62,  30,  30,  30,  30,  30,   6,  31,
		  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,
		  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,
		  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,
		  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,
		  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,
		  74,  74,  74,  74, 135,  74,  74,  74,  75,  75,  75,  75,  75,  75,  75,  85,
		  85,  85,  85,  85,  34,  34,  34,  34,  34,  34,  34,  34,  86,  34,  34,  34,
		  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,
		  34,  34,  34,  34,  86,  86,  86,  86,  34,  34,  34,  34,  34,  34,  34,  82,
		  82,  82,  83,  83,  83,  84,  84,  84,  35,  35,  35,  35,  35,  35,  35,  35,
		  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,
		  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,
		  36,  36,  36,  36,  36,  36,  79,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36, 113, 115, 154,  37,  53,  56,  37,  37,  37,  37,  37,
		  37,  37,  37,  37, 104,  37,  56,  37,  37,  37,  37,  37,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37, 155, 104,  37,  37,  37,
		  37,  37,  37,  37, 117, 139, 141, 162, 177,  80, 105, 105, 114, 116, 140, 164,
		  93,  93,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,
		  77,  77,  91,  91,  92,  92,  81,  87,  87,  87,  88,  88,  88,  89,  89,  89,
		  90,  90,  90, 108, 112, 168, 180,   3,   4,   7,   5,   5,  13,  52, 138,  50,
		  54,  55,  76,  78, 102, 111, 157, 158, 179, 100, 101,  14,  51,  14,  51,  14,
		  51, 173,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,
		  17,  17,  17,  17,  17,  17,  17,  38,  38,  38,  38,  38,  39,  59,  64,  65,
		  69,  73,  39,  69, 110, 119,  39,  69, 147, 148, 151, 152, 163,  69,  39, 170,
		 176, 178,  39,  58, 122, 106, 107, 156, 145, 146,  70, 103, 142, 169,  71,  71,
		  71,  71,  18,  18,  18,  18,  18,  18,  18,  97, 160, 174,  98, 150, 166, 167,
		 175,  40,  40,  40,  40,  40,  63,  41,  41,  41,  41,  41,  41,  41,  41,  41,
		  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,
		  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,
		  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,
		  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,
		  42,  42,  42,  72,  43,  43,  43,  43,  66,  67,  43,  43,  43,  43,  43,  43,
		  43, 123, 124, 125,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,
		  44,  44,  44,  44,  44, 126, 127,  44,  44,  44,  44,  44,  44,  44,  44,  44,
		  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  45,  45,  45,  45,  45,
		  45,  45,  45,  45,  45,  45, 128, 129, 130, 131,  45,  45,  45,  45,  45,  45,
		  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,
		  46,  46,  46,  46,  46, 132, 133,  46,  46,  46,  46,  46,  46,  46,  46,  46,
		  46,  46,  46,  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,
		 134,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  48,  48,
		  48,  48,  48,  48,  48,  48,  48, 118,  48,  48,  48,  48,  48,  48,  48,  48,
		  48,  48,  48,  48,  48,  48,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   1,   3,   1,   1,   0,   5,   1,   0,   3,   1,   3,   3,   2,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   1,   1,   0,   1,   0,   4,
		   2,   2,   1,   3,   2,   1,   0,   3,   3,   5,   3,   1,   0,   7,   1,   2,
		   2,   4,   3,   4,   6,   1,   0,   3,   3,   1,   1,   1,   3,   1,   1,   1,
		   1,   4,   3,   3,   6,   4,   3,   3,   4,   3,   5,   1,   1,   1,   2,   2,
		   1,   3,   3,   3,   1,   3,   3,   1,   3,   3,   3,   3,   1,   3,   3,   1,
		   3,   1,   3,   1,   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  52,  53,  53,  54,  54,  58,  58,  55,  61,  61,  59,  62,  62,  57,  56,  56,
		  60,  60,  63,  63,  63,  63,  63,  63,  63,  66,  67,  70,  70,  72,  72,  67,
		  67,  67,  69,  69,  73,  74,  74,  71,  64,  64,  78,  79,  79,  65,  80,  80,
		  80,  81,  76,  82,  82,  83,  83,  82,  77,  77,  84,  84,  84,  84,  84,  84,
		  84,  84,  84,  84,  84,  84,  84,  84,  84,  86,  86,  85,  85,  87,  87,  87,
		  88,  88,  88,  88,  89,  89,  89,  90,  90,  90,  90,  90,  91,  91,  91,  92,
		  92,  68,  68,  75,  75,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escdollar",
		"escid",
		"escint",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"query",
		"Lcall",
		"Lcase",
		"Lend",
		"Lelse",
		"Leval",
		"Lfalse",
		"Lfor",
		"Lforeach",
		"Lif",
		"Lin",
		"Lnot",
		"Lswitch",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"Lassert",
		"'}'",
		"'-}'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'->'",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"':'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"template_parametersopt",
		"template_parameters",
		"'[-]}'",
		"identifier_listopt",
		"identifier_list",
		"instruction",
		"control_instruction",
		"switch_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_id",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"else_node",
		"anyopt",
		"case_list",
		"one_case",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"field_list",
		"unary_expression",
		"mult_expression",
		"additive_expression",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escdollar,
		escid,
		escint,
		N24LBRACE,
		N24DIV,
		identifier,
		icon,
		ccon,
		query,
		Lcall,
		Lcase,
		Lend,
		Lelse,
		Leval,
		Lfalse,
		Lfor,
		Lforeach,
		Lif,
		Lin,
		Lnot,
		Lswitch,
		Ltemplate,
		Ltrue,
		Lthis,
		Lassert,
		RBRACE,
		MINUSRBRACE,
		PLUS,
		MINUS,
		MULT,
		DIV,
		PERC,
		EXCL,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		MINUSGREATER,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		COLON,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		template_parametersopt,
		template_parameters,
		LBRACKETMINUSRBRACKETRBRACE,
		identifier_listopt,
		identifier_list,
		instruction,
		control_instruction,
		switch_instruction,
		simple_instruction,
		sentence,
		expression,
		template_id,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		else_node,
		anyopt,
		case_list,
		one_case,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		field_list,
		unary_expression,
		mult_expression,
		additive_expression,
		relational_expression,
		equality_expression,
		conditional_and_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 ) {
				if( lapg_lalr[p] == symbol ) {
					break;
				}
			}
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state ) {
				return lapg_sym_to[e];
			} else if( i < state ) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) {
					token[lapg_size++] = (byte)chr;
				}
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) {
					lapg_current_offset++;
					if( chr == '\n' ) {
						lapg_current_line++;
					}
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 3:
					 lapg_n.sym = new String(token,1,lapg_size-1); break;
				case 4:
					 lapg_n.sym = Integer.parseInt(new String(token,1,lapg_size-1)); break;
				case 5:
					 group = 1; break;
				case 7:
					 lapg_n.sym = new String(token,0,lapg_size); break;
				case 8:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break;
				case 9:
					 lapg_n.sym = new String(token,1,lapg_size-2); break;
				case 10:
					 lapg_n.sym = new String(token,1,lapg_size-2); break;
				case 27:
					 group = 0; break;
				case 28:
					 group = 0; break;
				case 51:
					 continue;
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX ) {
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					}
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym));
							break;
						case 7:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-2].sym), ((ArrayList)lapg_m[lapg_head-1].sym), templatePackage,lapg_m[lapg_head-4].pos.line);
							break;
						case 10:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 11:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym));
							break;
						case 12:
							 ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym));
							break;
						case 14:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 15:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 16:
							 skipSpaces(lapg_m[lapg_head-0].pos.offset+1);
							break;
						case 21:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-0].pos.line);
							break;
						case 22:
							 lapg_gg.sym = new IndexNode(null, new LiteralNode(((Integer)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-0].pos.line), lapg_m[lapg_head-0].pos.line);
							break;
						case 23:
							 lapg_gg.sym = new DollarNode(lapg_m[lapg_head-0].pos.line);
							break;
						case 24:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset),lapg_m[lapg_head-0].pos.line);
							break;
						case 25:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 31:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage,lapg_m[lapg_head-3].pos.line);
							break;
						case 32:
							 lapg_gg.sym = new EvalNode(((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 33:
							 lapg_gg.sym = new AssertNode(((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 35:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym);
							break;
						case 36:
							 lapg_gg.sym = lapg_m[lapg_head-0].sym;
							break;
						case 39:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 40:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 41:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-3].sym)); applyElse(((CompoundNode)lapg_gg.sym),((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 45:
							 lapg_gg.sym = new SwitchNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-6].pos.line); checkIsSpace(lapg_m[lapg_head-2].pos.offset,lapg_m[lapg_head-2].endpos.offset);
							break;
						case 46:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym));
							break;
						case 47:
							 ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym));
							break;
						case 48:
							 CaseNode.add(((ArrayList)lapg_gg.sym), ((Node)lapg_m[lapg_head-0].sym));
							break;
						case 49:
							 lapg_gg.sym = new CaseNode(((ExpressionNode)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 50:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 51:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 52:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-5].pos.line);
							break;
						case 55:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 58:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-0].pos.line);
							break;
						case 59:
							 lapg_gg.sym = new QueryNode(null, ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-0].pos.line);
							break;
						case 60:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 61:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,lapg_m[lapg_head-0].pos.line);
							break;
						case 62:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,lapg_m[lapg_head-0].pos.line);
							break;
						case 63:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym,lapg_m[lapg_head-0].pos.line);
							break;
						case 64:
							 lapg_gg.sym = new ThisNode(lapg_m[lapg_head-0].pos.line);
							break;
						case 65:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 66:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 67:
							 lapg_gg.sym = new QueryNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 68:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-5].pos.line);
							break;
						case 69:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-3].pos.line);
							break;
						case 70:
							 lapg_gg.sym = new ListNode(((ArrayList)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 71:
							 lapg_gg.sym = new ObjectNode(((HashMap)lapg_m[lapg_head-1].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 72:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-1].sym),((ArrayList)lapg_m[lapg_head-0].sym),((ExpressionNode)lapg_gg.sym),templatePackage,lapg_m[lapg_head-3].pos.line);
							break;
						case 73:
							 lapg_gg.sym = new HashMap(); ((HashMap)lapg_gg.sym).put(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 74:
							 ((HashMap)lapg_gg.sym).put(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 75:
							 lapg_gg.sym = Boolean.TRUE;
							break;
						case 76:
							 lapg_gg.sym = Boolean.FALSE;
							break;
						case 78:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.NOT, ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 79:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.MINUS, ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-1].pos.line);
							break;
						case 81:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MULT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 82:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.DIV, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 83:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.REM, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 85:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.PLUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 86:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MINUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 88:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 89:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 90:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 91:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 93:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 94:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 96:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 98:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym),lapg_m[lapg_head-2].pos.line);
							break;
						case 99:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 100:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) {
						lapg_m[lapg_head--] = null;
					}
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX ) {
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
					}
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 182-1 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}
