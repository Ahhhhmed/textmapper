// Parser.java

package net.sf.lapg.templates.parser;

import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.lapg.templates.api.ITemplate;
import net.sf.lapg.templates.ast.ArithmeticNode;
import net.sf.lapg.templates.ast.CallTemplateNode;
import net.sf.lapg.templates.ast.CaseNode;
import net.sf.lapg.templates.ast.CompoundNode;
import net.sf.lapg.templates.ast.ConditionalNode;
import net.sf.lapg.templates.ast.ExpressionNode;
import net.sf.lapg.templates.ast.ForeachNode;
import net.sf.lapg.templates.ast.IfNode;
import net.sf.lapg.templates.ast.IndexNode;
import net.sf.lapg.templates.ast.ListNode;
import net.sf.lapg.templates.ast.LiteralNode;
import net.sf.lapg.templates.ast.MethodCallNode;
import net.sf.lapg.templates.ast.Node;
import net.sf.lapg.templates.ast.ObjectNode;
import net.sf.lapg.templates.ast.SelectNode;
import net.sf.lapg.templates.ast.SwitchNode;
import net.sf.lapg.templates.ast.TemplateNode;
import net.sf.lapg.templates.ast.TextNode;
import net.sf.lapg.templates.ast.ThisNode;
import net.sf.lapg.templates.ast.UnaryExpression;

public class Parser {

	private ArrayList<ITemplate> templates;
	private String templatePackage;

	public Parser() {
	}

	private static final boolean DEBUG_SYNTAX = false;

	int killEnds = -1;
	byte[] buff;
	int l;

	private String rawText(int start, int end) {
		if( killEnds == start ) {
			while( start < end && (buff[start] == '\t' || buff[start] == ' ') ) {
				start++;
			}

			if( start < end && buff[start] == '\r' ) {
				start++;
			}

			if( start < end && buff[start] == '\n' ) {
				start++;
			}
		}
		try {
			return new String(buff, start, end-start, "utf-8");
		} catch(UnsupportedEncodingException ex) {
			return "";
		}
	}

	private void checkIsSpace(int start, int end) {
		String val = rawText(start,end).trim();
		if( val.length() > 0 ) {
			error("Unknown text ignored: `"+val+"`");
		}
	}

	private void applyElse(CompoundNode node, ArrayList<Node> instructions) {
		if( node instanceof IfNode ) {
			((IfNode)node).setElseInstructions(instructions);
		} else {
			error("Unknown else node, instructions skipped");
		}
	}

	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}

	void error( String s ) {
		System.err.println(s);
	}

	public boolean parse(String s, String templatePackage) {
		l = 0;
		this.templatePackage = templatePackage;
		templates = new ArrayList<ITemplate>();
		try {
			buff = s.getBytes("utf-8");
		} catch( UnsupportedEncodingException ex ) {
			return false;
		}
		return parse();
	}

	public ITemplate[] getResult() {
		return templates.toArray(new ITemplate[templates.size()]);
	}

	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   6,   7,   1,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
		  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,   1,  31,  32,  33,  34,
		   1,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
		  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,   1,  64,
		   1,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
		  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private final short[][] lapg_lexem = new short[][] {
		{  -2,   2,   2,   2,   2,   2,   2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,   4,   4,   4,   4,   5,  -1,  -1,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  19,  20,  21,  -1,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  -1,  24,  22,  22,  22,  25,  22,  26,  27,  22,  22,  28,  22,  22,  22,  22,  29,  22,  22,  22,  22,  30,  31,  22,  22,  22,  22,  22,  22,  -1,  32,  33, },
		{  -3,   2,   2,   2,   2,   2,   2,   2,  -3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  35,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  -1,  -1,  -1,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  -1,  -1, },
		{ -47, -47,   4,   4,   4,   4, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, },
		{ -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31,  38, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, },
		{ -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  39,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  40,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  41,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{ -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, },
		{ -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, },
		{ -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, },
		{ -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, },
		{ -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, },
		{ -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27,  42, },
		{ -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, },
		{ -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, },
		{ -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, },
		{ -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44,  43, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{ -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45,  45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{ -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, },
		{ -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  46,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  47,  22,  48,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  49,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  50,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  51,  22,  22,  22,  22,  22,  22,  22,  52,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  53,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  54,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  55,  22,  22,  56,  22,  22,  22,  22,  22,  22,  22,  22,  22,  57,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  58,  -1, },
		{ -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, },
		{  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  -4,  -4,  -4,  -4,  -4,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  -4,  -4,  -4,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  -4,  -4,  -4, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5, },
		{ -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, },
		{ -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  59,  59,  59,  59,  59,  59,  59,  59,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,   8,   8,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,   8,  -1,   8,  -1,   8,  -1,  60,  -1,  -1,  -1,  -1,  -1, },
		{ -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, },
		{ -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, },
		{ -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, },
		{ -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  61,  22,  22,  22,  22,  22,  22,  62,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  63,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  64,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  65,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  66,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -17, -17, -17, -17, -17,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -17, -17, -17,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -17, -17, -17, },
		{ -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -18, -18, -18, -18, -18,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -18, -18, -18,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -18, -18, -18, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  67,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  68,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  69,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  70,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  71,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{ -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  40,   8,   8,   8,   8,   8,   8,   8,   8,  72,  72,  72,  72,  72,  72,  72,  72,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  41,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  -1,  -1,  -1,  -1,  -1,  73,  73,  73,  73,  73,  73,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  73,  73,  73,  73,  73,  73,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  74,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  75,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  76,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -12, -12, -12, -12, -12,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -12, -12, -12,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -12, -12, -12, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  77,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -15, -15, -15, -15, -15,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -15, -15, -15,  22,  22,  22,  22,  22,  78,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -15, -15, -15, },
		{ -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -19, -19, -19, -19, -19,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -19, -19, -19,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -19, -19, -19, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  79,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  80,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  81,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  82,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  40,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  41,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{  -1,   8,   8,  -1,   8,   8,   8,   8,   8,   8,   8,  40,   8,   8,   8,   8,   8,   8,   8,   8,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,   8,   8,   8,   8,   8,  73,  73,  73,  73,  73,  73,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  41,   8,   8,  73,  73,  73,  73,  73,  73,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -10, -10, -10, -10, -10,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -10, -10, -10,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -10, -10, -10, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -11, -11, -11, -11, -11,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -11, -11, -11,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -11, -11, -11, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -13, -13, -13, -13, -13,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -13, -13, -13,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -13, -13, -13, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  83,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  84,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  85,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  86,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{ -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -23, -23, -23, -23, -23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -23, -23, -23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -23, -23, -23, },
		{ -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -22, -22, -22, -22, -22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -22, -22, -22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -22, -22, -22, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -14, -14, -14, -14, -14,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -14, -14, -14,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -14, -14, -14, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  87,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  88,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  89,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  90,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -20, -20, -20, -20, -20,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -20, -20, -20,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -20, -20, -20, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  91,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -16, -16, -16, -16, -16,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -16, -16, -16,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -16, -16, -16, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  -7,  -7,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7,  22,  22,  22,  22,  22,  92,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -7,  -7,  -7, },
		{ -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -21, -21, -21, -21, -21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -21, -21, -21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22, -21, -21, -21, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,   4,  -1,  -3,   2,  -1,  -1,   1,  22,  21,  -1,  -1,  15,  18,  19,  20,
		  -1, -11, -19,  56,  58,  -1,  69,  -1,  -1, -63,  -1,  68,  59,  -1,  -1, -87,
		  -1,  -1,-111,  -1,-119,  57,  73,-161,-199,-231,-259,-279,  -1,   3,  14,  -1,
		-295,  -1,   5,-301,  30,-325,  -1,  -1,  49,  -1,  -1,  72,  71,-337,-377,  -1,
		-387,  -1,  -1,  17,  16,  23,  -1,  46,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  53,  36,  -1,  11,  -1,-395,   7,  -1,
		-401,  -1,-425,  25,  -1,  -1,-433,-441,  -1,  64,  -1,  65,  -1,  55,-447,  -1,
		-463,  74,  75,  76,-507,-545,-583,-615,-647,-679,-711,-739,-767,  13,  -1,  -1,
		  -1,  10,  -1,  60,  -1,  31,  -1,  29,  27,  -1,-787,  39,  -1,-795,-803,  -1,
		  63,-813,  52,  38,  -1,  37,  12,  35,-837,  -1,  -1,  -1,  42,  -1,  -1,-845,
		  -1,  -1,  44,  41,  43,-853,  62,  -1,  45,  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   1,  -1,   3,  -1,   0,   0,  -1,  -2,  32,  -1,  22,   6,  23,   6,  -1,  -2,
		  32,  -1,  22,  54,  23,  54,  24,  54,  25,  54,  26,  54,  27,  54,  28,  54,
		  30,  54,  31,  54,  33,  54,  34,  54,  35,  54,  36,  54,  37,  54,  38,  54,
		  39,  54,  40,  54,  41,  54,  42,  54,  43,  54,  -1,  -2,  17,  -1,   5,  50,
		   6,  50,   7,  50,  12,  50,  20,  50,  21,  50,  25,  50,  29,  50,  30,  50,
		  32,  50,  -1,  -2,   5,  -1,   6,  -1,   7,  -1,  12,  -1,  20,  -1,  21,  -1,
		  25,  -1,  29,  -1,  30,  -1,  32,  -1,  31,  34,  -1,  -2,  37,  -1,  22,  24,
		  23,  24,  -1,  -2,  30,  -1,  34,  -1,  22,  70,  23,  70,  24,  70,  25,  70,
		  26,  70,  27,  70,  28,  70,  31,  70,  33,  70,  35,  70,  36,  70,  37,  70,
		  38,  70,  39,  70,  40,  70,  41,  70,  42,  70,  43,  70,  -1,  -2,  26,  -1,
		  27,  -1,  28,  -1,  22,  77,  23,  77,  24,  77,  25,  77,  31,  77,  33,  77,
		  35,  77,  36,  77,  37,  77,  38,  77,  39,  77,  40,  77,  41,  77,  42,  77,
		  43,  77,  -1,  -2,  24,  -1,  25,  -1,  22,  80,  23,  80,  31,  80,  33,  80,
		  35,  80,  36,  80,  37,  80,  38,  80,  39,  80,  40,  80,  41,  80,  42,  80,
		  43,  80,  -1,  -2,  40,  -1,  41,  -1,  42,  -1,  43,  -1,  22,  85,  23,  85,
		  31,  85,  33,  85,  35,  85,  36,  85,  37,  85,  38,  85,  39,  85,  -1,  -2,
		  38,  -1,  39,  -1,  22,  88,  23,  88,  31,  88,  33,  88,  35,  88,  36,  88,
		  37,  88,  -1,  -2,  36,  -1,  22,  90,  23,  90,  31,  90,  33,  90,  35,  90,
		  37,  90,  -1,  -2,   5,  -1,  33,   9,  -1,  -2,   5,  -1,   6,  -1,   7,  -1,
		  12,  -1,  20,  -1,  21,  -1,  25,  -1,  29,  -1,  30,  -1,  32,  -1,  33,  34,
		  -1,  -2,  32,  -1,  34,  -1,  13,  26,  22,  26,  23,  26,  -1,  -2,  32,  -1,
		  44,  -1,  24,  54,  25,  54,  26,  54,  27,  54,  28,  54,  30,  54,  31,  54,
		  34,  54,  35,  54,  36,  54,  37,  54,  38,  54,  39,  54,  40,  54,  41,  54,
		  42,  54,  43,  54,  -1,  -2,  37,  -1,  31,  92,  33,  92,  35,  92,  -1,  -2,
		  35,  -1,  31,  33,  33,  33,  -1,  -2,  35,  -1,  33,   8,  -1,  -2,   5,  -1,
		   6,  -1,   7,  -1,  12,  -1,  20,  -1,  21,  -1,  25,  -1,  29,  -1,  30,  -1,
		  32,  -1,  33,  34,  -1,  -2,  13,  -1,  22,  28,  23,  28,  -1,  -2,  37,  -1,
		  22,  51,  23,  51,  -1,  -2,   1,  -1,   3,  40,  -1,  -2,  36,  -1,  22,  91,
		  23,  91,  31,  91,  33,  91,  35,  91,  37,  91,  -1,  -2,  32,  -1,  22,  61,
		  23,  61,  24,  61,  25,  61,  26,  61,  27,  61,  28,  61,  30,  61,  31,  61,
		  33,  61,  34,  61,  35,  61,  36,  61,  37,  61,  38,  61,  39,  61,  40,  61,
		  41,  61,  42,  61,  43,  61,  -1,  -2,  26,  -1,  27,  -1,  28,  -1,  22,  78,
		  23,  78,  24,  78,  25,  78,  31,  78,  33,  78,  35,  78,  36,  78,  37,  78,
		  38,  78,  39,  78,  40,  78,  41,  78,  42,  78,  43,  78,  -1,  -2,  26,  -1,
		  27,  -1,  28,  -1,  22,  79,  23,  79,  24,  79,  25,  79,  31,  79,  33,  79,
		  35,  79,  36,  79,  37,  79,  38,  79,  39,  79,  40,  79,  41,  79,  42,  79,
		  43,  79,  -1,  -2,  24,  -1,  25,  -1,  22,  83,  23,  83,  31,  83,  33,  83,
		  35,  83,  36,  83,  37,  83,  38,  83,  39,  83,  40,  83,  41,  83,  42,  83,
		  43,  83,  -1,  -2,  24,  -1,  25,  -1,  22,  84,  23,  84,  31,  84,  33,  84,
		  35,  84,  36,  84,  37,  84,  38,  84,  39,  84,  40,  84,  41,  84,  42,  84,
		  43,  84,  -1,  -2,  24,  -1,  25,  -1,  22,  81,  23,  81,  31,  81,  33,  81,
		  35,  81,  36,  81,  37,  81,  38,  81,  39,  81,  40,  81,  41,  81,  42,  81,
		  43,  81,  -1,  -2,  24,  -1,  25,  -1,  22,  82,  23,  82,  31,  82,  33,  82,
		  35,  82,  36,  82,  37,  82,  38,  82,  39,  82,  40,  82,  41,  82,  42,  82,
		  43,  82,  -1,  -2,  40,  -1,  41,  -1,  42,  -1,  43,  -1,  22,  86,  23,  86,
		  31,  86,  33,  86,  35,  86,  36,  86,  37,  86,  38,  86,  39,  86,  -1,  -2,
		  40,  -1,  41,  -1,  42,  -1,  43,  -1,  22,  87,  23,  87,  31,  87,  33,  87,
		  35,  87,  36,  87,  37,  87,  38,  87,  39,  87,  -1,  -2,  38,  -1,  39,  -1,
		  22,  89,  23,  89,  31,  89,  33,  89,  35,  89,  36,  89,  37,  89,  -1,  -2,
		  37,  -1,  22,  47,  23,  47,  -1,  -2,  37,  -1,  31,  66,  35,  66,  -1,  -2,
		  37,  -1,  31,  93,  33,  93,  35,  93,  -1,  -2,   5,  -1,   6,  -1,   7,  -1,
		  12,  -1,  20,  -1,  21,  -1,  25,  -1,  29,  -1,  30,  -1,  32,  -1,  33,  34,
		  -1,  -2,  37,  -1,  22,  32,  23,  32,  -1,  -2,  37,  -1,  22,  48,  23,  48,
		  -1,  -2,  37,  -1,  31,  67,  35,  67,  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,  11,  18,  28,  31,  76, 112, 148, 153, 155, 159, 160, 196, 202, 207,
		 212, 213, 214, 219, 220, 256, 292, 300, 307, 312, 353, 356, 359, 362, 398, 435,
		 438, 479, 484, 486, 490, 492, 506, 508, 510, 513, 516, 519, 522, 525, 525, 526,
		 527, 529, 531, 534, 535, 536, 537, 544, 545, 546, 553, 560, 567, 574, 579, 600,
		 601, 602, 603, 604, 605, 609, 613, 620, 623, 624, 625, 626, 628, 633, 634, 670,
		 706, 707, 743, 774, 803, 828, 851, 873,
	};

	private static final short[] lapg_sym_from = new short[] {
		 169,   0,   3,   5,  11,  16,  47,  90, 103, 128, 155,   5,  11,  16,  47,  90,
		 128, 155,   0,   3,   5,  11,  16,  47,  90, 128, 140, 155,  47, 128, 155,   6,
		  10,  21,  23,  24,  26,  29,  30,  31,  32,  44,  48,  51,  57,  70,  72,  73,
		  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  87,  96,  97, 100,
		 101, 104, 106, 108, 130, 134, 145, 148, 153, 157, 160, 161,  10,  26,  29,  30,
		  31,  32,  44,  51,  57,  70,  72,  74,  75,  76,  77,  78,  79,  80,  81,  82,
		  83,  84,  85,  87,  96, 100, 101, 104, 106, 134, 145, 148, 153, 157, 160, 161,
		  10,  26,  29,  30,  31,  32,  44,  51,  57,  70,  72,  74,  75,  76,  77,  78,
		  79,  80,  81,  82,  83,  84,  85,  87,  96, 100, 101, 104, 106, 134, 145, 148,
		 153, 157, 160, 161,  10,  44,  87, 148, 161, 154, 161,  44,  87, 148, 161,  87,
		  10,  26,  29,  30,  31,  32,  44,  51,  57,  70,  72,  74,  75,  76,  77,  78,
		  79,  80,  81,  82,  83,  84,  85,  87,  96, 100, 101, 104, 106, 134, 145, 148,
		 153, 157, 160, 161,  10,  44,  87,  98, 148, 161,  10,  44,  87, 148, 161,  10,
		  44,  87, 148, 161,  55,  25,  10,  44,  87, 148, 161,   2,  10,  26,  29,  30,
		  31,  32,  44,  51,  57,  70,  72,  74,  75,  76,  77,  78,  79,  80,  81,  82,
		  83,  84,  85,  87,  96, 100, 101, 104, 106, 134, 145, 148, 153, 157, 160, 161,
		  10,  26,  29,  30,  31,  32,  44,  51,  57,  70,  72,  74,  75,  76,  77,  78,
		  79,  80,  81,  82,  83,  84,  85,  87,  96, 100, 101, 104, 106, 134, 145, 148,
		 153, 157, 160, 161,  33,  35,  49,  58,  86, 126, 127, 167,  33,  35,  49,  58,
		 126, 127, 167,  40, 118, 119, 120, 121,  10,  26,  29,  30,  31,  32,  40,  44,
		  51,  57,  70,  72,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,
		  87,  96, 100, 101, 104, 106, 118, 119, 120, 121, 134, 145, 148, 153, 157, 160,
		 161,  39, 116, 117,  39, 116, 117,  39, 116, 117,  10,  26,  29,  30,  31,  32,
		  44,  51,  57,  70,  72,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
		  85,  87,  96, 100, 101, 104, 106, 134, 145, 148, 153, 157, 160, 161,  10,  26,
		  29,  30,  31,  32,  36,  44,  51,  57,  70,  72,  74,  75,  76,  77,  78,  79,
		  80,  81,  82,  83,  84,  85,  87,  96, 100, 101, 104, 106, 134, 145, 148, 153,
		 157, 160, 161,  63,  65, 111,  10,  17,  18,  26,  29,  30,  31,  32,  44,  51,
		  53,  57,  61,  70,  72,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
		  85,  87,  96, 100, 101, 104, 106, 112, 134, 145, 148, 153, 157, 160, 161,  66,
		  92,  95, 132, 158,  36,  53,  64,  65,  93, 137,  43, 110,  34,  58,  62,  66,
		 102, 111, 137, 138, 141, 142, 152, 159, 165, 167,  42, 124,  42, 124,  41, 122,
		 123,  41, 122, 123,  41, 122, 123,  41, 122, 123,  54,  61, 143,   0,   0,   0,
		   3,   0,   3,   5,  16,  90,  11,  17,  17,  33,  35,  49,  58, 126, 127, 167,
		  48,  48,   5,  11,  16,  47,  90, 128, 155,   5,  11,  16,  47,  90, 128, 155,
		   5,  11,  16,  47,  90, 128, 155,   5,  11,  16,  47,  90, 128, 155,  10,  44,
		  87, 148, 161,  10,  26,  31,  32,  44,  51,  57,  72,  87,  96, 100, 101, 104,
		 106, 134, 145, 148, 153, 157, 160, 161,  21,  53,  53,  98,  98,  31,  51,  96,
		 145,  31,  51,  96, 145,   5,  11,  16,  47,  90, 128, 155,  47, 128, 155,  47,
		 103, 140, 140, 155,  10,  44,  87, 148, 161,  25,  10,  26,  29,  30,  31,  32,
		  44,  51,  57,  70,  72,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
		  85,  87,  96, 100, 101, 104, 106, 134, 145, 148, 153, 157, 160, 161,  10,  26,
		  29,  30,  31,  32,  44,  51,  57,  70,  72,  74,  75,  76,  77,  78,  79,  80,
		  81,  82,  83,  84,  85,  87,  96, 100, 101, 104, 106, 134, 145, 148, 153, 157,
		 160, 161,  31,  10,  26,  29,  30,  31,  32,  44,  51,  57,  70,  72,  74,  75,
		  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  87,  96, 100, 101, 104, 106,
		 134, 145, 148, 153, 157, 160, 161,  10,  26,  31,  32,  44,  51,  57,  70,  72,
		  77,  78,  79,  80,  81,  82,  83,  84,  85,  87,  96, 100, 101, 104, 106, 134,
		 145, 148, 153, 157, 160, 161,  10,  26,  31,  32,  44,  51,  57,  70,  72,  79,
		  80,  81,  82,  83,  84,  85,  87,  96, 100, 101, 104, 106, 134, 145, 148, 153,
		 157, 160, 161,  10,  26,  31,  32,  44,  51,  57,  70,  72,  83,  84,  85,  87,
		  96, 100, 101, 104, 106, 134, 145, 148, 153, 157, 160, 161,  10,  26,  31,  32,
		  44,  51,  57,  70,  72,  85,  87,  96, 100, 101, 104, 106, 134, 145, 148, 153,
		 157, 160, 161,  10,  26,  31,  32,  44,  51,  57,  70,  72,  87,  96, 100, 101,
		 104, 106, 134, 145, 148, 153, 157, 160, 161,
	};

	private static final short[] lapg_sym_to = new short[] {
		 170,   1,   1,   8,   8,   8,   8,   8, 139,   8,   8,   9,   9,   9,   9,   9,
		   9,   9,   2,   2,  10,  44,  10,  87,  10, 148, 154, 161,  88,  88,  88,  17,
		  18,  52,  54,  55,  18,  18,  18,  61,  18,  18,  91,  18,  18,  18,  18, 112,
		  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18, 133,  18,
		  18,  18,  18, 143, 150,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,
		  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
		  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
		  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,
		  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,
		  20,  20,  20,  20,  21,  21,  21,  21,  21, 160, 160,  86, 126, 126, 126, 127,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  23,  23,  23, 134,  23,  23,  24,  24,  24,  24,  24,  25,
		  25,  25,  25,  25, 101,  56,  26,  26,  26,  26,  26,   6,  27,  27,  27,  27,
		  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,
		  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,
		  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,
		  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,
		  28,  28,  28,  28,  67,  67,  67,  67, 125,  67,  67,  67,  68,  68,  68,  68,
		  68,  68,  68,  77,  77,  77,  77,  77,  29,  29,  29,  29,  29,  29,  78,  29,
		  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,
		  29,  29,  29,  29,  29,  29,  78,  78,  78,  78,  29,  29,  29,  29,  29,  29,
		  29,  74,  74,  74,  75,  75,  75,  76,  76,  76,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,
		  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,
		  31,  31,  31,  31,  72,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,
		  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,
		  31,  31,  31, 105, 107, 144,  32,  48,  51,  32,  32,  32,  32,  32,  32,  32,
		  96,  32,  51,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,
		  32,  32,  32,  32,  32,  32,  32, 145,  32,  32,  32,  32,  32,  32,  32, 109,
		 129, 131, 151, 166,  73,  97, 106, 108, 130, 153,  85,  85,  70,  70,  70,  70,
		  70,  70,  70,  70,  70,  70,  70,  70,  70,  70,  83,  83,  84,  84,  79,  79,
		  79,  80,  80,  80,  81,  81,  81,  82,  82,  82, 100, 104, 157, 169,   3,   4,
		   7,   5,   5,  11,  47, 128,  45,  49,  50,  69,  71,  94, 103, 146, 147, 168,
		  92,  93,  12,  46,  12,  46,  12,  46, 162,  13,  13,  13,  13,  13,  13,  13,
		  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  33,  33,
		  33,  33,  33,  34,  58,  62,  66,  34,  62, 102, 111,  34,  62, 137, 138, 141,
		 142, 152,  62,  34, 159, 165, 167,  34,  53,  98,  99, 135, 136,  63,  95, 132,
		 158,  64,  64,  64,  64,  16,  16,  16,  16,  16,  16,  16,  89, 149, 163,  90,
		 140, 155, 156, 164,  35,  35,  35,  35,  35,  57,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,
		  37,  37,  65,  38,  38,  59,  60,  38,  38,  38,  38,  38,  38,  38, 113, 114,
		 115,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,
		  38,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,
		 116, 117,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,
		  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40, 118,
		 119, 120, 121,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,
		  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  41,  41, 122, 123,  41,  41,
		  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,
		  42,  42,  42,  42,  42, 124,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,
		  42,  42,  42,  43,  43,  43,  43,  43,  43,  43, 110,  43,  43,  43,  43,  43,
		  43,  43,  43,  43,  43,  43,  43,  43,  43,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   1,   3,   1,   1,   0,   5,   1,   0,   3,   1,   3,   3,   2,   1,
		   1,   1,   1,   1,   1,   1,   1,   3,   1,   1,   0,   1,   0,   4,   1,   3,
		   2,   1,   0,   3,   3,   5,   3,   1,   0,   7,   1,   2,   2,   4,   3,   4,
		   6,   1,   0,   3,   3,   1,   1,   3,   1,   1,   1,   1,   4,   3,   6,   4,
		   3,   3,   3,   5,   1,   1,   1,   2,   2,   1,   3,   3,   3,   1,   3,   3,
		   1,   3,   3,   3,   3,   1,   3,   3,   1,   3,   1,   3,   1,   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  46,  47,  47,  48,  48,  52,  52,  49,  55,  55,  53,  56,  56,  51,  50,  50,
		  54,  54,  57,  57,  57,  57,  57,  60,  61,  64,  64,  66,  66,  61,  63,  63,
		  67,  68,  68,  65,  58,  58,  72,  73,  73,  59,  74,  74,  74,  75,  70,  76,
		  76,  77,  77,  76,  71,  71,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,
		  78,  78,  80,  80,  79,  79,  81,  81,  81,  82,  82,  82,  82,  83,  83,  83,
		  84,  84,  84,  84,  84,  85,  85,  85,  86,  86,  62,  62,  69,  69,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escid",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lcase",
		"Lend",
		"Lelse",
		"Lfalse",
		"Lfor",
		"Lforeach",
		"Lif",
		"Lin",
		"Lnot",
		"Lswitch",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"'}'",
		"'-}'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"':'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"template_parametersopt",
		"template_parameters",
		"'[-]}'",
		"identifier_listopt",
		"identifier_list",
		"instruction",
		"control_instruction",
		"switch_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_id",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"else_node",
		"anyopt",
		"case_list",
		"one_case",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"field_list",
		"unary_expression",
		"mult_expression",
		"additive_expression",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escid,
		N24LBRACE,
		N24DIV,
		identifier,
		icon,
		ccon,
		Lcall,
		Lcase,
		Lend,
		Lelse,
		Lfalse,
		Lfor,
		Lforeach,
		Lif,
		Lin,
		Lnot,
		Lswitch,
		Ltemplate,
		Ltrue,
		Lthis,
		RBRACE,
		MINUSRBRACE,
		PLUS,
		MINUS,
		MULT,
		DIV,
		PERC,
		EXCL,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		COLON,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		template_parametersopt,
		template_parameters,
		LBRACKETMINUSRBRACKETRBRACE,
		identifier_listopt,
		identifier_list,
		instruction,
		control_instruction,
		switch_instruction,
		simple_instruction,
		sentence,
		expression,
		template_id,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		else_node,
		anyopt,
		case_list,
		one_case,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		field_list,
		unary_expression,
		mult_expression,
		additive_expression,
		relational_expression,
		equality_expression,
		conditional_and_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 ) {
				if( lapg_lalr[p] == symbol ) {
					break;
				}
			}
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state ) {
				return lapg_sym_to[e];
			} else if( i < state ) {
				min = e + 1;
			} else {
				max = e - 1;
			}
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) {
					token[lapg_size++] = (byte)chr;
				}
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) {
					lapg_current_offset++;
					if( chr == '\n' ) {
						lapg_current_line++;
					}
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 2:
					 lapg_n.sym = new String(token,1,lapg_size-1); break;
				case 3:
					 group = 1; break;
				case 5:
					 lapg_n.sym = new String(token,0,lapg_size); break;
				case 6:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break;
				case 7:
					 lapg_n.sym = new String(token,1,lapg_size-2); break;
				case 22:
					 group = 0; break;
				case 23:
					 group = 0; break;
				case 45:
					 continue;
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX ) {
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					}
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym));
							break;
						case 7:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-2].sym), ((ArrayList)lapg_m[lapg_head-1].sym), templatePackage);
							break;
						case 10:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 11:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add((lapg_m[lapg_head-0].sym));
							break;
						case 12:
							 ((ArrayList)lapg_gg.sym).add((lapg_m[lapg_head-0].sym));
							break;
						case 14:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 15:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym));
							break;
						case 16:
							 skipSpaces(lapg_m[lapg_head-0].pos.offset+1);
							break;
						case 21:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym));
							break;
						case 22:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset));
							break;
						case 23:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 29:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage);
							break;
						case 31:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym);
							break;
						case 32:
							 lapg_gg.sym = lapg_m[lapg_head-0].sym;
							break;
						case 35:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 36:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 37:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-3].sym)); applyElse(((CompoundNode)lapg_gg.sym),((ArrayList<Node>)lapg_m[lapg_head-1].sym));
							break;
						case 41:
							 lapg_gg.sym = new SwitchNode(((ExpressionNode)lapg_m[lapg_head-4].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); checkIsSpace(lapg_m[lapg_head-2].pos.offset,lapg_m[lapg_head-2].endpos.offset);
							break;
						case 42:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add((lapg_m[lapg_head-0].sym));
							break;
						case 43:
							 ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym));
							break;
						case 44:
							 CaseNode.add(((ArrayList)lapg_gg.sym), ((Node)lapg_m[lapg_head-0].sym));
							break;
						case 45:
							 lapg_gg.sym = new CaseNode(((ExpressionNode)lapg_m[lapg_head-1].sym));
							break;
						case 46:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 47:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 48:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-4].sym), ((ExpressionNode)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 51:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 54:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym));
							break;
						case 55:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym;
							break;
						case 56:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym);
							break;
						case 57:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym);
							break;
						case 58:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym);
							break;
						case 59:
							 lapg_gg.sym = new ThisNode();
							break;
						case 60:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym));
							break;
						case 61:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym));
							break;
						case 62:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym));
							break;
						case 63:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym));
							break;
						case 64:
							 lapg_gg.sym = new ListNode(((ArrayList)lapg_m[lapg_head-1].sym));
							break;
						case 65:
							 lapg_gg.sym = new ObjectNode(((HashMap)lapg_m[lapg_head-1].sym));
							break;
						case 66:
							 lapg_gg.sym = new HashMap(); ((HashMap)lapg_gg.sym).put(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 67:
							 ((HashMap)lapg_gg.sym).put(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 68:
							 lapg_gg.sym = Boolean.TRUE;
							break;
						case 69:
							 lapg_gg.sym = Boolean.FALSE;
							break;
						case 71:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.NOT, ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 72:
							 lapg_gg.sym = new UnaryExpression(UnaryExpression.MINUS, ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 74:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MULT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 75:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.DIV, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 76:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.REM, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 78:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.PLUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 79:
							 lapg_gg.sym = new ArithmeticNode(ArithmeticNode.MINUS, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 81:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 82:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 83:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 84:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 86:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 87:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 89:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 91:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 92:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
						case 93:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym));
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) {
						lapg_m[lapg_head--] = null;
					}
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX ) {
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
					}
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 171-1 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}
