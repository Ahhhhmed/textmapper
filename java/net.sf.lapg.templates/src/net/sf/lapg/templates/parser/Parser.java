// Parser.java

package net.sf.lapg.templates.parser;

import java.io.UnsupportedEncodingException;
import java.text.MessageFormat;
import java.util.ArrayList;

import net.sf.lapg.templates.api.ITemplate;
import net.sf.lapg.templates.ast.CallTemplateNode;
import net.sf.lapg.templates.ast.CaseNode;
import net.sf.lapg.templates.ast.CompoundNode;
import net.sf.lapg.templates.ast.ConditionalNode;
import net.sf.lapg.templates.ast.ExpressionNode;
import net.sf.lapg.templates.ast.ForeachNode;
import net.sf.lapg.templates.ast.IfNode;
import net.sf.lapg.templates.ast.IndexNode;
import net.sf.lapg.templates.ast.ListNode;
import net.sf.lapg.templates.ast.LiteralNode;
import net.sf.lapg.templates.ast.MethodCallNode;
import net.sf.lapg.templates.ast.Node;
import net.sf.lapg.templates.ast.SelectNode;
import net.sf.lapg.templates.ast.SwitchNode;
import net.sf.lapg.templates.ast.TemplateNode;
import net.sf.lapg.templates.ast.TextNode;
import net.sf.lapg.templates.ast.ThisNode;

public class Parser {
	
	private ArrayList<ITemplate> templates;
	private String templatePackage;
	
	public Parser() {
	}
	
	private static final boolean DEBUG_SYNTAX = false;
	
	int killEnds = -1;
	byte[] buff;
	int l;
	
	private String rawText(int start, int end) {
		if( killEnds == start ) {
			while( start < end && (buff[start] == '\t' || buff[start] == ' ') )
				start++;
	
			if( start < end && buff[start] == '\r' )
				start++;
	
			if( start < end && buff[start] == '\n' )
				start++;
		}
		try {
			return new String(buff, start, end-start, "utf-8");
		} catch(UnsupportedEncodingException ex) {
			return "";
		}
	}
	
	private void checkIsSpace(int start, int end) {
		String val = rawText(start,end).trim();
		if( val.length() > 0 )
			error("Unknown text ignored: `"+val+"`");
	}
	
	private void applyElse(CompoundNode node, ArrayList<Node> instructions) {
		if( node instanceof IfNode ) {
			((IfNode)node).setElseInstructions(instructions);
		} else {
			error("Unknown else node, instructions skipped");
		}
	}
	
	private void skipSpaces(int offset) {
		killEnds = offset+1;
	}
	
	void error( String s ) {
		System.err.println(s);
	}
	
	public boolean parse(String s, String templatePackage) {
		l = 0;
		this.templatePackage = templatePackage;
		templates = new ArrayList<ITemplate>();
		try {
			buff = s.getBytes("utf-8");
		} catch( UnsupportedEncodingException ex ) {
			return false;
		}
		return parse();
	}
	
	public ITemplate[] getResult() {
		return templates.toArray(new ITemplate[templates.size()]);
	}

	public class lapg_place {
		public int line, offset;

		public lapg_place( int line, int offset ) {
			this.line = line;
			this.offset = offset;
		}
	};

	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		   0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   3,   1,   1,   4,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   5,   6,   7,   1,   8,   1,   9,  10,  11,  12,   1,   1,  13,  14,  15,  16,
		  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,   1,   1,  27,  28,  29,  30,
		   1,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,
		  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,   1,  60,
		   1,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,
		  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
		   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	};

	private static final short[][] lapg_lexem = new short[][] {
		{  -2,   2,   2,   2,   2,   2,   2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,   4,   4,   4,   4,   5,  -1,  -1,   6,   7,   8,   9,  10,  11,  12,  -1,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  15,  16,  -1,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  -1,  19,  17,  17,  17,  20,  17,  21,  22,  17,  17,  23,  17,  17,  17,  17,  24,  17,  17,  17,  17,  25,  26,  17,  17,  17,  17,  17,  17,  -1,  27,  28, },
		{  -3,   2,   2,   2,   2,   2,   2,   2,  -3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  29,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  30,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  -1,  -1,  -1,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  -1,  -1, },
		{ -40, -40,   4,   4,   4,   4, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  35,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  36,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, },
		{ -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, },
		{ -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, },
		{ -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, },
		{ -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, },
		{  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8, },
		{ -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38,  37, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  38,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{ -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39,  39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{ -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, },
		{ -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  40,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  41,  17,  42,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  43,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  44,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  45,  17,  17,  17,  17,  17,  17,  17,  46,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  47,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  48,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  49,  17,  17,  50,  17,  17,  17,  17,  17,  17,  17,  17,  17,  51,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  52,  -1, },
		{ -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, },
		{  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3, },
		{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6, },
		{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  -4,  -4,  -4,  -4,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  -4,  -4,  -4,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  -4,  -4,  -4, },
		{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5, },
		{ -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, },
		{ -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, -32, },
		{  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  -9, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  -1,  53,  53,  53,  53,  53,  53,  53,  53,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   7,   7,  -1,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,  -1,   7,  -1,   7,  -1,   7,  -1,  54,  -1,  -1,  -1,  -1,  -1, },
		{ -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, },
		{ -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, },
		{ -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  55,  17,  17,  17,  17,  17,  17,  56,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  57,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  58,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  59,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  60,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -17, -17, -17, -17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -17, -17, -17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -17, -17, -17, },
		{ -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -18, -18, -18, -18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -18, -18, -18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -18, -18, -18, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  61,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  62,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  63,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  64,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  65,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{ -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, -33, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  35,   7,   7,   7,   7,   7,   7,  66,  66,  66,  66,  66,  66,  66,  66,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  36,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  -1,  -1,  -1,  -1,  67,  67,  67,  67,  67,  67,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  67,  67,  67,  67,  67,  67,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  68,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  69,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  70,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{ -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -12, -12, -12, -12,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -12, -12, -12,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -12, -12, -12, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  71,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{ -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -15, -15, -15, -15,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -15, -15, -15,  17,  17,  17,  17,  17,  72,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -15, -15, -15, },
		{ -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -19, -19, -19, -19,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -19, -19, -19,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -19, -19, -19, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  73,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  74,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  75,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  76,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  35,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  36,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{  -1,   7,   7,  -1,   7,   7,   7,   7,   7,   7,  35,   7,   7,   7,   7,   7,   7,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,   7,   7,   7,   7,  67,  67,  67,  67,  67,  67,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  36,   7,   7,  67,  67,  67,  67,  67,  67,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7, },
		{ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -10, -10, -10, },
		{ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -11, -11, -11, -11,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -11, -11, -11,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -11, -11, -11, },
		{ -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -13, -13, -13, -13,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -13, -13, -13,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -13, -13, -13, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  77,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  78,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  79,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  80,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{ -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -23, -23, -23, -23,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -23, -23, -23,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -23, -23, -23, },
		{ -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -22, -22, -22, -22,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -22, -22, -22,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -22, -22, -22, },
		{ -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -14, -14, -14, -14,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -14, -14, -14,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -14, -14, -14, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  81,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  82,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  83,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  84,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -20, -20, -20, -20,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -20, -20, -20,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -20, -20, -20, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  85,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{ -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -16, -16, -16, -16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -16, -16, -16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -16, -16, -16, },
		{  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  -7,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7,  17,  17,  17,  17,  17,  86,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -7,  -7,  -7, },
		{ -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -21, -21, -21, -21,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -21, -21, -21,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, -21, -21, -21, },
	};

	private static final int[] lapg_action = new int[] {
		  -1,   4,  -1,  -3,   2,  -1,  -1,   1,  22,  21,  -1,  -1,  15,  18,  19,  20,
		  -1, -11, -19,  56,  58,  -1,  66,  -1, -53,  -1,  65,  59, -73,  -1, -93, -99,
		-107,-113,  57,-145,-173,-193,  -1,   3,  14,  -1,-209,-215,   5,-221,  30,-241,
		  -1,  49,  -1,-253,-261,  -1,-271,  -1,  16,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1,  53,  36,  -1,  11,  -1,-279,  -1,  -1,-285,
		  -1,-305,  25,  -1,-313,  -1,  64,  -1,  55,  23,-321,  47,  -1,-337,-371,-403,
		-435,-467,-499,-527,-555,  13,-575,-581,  -1,  10,  -1,   7,  60,  -1,  31,  -1,
		  29,  27,-587,-595,-601,  63,-611,  -1,  -1,  -1,  37,  12,  35,-631,-639,  -1,
		  52,  38,  39,  -1,  62,  -1,  -1,  43,  -1,  -1,  45,  42,  44,-645,  -1,  46,
		  -1,  -2,
	};

	private static final short[] lapg_lalr = new short[] {
		   1,  -1,   3,  -1,   0,   0,  -1,  -2,  26,  -1,  22,   6,  23,   6,  -1,  -2,
		  26,  -1,  22,  54,  23,  54,  24,  54,  25,  54,  27,  54,  28,  54,  29,  54,
		  30,  54,  31,  54,  32,  54,  33,  54,  34,  54,  35,  54,  36,  54,  37,  54,
		  -1,  -2,  17,  -1,   5,  50,   6,  50,   7,  50,  12,  50,  20,  50,  21,  50,
		  24,  50,  26,  50,  -1,  -2,   5,  -1,   6,  -1,   7,  -1,  12,  -1,  20,  -1,
		  21,  -1,  24,  -1,  26,  -1,  25,  34,  -1,  -2,  23,  -1,  22,  17,  -1,  -2,
		  31,  -1,  22,  24,  23,  24,  -1,  -2,  23,  -1,  22,  17,  -1,  -2,  24,  -1,
		  28,  -1,  22,  67,  23,  67,  25,  67,  27,  67,  29,  67,  30,  67,  31,  67,
		  32,  67,  33,  67,  34,  67,  35,  67,  36,  67,  37,  67,  -1,  -2,  34,  -1,
		  35,  -1,  36,  -1,  37,  -1,  22,  72,  23,  72,  25,  72,  27,  72,  29,  72,
		  30,  72,  31,  72,  32,  72,  33,  72,  -1,  -2,  32,  -1,  33,  -1,  22,  75,
		  23,  75,  25,  75,  27,  75,  29,  75,  30,  75,  31,  75,  -1,  -2,  30,  -1,
		  22,  77,  23,  77,  25,  77,  27,  77,  29,  77,  31,  77,  -1,  -2,   5,  -1,
		  27,   9,  -1,  -2,  23,  -1,  22,  17,  -1,  -2,   5,  -1,   6,  -1,   7,  -1,
		  12,  -1,  20,  -1,  21,  -1,  24,  -1,  26,  -1,  27,  34,  -1,  -2,  26,  -1,
		  28,  -1,  13,  26,  22,  26,  23,  26,  -1,  -2,  23,  -1,  31,  -1,  22,  17,
		  -1,  -2,  31,  -1,  25,  79,  27,  79,  29,  79,  -1,  -2,  29,  -1,  25,  33,
		  27,  33,  -1,  -2,  29,  -1,  27,   8,  -1,  -2,   5,  -1,   6,  -1,   7,  -1,
		  12,  -1,  20,  -1,  21,  -1,  24,  -1,  26,  -1,  27,  34,  -1,  -2,  13,  -1,
		  22,  28,  23,  28,  -1,  -2,  31,  -1,  22,  51,  23,  51,  -1,  -2,  30,  -1,
		  22,  78,  23,  78,  25,  78,  27,  78,  29,  78,  31,  78,  -1,  -2,  26,  -1,
		  22,  61,  23,  61,  24,  61,  25,  61,  27,  61,  28,  61,  29,  61,  30,  61,
		  31,  61,  32,  61,  33,  61,  34,  61,  35,  61,  36,  61,  37,  61,  -1,  -2,
		  24,  -1,  28,  -1,  22,  70,  23,  70,  25,  70,  27,  70,  29,  70,  30,  70,
		  31,  70,  32,  70,  33,  70,  34,  70,  35,  70,  36,  70,  37,  70,  -1,  -2,
		  24,  -1,  28,  -1,  22,  71,  23,  71,  25,  71,  27,  71,  29,  71,  30,  71,
		  31,  71,  32,  71,  33,  71,  34,  71,  35,  71,  36,  71,  37,  71,  -1,  -2,
		  24,  -1,  28,  -1,  22,  68,  23,  68,  25,  68,  27,  68,  29,  68,  30,  68,
		  31,  68,  32,  68,  33,  68,  34,  68,  35,  68,  36,  68,  37,  68,  -1,  -2,
		  24,  -1,  28,  -1,  22,  69,  23,  69,  25,  69,  27,  69,  29,  69,  30,  69,
		  31,  69,  32,  69,  33,  69,  34,  69,  35,  69,  36,  69,  37,  69,  -1,  -2,
		  34,  -1,  35,  -1,  36,  -1,  37,  -1,  22,  73,  23,  73,  25,  73,  27,  73,
		  29,  73,  30,  73,  31,  73,  32,  73,  33,  73,  -1,  -2,  34,  -1,  35,  -1,
		  36,  -1,  37,  -1,  22,  74,  23,  74,  25,  74,  27,  74,  29,  74,  30,  74,
		  31,  74,  32,  74,  33,  74,  -1,  -2,  32,  -1,  33,  -1,  22,  76,  23,  76,
		  25,  76,  27,  76,  29,  76,  30,  76,  31,  76,  -1,  -2,  23,  -1,  22,  17,
		  -1,  -2,  23,  -1,  22,  17,  -1,  -2,  31,  -1,  22,  48,  23,  48,  -1,  -2,
		   1,  41,   3,  41,  -1,  -2,  31,  -1,  25,  80,  27,  80,  29,  80,  -1,  -2,
		   5,  -1,   6,  -1,   7,  -1,  12,  -1,  20,  -1,  21,  -1,  24,  -1,  26,  -1,
		  27,  34,  -1,  -2,  31,  -1,  22,  32,  23,  32,  -1,  -2,   1,  -1,   3,  40,
		  -1,  -2,  23,  -1,  31,  -1,  22,  17,  -1,  -2,
	};

	private static final short[] lapg_sym_goto = new short[] {
		   0,   1,  11,  18,  28,  31,  63,  88, 113, 118, 120, 124, 125, 150, 151, 156,
		 161, 162, 163, 168, 169, 194, 219, 227, 234, 264, 266, 295, 300, 306, 308, 310,
		 320, 322, 324, 327, 330, 333, 336, 336, 337, 338, 340, 342, 345, 346, 347, 348,
		 355, 356, 357, 364, 371, 378, 385, 390, 407, 408, 409, 410, 411, 412, 416, 420,
		 427, 430, 431, 432, 433, 434, 436, 441, 442, 467, 492, 513, 532, 550,
	};

	private static final short[] lapg_sym_from = new short[] {
		 144,   0,   3,   5,  11,  16,  41,  73, 104, 126, 134,   5,  11,  16,  41,  73,
		 104, 134,   0,   3,   5,  11,  16,  41,  73, 104, 131, 134,  41, 104, 134,   6,
		  10,  21,  23,  25,  28,  29,  38,  42,  45,  50,  58,  60,  61,  62,  63,  64,
		  65,  66,  67,  68,  70,  79,  80,  83,  87, 106, 111, 118, 121, 136, 137,  10,
		  25,  28,  29,  38,  45,  50,  58,  60,  62,  63,  64,  65,  66,  67,  68,  70,
		  79,  83,  87, 111, 118, 121, 136, 137,  10,  25,  28,  29,  38,  45,  50,  58,
		  60,  62,  63,  64,  65,  66,  67,  68,  70,  79,  83,  87, 111, 118, 121, 136,
		 137,  10,  38,  70, 121, 137, 133, 137,  38,  70, 121, 137,  70,  10,  25,  28,
		  29,  38,  45,  50,  58,  60,  62,  63,  64,  65,  66,  67,  68,  70,  79,  83,
		  87, 111, 118, 121, 136, 137,  81,  10,  38,  70, 121, 137,  10,  38,  70, 121,
		 137,  48,  24,  10,  38,  70, 121, 137,   2,  10,  25,  28,  29,  38,  45,  50,
		  58,  60,  62,  63,  64,  65,  66,  67,  68,  70,  79,  83,  87, 111, 118, 121,
		 136, 137,  10,  25,  28,  29,  38,  45,  50,  58,  60,  62,  63,  64,  65,  66,
		  67,  68,  70,  79,  83,  87, 111, 118, 121, 136, 137,  57,  59,  69,  77,  85,
		 119, 120, 142,  30,  32,  43,  51, 102, 103, 141,  10,  25,  28,  29,  33,  38,
		  45,  50,  58,  60,  62,  63,  64,  65,  66,  67,  68,  70,  79,  83,  87,  94,
		  95,  96,  97, 111, 118, 121, 136, 137,  53,  92,  10,  17,  18,  25,  28,  29,
		  38,  45,  47,  50,  58,  60,  62,  63,  64,  65,  66,  67,  68,  70,  79,  83,
		  87,  93, 111, 118, 121, 136, 137,  55,  75,  78, 109, 127,  33,  47,  94,  95,
		  96,  97,  54,  76,  37,  90,  31,  51,  52,  55,  84,  92, 114, 116, 125, 141,
		  36, 100,  36, 100,  35,  98,  99,  35,  98,  99,  35,  98,  99,  35,  98,  99,
		   0,   0,   0,   3,   0,   3,   5,  16,  73,  11,  17,  17,  30,  32,  43,  51,
		 102, 103, 141,  42,  42,   5,  11,  16,  41,  73, 104, 134,   5,  11,  16,  41,
		  73, 104, 134,   5,  11,  16,  41,  73, 104, 134,   5,  11,  16,  41,  73, 104,
		 134,  10,  38,  70, 121, 137,  10,  25,  28,  29,  38,  45,  50,  60,  70,  79,
		  83,  87, 111, 118, 121, 136, 137,  21,  47,  47,  81,  81,  28,  45,  79, 118,
		  28,  45,  79, 118,   5,  11,  16,  41,  73, 104, 134,  41, 104, 134,  41, 126,
		 115, 131, 131, 134,  10,  38,  70, 121, 137,  24,  10,  25,  28,  29,  38,  45,
		  50,  58,  60,  62,  63,  64,  65,  66,  67,  68,  70,  79,  83,  87, 111, 118,
		 121, 136, 137,  10,  25,  28,  29,  38,  45,  50,  58,  60,  62,  63,  64,  65,
		  66,  67,  68,  70,  79,  83,  87, 111, 118, 121, 136, 137,  10,  25,  28,  29,
		  38,  45,  50,  58,  60,  66,  67,  68,  70,  79,  83,  87, 111, 118, 121, 136,
		 137,  10,  25,  28,  29,  38,  45,  50,  58,  60,  68,  70,  79,  83,  87, 111,
		 118, 121, 136, 137,  10,  25,  28,  29,  38,  45,  50,  58,  60,  70,  79,  83,
		  87, 111, 118, 121, 136, 137,
	};

	private static final short[] lapg_sym_to = new short[] {
		 145,   1,   1,   8,   8,   8,   8,   8,   8, 130,   8,   9,   9,   9,   9,   9,
		   9,   9,   2,   2,  10,  38,  10,  70,  10, 121, 133, 137,  71,  71,  71,  17,
		  18,  46,  48,  18,  18,  18,  18,  74,  18,  18,  18,  18,  93,  18,  18,  18,
		  18,  18,  18,  18,  18,  18, 110,  18,  18, 123,  18,  18,  18,  18,  18,  19,
		  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
		  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,
		  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,
		  20,  21,  21,  21,  21,  21, 136, 136,  69, 102, 102, 102, 103,  22,  22,  22,
		  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,
		  22,  22,  22,  22,  22,  22, 111,  23,  23,  23,  23,  23,  24,  24,  24,  24,
		  24,  83,  49,  25,  25,  25,  25,  25,   6,  26,  26,  26,  26,  26,  26,  26,
		  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,
		  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,
		  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  89,  91, 101, 107, 115,
		 128, 129, 143,  56,  56,  56,  56,  56,  56,  56,  28,  28,  28,  28,  60,  28,
		  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  60,
		  60,  60,  60,  28,  28,  28,  28,  28,  86, 117,  29,  42,  45,  29,  29,  29,
		  29,  29,  79,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,
		  29, 118,  29,  29,  29,  29,  29,  88, 105, 108, 124, 132,  61,  80,  61,  61,
		  61,  61,  87, 106,  68,  68,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,
		  66,  66,  67,  67,  62,  62,  62,  63,  63,  63,  64,  64,  64,  65,  65,  65,
		 144,   3,   4,   7,   5,   5,  11,  41, 104,  39,  43,  44,  57,  59,  77,  85,
		 119, 120, 142,  75,  76,  12,  40,  12,  40,  12,  40, 138,  13,  13,  13,  13,
		  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,
		  15,  30,  30,  30,  30,  30,  31,  51,  52,  55,  31,  52,  84,  92,  31,  52,
		 114, 116, 125,  52,  31, 141,  31,  47,  81,  82, 112, 113,  53,  78, 109, 127,
		  54,  54,  54,  54,  16,  16,  16,  16,  16,  16,  16,  72, 122, 139,  73, 131,
		 126, 134, 135, 140,  32,  32,  32,  32,  32,  50,  33,  33,  33,  33,  33,  33,
		  33,  33,  33,  94,  95,  96,  97,  33,  33,  33,  33,  33,  33,  33,  33,  33,
		  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,
		  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,
		  35,  35,  35,  35,  35,  98,  99,  35,  35,  35,  35,  35,  35,  35,  35,  35,
		  35,  36,  36,  36,  36,  36,  36,  36,  36,  36, 100,  36,  36,  36,  36,  36,
		  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  90,  37,  37,  37,  37,
		  37,  37,  37,  37,  37,  37,
	};

	private static final short[] lapg_rlen = new short[] {
		   1,   2,   1,   3,   1,   1,   0,   6,   1,   0,   3,   1,   3,   3,   2,   1,
		   1,   0,   1,   1,   1,   1,   1,   4,   1,   1,   0,   1,   0,   4,   1,   3,
		   2,   1,   0,   3,   3,   5,   4,   1,   0,   0,   9,   1,   2,   2,   5,   4,
		   4,   1,   0,   3,   4,   1,   1,   3,   1,   1,   1,   1,   4,   3,   6,   4,
		   3,   1,   1,   1,   3,   3,   3,   3,   1,   3,   3,   1,   3,   1,   3,   1,
		   3,
	};

	private static final short[] lapg_rlex = new short[] {
		  39,  40,  40,  41,  41,  45,  45,  42,  48,  48,  46,  49,  49,  44,  43,  43,
		  47,  47,  50,  50,  50,  50,  50,  53,  54,  57,  57,  59,  59,  54,  56,  56,
		  60,  61,  61,  58,  51,  51,  65,  66,  66,  67,  52,  68,  68,  68,  69,  63,
		  70,  71,  71,  70,  64,  64,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,
		  72,  73,  73,  74,  74,  74,  74,  74,  75,  75,  75,  76,  76,  55,  55,  62,
		  62,
	};

	private static final String[] lapg_syms = new String[] {
		"eoi",
		"any",
		"escid",
		"'${'",
		"'$/'",
		"identifier",
		"icon",
		"ccon",
		"Lcall",
		"Lcase",
		"Lend",
		"Lelse",
		"Lfalse",
		"Lfor",
		"Lforeach",
		"Lif",
		"Lin",
		"Lnot",
		"Lswitch",
		"Ltemplate",
		"Ltrue",
		"Lthis",
		"'}'",
		"'-'",
		"'['",
		"']'",
		"'('",
		"')'",
		"'.'",
		"','",
		"'&&'",
		"'||'",
		"'=='",
		"'!='",
		"'<='",
		"'>='",
		"'<'",
		"'>'",
		"_skip",
		"input",
		"templates",
		"template_declaration_or_space",
		"template_start",
		"instructions",
		"template_end",
		"template_parametersopt",
		"template_parameters",
		"skip_spaces",
		"identifier_listopt",
		"identifier_list",
		"instruction",
		"control_instruction",
		"switch_instruction",
		"simple_instruction",
		"sentence",
		"expression",
		"template_id",
		"template_argumentsopt",
		"template_arguments",
		"template_for_expropt",
		"template_for_expr",
		"expression_listopt",
		"expression_list",
		"control_start",
		"control_end",
		"else_node",
		"anyopt",
		"{}",
		"case_list",
		"one_case",
		"control_sentence",
		"Lnotopt",
		"primary_expression",
		"bcon",
		"relational_expression",
		"equality_expression",
		"conditional_and_expression",
	};

	public enum Tokens {
		eoi,
		any,
		escid,
		N24LBRACE,
		N24DIV,
		identifier,
		icon,
		ccon,
		Lcall,
		Lcase,
		Lend,
		Lelse,
		Lfalse,
		Lfor,
		Lforeach,
		Lif,
		Lin,
		Lnot,
		Lswitch,
		Ltemplate,
		Ltrue,
		Lthis,
		RBRACE,
		MINUS,
		LBRACKET,
		RBRACKET,
		LROUNDBRACKET,
		RROUNDBRACKET,
		DOT,
		COMMA,
		AMPAMP,
		OROR,
		EQEQ,
		EXCLEQ,
		LESSEQ,
		GREATEREQ,
		LESS,
		GREATER,
		_skip,
		input,
		templates,
		template_declaration_or_space,
		template_start,
		instructions,
		template_end,
		template_parametersopt,
		template_parameters,
		skip_spaces,
		identifier_listopt,
		identifier_list,
		instruction,
		control_instruction,
		switch_instruction,
		simple_instruction,
		sentence,
		expression,
		template_id,
		template_argumentsopt,
		template_arguments,
		template_for_expropt,
		template_for_expr,
		expression_listopt,
		expression_list,
		control_start,
		control_end,
		else_node,
		anyopt,
		_sym67,
		case_list,
		one_case,
		control_sentence,
		Lnotopt,
		primary_expression,
		bcon,
		relational_expression,
		equality_expression,
		conditional_and_expression,
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[1024];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[1024];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_offset = 0;

		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = l < buff.length ? buff[l++] : 0;

		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_offset );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < 1024-1 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) { 
					lapg_current_offset++;
					if( chr == '\n' ) lapg_current_line++;
					chr = l < buff.length ? buff[l++] : 0;
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_offset );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error( "Unexpected end of file reached");
					break;
				}
				error( MessageFormat.format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 2:
					 lapg_n.sym = new String(token,1,lapg_size-1); break; 
				case 3:
					 group = 1; break; 
				case 5:
					 lapg_n.sym = new String(token,0,lapg_size); break; 
				case 6:
					 lapg_n.sym = Integer.parseInt(new String(token,0,lapg_size)); break; 
				case 7:
					 lapg_n.sym = new String(token,1,lapg_size-2); break; 
				case 22:
					 group = 0; break; 
				case 38:
					 continue;
			}


			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX )
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 3:
							 ((TemplateNode)lapg_m[lapg_head-2].sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); templates.add(((TemplateNode)lapg_m[lapg_head-2].sym)); 
							break;
						case 7:
							 lapg_gg.sym = new TemplateNode(((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-2].sym), templatePackage); if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 10:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym; 
							break;
						case 11:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 12:
							 ((ArrayList)lapg_gg.sym).add(((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 14:
							 ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 15:
							 lapg_gg.sym = new ArrayList<Node>(); ((ArrayList<Node>)lapg_gg.sym).add(((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 16:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 17:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 21:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 22:
							 lapg_gg.sym = new TextNode(rawText(lapg_m[lapg_head-0].pos.offset,lapg_m[lapg_head-0].endpos.offset)); 
							break;
						case 23:
							 lapg_gg.sym = lapg_m[lapg_head-2].sym; if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 29:
							 lapg_gg.sym = new CallTemplateNode(((String)lapg_m[lapg_head-2].sym),((ArrayList)lapg_m[lapg_head-1].sym),((ExpressionNode)lapg_m[lapg_head-0].sym),templatePackage); 
							break;
						case 31:
							 lapg_gg.sym = ((String)lapg_gg.sym) + "." + ((String)lapg_m[lapg_head-0].sym); 
							break;
						case 32:
							 lapg_gg.sym = lapg_m[lapg_head-0].sym; 
							break;
						case 35:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym; 
							break;
						case 36:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 37:
							 ((CompoundNode)lapg_gg.sym).setInstructions(((ArrayList<Node>)lapg_m[lapg_head-3].sym)); applyElse(((CompoundNode)lapg_gg.sym),((ArrayList<Node>)lapg_m[lapg_head-1].sym)); 
							break;
						case 38:
							 if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 41:
							 if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 42:
							 lapg_gg.sym = new SwitchNode(((ExpressionNode)lapg_m[lapg_head-6].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); checkIsSpace(lapg_m[lapg_head-2].pos.offset,lapg_m[lapg_head-2].endpos.offset); 
							break;
						case 43:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 44:
							 ((ArrayList)lapg_gg.sym).add(((CaseNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 45:
							 CaseNode.add(((ArrayList)lapg_gg.sym), ((Node)lapg_m[lapg_head-0].sym)); 
							break;
						case 46:
							 lapg_gg.sym = new CaseNode(((ExpressionNode)lapg_m[lapg_head-2].sym)); if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 47:
							 lapg_gg.sym = lapg_m[lapg_head-2].sym; if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 48:
							 lapg_gg.sym = new ForeachNode(((String)lapg_m[lapg_head-2].sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 51:
							 lapg_gg.sym = new IfNode(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 52:
							 if( ((Boolean)lapg_m[lapg_head-1].sym) ) skipSpaces(lapg_m[lapg_head-0].pos.offset); 
							break;
						case 54:
							 lapg_gg.sym = new SelectNode(null, ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 55:
							 lapg_gg.sym = lapg_m[lapg_head-1].sym; 
							break;
						case 56:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym); 
							break;
						case 57:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym); 
							break;
						case 58:
							 lapg_gg.sym = new LiteralNode(lapg_m[lapg_head-0].sym); 
							break;
						case 59:
							 lapg_gg.sym = new ThisNode(); 
							break;
						case 60:
							 lapg_gg.sym = new MethodCallNode(null, ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); 
							break;
						case 61:
							 lapg_gg.sym = new SelectNode(((ExpressionNode)lapg_m[lapg_head-2].sym), ((String)lapg_m[lapg_head-0].sym)); 
							break;
						case 62:
							 lapg_gg.sym = new MethodCallNode(((ExpressionNode)lapg_m[lapg_head-5].sym), ((String)lapg_m[lapg_head-3].sym), ((ArrayList)lapg_m[lapg_head-1].sym)); 
							break;
						case 63:
							 lapg_gg.sym = new IndexNode(((ExpressionNode)lapg_m[lapg_head-3].sym), ((ExpressionNode)lapg_m[lapg_head-1].sym)); 
							break;
						case 64:
							 lapg_gg.sym = new ListNode(((ArrayList)lapg_m[lapg_head-1].sym)); 
							break;
						case 65:
							 lapg_gg.sym = Boolean.TRUE; 
							break;
						case 66:
							 lapg_gg.sym = Boolean.FALSE; 
							break;
						case 68:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 69:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GT, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 70:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.LE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 71:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.GE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 73:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.EQ, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 74:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.NE, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 76:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.AND, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 78:
							 lapg_gg.sym = new ConditionalNode(ConditionalNode.OR, ((ExpressionNode)lapg_gg.sym), ((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 79:
							 lapg_gg.sym = new ArrayList(); ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
						case 80:
							 ((ArrayList)lapg_gg.sym).add(((ExpressionNode)lapg_m[lapg_head-0].sym)); 
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) 
						lapg_m[lapg_head--] = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
					if( DEBUG_SYNTAX )
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != 146-1 ) {
			error( MessageFormat.format( "syntax error before line {0}", lapg_n.pos.line ) );
			return false;
		};
		return true;
	}
}
