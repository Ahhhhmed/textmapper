// @target

package CSharpProcessor;

@nativecode

public class parser {
	@nativecodeall


	public class lapg_place {
		public int line, column;

		public lapg_place( int line, int column ) {
			this.line = line;
			this.column = column;
		}
	};


	public class lapg_symbol {
		public Object sym;
		public int  lexem, state;
		public lapg_place pos;
		public lapg_place endpos;
	};

	private static final short[] lapg_char2no = new short[] {
		@char2no
	};

	private static final short[][] lapg_lexem = new short[][] {
		@lexem
	};

	private static final int[] lapg_action = new int[] {
		@action
	};


	private static final short[] lapg_lalr = new short[] {
		78, -1, 0, 1, 6, 1, 16, 1, 21, 1, 25, 1, 28, 1, 40, 1,
		41, 1, 45, 1, 46, 1, 51, 1, 53, 1, 54, 1, 55, 1, 56, 1,
		60, 1, 64, 1, 66, 1, 76, 1, 79, 1, 81, 1, 85, 1, -1, -2,
		45, -1, 85, -1, 0, 3, 6, 257, 16, 257, 21, 257, 25, 257, 28, 257,
		40, 257, 41, 257, 46, 257, 51, 257, 53, 257, 54, 257, 55, 257, 56, 257,
		60, 257, 64, 257, 66, 257, 76, 257, 79, 257, 81, 257, -1, -2, 78, -1,
		0, 0, 6, 0, 16, 0, 21, 0, 25, 0, 28, 0, 40, 0, 41, 0,
		45, 0, 46, 0, 51, 0, 53, 0, 54, 0, 55, 0, 56, 0, 60, 0,
		64, 0, 66, 0, 76, 0, 79, 0, 81, 0, 84, 0, 85, 0, -1, -2,
		1, 31, 49, 31, 68, 31, 85, 31, 89, 31, 92, 31, 95, 31, 87, 33,
		103, 33, -1, -2, 45, -1, 85, -1, 0, 2, 84, 2, 6, 257, 16, 257,
		21, 257, 25, 257, 28, 257, 40, 257, 41, 257, 46, 257, 51, 257, 53, 257,
		54, 257, 55, 257, 56, 257, 60, 257, 64, 257, 66, 257, 76, 257, 79, 257,
		81, 257, -1, -2, 85, -1, 0, 5, 6, 256, 16, 256, 21, 256, 25, 256,
		28, 256, 40, 256, 41, 256, 46, 256, 51, 256, 53, 256, 54, 256, 55, 256,
		56, 256, 60, 256, 64, 256, 66, 256, 76, 256, 79, 256, 81, 256, -1, -2,
		6, -1, 28, -1, 41, -1, 46, -1, 51, -1, 53, -1, 54, -1, 55, -1,
		56, -1, 60, -1, 64, -1, 76, -1, 79, -1, 81, -1, 16, 259, 21, 259,
		25, 259, 40, 259, 66, 259, -1, -2, 86, 31, 87, 31, 89, 31, 90, 31,
		91, 420, -1, -2, 89, -1, 86, 428, 87, 428, 90, 428, -1, -2, 87, -1,
		86, 426, 90, 426, -1, -2, 85, -1, 1, 256, 6, 256, 9, 256, 11, 256,
		14, 256, 16, 256, 17, 256, 19, 256, 21, 256, 23, 256, 25, 256, 26, 256,
		27, 256, 28, 256, 32, 256, 37, 256, 39, 256, 40, 256, 41, 256, 44, 256,
		46, 256, 48, 256, 50, 256, 51, 256, 52, 256, 53, 256, 54, 256, 55, 256,
		56, 256, 57, 256, 59, 256, 60, 256, 61, 256, 64, 256, 65, 256, 66, 256,
		73, 256, 74, 256, 76, 256, 77, 256, 79, 256, 80, 256, 81, 256, 102, 256,
		-1, -2, 6, -1, 28, -1, 41, -1, 46, -1, 51, -1, 53, -1, 54, -1,
		55, -1, 56, -1, 60, -1, 64, -1, 76, -1, 79, -1, 81, -1, 16, 258,
		21, 258, 25, 258, 40, 258, 66, 258, -1, -2, 78, -1, 6, 1, 16, 1,
		21, 1, 25, 1, 28, 1, 40, 1, 41, 1, 45, 1, 46, 1, 51, 1,
		53, 1, 54, 1, 55, 1, 56, 1, 60, 1, 64, 1, 66, 1, 76, 1,
		79, 1, 81, 1, 84, 1, 85, 1, -1, -2, 1, -1, 2, -1, 3, -1,
		4, -1, 5, -1, 8, -1, 9, -1, 11, -1, 14, -1, 15, -1, 19, -1,
		23, -1, 29, -1, 32, -1, 39, -1, 44, -1, 46, -1, 47, -1, 48, -1,
		59, -1, 61, -1, 62, -1, 65, -1, 68, -1, 70, -1, 72, -1, 73, -1,
		74, -1, 75, -1, 77, -1, 80, -1, 87, -1, 93, -1, 94, -1, 101, -1,
		102, -1, 107, -1, 108, -1, 88, 430, -1, -2, 45, -1, 85, -1, 84, 3,
		6, 257, 16, 257, 21, 257, 25, 257, 28, 257, 40, 257, 41, 257, 46, 257,
		51, 257, 53, 257, 54, 257, 55, 257, 56, 257, 60, 257, 64, 257, 66, 257,
		76, 257, 79, 257, 81, 257, -1, -2, 87, -1, 89, -1, 107, -1, 108, -1,
		127, -1, 7, 101, 42, 101, 84, 101, 86, 101, 88, 101, 90, 101, 91, 101,
		92, 101, 93, 101, 94, 101, 95, 101, 96, 101, 97, 101, 98, 101, 99, 101,
		100, 101, 103, 101, 104, 101, 105, 101, 106, 101, 109, 101, 110, 101, 111, 101,
		112, 101, 113, 101, 114, 101, 115, 101, 116, 101, 117, 101, 118, 101, 119, 101,
		120, 101, 121, 101, 122, 101, 123, 101, 124, 101, 125, 101, 126, 101, -1, -2,
		85, -1, 1, 71, 7, 71, 42, 71, 84, 71, 86, 71, 87, 71, 88, 71,
		89, 71, 90, 71, 91, 71, 92, 71, 93, 71, 94, 71, 95, 71, 96, 71,
		97, 71, 98, 71, 99, 71, 100, 71, 103, 71, 104, 71, 105, 71, 106, 71,
		107, 71, 108, 71, 109, 71, 110, 71, 111, 71, 112, 71, 113, 71, 114, 71,
		115, 71, 116, 71, 117, 71, 118, 71, 119, 71, 120, 71, 121, 71, 122, 71,
		123, 71, 124, 71, 125, 71, 126, 71, 127, 71, -1, -2, 128, -1, 1, 75,
		7, 75, 42, 75, 84, 75, 85, 75, 86, 75, 87, 75, 88, 75, 89, 75,
		90, 75, 91, 75, 92, 75, 93, 75, 94, 75, 95, 75, 96, 75, 97, 75,
		98, 75, 99, 75, 100, 75, 103, 75, 104, 75, 105, 75, 106, 75, 107, 75,
		108, 75, 109, 75, 110, 75, 111, 75, 112, 75, 113, 75, 114, 75, 115, 75,
		116, 75, 117, 75, 118, 75, 119, 75, 120, 75, 121, 75, 122, 75, 123, 75,
		124, 75, 125, 75, 126, 75, 127, 75, -1, -2, 103, -1, 117, -1, 118, -1,
		119, -1, 120, -1, 121, -1, 122, -1, 123, -1, 124, -1, 125, -1, 126, -1,
		7, 112, 42, 112, 84, 112, 86, 112, 88, 112, 90, 112, 91, 112, 92, 112,
		93, 112, 94, 112, 95, 112, 96, 112, 97, 112, 98, 112, 99, 112, 100, 112,
		104, 112, 105, 112, 106, 112, 109, 112, 110, 112, 111, 112, 112, 112, 113, 112,
		114, 112, 115, 112, 116, 112, -1, -2, 95, -1, 96, -1, 97, -1, 7, 116,
		42, 116, 84, 116, 86, 116, 88, 116, 90, 116, 91, 116, 92, 116, 93, 116,
		94, 116, 98, 116, 99, 116, 100, 116, 104, 116, 105, 116, 106, 116, 109, 116,
		110, 116, 111, 116, 112, 116, 113, 116, 114, 116, 115, 116, 116, 116, -1, -2,
		93, -1, 94, -1, 7, 119, 42, 119, 84, 119, 86, 119, 88, 119, 90, 119,
		91, 119, 92, 119, 98, 119, 99, 119, 100, 119, 104, 119, 105, 119, 106, 119,
		109, 119, 110, 119, 111, 119, 112, 119, 113, 119, 114, 119, 115, 119, 116, 119,
		-1, -2, 111, -1, 112, -1, 7, 122, 42, 122, 84, 122, 86, 122, 88, 122,
		90, 122, 91, 122, 92, 122, 98, 122, 99, 122, 100, 122, 104, 122, 105, 122,
		106, 122, 109, 122, 110, 122, 113, 122, 114, 122, 115, 122, 116, 122, -1, -2,
		7, -1, 42, -1, 104, -1, 105, -1, 115, -1, 116, -1, 84, 129, 86, 129,
		88, 129, 90, 129, 91, 129, 92, 129, 98, 129, 99, 129, 100, 129, 106, 129,
		109, 129, 110, 129, 113, 129, 114, 129, -1, -2, 113, -1, 114, -1, 84, 132,
		86, 132, 88, 132, 90, 132, 91, 132, 92, 132, 98, 132, 99, 132, 100, 132,
		106, 132, 109, 132, 110, 132, -1, -2, 98, -1, 84, 134, 86, 134, 88, 134,
		90, 134, 91, 134, 92, 134, 99, 134, 100, 134, 106, 134, 109, 134, 110, 134,
		-1, -2, 100, -1, 84, 136, 86, 136, 88, 136, 90, 136, 91, 136, 92, 136,
		99, 136, 106, 136, 109, 136, 110, 136, -1, -2, 99, -1, 84, 138, 86, 138,
		88, 138, 90, 138, 91, 138, 92, 138, 106, 138, 109, 138, 110, 138, -1, -2,
		109, -1, 84, 140, 86, 140, 88, 140, 90, 140, 91, 140, 92, 140, 106, 140,
		110, 140, -1, -2, 106, -1, 110, -1, 84, 142, 86, 142, 88, 142, 90, 142,
		91, 142, 92, 142, -1, -2, 90, -1, 88, 429, -1, -2, 91, -1, 83, 261,
		-1, -2, 89, -1, 1, 34, 7, 34, 42, 34, 49, 34, 68, 34, 84, 34,
		85, 34, 86, 34, 87, 34, 88, 34, 90, 34, 91, 34, 92, 34, 95, 34,
		98, 34, 99, 34, 100, 34, 104, 34, 105, 34, 106, 34, 109, 34, 110, 34,
		113, 34, 114, 34, 115, 34, 116, 34, -1, -2, 1, 35, 7, 35, 42, 35,
		49, 35, 68, 35, 84, 35, 86, 35, 87, 35, 88, 35, 90, 35, 91, 35,
		92, 35, 95, 35, 98, 35, 99, 35, 100, 35, 104, 35, 105, 35, 106, 35,
		109, 35, 110, 35, 113, 35, 114, 35, 115, 35, 116, 35, 85, 39, -1, -2,
		1, 36, 7, 36, 42, 36, 49, 36, 68, 36, 84, 36, 86, 36, 87, 36,
		88, 36, 90, 36, 91, 36, 92, 36, 95, 36, 98, 36, 99, 36, 100, 36,
		104, 36, 105, 36, 106, 36, 109, 36, 110, 36, 113, 36, 114, 36, 115, 36,
		116, 36, 85, 40, -1, -2, 1, 38, 7, 38, 42, 38, 49, 38, 68, 38,
		84, 38, 86, 38, 87, 38, 88, 38, 90, 38, 91, 38, 92, 38, 95, 38,
		98, 38, 99, 38, 100, 38, 104, 38, 105, 38, 106, 38, 109, 38, 110, 38,
		113, 38, 114, 38, 115, 38, 116, 38, 85, 41, -1, -2, 91, -1, 83, 402,
		-1, -2, 91, -1, 83, 381, -1, -2, 91, -1, 83, 362, -1, -2, 83, -1,
		87, 37, 95, 37, -1, -2, 89, -1, 85, 45, 88, 45, 95, 45, -1, -2,
		1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 11, -1,
		14, -1, 15, -1, 19, -1, 23, -1, 29, -1, 32, -1, 39, -1, 44, -1,
		46, -1, 47, -1, 48, -1, 50, -1, 57, -1, 59, -1, 61, -1, 62, -1,
		65, -1, 68, -1, 70, -1, 72, -1, 73, -1, 74, -1, 75, -1, 77, -1,
		80, -1, 87, -1, 93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1,
		88, 89, -1, -2, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 8, -1,
		9, -1, 11, -1, 14, -1, 15, -1, 19, -1, 23, -1, 29, -1, 32, -1,
		39, -1, 44, -1, 46, -1, 47, -1, 48, -1, 59, -1, 61, -1, 62, -1,
		65, -1, 68, -1, 70, -1, 72, -1, 73, -1, 74, -1, 75, -1, 77, -1,
		80, -1, 87, -1, 90, -1, 93, -1, 94, -1, 101, -1, 102, -1, 107, -1,
		108, -1, 86, 370, -1, -2, 90, -1, 86, 370, -1, -2, 85, -1, 1, 366,
		7, 366, 42, 366, 49, 366, 68, 366, 83, 366, 84, 366, 86, 366, 87, 366,
		88, 366, 90, 366, 91, 366, 92, 366, 95, 366, 98, 366, 99, 366, 100, 366,
		104, 366, 105, 366, 106, 366, 109, 366, 110, 366, 113, 366, 114, 366, 115, 366,
		116, 366, -1, -2, 92, -1, 0, 22, 6, 22, 16, 22, 21, 22, 25, 22,
		28, 22, 40, 22, 41, 22, 45, 22, 46, 22, 51, 22, 53, 22, 54, 22,
		55, 22, 56, 22, 60, 22, 64, 22, 66, 22, 76, 22, 79, 22, 81, 22,
		84, 22, 85, 22, -1, -2, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1,
		8, -1, 9, -1, 11, -1, 14, -1, 15, -1, 19, -1, 23, -1, 29, -1,
		32, -1, 39, -1, 44, -1, 46, -1, 47, -1, 48, -1, 50, -1, 57, -1,
		59, -1, 61, -1, 62, -1, 65, -1, 68, -1, 70, -1, 72, -1, 73, -1,
		74, -1, 75, -1, 77, -1, 80, -1, 87, -1, 93, -1, 94, -1, 101, -1,
		102, -1, 107, -1, 108, -1, 88, 89, -1, -2, 1, -1, 2, -1, 3, -1,
		4, -1, 5, -1, 8, -1, 9, -1, 11, -1, 14, -1, 15, -1, 19, -1,
		23, -1, 29, -1, 32, -1, 39, -1, 44, -1, 46, -1, 47, -1, 48, -1,
		59, -1, 61, -1, 62, -1, 65, -1, 68, -1, 70, -1, 72, -1, 73, -1,
		74, -1, 75, -1, 77, -1, 80, -1, 83, -1, 87, -1, 93, -1, 94, -1,
		101, -1, 102, -1, 107, -1, 108, -1, 84, 375, -1, -2, 1, -1, 2, -1,
		3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 11, -1, 14, -1, 15, -1,
		19, -1, 23, -1, 29, -1, 32, -1, 39, -1, 44, -1, 46, -1, 47, -1,
		48, -1, 59, -1, 61, -1, 62, -1, 65, -1, 68, -1, 70, -1, 72, -1,
		73, -1, 74, -1, 75, -1, 77, -1, 80, -1, 87, -1, 90, -1, 93, -1,
		94, -1, 101, -1, 102, -1, 107, -1, 108, -1, 86, 370, -1, -2, 90, -1,
		88, 88, -1, -2, 90, -1, 86, 369, -1, -2, 95, -1, 96, -1, 97, -1,
		7, 117, 42, 117, 84, 117, 86, 117, 88, 117, 90, 117, 91, 117, 92, 117,
		93, 117, 94, 117, 98, 117, 99, 117, 100, 117, 104, 117, 105, 117, 106, 117,
		109, 117, 110, 117, 111, 117, 112, 117, 113, 117, 114, 117, 115, 117, 116, 117,
		-1, -2, 95, -1, 96, -1, 97, -1, 7, 118, 42, 118, 84, 118, 86, 118,
		88, 118, 90, 118, 91, 118, 92, 118, 93, 118, 94, 118, 98, 118, 99, 118,
		100, 118, 104, 118, 105, 118, 106, 118, 109, 118, 110, 118, 111, 118, 112, 118,
		113, 118, 114, 118, 115, 118, 116, 118, -1, -2, 93, -1, 94, -1, 7, 120,
		42, 120, 84, 120, 86, 120, 88, 120, 90, 120, 91, 120, 92, 120, 98, 120,
		99, 120, 100, 120, 104, 120, 105, 120, 106, 120, 109, 120, 110, 120, 111, 120,
		112, 120, 113, 120, 114, 120, 115, 120, 116, 120, -1, -2, 93, -1, 94, -1,
		7, 121, 42, 121, 84, 121, 86, 121, 88, 121, 90, 121, 91, 121, 92, 121,
		98, 121, 99, 121, 100, 121, 104, 121, 105, 121, 106, 121, 109, 121, 110, 121,
		111, 121, 112, 121, 113, 121, 114, 121, 115, 121, 116, 121, -1, -2, 95, -1,
		7, 128, 42, 128, 84, 128, 86, 128, 88, 128, 90, 128, 91, 128, 92, 128,
		98, 128, 99, 128, 100, 128, 104, 128, 105, 128, 106, 128, 109, 128, 110, 128,
		113, 128, 114, 128, 115, 128, 116, 128, -1, -2, 95, -1, 7, 127, 42, 127,
		84, 127, 86, 127, 88, 127, 90, 127, 91, 127, 92, 127, 98, 127, 99, 127,
		100, 127, 104, 127, 105, 127, 106, 127, 109, 127, 110, 127, 113, 127, 114, 127,
		115, 127, 116, 127, -1, -2, 111, -1, 112, -1, 7, 123, 42, 123, 84, 123,
		86, 123, 88, 123, 90, 123, 91, 123, 92, 123, 98, 123, 99, 123, 100, 123,
		104, 123, 105, 123, 106, 123, 109, 123, 110, 123, 113, 123, 114, 123, 115, 123,
		116, 123, -1, -2, 111, -1, 112, -1, 7, 124, 42, 124, 84, 124, 86, 124,
		88, 124, 90, 124, 91, 124, 92, 124, 98, 124, 99, 124, 100, 124, 104, 124,
		105, 124, 106, 124, 109, 124, 110, 124, 113, 124, 114, 124, 115, 124, 116, 124,
		-1, -2, 111, -1, 112, -1, 7, 125, 42, 125, 84, 125, 86, 125, 88, 125,
		90, 125, 91, 125, 92, 125, 98, 125, 99, 125, 100, 125, 104, 125, 105, 125,
		106, 125, 109, 125, 110, 125, 113, 125, 114, 125, 115, 125, 116, 125, -1, -2,
		111, -1, 112, -1, 7, 126, 42, 126, 84, 126, 86, 126, 88, 126, 90, 126,
		91, 126, 92, 126, 98, 126, 99, 126, 100, 126, 104, 126, 105, 126, 106, 126,
		109, 126, 110, 126, 113, 126, 114, 126, 115, 126, 116, 126, -1, -2, 7, -1,
		42, -1, 104, -1, 105, -1, 115, -1, 116, -1, 84, 130, 86, 130, 88, 130,
		90, 130, 91, 130, 92, 130, 98, 130, 99, 130, 100, 130, 106, 130, 109, 130,
		110, 130, 113, 130, 114, 130, -1, -2, 7, -1, 42, -1, 104, -1, 105, -1,
		115, -1, 116, -1, 84, 131, 86, 131, 88, 131, 90, 131, 91, 131, 92, 131,
		98, 131, 99, 131, 100, 131, 106, 131, 109, 131, 110, 131, 113, 131, 114, 131,
		-1, -2, 113, -1, 114, -1, 84, 133, 86, 133, 88, 133, 90, 133, 91, 133,
		92, 133, 98, 133, 99, 133, 100, 133, 106, 133, 109, 133, 110, 133, -1, -2,
		98, -1, 84, 135, 86, 135, 88, 135, 90, 135, 91, 135, 92, 135, 99, 135,
		100, 135, 106, 135, 109, 135, 110, 135, -1, -2, 100, -1, 84, 137, 86, 137,
		88, 137, 90, 137, 91, 137, 92, 137, 99, 137, 106, 137, 109, 137, 110, 137,
		-1, -2, 99, -1, 84, 139, 86, 139, 88, 139, 90, 139, 91, 139, 92, 139,
		106, 139, 109, 139, 110, 139, -1, -2, 109, -1, 84, 141, 86, 141, 88, 141,
		90, 141, 91, 141, 92, 141, 106, 141, 110, 141, -1, -2, 89, -1, 83, 264,
		90, 264, -1, -2, 90, -1, 83, 263, -1, -2, 85, -1, 1, 257, 6, 257,
		9, 257, 11, 257, 14, 257, 16, 257, 17, 257, 19, 257, 21, 257, 23, 257,
		25, 257, 26, 257, 27, 257, 28, 257, 32, 257, 37, 257, 39, 257, 40, 257,
		41, 257, 44, 257, 46, 257, 48, 257, 51, 257, 53, 257, 54, 257, 55, 257,
		56, 257, 59, 257, 60, 257, 61, 257, 64, 257, 65, 257, 66, 257, 73, 257,
		74, 257, 76, 257, 77, 257, 79, 257, 80, 257, 81, 257, 102, 257, 84, 267,
		-1, -2, 92, -1, 0, 22, 1, 22, 6, 22, 9, 22, 11, 22, 14, 22,
		16, 22, 17, 22, 19, 22, 21, 22, 23, 22, 25, 22, 26, 22, 27, 22,
		28, 22, 32, 22, 37, 22, 39, 22, 40, 22, 41, 22, 44, 22, 45, 22,
		46, 22, 48, 22, 51, 22, 53, 22, 54, 22, 55, 22, 56, 22, 59, 22,
		60, 22, 61, 22, 64, 22, 65, 22, 66, 22, 73, 22, 74, 22, 76, 22,
		77, 22, 79, 22, 80, 22, 81, 22, 84, 22, 85, 22, 102, 22, -1, -2,
		85, -1, 1, 257, 9, 257, 11, 257, 14, 257, 19, 257, 23, 257, 32, 257,
		39, 257, 44, 257, 48, 257, 50, 257, 52, 257, 57, 257, 59, 257, 61, 257,
		65, 257, 73, 257, 74, 257, 77, 257, 80, 257, 88, 292, -1, -2, 85, -1,
		1, 257, 84, 406, -1, -2, 92, -1, 0, 22, 1, 22, 6, 22, 9, 22,
		11, 22, 14, 22, 16, 22, 17, 22, 19, 22, 21, 22, 23, 22, 25, 22,
		26, 22, 27, 22, 28, 22, 32, 22, 37, 22, 39, 22, 40, 22, 41, 22,
		44, 22, 45, 22, 46, 22, 48, 22, 51, 22, 53, 22, 54, 22, 55, 22,
		56, 22, 59, 22, 60, 22, 61, 22, 64, 22, 65, 22, 66, 22, 73, 22,
		74, 22, 76, 22, 77, 22, 79, 22, 80, 22, 81, 22, 84, 22, 85, 22,
		102, 22, -1, -2, 90, -1, 83, 383, -1, -2, 85, -1, 1, 257, 9, 257,
		11, 257, 14, 257, 19, 257, 23, 257, 26, 257, 32, 257, 39, 257, 44, 257,
		46, 257, 48, 257, 59, 257, 61, 257, 65, 257, 73, 257, 74, 257, 77, 257,
		80, 257, 84, 385, -1, -2, 92, -1, 0, 22, 1, 22, 6, 22, 9, 22,
		11, 22, 14, 22, 16, 22, 17, 22, 19, 22, 21, 22, 23, 22, 25, 22,
		26, 22, 27, 22, 28, 22, 32, 22, 37, 22, 39, 22, 40, 22, 41, 22,
		44, 22, 45, 22, 46, 22, 48, 22, 51, 22, 53, 22, 54, 22, 55, 22,
		56, 22, 59, 22, 60, 22, 61, 22, 64, 22, 65, 22, 66, 22, 73, 22,
		74, 22, 76, 22, 77, 22, 79, 22, 80, 22, 81, 22, 84, 22, 85, 22,
		102, 22, -1, -2, 90, -1, 83, 364, -1, -2, 85, -1, 1, 257, 6, 257,
		9, 257, 11, 257, 14, 257, 16, 257, 17, 257, 19, 257, 21, 257, 23, 257,
		25, 257, 26, 257, 27, 257, 28, 257, 32, 257, 37, 257, 39, 257, 40, 257,
		41, 257, 44, 257, 46, 257, 48, 257, 51, 257, 53, 257, 54, 257, 55, 257,
		56, 257, 59, 257, 60, 257, 61, 257, 64, 257, 65, 257, 66, 257, 73, 257,
		74, 257, 76, 257, 77, 257, 79, 257, 80, 257, 81, 257, 102, 257, 84, 267,
		-1, -2, 92, -1, 0, 22, 1, 22, 6, 22, 9, 22, 11, 22, 14, 22,
		16, 22, 17, 22, 19, 22, 21, 22, 23, 22, 25, 22, 26, 22, 27, 22,
		28, 22, 32, 22, 37, 22, 39, 22, 40, 22, 41, 22, 44, 22, 45, 22,
		46, 22, 48, 22, 51, 22, 53, 22, 54, 22, 55, 22, 56, 22, 59, 22,
		60, 22, 61, 22, 64, 22, 65, 22, 66, 22, 73, 22, 74, 22, 76, 22,
		77, 22, 79, 22, 80, 22, 81, 22, 84, 22, 85, 22, 102, 22, -1, -2,
		90, -1, 84, 374, -1, -2, 6, -1, 17, -1, 28, -1, 41, -1, 46, -1,
		51, -1, 53, -1, 54, -1, 55, -1, 56, -1, 60, -1, 64, -1, 76, -1,
		79, -1, 81, -1, 1, 259, 9, 259, 11, 259, 14, 259, 16, 259, 19, 259,
		21, 259, 23, 259, 25, 259, 26, 259, 27, 259, 32, 259, 37, 259, 39, 259,
		40, 259, 44, 259, 48, 259, 59, 259, 61, 259, 65, 259, 66, 259, 73, 259,
		74, 259, 77, 259, 80, 259, 102, 359, -1, -2, 85, -1, 1, 257, 6, 257,
		9, 257, 11, 257, 14, 257, 16, 257, 17, 257, 19, 257, 21, 257, 23, 257,
		25, 257, 26, 257, 27, 257, 28, 257, 32, 257, 37, 257, 39, 257, 40, 257,
		41, 257, 44, 257, 46, 257, 48, 257, 51, 257, 53, 257, 54, 257, 55, 257,
		56, 257, 59, 257, 60, 257, 61, 257, 64, 257, 65, 257, 66, 257, 73, 257,
		74, 257, 76, 257, 77, 257, 79, 257, 80, 257, 81, 257, 102, 257, 84, 266,
		-1, -2, 50, -1, 52, -1, 57, -1, 1, 302, 9, 302, 11, 302, 14, 302,
		19, 302, 23, 302, 32, 302, 39, 302, 44, 302, 48, 302, 59, 302, 61, 302,
		65, 302, 73, 302, 74, 302, 77, 302, 80, 302, -1, -2, 90, -1, 86, 296,
		88, 296, -1, -2, 90, -1, 84, 405, -1, -2, 46, -1, 1, 390, 9, 390,
		11, 390, 14, 390, 19, 390, 23, 390, 26, 390, 32, 390, 39, 390, 44, 390,
		48, 390, 59, 390, 61, 390, 65, 390, 73, 390, 74, 390, 77, 390, 80, 390,
		-1, -2, 85, -1, 1, 257, 9, 257, 11, 257, 14, 257, 19, 257, 23, 257,
		26, 257, 32, 257, 39, 257, 44, 257, 46, 257, 48, 257, 59, 257, 61, 257,
		65, 257, 73, 257, 74, 257, 77, 257, 80, 257, 84, 384, -1, -2, 85, -1,
		1, 95, 7, 95, 42, 95, 83, 95, 84, 95, 86, 95, 87, 95, 88, 95,
		89, 95, 90, 95, 91, 95, 92, 95, 93, 95, 94, 95, 95, 95, 96, 95,
		97, 95, 98, 95, 99, 95, 100, 95, 103, 95, 104, 95, 105, 95, 106, 95,
		107, 95, 108, 95, 109, 95, 110, 95, 111, 95, 112, 95, 113, 95, 114, 95,
		115, 95, 116, 95, 117, 95, 118, 95, 119, 95, 120, 95, 121, 95, 122, 95,
		123, 95, 124, 95, 125, 95, 126, 95, 127, 95, -1, -2, 89, -1, 83, 265,
		90, 265, -1, -2, 1, 17, 6, 17, 9, 17, 11, 17, 14, 17, 16, 17,
		17, 17, 19, 17, 21, 17, 23, 17, 25, 17, 26, 17, 27, 17, 28, 17,
		32, 17, 37, 17, 39, 17, 40, 17, 41, 17, 44, 17, 46, 17, 48, 17,
		51, 17, 53, 17, 54, 17, 55, 17, 56, 17, 59, 17, 60, 17, 61, 17,
		64, 17, 65, 17, 66, 17, 73, 17, 74, 17, 76, 17, 77, 17, 79, 17,
		80, 17, 81, 17, 102, 357, -1, -2, 6, -1, 17, -1, 28, -1, 41, -1,
		46, -1, 51, -1, 53, -1, 54, -1, 55, -1, 56, -1, 60, -1, 64, -1,
		76, -1, 79, -1, 81, -1, 1, 258, 9, 258, 11, 258, 14, 258, 16, 258,
		19, 258, 21, 258, 23, 258, 25, 258, 26, 258, 27, 258, 32, 258, 37, 258,
		39, 258, 40, 258, 44, 258, 48, 258, 59, 258, 61, 258, 65, 258, 66, 258,
		73, 258, 74, 258, 77, 258, 80, 258, -1, -2, 85, -1, 1, 257, 9, 257,
		11, 257, 14, 257, 19, 257, 23, 257, 32, 257, 39, 257, 44, 257, 48, 257,
		50, 257, 52, 257, 57, 257, 59, 257, 61, 257, 65, 257, 73, 257, 74, 257,
		77, 257, 80, 257, -1, -2, 103, -1, 84, 411, 90, 411, -1, -2, 84, -1,
		85, -1, 1, 257, -1, -2, 85, -1, 1, 94, 7, 94, 42, 94, 83, 94,
		84, 94, 86, 94, 87, 94, 88, 94, 89, 94, 90, 94, 91, 94, 92, 94,
		93, 94, 94, 94, 95, 94, 96, 94, 97, 94, 98, 94, 99, 94, 100, 94,
		103, 94, 104, 94, 105, 94, 106, 94, 107, 94, 108, 94, 109, 94, 110, 94,
		111, 94, 112, 94, 113, 94, 114, 94, 115, 94, 116, 94, 117, 94, 118, 94,
		119, 94, 120, 94, 121, 94, 122, 94, 123, 94, 124, 94, 125, 94, 126, 94,
		127, 94, -1, -2, 83, -1, 1, 97, 7, 97, 42, 97, 84, 97, 86, 97,
		87, 97, 88, 97, 89, 97, 90, 97, 91, 97, 92, 97, 93, 97, 94, 97,
		95, 97, 96, 97, 97, 97, 98, 97, 99, 97, 100, 97, 103, 97, 104, 97,
		105, 97, 106, 97, 107, 97, 108, 97, 109, 97, 110, 97, 111, 97, 112, 97,
		113, 97, 114, 97, 115, 97, 116, 97, 117, 97, 118, 97, 119, 97, 120, 97,
		121, 97, 122, 97, 123, 97, 124, 97, 125, 97, 126, 97, 127, 97, -1, -2,
		1, -1, 95, 37, -1, -2, 85, -1, 1, 257, 9, 257, 11, 257, 14, 257,
		19, 257, 23, 257, 32, 257, 39, 257, 44, 257, 48, 257, 50, 257, 52, 257,
		57, 257, 59, 257, 61, 257, 65, 257, 73, 257, 74, 257, 77, 257, 80, 257,
		88, 292, -1, -2, 89, 31, 90, 33, 92, 33, 103, 33, 83, 294, 87, 294,
		-1, -2, 103, -1, 88, 287, 90, 287, 92, 287, -1, -2, 1, -1, 2, -1,
		3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 10, -1, 11, -1, 14, -1,
		15, -1, 17, -1, 18, -1, 19, -1, 22, -1, 23, -1, 29, -1, 32, -1,
		33, -1, 34, -1, 35, -1, 36, -1, 39, -1, 43, -1, 44, -1, 46, -1,
		47, -1, 48, -1, 58, -1, 59, -1, 61, -1, 62, -1, 65, -1, 67, -1,
		68, -1, 69, -1, 70, -1, 71, -1, 72, -1, 73, -1, 74, -1, 75, -1,
		76, -1, 77, -1, 78, -1, 80, -1, 82, -1, 83, -1, 87, -1, 92, -1,
		93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1, 84, 195, -1, -2,
		85, -1, 1, 257, -1, -2, 85, -1, 1, 257, 9, 257, 11, 257, 14, 257,
		19, 257, 23, 257, 32, 257, 39, 257, 44, 257, 48, 257, 50, 257, 52, 257,
		57, 257, 59, 257, 61, 257, 65, 257, 73, 257, 74, 257, 77, 257, 80, 257,
		88, 292, -1, -2, 85, -1, 1, 257, 9, 257, 11, 257, 14, 257, 19, 257,
		23, 257, 32, 257, 39, 257, 44, 257, 48, 257, 50, 257, 52, 257, 57, 257,
		59, 257, 61, 257, 65, 257, 73, 257, 74, 257, 77, 257, 80, 257, -1, -2,
		1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 11, -1,
		14, -1, 15, -1, 19, -1, 23, -1, 29, -1, 32, -1, 39, -1, 44, -1,
		46, -1, 47, -1, 48, -1, 59, -1, 61, -1, 62, -1, 65, -1, 68, -1,
		70, -1, 72, -1, 73, -1, 74, -1, 75, -1, 77, -1, 80, -1, 87, -1,
		93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1, 92, 176, -1, -2,
		1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 11, -1,
		14, -1, 15, -1, 19, -1, 23, -1, 29, -1, 32, -1, 39, -1, 44, -1,
		46, -1, 47, -1, 48, -1, 59, -1, 61, -1, 62, -1, 65, -1, 68, -1,
		70, -1, 72, -1, 73, -1, 74, -1, 75, -1, 77, -1, 80, -1, 87, -1,
		93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1, 92, 176, -1, -2,
		91, -1, 1, 74, 85, 74, 87, 74, 89, 74, 103, 74, 107, 74, 108, 74,
		117, 74, 118, 74, 119, 74, 120, 74, 121, 74, 122, 74, 123, 74, 124, 74,
		125, 74, 126, 74, 127, 74, -1, -2, 85, -1, 89, -1, 1, 43, -1, -2,
		87, -1, 89, -1, 107, -1, 108, -1, 127, -1, 1, 42, 103, 101, 117, 101,
		118, 101, 119, 101, 120, 101, 121, 101, 122, 101, 123, 101, 124, 101, 125, 101,
		126, 101, -1, -2, 1, 93, 85, 93, 87, 93, 89, 93, 103, 93, 107, 93,
		108, 93, 117, 93, 118, 93, 119, 93, 120, 93, 121, 93, 122, 93, 123, 93,
		124, 93, 125, 93, 126, 93, 127, 93, 88, 205, 90, 205, 92, 205, -1, -2,
		1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 10, -1,
		11, -1, 14, -1, 15, -1, 17, -1, 18, -1, 19, -1, 22, -1, 23, -1,
		29, -1, 32, -1, 33, -1, 34, -1, 35, -1, 36, -1, 39, -1, 43, -1,
		44, -1, 46, -1, 47, -1, 48, -1, 58, -1, 59, -1, 61, -1, 62, -1,
		65, -1, 67, -1, 68, -1, 69, -1, 70, -1, 71, -1, 72, -1, 73, -1,
		74, -1, 75, -1, 76, -1, 77, -1, 78, -1, 80, -1, 82, -1, 83, -1,
		87, -1, 92, -1, 93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1,
		84, 194, -1, -2, 85, -1, 1, 257, -1, -2, 85, -1, 1, 257, 9, 257,
		11, 257, 14, 257, 19, 257, 23, 257, 32, 257, 39, 257, 44, 257, 48, 257,
		50, 257, 52, 257, 57, 257, 59, 257, 61, 257, 65, 257, 73, 257, 74, 257,
		77, 257, 80, 257, 88, 292, -1, -2, 85, -1, 1, 257, 9, 257, 11, 257,
		14, 257, 19, 257, 23, 257, 32, 257, 39, 257, 44, 257, 48, 257, 50, 257,
		52, 257, 57, 257, 59, 257, 61, 257, 65, 257, 73, 257, 74, 257, 77, 257,
		80, 257, -1, -2, 85, -1, 1, 257, -1, -2, 91, -1, 83, 353, 92, 353,
		-1, -2, 89, 32, 83, 295, 87, 295, -1, -2, 85, -1, 1, 257, 84, 310,
		-1, -2, 87, -1, 89, -1, 107, -1, 108, -1, 127, -1, 103, 101, 117, 101,
		118, 101, 119, 101, 120, 101, 121, 101, 122, 101, 123, 101, 124, 101, 125, 101,
		126, 101, -1, -2, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 8, -1,
		9, -1, 11, -1, 14, -1, 15, -1, 19, -1, 23, -1, 29, -1, 32, -1,
		39, -1, 44, -1, 46, -1, 47, -1, 48, -1, 59, -1, 61, -1, 62, -1,
		65, -1, 68, -1, 70, -1, 72, -1, 73, -1, 74, -1, 75, -1, 77, -1,
		80, -1, 87, -1, 93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1,
		92, 174, -1, -2, 103, 106, 117, 106, 118, 106, 119, 106, 120, 106, 121, 106,
		122, 106, 123, 106, 124, 106, 125, 106, 126, 106, 88, 209, 90, 209, 92, 209,
		-1, -2, 103, 107, 117, 107, 118, 107, 119, 107, 120, 107, 121, 107, 122, 107,
		123, 107, 124, 107, 125, 107, 126, 107, 88, 210, 90, 210, 92, 210, -1, -2,
		85, -1, 1, 44, -1, -2, 90, -1, 88, 199, 92, 199, -1, -2, 1, -1,
		2, -1, 3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 11, -1, 14, -1,
		15, -1, 19, -1, 23, -1, 29, -1, 32, -1, 39, -1, 44, -1, 46, -1,
		47, -1, 48, -1, 50, -1, 57, -1, 59, -1, 61, -1, 62, -1, 65, -1,
		68, -1, 70, -1, 72, -1, 73, -1, 74, -1, 75, -1, 77, -1, 80, -1,
		87, -1, 93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1, 88, 89,
		-1, -2, 1, 83, 85, 83, 87, 83, 89, 83, 103, 83, 107, 83, 108, 83,
		117, 83, 118, 83, 119, 83, 120, 83, 121, 83, 122, 83, 123, 83, 124, 83,
		125, 83, 126, 83, 127, 83, 88, 207, 90, 207, 92, 207, -1, -2, 1, 84,
		85, 84, 87, 84, 89, 84, 103, 84, 107, 84, 108, 84, 117, 84, 118, 84,
		119, 84, 120, 84, 121, 84, 122, 84, 123, 84, 124, 84, 125, 84, 126, 84,
		127, 84, 88, 208, 90, 208, 92, 208, -1, -2, 85, -1, 1, 257, 84, 398,
		-1, -2, 90, -1, 92, 200, -1, -2, 90, -1, 92, 223, -1, -2, 30, -1,
		1, 227, 2, 227, 3, 227, 4, 227, 5, 227, 8, 227, 9, 227, 10, 227,
		11, 227, 12, 227, 14, 227, 15, 227, 17, 227, 18, 227, 19, 227, 20, 227,
		22, 227, 23, 227, 24, 227, 29, 227, 32, 227, 33, 227, 34, 227, 35, 227,
		36, 227, 39, 227, 43, 227, 44, 227, 46, 227, 47, 227, 48, 227, 58, 227,
		59, 227, 61, 227, 62, 227, 65, 227, 67, 227, 68, 227, 69, 227, 70, 227,
		71, 227, 72, 227, 73, 227, 74, 227, 75, 227, 76, 227, 77, 227, 78, 227,
		80, 227, 82, 227, 83, 227, 84, 227, 87, 227, 92, 227, 93, 227, 94, 227,
		101, 227, 102, 227, 107, 227, 108, 227, -1, -2, 13, -1, 1, 230, 2, 230,
		3, 230, 4, 230, 5, 230, 8, 230, 9, 230, 10, 230, 11, 230, 12, 230,
		14, 230, 15, 230, 17, 230, 18, 230, 19, 230, 20, 230, 22, 230, 23, 230,
		24, 230, 29, 230, 30, 230, 32, 230, 33, 230, 34, 230, 35, 230, 36, 230,
		39, 230, 43, 230, 44, 230, 46, 230, 47, 230, 48, 230, 58, 230, 59, 230,
		61, 230, 62, 230, 65, 230, 67, 230, 68, 230, 69, 230, 70, 230, 71, 230,
		72, 230, 73, 230, 74, 230, 75, 230, 76, 230, 77, 230, 78, 230, 80, 230,
		82, 230, 83, 230, 84, 230, 87, 230, 92, 230, 93, 230, 94, 230, 101, 230,
		102, 230, 107, 230, 108, 230, -1, -2, 87, -1, 89, -1, 107, -1, 108, -1,
		127, -1, 1, 42, 7, 101, 42, 101, 88, 101, 93, 101, 94, 101, 95, 101,
		96, 101, 97, 101, 98, 101, 99, 101, 100, 101, 103, 101, 104, 101, 105, 101,
		106, 101, 109, 101, 110, 101, 111, 101, 112, 101, 113, 101, 114, 101, 115, 101,
		116, 101, 117, 101, 118, 101, 119, 101, 120, 101, 121, 101, 122, 101, 123, 101,
		124, 101, 125, 101, 126, 101, -1, -2, 85, -1, 1, 257, -1, -2, 1, -1,
		2, -1, 3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 11, -1, 14, -1,
		15, -1, 19, -1, 23, -1, 29, -1, 32, -1, 39, -1, 44, -1, 46, -1,
		47, -1, 48, -1, 59, -1, 61, -1, 62, -1, 65, -1, 68, -1, 70, -1,
		72, -1, 73, -1, 74, -1, 75, -1, 77, -1, 80, -1, 87, -1, 93, -1,
		94, -1, 101, -1, 102, -1, 107, -1, 108, -1, 92, 176, -1, -2, 1, 90,
		85, 90, 87, 90, 89, 90, 103, 90, 107, 90, 108, 90, 117, 90, 118, 90,
		119, 90, 120, 90, 121, 90, 122, 90, 123, 90, 124, 90, 125, 90, 126, 90,
		127, 90, 88, 204, 90, 204, 92, 204, -1, -2, 85, -1, 1, 257, -1, -2,
		1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 11, -1,
		14, -1, 15, -1, 19, -1, 23, -1, 29, -1, 32, -1, 39, -1, 44, -1,
		46, -1, 47, -1, 48, -1, 50, -1, 57, -1, 59, -1, 61, -1, 62, -1,
		65, -1, 68, -1, 70, -1, 72, -1, 73, -1, 74, -1, 75, -1, 77, -1,
		80, -1, 87, -1, 93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1,
		88, 89, -1, -2, 1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 8, -1,
		9, -1, 11, -1, 14, -1, 15, -1, 19, -1, 23, -1, 29, -1, 32, -1,
		39, -1, 44, -1, 46, -1, 47, -1, 48, -1, 50, -1, 57, -1, 59, -1,
		61, -1, 62, -1, 65, -1, 68, -1, 70, -1, 72, -1, 73, -1, 74, -1,
		75, -1, 77, -1, 80, -1, 87, -1, 93, -1, 94, -1, 101, -1, 102, -1,
		107, -1, 108, -1, 88, 89, -1, -2, 24, -1, 1, 168, 2, 168, 3, 168,
		4, 168, 5, 168, 8, 168, 9, 168, 10, 168, 11, 168, 12, 168, 14, 168,
		15, 168, 17, 168, 18, 168, 19, 168, 20, 168, 22, 168, 23, 168, 29, 168,
		32, 168, 33, 168, 34, 168, 35, 168, 36, 168, 39, 168, 43, 168, 44, 168,
		46, 168, 47, 168, 48, 168, 58, 168, 59, 168, 61, 168, 62, 168, 65, 168,
		67, 168, 68, 168, 69, 168, 70, 168, 71, 168, 72, 168, 73, 168, 74, 168,
		75, 168, 76, 168, 77, 168, 78, 168, 80, 168, 82, 168, 83, 168, 84, 168,
		87, 168, 92, 168, 93, 168, 94, 168, 101, 168, 102, 168, 107, 168, 108, 168,
		-1, -2, 12, -1, 20, -1, 84, 212, -1, -2, 1, -1, 88, 236, -1, -2,
		1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 11, -1,
		14, -1, 15, -1, 19, -1, 23, -1, 29, -1, 32, -1, 39, -1, 44, -1,
		46, -1, 47, -1, 48, -1, 59, -1, 61, -1, 62, -1, 65, -1, 68, -1,
		70, -1, 72, -1, 73, -1, 74, -1, 75, -1, 77, -1, 80, -1, 87, -1,
		93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1, 88, 178, -1, -2,
		12, -1, 20, -1, 84, 211, -1, -2, 90, -1, 88, 177, -1, -2, 1, -1,
		2, -1, 3, -1, 4, -1, 5, -1, 8, -1, 9, -1, 10, -1, 11, -1,
		14, -1, 15, -1, 17, -1, 18, -1, 19, -1, 22, -1, 23, -1, 29, -1,
		32, -1, 33, -1, 34, -1, 35, -1, 36, -1, 39, -1, 43, -1, 44, -1,
		46, -1, 47, -1, 48, -1, 58, -1, 59, -1, 61, -1, 62, -1, 65, -1,
		67, -1, 68, -1, 69, -1, 70, -1, 71, -1, 72, -1, 73, -1, 74, -1,
		75, -1, 76, -1, 77, -1, 78, -1, 80, -1, 82, -1, 83, -1, 87, -1,
		92, -1, 93, -1, 94, -1, 101, -1, 102, -1, 107, -1, 108, -1, 12, 217,
		20, 217, 84, 217, -1, -2,
	};


	private static final short[] lapg_sym_goto = new short[] {
		@sym_goto
	};

	private static final short[] lapg_sym_from = new short[] {
		@sym_from
	};

	private static final short[] lapg_sym_to = new short[] {
		@sym_to
	};

	private static final short[] lapg_rlen = new short[] {
		@rlen
	};

	private static final short[] lapg_rlex = new short[] {
		@rlex
	};

	private static final String[] lapg_syms = new String[] {
		@syms
	};

	public enum Tokens {
		@tokenenum
	}

	private static int lapg_next( int state, int symbol ) {
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
		return lapg_action[state];
	}

	private static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	public boolean parse() {

		byte[]        token = new byte[@maxtoken];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[@maxstack];
		lapg_symbol   lapg_n;
		int           lapg_current_line = 1, lapg_current_column = 1;


		lapg_m[0] = new lapg_symbol();
		lapg_m[0].state = 0;
		chr = buff[l++];if( l == end ) fillb();


		do {
			lapg_n = new lapg_symbol();
			lapg_n.pos = new lapg_place( lapg_current_line, lapg_current_column );
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < @maxtoken-1 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i][lapg_char2no[(chr+256)%256]];
				if( lapg_i >= -1 && chr != 0 ) { 
					lapg_current_column++;
					chr = buff[l++];if( l == end ) fillb();
				}
			}
			lapg_n.endpos = new lapg_place( lapg_current_line, lapg_current_column );

			if( lapg_i == -1 ) {
				if( chr == 0 ) {
					error(@errprefix "Unexpected end of file reached");
					break;
				}
				error(@errprefix MessageFormat.format( "invalid lexem at line {0}, column {1}: `{2}`, skipped", lapg_n.pos.line, lapg_n.pos.column, new String(token,0,lapg_size) ) );
				lapg_n.lexem = -1;
				continue;
			}

			lapg_size--;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

			switch( lapg_n.lexem ) {
				case 130:
					#line 170 "syntax"
 continue;
				case 133:
					#line 174 "syntax"
 continue;
				case 134:
					#line 176 "syntax"
 group = @1;continue; 
				case 135:
					#line 178 "syntax"
 continue; 
				case 137:
					#line 180 "syntax"
 group = @0;continue; 
			}



			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg = new lapg_symbol();
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if( DEBUG_SYNTAX )
						System.out.println( "reduce to " + lapg_syms[lapg_rlex[lapg_i]] );
					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
					switch( lapg_i ) {
						case 24:
							#line 222 "syntax"
 $$ = new Node(); break; 
							break;
						case 25:
							#line 223 "syntax"
 $$ = new Node(); break; 
							break;
						case 26:
							#line 224 "syntax"
 $$ = new Node(); break; 
							break;
						case 27:
							#line 225 "syntax"
 $$ = new Node(); break; 
							break;
						case 28:
							#line 226 "syntax"
 $$ = new Node(); break; 
							break;
						case 29:
							#line 227 "syntax"
 $$ = new Node(); break; 
							break;
						case 30:
							#line 228 "syntax"
 $$ = new Node(); break; 
							break;
						case 33:
							#line 241 "syntax"
 $$ = new Node( Kind.Identifier, null, null, null ); break; 
							break;
						case 76:
							#line 325 "syntax"
 $$ = new Node(); break; 
							break;
						case 77:
							#line 326 "syntax"
 $$ = new Node(); break; 
							break;
						case 78:
							#line 327 "syntax"
 $$ = new Node(); break; 
							break;
						case 79:
							#line 328 "syntax"
 $$ = new Node(); break; 
							break;
						case 80:
							#line 329 "syntax"
 $$ = new Node(); break; 
							break;
						case 81:
							#line 330 "syntax"
 $$ = new Node(); break; 
							break;
						case 82:
							#line 331 "syntax"
 $$ = new Node(); break; 
							break;
						case 83:
							#line 332 "syntax"
 $$ = new Node(); break; 
							break;
						case 84:
							#line 333 "syntax"
 $$ = new Node(); break; 
							break;
						case 85:
							#line 334 "syntax"
 $$ = new Node(); break; 
							break;
						case 86:
							#line 335 "syntax"
 $$ = new Node( Kind.Dot, $primary_expression, null, null ); break; 
							break;
						case 87:
							#line 336 "syntax"
 $$ = new Node( Kind.TypeDot, null, null, null ); break; 
							break;
						case 90:
							#line 337 "syntax"
 $$ = new Node(); break; 
							break;
						case 91:
							#line 338 "syntax"
 $$ = new Node(); break; 
							break;
						case 92:
							#line 339 "syntax"
 $$ = new Node( Kind.DimmedExpr, null, null, $primary_expression_na ); break; 
							break;
						case 93:
							#line 340 "syntax"
 $$ = new Node(); break; 
							break;
						case 98:
							#line 344 "syntax"
 $$ = new Node(); break; 
							break;
						case 99:
							#line 345 "syntax"
 $$ = new Node(); break; 
							break;
						case 100:
							#line 349 "syntax"
 $$ = new Node(); break; 
							break;
						case 102:
							#line 354 "syntax"
 $$ = new Node(); break; 
							break;
						case 103:
							#line 355 "syntax"
 $$ = new Node(); break; 
							break;
						case 104:
							#line 356 "syntax"
 $$ = new Node(); break; 
							break;
						case 105:
							#line 357 "syntax"
 $$ = new Node(); break; 
							break;
						case 106:
							#line 358 "syntax"
 $$ = new Node(); break; 
							break;
						case 107:
							#line 359 "syntax"
 $$ = new Node(); break; 
							break;
						case 109:
							#line 365 "syntax"
$$ = $1;
// HACK to resolve Cast ambiguity
if( CastExpr($expression,lapg_n) ) {
	// perform reduce
	for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) lapg_m[lapg_head--].sym = null;
	lapg_m[++lapg_head] = lapg_gg;
	lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
	if( lapg_m[lapg_head].state != -1 ) {
		// shift cast_token (if possible)
		lapg_gg.lexem = (int)Tokens.cast_token;
		lapg_gg.sym = null;
		lapg_gg.state = lapg_state_sym( lapg_m[lapg_head].state, lapg_gg.lexem );
		lapg_gg.pos = lapg_gg.endpos = lapg_n.pos;
		if( lapg_gg.state != -1 )
			lapg_m[++lapg_head] = lapg_gg;
	}
	// skip default reduce code
	continue;
}
break;
							break;
						case 110:
							#line 388 "syntax"
 $$ = new Node(); break; 
							break;
						case 111:
							#line 389 "syntax"
 $$ = new Node(); break; 
							break;
						case 113:
							#line 394 "syntax"
 $$ = new Node(); break; 
							break;
						case 114:
							#line 395 "syntax"
 $$ = new Node(); break; 
							break;
						case 115:
							#line 396 "syntax"
 $$ = new Node(); break; 
							break;
						case 117:
							#line 401 "syntax"
 $$ = new Node(); break; 
							break;
						case 118:
							#line 402 "syntax"
 $$ = new Node(); break; 
							break;
						case 120:
							#line 407 "syntax"
 $$ = new Node(); break; 
							break;
						case 121:
							#line 408 "syntax"
 $$ = new Node(); break; 
							break;
						case 123:
							#line 413 "syntax"
 $$ = new Node(); break; 
							break;
						case 124:
							#line 414 "syntax"
 $$ = new Node(); break; 
							break;
						case 125:
							#line 415 "syntax"
 $$ = new Node(); break; 
							break;
						case 126:
							#line 416 "syntax"
 $$ = new Node(); break; 
							break;
						case 127:
							#line 417 "syntax"
 $$ = new Node(); break; 
							break;
						case 128:
							#line 418 "syntax"
 $$ = new Node(); break; 
							break;
						case 130:
							#line 423 "syntax"
 $$ = new Node(); break; 
							break;
						case 131:
							#line 424 "syntax"
 $$ = new Node(); break; 
							break;
						case 133:
							#line 429 "syntax"
 $$ = new Node(); break; 
							break;
						case 135:
							#line 434 "syntax"
 $$ = new Node(); break; 
							break;
						case 137:
							#line 439 "syntax"
 $$ = new Node(); break; 
							break;
						case 139:
							#line 444 "syntax"
 $$ = new Node(); break; 
							break;
						case 141:
							#line 449 "syntax"
 $$ = new Node(); break; 
							break;
						case 143:
							#line 454 "syntax"
 $$ = new Node(); break; 
							break;
						case 144:
							#line 458 "syntax"
 $$ = new Node(); break; 
							break;
					}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) 
						lapg_m[lapg_head--] = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );

					if( DEBUG_SYNTAX )
						System.out.println( MessageFormat.format( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new String(token,0,lapg_size) ) );
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
				break;
			}

		} while( lapg_n.lexem != 0 );

		if( lapg_m[lapg_head].state != @nstates-1 ) {
			error(@errprefix MessageFormat.format( "syntax error before line {0}, column {1}", lapg_n.pos.line, lapg_n.pos.column ) );
			return false;
		};
		return true;
	}
}

