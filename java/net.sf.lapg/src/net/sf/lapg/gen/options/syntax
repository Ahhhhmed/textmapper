#   syntax: generator options definition grammar
#
#   Lapg (Lexical Analyzer and Parser Generator)
#   Copyright (C) 2002-10  Evgeny Gryaznov (inspirer@inbox.ru)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

.lang        "java" 
.prefix      "Optdef"
.package	 "net.sf.lapg.gen.options"
.maxtoken    2048
.breaks		 "on"
.lexemend    "on"
.gentree	 "on"
.positions   "line,offset"
.endpositions "offset"

# Vocabulary

[0]

identifier(String): /[a-zA-Z_][a-zA-Z_0-9]*|'([^\n\\']|\\.)*'/ -1
			{ $lexem = current(); break; }

scon(String):	/"([^\n\\"]|\\.)*"/		{ $lexem = unescape(current(), 1, token.length()-1); break; }
icon(Integer):	/-?[0-9]+/				{ $lexem = Integer.parseInt(current()); break; }

_skip:         /\n|[\t\r ]+/    		{ return false; }
_skip:  /#.*/

';':    /;/
',':	/,/
':':    /:/
'{':	/\{/
'}':	/\}/
'(':	/\(/
')':	/\)/

Lset:		 /set/
Lchoice:	 /choice/
Luint:		 /uint/
Lidentifier: /identifier/
Lqualified:	 /qualified/
Lbool:		 /bool/
Lgroup:		 /group/
Ltitle:		 /title/
Ldefault:	 /default/
Lnotempty:	 /notempty/

# Grammar

input ::=
	groups ;

groups ::=
	groups group | group ;

group ::=
	Lgroup scon '{' declarations '}' ;

declarations ::=
	declarations declaration | declaration ;
	
declaration ::=
	identifier ':' type modifiersopt defaultval optionslistopt ;	

type ::=
	Luint
  | Lidentifier
  | Lqualified
  | Lbool
  | Lbool '(' trueVal = string ',' falseVal = string ')'
  | Lset '(' strings ')'
  | Lchoice '(' strings ')'
;

optionslist ::=
	optionslist ',' option | ';' option ;

option ::=
	Ltitle scon ;

defaultval ::=
	Ldefault scon
  |	Ldefault icon
;

modifiers ::=
	modifiers modifier | modifier ;

modifier ::=
	Lnotempty ;

strings ::=
	strings ',' string | string ;
	
string ::=
	identifier | scon ;	

##################################################################################

%%

${template java_lexer.lexercode}
private String unescape(String s, int start, int end) {
	StringBuilder sb = new StringBuilder();
	end = Math.min(end, s.length());
	for(int i = start; i < end; i++) {
		char c = s.charAt(i);
		if(c == '\\') {
			if(++i == end) {
				break;
			}
			c = s.charAt(i);
			if(c == 'u' || c == 'x') {
				// FIXME process unicode
			} else if(c == 'n') {
				sb.append('\n');
			} else if(c == 'r') {
				sb.append('\r');
			} else if(c == 't') {
				sb.append('\t');
			} else {
				sb.append(c);
			}
		} else {
			sb.append(c);
		}
	} 
	return sb.toString();
}
${end}