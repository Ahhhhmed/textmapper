${cached query classes() = 
	syntax.symbols.select(x|!x.isTerm() && !self->isOptional(x))
	.collect(x|self->symbolClasses(x, self->symbolKind(x))) }

${cached query symbolClasses(sym, kind) =
	kind == 'enum' ? 
		[
			kind: 'enum',
			name: sym.name,
			sym: sym,
			values: syntax.rules[sym].collect(rule|rule.getRight().first().target).collect(s|
				[
					name: s.name,
					sym: s
				])
		] :
	kind == 'interface' ?
		[
			kind: 'interface',
			name: sym.name,
			sym: sym
		] :
	kind == 'class' ?
		[
			kind: 'class',
			name: sym.name,
			sym: sym
		] :
	(kind == 'leftlist' || kind == 'rightlist') && self->hasItemClass(sym) ?
		[
			kind: 'class',
			name: sym.name + '_item',
			sym: sym
		] :
	null }

${cached query symbolKind(sym) =
	self->isEnum(sym) ? 'enum' :
	self->isLeftList(sym) ? 'leftlist' :
	self->isRightList(sym) ? 'rightlist' :
	self->isInterface(sym) ? 'interface' : 'class'}

${query isSimpleTerm() = self.isTerm() && !self.type}

${cached query isInterface(sym) = syntax.rules[sym].
	forAll(x|x.getRight().length == 1 && !x.getRight().first().target.isTerm())}

${cached query isEnum(sym) = syntax.rules[sym].
	forAll(x|x.getRight().length == 1 && x.getRight().first().target->isSimpleTerm())}
	
${cached query isOptional(sym) = syntax.rules[sym].size() == 2 &&
	syntax.rules[sym].collect(x|x.getRight().length)->containsBothOnly(0,1)}
	
${cached query getOptionalTarget(sym) = syntax.rules[sym].collect(x|x.getRight()).first().target}

${cached query isLeftList(sym) = syntax.rules[sym].
	collect(x|self->intListRuleKind(x))->containsBothOnly('leftrec', 'normal')}

${cached query isRightList(sym) = syntax.rules[sym].
	collect(x|self->intListRuleKind(x))->containsBothOnly('rightrec', 'normal')}

${query containsBothOnly(x,y) = 
	self.contains(x) && self.contains(y) && self.forAll(q|q==x || q==y)}

${cached query intListRuleKind(rule) = 
	rule.getRight().length == 0 
		? 'empty'
		: (rule.getRight().select(x|x.target == rule.getLeft()).size() == 1
			? (rule.getRight().first().target == rule.getLeft() 
				? 'leftrec'
				: (rule.getRight().last().target == rule.getLeft()
					? 'rightrec'
					: 'unknown'
				  )
			  )
			: (rule.getRight().select(x|x.target == rule.getLeft()).size() == 0
				? 'normal'
				: 'unknown'
			  )	
		  )
}

${cached query getListItems(sym) = syntax.rules[sym].collect(x|x.getRight()).collectUnique(x|x.target).reject(x|x == sym || x->isSimpleTerm())}

${query hasItemClass(sym) = self->getListItems(sym).length > 1}

${query hasListItem(sym) = self->getListItems(sym).length == 1}

${query getListItem(sym) = self->getListItems(sym).first()}
