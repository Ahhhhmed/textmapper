${template unit-}
${file 'astmodel.txt'-}
// sample ast in generic form

${foreach cl in self->ast.classes()-}
${self->('handle_' + cl.kind)(cl)} 
${end-}

${end-}
${end}


${template handle_enum(cl)-}
enum ${cl.name} {
${foreach const in cl.values-}
	${const.name}, 
${end-}
}
${end}

${template handle_class(cl)-}
class ${cl.name} ${call implements(cl,'implements')}{
}
${end}

${template handle_interface(cl)-}
class ${cl.name} ${call implements(cl,'extends')}{
}
${end}

${template implements(cl,prefix)-}
${if cl.implements.length > 0-}
${prefix} ${foreach i in cl.implements.collect(x|self->ast.symbolClasses(x, self->ast.symbolKind(x)))-}
${i.name} ${end}${end-}
${end}