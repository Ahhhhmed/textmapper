${template unit-}
${call astBaseInterface-}
${call astBaseClass-}
${foreach psym in syntax.symbols.select(x|!x.isTerm() && !self->isOptional(x))-}
${switch self->symbolKind(psym)-}
${case 'enum'}${call astEnum(psym)-}
${case 'interface'}${call astInterface(psym)-}
${case 'class'}${call astClass(psym)-}
${else}${if self->symbolKind(psym)->isListKind() && self->hasItemClass(psym)}${call astListItemClass(psym)}${end-}
${end-}
${end-}
${end}



${cached query getImplemented(sym) = syntax.rules.with(sym).select(x|self->isInterface(x.getLeft())
	&& x.getRight().first().target == sym).collectUnique(x|x.getLeft())}

${template implementedInterfaces(sym, prefix)-}
${if self->getImplemented(sym).size() > 0-}
${prefix}${foreach impl in self->getImplemented(sym)}${if index > 0}, ${end}${self->refName(impl)}${end-}
${end-}
${end}




${cached query interfaceName() = 
	util.uniqueId('I' + util.toCamelCase(self.name, true)->escapeJavaReserved(), '__classes__')}
	
${template astInterface(psym)-}
${file 'ast/' + psym->interfaceName() + '.java'-}
package ${call java.package}.ast;

public interface ${psym->interfaceName()}${call implementedInterfaces(psym,' extends ')} {

${foreach rule in self->interfaceRules()-}
// $rule (${self->intListRuleKind(rule)})
${end-}
	
}
${end-}
${end}




${cached query className() = 
	util.uniqueId(util.toCamelCase(self.name, true)->escapeJavaReserved(), '__classes__')}

${template astClass(psym)-}
${file 'ast/' + psym->className() + '.java'-}
package ${call java.package}.ast;

${foreach rule in syntax.rules[psym]-}
// $rule (${self->intListRuleKind(rule)})
${end-}
public class ${psym->className()} extends ${opts.astprefix}Node${call implementedInterfaces(psym,' implements ')} {

${foreach prop in self->allFields(psym)-}
	private ${prop.type} ${prop.name};
${end-}

	public ${psym->className()}(${foreach prop in self->allFields(psym)}${prop.type} ${prop.name}, ${end}${call java.package}.${opts.prefix}Tree.@TextSource input, int start, int end) {
		super(input, start, end);
${foreach prop in self->allFields(psym)-}
		this.${prop.name} = ${prop.name};
${end-}
	}

${foreach prop in self->allFields(psym)-}
	public ${prop.type} get${util.toCamelCase(prop.name, true)}() {
		return ${prop.name};
	}
${end-}	
}
${end-}
${end}




${cached query listItemName() = 
	util.uniqueId(util.toCamelCase(self.name, true) + 'Item', '__classes__')}

${template astListItemClass(psym)-}
${file 'ast/' + psym->listItemName() + '.java'-}
package ${call java.package}.ast;

public class ${psym->listItemName()} {
	// TODO	
}
${end-}
${end}




${template astEnum(psym)-}
${file 'ast/' + psym->className() + '.java'-}
package ${call java.package}.ast;

public enum ${psym->className()} {	
${foreach rule in syntax.rules[psym]-}
	${rule.getRight().first().target.name.toUpperCase()},
${end-}
}
${end-}
${end}




${template astBaseInterface-}
${file 'ast/I' + opts.astprefix + 'Node.java'-}
package ${call java.package}.ast;

public interface I${opts.astprefix}Node {
	int getOffset();
	int getEndOffset();
	${call java.package}.${opts.prefix}Tree.@TextSource getInput();
	//void accept(Visitor v);
}
${end-}
${end}




${template astBaseClass-}
${file 'ast/' + opts.astprefix + 'Node.java'-}
package ${call java.package}.ast;

public abstract class ${opts.astprefix}Node implements I${opts.astprefix}Node {
	
	protected ${call java.package}.${opts.prefix}Tree.@TextSource fInput;
	protected int fStart;
	protected int fEnd;

	public ${opts.astprefix}Node(${call java.package}.${opts.prefix}Tree.@TextSource input, int start, int end) {
		this.fStart = start;
		this.fEnd = end;
		this.fInput = input;
	}

	public int getOffset() {
		return fStart;
	}

	public int getEndOffset() {
		return fEnd;
	}

	public ${call java.package}.${opts.prefix}Tree.@TextSource getInput() {
		return fInput;
	}

	public String toString() {
		return fInput == null ? "" : fInput.getText(fStart, fEnd);
	}

	//public abstract void accept(Visitor v);
}

${end-}
${end}



${cached query symbolKind(sym) =
	self->isEnum(sym) ? 'enum' :
	self->isLeftList(sym) ? 'leftlist' :
	self->isRightList(sym) ? 'rightlist' :
	self->isInterface(sym) ? 'interface' : 'class'}

${query isSimpleTerm() = self.isTerm() && !self.type}

${cached query isInterface(sym) = syntax.rules[sym].
	forAll(x|x.getRight().length == 1 && !x.getRight().first().target.isTerm())}

${cached query isEnum(sym) = syntax.rules[sym].
	forAll(x|x.getRight().length == 1 && x.getRight().first().target->isSimpleTerm())}
	
${cached query isOptional(sym) = syntax.rules[sym].size() == 2 &&
	syntax.rules[sym].collect(x|x.getRight().length)->containsBothOnly(0,1)}
	
${cached query getOptionalTarget(sym) = syntax.rules[sym].collect(x|x.getRight()).first().target}

${cached query isLeftList(sym) = syntax.rules[sym].
	collect(x|self->intListRuleKind(x))->containsBothOnly('leftrec', 'normal')}

${cached query isRightList(sym) = syntax.rules[sym].
	collect(x|self->intListRuleKind(x))->containsBothOnly('rightrec', 'normal')}

${query containsBothOnly(x,y) = 
	self.contains(x) && self.contains(y) && self.forAll(q|q==x || q==y)}

${cached query intListRuleKind(rule) = 
	rule.getRight().length == 0 
		? 'empty'
		: (rule.getRight().select(x|x.target == rule.getLeft()).size() == 1
			? (rule.getRight().first().target == rule.getLeft() 
				? 'leftrec'
				: (rule.getRight().last().target == rule.getLeft()
					? 'rightrec'
					: 'unknown'
				  )
			  )
			: (rule.getRight().select(x|x.target == rule.getLeft()).size() == 0
				? 'normal'
				: 'unknown'
			  )	
		  )
}




${query refName(sym) = self->isInterface(sym) ? sym->interfaceName() : sym->className() }

${query escapeJavaReserved() = 
	['String', 'Integer', 'Long', 'Boolean', 'LinkedHashMap', 'HashMap', 'Map',
	 'List', 'ArrayList', 'LinkedList', 'TextSource'].contains(self) ? '_' + self : self }




${cached query getListItems(sym) = syntax.rules[sym].collect(x|x.getRight()).collectUnique(x|x.target).reject(x|x == sym || x->isSimpleTerm())}

${query hasItemClass(sym) = self->getListItems(sym).length > 1}

${query hasListItem(sym) = self->getListItems(sym).length == 1}

${query getListItem(sym) = self->getListItems(sym).first()}


${cached query interfaceRules() = syntax.rules.select(x|
	self->isInterface(x.getLeft()) || (self->isOptional(x.getLeft()) && x.getRight().size() == 1))}

${cached query propertyName(psym) = 
	util.uniqueId(util.toCamelCase(self, false)->escapeJavaReserved(), '__prop__' + psym.name)}

${cached query propInternal(alias,target,container) =
	target->isSimpleTerm() ? null : [name:(alias?alias:target.name)->propertyName(container), type:self->getType(target)]}

${cached query property(symref, container) = self->propInternal(symref.alias ? symref.alias : '', symref.target, container)}

${cached query allFields(psym) = syntax.rules[psym].
	collect(x|x.getRight()).collectUnique(x|self->property(x, psym))}

${query isClassifierKind() = self.equals('class') || self.equals('interface') || self.equals('enum')}

${query isListKind() = self.equals('leftlist') || self.equals('rightlist')}
	
${cached query getType(sym) =
 	sym.type ? sym.type :
 	self->isOptional(sym) ? self->getType(self->getOptionalTarget(sym)) :
 	self->symbolKind(sym)->isClassifierKind() ? self->refName(sym) :
 	self->symbolKind(sym)->isListKind() ? 'java.util.@List<' + self->getListItemType(sym) + '>' :
 	'Object'
}
 
${query getListItemType(sym) =
	self->hasItemClass(sym) ? sym->listItemName() :
	self->hasListItem(sym) ? self->getType(self->getListItem(sym)) :
	'Object'
}

${template createEnum(rule)-}
$$ = ${call java.package}.ast.@${rule.getLeft()->className()}.${rule.getRight().first().target.name.toUpperCase()};
${end}


${cached query astcode(rule) =
	self->isEnum(rule.getLeft()) ? self->createEnum(rule) :
	null 
}
