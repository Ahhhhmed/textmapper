
${template unit-}
${call astBaseInterface-}
${call astBaseClass-}
${for i : parser.nterms, parser.nsyms-1 -}
${call astClass(parser.sym[i])-}
${end-}
${end}


${template astClass(psym)-}
${file 'ast/' + psym.name + '.java'-}
package ${call java.package}.ast;

public class ${psym.name} {

// ${self->isInterface(psym)}
// ${self->isEnum(psym)}

${foreach rule in self->rules(psym)-}
// $rule
${end-}
	
}
${end-}
${end}


${template astBaseInterface-}
${file 'ast/I' + opts.astprefix + 'Node.java'-}
package ${call java.package}.ast;

public interface I${opts.astprefix}Node {
	int getOffset();
	int getEndOffset();
	${call java.package}.${opts.prefix}Tree.@TextSource getInput();
	//void accept(Visitor v);
}
${end-}
${end}

${template astBaseClass-}
${file 'ast/' + opts.astprefix + 'Node.java'-}
package ${call java.package}.ast;

public abstract class ${opts.astprefix}Node implements I${opts.astprefix}Node {
	
	protected ${call java.package}.${opts.prefix}Tree.@TextSource fInput;
	protected int fStart;
	protected int fEnd;

	public ${opts.astprefix}Node(${call java.package}.${opts.prefix}Tree.@TextSource input, int start, int end) {
		this.fStart = start;
		this.fEnd = end;
		this.fInput = input;
	}

	public int getOffset() {
		return fStart;
	}

	public int getEndOffset() {
		return fEnd;
	}

	public ${call java.package}.${opts.prefix}Tree.@TextSource getInput() {
		return fInput;
	}

	public String toString() {
		return fInput == null ? "" : fInput.getText(fStart, fEnd);
	}

	//public abstract void accept(Visitor v);
}

${end-}
${end}


${query rules(sym) = syntax.rules.select(x|x.getLeft() == sym) }

${query isInterface(sym) = self->rules(sym).
		forAll(x|x.getRight().length == 1 && !x.getRight().first().target.isTerm())}

${query isEnum(sym) = self->rules(sym).
		forAll(x|x.getRight().length == 1 && x.getRight().first().target.isTerm())}
