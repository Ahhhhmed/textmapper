#   syntax: lalr1 generator source grammar
#
#   Lapg (Lexical Analyzer and Parser Generator)
#   Copyright (C) 2002-08  Evgeny Gryaznov (inspirer@inbox.ru)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

.lang        "java" 
.prefix      "Lapg"
.package	 "net.sf.lapg.parser"
.maxtoken    2048
.breaks		 "on"
.gentree	 "on"
.positions   "line,offset"
.endpositions "offset"

# Vocabulary

[0]

identifier(String): /[a-zA-Z_][a-zA-Z_0-9]*|'([^\n\\']|\\.)*'/
			{ $lexem = current(); break; }

regexp(String):	/\/([^\/\\\n]|\\.)*\//	{ $lexem = token.toString().substring(1, token.length()-1); break; }
scon(String):	/"([^\n\\"]|\\.)*"/		{ $lexem = unescape(current(), 1, token.length()-1); break; }
icon(Integer):	/-?[0-9]+/				{ $lexem = Integer.parseInt(current()); break; }

eoi:           /\n%%.*/					{ templatesStart = lapg_n.endoffset; break; }
'%':           /\n%/
_skip:         /\n|[\t\r ]+/    		{ return false; }
_skip_comment:  /#.*/					{ return !skipComments; }

'::=':  /::=/
'|':    /\|/
'=':	/=/
';':    /;/
'.':    /\./
',':	/,/
':':    /:/
'[':    /\[/
']':    /\]/
'(':	/\(/
')':	/\)/
'<<':   /<</
'<':	/</
'>':	/>/
'*':	/*/
'?':	/?/
'&':	/&/
'@':	/@/

'{':	/{/		{ deep = 1; group = 1; break; }

[1]

_skip:	/'([^\n\\']|\\.)*'/
_skip:	/"([^\n\\"]|\\.)*"/
_skip:	/[^'"{}]+/
'i{':	/{/				{ deep++; break; }
'}':	/}/				{ if( --deep == 0 ) group = 0; break; }

# Grammar

input (AstRoot) ::=
	optionsopt lexer_parts grammar_parts				{  $$ = new AstRoot($optionsopt, $lexer_parts, $grammar_parts, source, ${input.offset}, ${input.endoffset}); }  
;

options (List<AstOption>) ::= 
	  option											{ $$ = new ArrayList<AstOption>(16); $options.add($option); }  
	| list=options option								{ $list.add($option); } 
;

option (AstOption) ::=
	  '.' identifier expression 						{ $$ = new AstOption($identifier, $expression, source, ${option.offset}, ${option.endoffset}); }
;

symbol (AstIdentifier) ::=
	identifier											{ $$ = new AstIdentifier($identifier, source, ${symbol.offset}, ${symbol.endoffset}); } 
;

type (String) ::=
	  '(' scon ')'										{ $$ = $scon; }
	| '(' type_part_list ')'							{ $$ = source.getText(${self[0].offset}+1, ${self[2].endoffset}-1); }
;

type_part_list ::=
	type_part_list type_part | type_part ;

type_part ::=
	'<' | '>' | '[' | ']' | identifier | '*' | '.' | ',' | '?' | '@' | '&' | '(' type_part_listopt ')'
;

pattern (AstRegexp) ::=
	regexp												{ $$ = new AstRegexp($regexp, source, ${pattern.offset}, ${pattern.endoffset}); } 
;

lexer_parts (List<AstLexerPart>) ::= 
	  lexer_part 										{ $$ = new ArrayList<AstLexerPart>(64); $lexer_parts.add($lexer_part); }
	| list=lexer_parts lexer_part						{ $list.add($lexer_part); }
;

lexer_part (AstLexerPart) ::=
	  '[' icon_list ']'									{ $$ = new AstGroupsSelector($icon_list, source, ${lexer_part.offset}, ${lexer_part.endoffset}); }
	| symbol typeopt ':'								{ $$ = new AstLexeme($symbol, $typeopt, null, null, null, source, ${lexer_part.offset}, ${lexer_part.endoffset}); }
	| symbol typeopt ':' pattern iconopt commandopt		{ $$ = new AstLexeme($symbol, $typeopt, $pattern, $iconopt, $commandopt, source, ${lexer_part.offset}, ${lexer_part.endoffset}); }
;

icon_list (List<Integer>) ::=
	  icon 												{ $$ = new ArrayList<Integer>(4); $icon_list.add($icon); } 
	| list=icon_list icon  								{ $list.add($icon); }
;

grammar_parts (List<AstGrammarPart>) ::=
	  grammar_part 										{ $$ = new ArrayList<AstGrammarPart>(64); $grammar_parts.add($grammar_part); }
	| list=grammar_parts grammar_part					{ $list.add($grammar_part); }
;

grammar_part (AstGrammarPart) ::= 
	  symbol typeopt '::=' rules ';'					{ $$ = new AstNonTerm($symbol, $typeopt, $rules, null, source, ${grammar_part.offset}, ${grammar_part.endoffset}); }
	| annotations symbol typeopt '::=' rules ';'		{ $$ = new AstNonTerm($symbol, $typeopt, $rules, $annotations, source, ${grammar_part.offset}, ${grammar_part.endoffset}); }
	| '%' identifier symbols ';'						{ $$ = new AstDirective($identifier, $symbols, source, ${grammar_part.offset}, ${grammar_part.endoffset}); }
; 

symbols (List<AstIdentifier>) ::= 
	  symbol 											{ $$ = new ArrayList<AstIdentifier>(); $symbols.add($symbol); }
	| list=symbols symbol								{ $list.add($symbol); }
;

rules (List<AstRule>) ::= 
	  rule0												{ $$ = new ArrayList<AstRule>(); $rules.add($rule0); }
	| list=rules '|' rule0								{ $list.add($rule0); }
;

rule0 (AstRule) ::=
	  annotationsopt rulesyms commandopt rule_priorityopt
														{ $$ = new AstRule($rulesyms, $commandopt, $rule_priorityopt, $annotationsopt, source, ${rule0.offset}, ${rule0.endoffset}); }
	| annotationsopt commandopt rule_priorityopt  		{ $$ = new AstRule(null, $commandopt, $rule_priorityopt, $annotationsopt, source, ${rule0.offset}, ${rule0.endoffset}); }
;

rulesyms (List<AstRuleSymbol>) ::=
	  rulesym											{ $$ = new ArrayList<AstRuleSymbol>(); $rulesyms.add($rulesym); }
	| list=rulesyms rulesym 							{ $list.add($rulesym); }
;

rulesym (AstRuleSymbol) ::=
	  commandopt identifier '=' symbol annotationsopt	{ $$ = new AstRuleSymbol($commandopt, $identifier, $symbol, $annotationsopt, source, ${commandopt.offset}, ${symbol.endoffset}); }
	| commandopt symbol annotationsopt					{ $$ = new AstRuleSymbol($commandopt, null, $symbol, $annotationsopt, source, ${commandopt.offset}, ${symbol.endoffset}); }
;

annotations (java.util.@Map<String,Object>) ::=
	'['	map_entries ']'									{ $$ = $map_entries; }
;

map_entries (java.util.@Map<String,Object>) ::=
	  identifier ':' expression							{ $$ = new java.util.@HashMap<String,Object>(); $map_entries.put($identifier, $expression); }
	| map_entries ',' identifier ':' expression			{ $map_entries#0.put($identifier, $expression); }
;

expression ::=
	  scon
	| icon
	| symbol
	| '[' map_entries ']'								{ $$ = $map_entries; }
	| '[' expression_list ']'							{ $$ = $expression_list; }
;

expression_list (List<Object>) ::=
	expression											{ $$ = new ArrayList(); $expression_list.add($expression); }
	| expression_list ',' expression					{ $expression_list#0.add($expression); }
;

rule_priority (AstIdentifier) ::=
	'<<' symbol											{ $$ = $symbol; } 
;

command (AstCode) ::=
	'{' command_tokensopt '}'							{ $$ = new AstCode(source, ${self[0].offset}+1, ${self[2].endoffset}-1); }  
;

command_tokens ::=
	command_tokens command_token | command_token ;

command_token ::=
	'i{' command_tokensopt '}' 
;

##################################################################################

%%

${template java.imports-}
${call base-}
import net.sf.lapg.parser.ast.*;
${end}

${template java_lexer.lexercode}
private int deep = 0;
private int templatesStart = -1;
private boolean skipComments = true;

int getTemplatesStart() {
	return templatesStart;
}

public void setSkipComments(boolean skip) {
	this.skipComments = skip;
}

private String unescape(String s, int start, int end) {
	StringBuilder sb = new StringBuilder();
	end = Math.min(end, s.length());
	for(int i = start; i < end; i++) {
		char c = s.charAt(i);
		if(c == '\\') {
			if(++i == end) {
				break;
			}
			c = s.charAt(i);
			if(c == 'u' || c == 'x') {
				// FIXME process unicode
			} else if(c == 'n') {
				sb.append('\n');
			} else if(c == 'r') {
				sb.append('\r');
			} else if(c == 't') {
				sb.append('\t');
			} else {
				sb.append(c);
			}
		} else {
			sb.append(c);
		}
	} 
	return sb.toString();
}
${end}


${template java.classcode}
${call base-}
net.sf.lapg.parser.LapgTree.@TextSource source;
${end}

${template java_tree.createParser-}
${call base-}
parser.source = source;
${end}

${template java_tree.parseStatements-}
${call base-}
if(result != null) {
	result.setTemplatesStart(lexer.getTemplatesStart());
}
${end}