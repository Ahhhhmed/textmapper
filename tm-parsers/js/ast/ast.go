// generated by Textmapper; DO NOT EDIT

package ast

type Node struct {
}

// Interfaces.

type JsNode interface {
	jsNodeNode()
}

// All types implement JsNode.
func (*AdditiveExpression) jsNodeNode() {}
func (*Arguments) jsNodeNode() {}
func (*ArrayLiteral) jsNodeNode() {}
func (*ArrayPattern) jsNodeNode() {}
func (*ArrowFunction) jsNodeNode() {}
func (*AssignmentExpression) jsNodeNode() {}
func (*AssignmentOperator) jsNodeNode() {}
func (*BindingIdentifier) jsNodeNode() {}
func (*BindingRestElement) jsNodeNode() {}
func (*BitwiseANDExpression) jsNodeNode() {}
func (*BitwiseORExpression) jsNodeNode() {}
func (*BitwiseXORExpression) jsNodeNode() {}
func (*Block) jsNodeNode() {}
func (*Body) jsNodeNode() {}
func (*BreakStatement) jsNodeNode() {}
func (*CallExpression) jsNodeNode() {}
func (*Case) jsNodeNode() {}
func (*Catch) jsNodeNode() {}
func (*Class) jsNodeNode() {}
func (*ClassBody) jsNodeNode() {}
func (*ClassExpr) jsNodeNode() {}
func (*CommaExpression) jsNodeNode() {}
func (*ComputedPropertyName) jsNodeNode() {}
func (*ConciseBody) jsNodeNode() {}
func (*ConditionalExpression) jsNodeNode() {}
func (*ContinueStatement) jsNodeNode() {}
func (*DebuggerStatement) jsNodeNode() {}
func (*Default) jsNodeNode() {}
func (*DoWhileStatement) jsNodeNode() {}
func (*ElementBinding) jsNodeNode() {}
func (*EmptyDecl) jsNodeNode() {}
func (*EmptyStatement) jsNodeNode() {}
func (*EqualityExpression) jsNodeNode() {}
func (*ExponentiationExpression) jsNodeNode() {}
func (*ExportClause) jsNodeNode() {}
func (*ExportDeclaration) jsNodeNode() {}
func (*ExportDefault) jsNodeNode() {}
func (*ExportSpecifier) jsNodeNode() {}
func (*ExpressionStatement) jsNodeNode() {}
func (*Extends) jsNodeNode() {}
func (*Finally) jsNodeNode() {}
func (*ForBinding) jsNodeNode() {}
func (*ForCondition) jsNodeNode() {}
func (*ForFinalExpression) jsNodeNode() {}
func (*ForInStatement) jsNodeNode() {}
func (*ForInStatementWithVar) jsNodeNode() {}
func (*ForOfStatement) jsNodeNode() {}
func (*ForOfStatementWithVar) jsNodeNode() {}
func (*ForStatement) jsNodeNode() {}
func (*ForStatementWithVar) jsNodeNode() {}
func (*Function) jsNodeNode() {}
func (*FunctionExpression) jsNodeNode() {}
func (*Generator) jsNodeNode() {}
func (*GeneratorExpression) jsNodeNode() {}
func (*GeneratorMethod) jsNodeNode() {}
func (*Getter) jsNodeNode() {}
func (*IdentifierReference) jsNodeNode() {}
func (*IfStatement) jsNodeNode() {}
func (*ImportDeclaration) jsNodeNode() {}
func (*ImportSpecifier) jsNodeNode() {}
func (*IndexAccess) jsNodeNode() {}
func (*Initializer) jsNodeNode() {}
func (*JSXAttributeName) jsNodeNode() {}
func (*JSXClosingElement) jsNodeNode() {}
func (*JSXElement) jsNodeNode() {}
func (*JSXElementName) jsNodeNode() {}
func (*JSXExpression) jsNodeNode() {}
func (*JSXLiteral) jsNodeNode() {}
func (*JSXNormalAttribute) jsNodeNode() {}
func (*JSXOpeningElement) jsNodeNode() {}
func (*JSXSelfClosingElement) jsNodeNode() {}
func (*JSXSpreadAttribute) jsNodeNode() {}
func (*JSXText) jsNodeNode() {}
func (*LabelIdentifier) jsNodeNode() {}
func (*LabelledStatement) jsNodeNode() {}
func (*LexicalBinding) jsNodeNode() {}
func (*LexicalDeclaration) jsNodeNode() {}
func (*Literal) jsNodeNode() {}
func (*LiteralPropertyName) jsNodeNode() {}
func (*LogicalANDExpression) jsNodeNode() {}
func (*LogicalORExpression) jsNodeNode() {}
func (*Method) jsNodeNode() {}
func (*Module) jsNodeNode() {}
func (*ModuleSpecifier) jsNodeNode() {}
func (*MultiplicativeExpression) jsNodeNode() {}
func (*NameSpaceImport) jsNodeNode() {}
func (*NamedImports) jsNodeNode() {}
func (*NewExpression) jsNodeNode() {}
func (*NewTarget) jsNodeNode() {}
func (*ObjectLiteral) jsNodeNode() {}
func (*ObjectPattern) jsNodeNode() {}
func (*Parameter) jsNodeNode() {}
func (*Parameters) jsNodeNode() {}
func (*Parenthesized) jsNodeNode() {}
func (*PostDec) jsNodeNode() {}
func (*PostInc) jsNodeNode() {}
func (*PreDec) jsNodeNode() {}
func (*PreInc) jsNodeNode() {}
func (*Property) jsNodeNode() {}
func (*PropertyAccess) jsNodeNode() {}
func (*PropertyBinding) jsNodeNode() {}
func (*Regexp) jsNodeNode() {}
func (*RelationalExpression) jsNodeNode() {}
func (*RestParameter) jsNodeNode() {}
func (*ReturnStatement) jsNodeNode() {}
func (*Setter) jsNodeNode() {}
func (*ShiftExpression) jsNodeNode() {}
func (*ShorthandProperty) jsNodeNode() {}
func (*SingleNameBinding) jsNodeNode() {}
func (*SpreadElement) jsNodeNode() {}
func (*StaticMethod) jsNodeNode() {}
func (*SuperExpression) jsNodeNode() {}
func (*SwitchStatement) jsNodeNode() {}
func (*SyntaxError) jsNodeNode() {}
func (*TaggedTemplate) jsNodeNode() {}
func (*TemplateLiteral) jsNodeNode() {}
func (*This) jsNodeNode() {}
func (*ThrowStatement) jsNodeNode() {}
func (*TryStatement) jsNodeNode() {}
func (*UnaryExpression) jsNodeNode() {}
func (*VariableDeclaration) jsNodeNode() {}
func (*VariableStatement) jsNodeNode() {}
func (*WhileStatement) jsNodeNode() {}
func (*WithStatement) jsNodeNode() {}
func (*Yield) jsNodeNode() {}

type BindingPattern interface {
	bindingPatternNode()
}

// bindingPatternNode() ensures that only the following types can be
// assigned to an BindingPattern.
//
func (*ArrayPattern) bindingPatternNode() {}
func (*ObjectPattern) bindingPatternNode() {}

type CaseClause interface {
	caseClauseNode()
}

// caseClauseNode() ensures that only the following types can be
// assigned to an CaseClause.
//
func (*Case) caseClauseNode() {}
func (*Default) caseClauseNode() {}

type ClassElement interface {
	classElementNode()
}

// classElementNode() ensures that only the following types can be
// assigned to an ClassElement.
//
func (*EmptyDecl) classElementNode() {}
func (*GeneratorMethod) classElementNode() {}
func (*Getter) classElementNode() {}
func (*Method) classElementNode() {}
func (*Setter) classElementNode() {}
func (*StaticMethod) classElementNode() {}

type Declaration interface {
	declarationNode()
}

// declarationNode() ensures that only the following types can be
// assigned to an Declaration.
//
func (*Class) declarationNode() {}
func (*Function) declarationNode() {}
func (*Generator) declarationNode() {}
func (*LexicalDeclaration) declarationNode() {}

type ElementPattern interface {
	elementPatternNode()
}

// elementPatternNode() ensures that only the following types can be
// assigned to an ElementPattern.
//
func (*ElementBinding) elementPatternNode() {}
func (*SingleNameBinding) elementPatternNode() {}
func (*SyntaxError) elementPatternNode() {}

type ExportElement interface {
	exportElementNode()
}

// exportElementNode() ensures that only the following types can be
// assigned to an ExportElement.
//
func (*ExportSpecifier) exportElementNode() {}
func (*SyntaxError) exportElementNode() {}

type Expression interface {
	expressionNode()
}

// expressionNode() ensures that only the following types can be
// assigned to an Expression.
//
func (*AdditiveExpression) expressionNode() {}
func (*ArrayLiteral) expressionNode() {}
func (*ArrowFunction) expressionNode() {}
func (*AssignmentExpression) expressionNode() {}
func (*BitwiseANDExpression) expressionNode() {}
func (*BitwiseORExpression) expressionNode() {}
func (*BitwiseXORExpression) expressionNode() {}
func (*CallExpression) expressionNode() {}
func (*ClassExpr) expressionNode() {}
func (*CommaExpression) expressionNode() {}
func (*ConditionalExpression) expressionNode() {}
func (*EqualityExpression) expressionNode() {}
func (*ExponentiationExpression) expressionNode() {}
func (*FunctionExpression) expressionNode() {}
func (*GeneratorExpression) expressionNode() {}
func (*IdentifierReference) expressionNode() {}
func (*IndexAccess) expressionNode() {}
func (*JSXElement) expressionNode() {}
func (*Literal) expressionNode() {}
func (*LogicalANDExpression) expressionNode() {}
func (*LogicalORExpression) expressionNode() {}
func (*MultiplicativeExpression) expressionNode() {}
func (*NewExpression) expressionNode() {}
func (*NewTarget) expressionNode() {}
func (*ObjectLiteral) expressionNode() {}
func (*Parenthesized) expressionNode() {}
func (*PostDec) expressionNode() {}
func (*PostInc) expressionNode() {}
func (*PreDec) expressionNode() {}
func (*PreInc) expressionNode() {}
func (*PropertyAccess) expressionNode() {}
func (*Regexp) expressionNode() {}
func (*RelationalExpression) expressionNode() {}
func (*ShiftExpression) expressionNode() {}
func (*SuperExpression) expressionNode() {}
func (*TaggedTemplate) expressionNode() {}
func (*TemplateLiteral) expressionNode() {}
func (*This) expressionNode() {}
func (*UnaryExpression) expressionNode() {}
func (*Yield) expressionNode() {}

type JSXAttribute interface {
	jSXAttributeNode()
}

// jSXAttributeNode() ensures that only the following types can be
// assigned to an JSXAttribute.
//
func (*JSXNormalAttribute) jSXAttributeNode() {}
func (*JSXSpreadAttribute) jSXAttributeNode() {}

type JSXAttributeValue interface {
	jSXAttributeValueNode()
}

// jSXAttributeValueNode() ensures that only the following types can be
// assigned to an JSXAttributeValue.
//
func (*JSXElement) jSXAttributeValueNode() {}
func (*JSXExpression) jSXAttributeValueNode() {}
func (*JSXLiteral) jSXAttributeValueNode() {}

type JSXChild interface {
	jSXChildNode()
}

// jSXChildNode() ensures that only the following types can be
// assigned to an JSXChild.
//
func (*JSXElement) jSXChildNode() {}
func (*JSXExpression) jSXChildNode() {}
func (*JSXText) jSXChildNode() {}

type MethodDefinition interface {
	methodDefinitionNode()
}

// methodDefinitionNode() ensures that only the following types can be
// assigned to an MethodDefinition.
//
func (*GeneratorMethod) methodDefinitionNode() {}
func (*Getter) methodDefinitionNode() {}
func (*Method) methodDefinitionNode() {}
func (*Setter) methodDefinitionNode() {}

type ModuleItem interface {
	moduleItemNode()
}

// moduleItemNode() ensures that only the following types can be
// assigned to an ModuleItem.
//
func (*Block) moduleItemNode() {}
func (*BreakStatement) moduleItemNode() {}
func (*Class) moduleItemNode() {}
func (*ContinueStatement) moduleItemNode() {}
func (*DebuggerStatement) moduleItemNode() {}
func (*DoWhileStatement) moduleItemNode() {}
func (*EmptyStatement) moduleItemNode() {}
func (*ExportDeclaration) moduleItemNode() {}
func (*ExportDefault) moduleItemNode() {}
func (*ExpressionStatement) moduleItemNode() {}
func (*ForInStatement) moduleItemNode() {}
func (*ForInStatementWithVar) moduleItemNode() {}
func (*ForOfStatement) moduleItemNode() {}
func (*ForOfStatementWithVar) moduleItemNode() {}
func (*ForStatement) moduleItemNode() {}
func (*ForStatementWithVar) moduleItemNode() {}
func (*Function) moduleItemNode() {}
func (*Generator) moduleItemNode() {}
func (*IfStatement) moduleItemNode() {}
func (*ImportDeclaration) moduleItemNode() {}
func (*LabelledStatement) moduleItemNode() {}
func (*LexicalDeclaration) moduleItemNode() {}
func (*SwitchStatement) moduleItemNode() {}
func (*SyntaxError) moduleItemNode() {}
func (*ThrowStatement) moduleItemNode() {}
func (*TryStatement) moduleItemNode() {}
func (*VariableStatement) moduleItemNode() {}
func (*WhileStatement) moduleItemNode() {}
func (*WithStatement) moduleItemNode() {}

type NamedImport interface {
	namedImportNode()
}

// namedImportNode() ensures that only the following types can be
// assigned to an NamedImport.
//
func (*ImportSpecifier) namedImportNode() {}
func (*SyntaxError) namedImportNode() {}

type PropertyDefinition interface {
	propertyDefinitionNode()
}

// propertyDefinitionNode() ensures that only the following types can be
// assigned to an PropertyDefinition.
//
func (*GeneratorMethod) propertyDefinitionNode() {}
func (*Getter) propertyDefinitionNode() {}
func (*Method) propertyDefinitionNode() {}
func (*Property) propertyDefinitionNode() {}
func (*Setter) propertyDefinitionNode() {}
func (*ShorthandProperty) propertyDefinitionNode() {}
func (*SyntaxError) propertyDefinitionNode() {}

type PropertyName interface {
	propertyNameNode()
}

// propertyNameNode() ensures that only the following types can be
// assigned to an PropertyName.
//
func (*ComputedPropertyName) propertyNameNode() {}
func (*LiteralPropertyName) propertyNameNode() {}

type PropertyPattern interface {
	propertyPatternNode()
}

// propertyPatternNode() ensures that only the following types can be
// assigned to an PropertyPattern.
//
func (*PropertyBinding) propertyPatternNode() {}
func (*SingleNameBinding) propertyPatternNode() {}
func (*SyntaxError) propertyPatternNode() {}

type Statement interface {
	statementNode()
}

// statementNode() ensures that only the following types can be
// assigned to an Statement.
//
func (*Block) statementNode() {}
func (*BreakStatement) statementNode() {}
func (*ContinueStatement) statementNode() {}
func (*DebuggerStatement) statementNode() {}
func (*DoWhileStatement) statementNode() {}
func (*EmptyStatement) statementNode() {}
func (*ExpressionStatement) statementNode() {}
func (*ForInStatement) statementNode() {}
func (*ForInStatementWithVar) statementNode() {}
func (*ForOfStatement) statementNode() {}
func (*ForOfStatementWithVar) statementNode() {}
func (*ForStatement) statementNode() {}
func (*ForStatementWithVar) statementNode() {}
func (*IfStatement) statementNode() {}
func (*LabelledStatement) statementNode() {}
func (*SwitchStatement) statementNode() {}
func (*ThrowStatement) statementNode() {}
func (*TryStatement) statementNode() {}
func (*VariableStatement) statementNode() {}
func (*WhileStatement) statementNode() {}
func (*WithStatement) statementNode() {}

type StatementListItem interface {
	statementListItemNode()
}

// statementListItemNode() ensures that only the following types can be
// assigned to an StatementListItem.
//
func (*Block) statementListItemNode() {}
func (*BreakStatement) statementListItemNode() {}
func (*Class) statementListItemNode() {}
func (*ContinueStatement) statementListItemNode() {}
func (*DebuggerStatement) statementListItemNode() {}
func (*DoWhileStatement) statementListItemNode() {}
func (*EmptyStatement) statementListItemNode() {}
func (*ExpressionStatement) statementListItemNode() {}
func (*ForInStatement) statementListItemNode() {}
func (*ForInStatementWithVar) statementListItemNode() {}
func (*ForOfStatement) statementListItemNode() {}
func (*ForOfStatementWithVar) statementListItemNode() {}
func (*ForStatement) statementListItemNode() {}
func (*ForStatementWithVar) statementListItemNode() {}
func (*Function) statementListItemNode() {}
func (*Generator) statementListItemNode() {}
func (*IfStatement) statementListItemNode() {}
func (*LabelledStatement) statementListItemNode() {}
func (*LexicalDeclaration) statementListItemNode() {}
func (*SwitchStatement) statementListItemNode() {}
func (*SyntaxError) statementListItemNode() {}
func (*ThrowStatement) statementListItemNode() {}
func (*TryStatement) statementListItemNode() {}
func (*VariableStatement) statementListItemNode() {}
func (*WhileStatement) statementListItemNode() {}
func (*WithStatement) statementListItemNode() {}

// Types.

type AdditiveExpression struct {
	Node
}

func (n *AdditiveExpression) Left() JsNode {
	return nil
}

func (n *AdditiveExpression) Right() JsNode {
	return nil
}

type Arguments struct {
	Node
}

func (n *Arguments) List() JsNode {
	return nil
}

type ArrayLiteral struct {
	Node
}

func (n *ArrayLiteral) List() JsNode {
	return nil
}

type ArrayPattern struct {
	Node
}

func (n *ArrayPattern) BindingRestElement() JsNode {
	return nil
}

func (n *ArrayPattern) ElementPattern() JsNode {
	return nil
}

type ArrowFunction struct {
	Node
}

func (n *ArrowFunction) Parameters() JsNode {
	return nil
}

func (n *ArrowFunction) ConciseBody() JsNode {
	return nil
}

func (n *ArrowFunction) Body() JsNode {
	return nil
}

type AssignmentExpression struct {
	Node
}

func (n *AssignmentExpression) Left() JsNode {
	return nil
}

func (n *AssignmentExpression) Right() JsNode {
	return nil
}

func (n *AssignmentExpression) AssignmentOperator() JsNode {
	return nil
}

type AssignmentOperator struct {
	Node
}

type BindingIdentifier struct {
	Node
}

type BindingRestElement struct {
	Node
}

func (n *BindingRestElement) BindingIdentifier() JsNode {
	return nil
}

type BitwiseANDExpression struct {
	Node
}

func (n *BitwiseANDExpression) Left() JsNode {
	return nil
}

func (n *BitwiseANDExpression) Right() JsNode {
	return nil
}

type BitwiseORExpression struct {
	Node
}

func (n *BitwiseORExpression) Left() JsNode {
	return nil
}

func (n *BitwiseORExpression) Right() JsNode {
	return nil
}

type BitwiseXORExpression struct {
	Node
}

func (n *BitwiseXORExpression) Left() JsNode {
	return nil
}

func (n *BitwiseXORExpression) Right() JsNode {
	return nil
}

type Block struct {
	Node
}

func (n *Block) StatementListItem() JsNode {
	return nil
}

func (n *Block) CaseClause() JsNode {
	return nil
}

type Body struct {
	Node
}

func (n *Body) StatementListItem() JsNode {
	return nil
}

type BreakStatement struct {
	Node
}

func (n *BreakStatement) LabelIdentifier() JsNode {
	return nil
}

type CallExpression struct {
	Node
}

func (n *CallExpression) Expr() JsNode {
	return nil
}

func (n *CallExpression) Arguments() JsNode {
	return nil
}

type Case struct {
	Node
}

func (n *Case) Expression() JsNode {
	return nil
}

func (n *Case) StatementListItem() JsNode {
	return nil
}

type Catch struct {
	Node
}

func (n *Catch) BindingIdentifier() JsNode {
	return nil
}

func (n *Catch) BindingPattern() JsNode {
	return nil
}

func (n *Catch) Block() JsNode {
	return nil
}

type Class struct {
	Node
}

func (n *Class) BindingIdentifier() JsNode {
	return nil
}

func (n *Class) Extends() JsNode {
	return nil
}

func (n *Class) ClassBody() JsNode {
	return nil
}

type ClassBody struct {
	Node
}

func (n *ClassBody) ClassElement() JsNode {
	return nil
}

type ClassExpr struct {
	Node
}

func (n *ClassExpr) BindingIdentifier() JsNode {
	return nil
}

func (n *ClassExpr) Extends() JsNode {
	return nil
}

func (n *ClassExpr) ClassBody() JsNode {
	return nil
}

type CommaExpression struct {
	Node
}

func (n *CommaExpression) Left() JsNode {
	return nil
}

func (n *CommaExpression) Right() JsNode {
	return nil
}

type ComputedPropertyName struct {
	Node
}

func (n *ComputedPropertyName) Expression() JsNode {
	return nil
}

type ConciseBody struct {
	Node
}

func (n *ConciseBody) Expression() JsNode {
	return nil
}

type ConditionalExpression struct {
	Node
}

func (n *ConditionalExpression) Cond() JsNode {
	return nil
}

func (n *ConditionalExpression) Then() JsNode {
	return nil
}

func (n *ConditionalExpression) Else() JsNode {
	return nil
}

type ContinueStatement struct {
	Node
}

func (n *ContinueStatement) LabelIdentifier() JsNode {
	return nil
}

type DebuggerStatement struct {
	Node
}

type Default struct {
	Node
}

func (n *Default) StatementListItem() JsNode {
	return nil
}

type DoWhileStatement struct {
	Node
}

func (n *DoWhileStatement) Statement() JsNode {
	return nil
}

func (n *DoWhileStatement) Expression() JsNode {
	return nil
}

type ElementBinding struct {
	Node
}

func (n *ElementBinding) BindingPattern() JsNode {
	return nil
}

func (n *ElementBinding) Initializer() JsNode {
	return nil
}

type EmptyDecl struct {
	Node
}

type EmptyStatement struct {
	Node
}

type EqualityExpression struct {
	Node
}

func (n *EqualityExpression) Left() JsNode {
	return nil
}

func (n *EqualityExpression) Right() JsNode {
	return nil
}

type ExponentiationExpression struct {
	Node
}

func (n *ExponentiationExpression) Left() JsNode {
	return nil
}

func (n *ExponentiationExpression) Right() JsNode {
	return nil
}

type ExportClause struct {
	Node
}

func (n *ExportClause) ExportElement() JsNode {
	return nil
}

type ExportDeclaration struct {
	Node
}

func (n *ExportDeclaration) ModuleSpecifier() JsNode {
	return nil
}

func (n *ExportDeclaration) ExportClause() JsNode {
	return nil
}

func (n *ExportDeclaration) VariableStatement() JsNode {
	return nil
}

func (n *ExportDeclaration) Declaration() JsNode {
	return nil
}

type ExportDefault struct {
	Node
}

func (n *ExportDefault) Declaration() JsNode {
	return nil
}

func (n *ExportDefault) Expression() JsNode {
	return nil
}

type ExportSpecifier struct {
	Node
}

func (n *ExportSpecifier) IdentifierReference() JsNode {
	return nil
}

func (n *ExportSpecifier) BindingIdentifier() JsNode {
	return nil
}

type ExpressionStatement struct {
	Node
}

func (n *ExpressionStatement) Expression() JsNode {
	return nil
}

type Extends struct {
	Node
}

func (n *Extends) Expression() JsNode {
	return nil
}

type Finally struct {
	Node
}

func (n *Finally) Block() JsNode {
	return nil
}

type ForBinding struct {
	Node
}

func (n *ForBinding) BindingIdentifier() JsNode {
	return nil
}

func (n *ForBinding) BindingPattern() JsNode {
	return nil
}

type ForCondition struct {
	Node
}

func (n *ForCondition) Expression() JsNode {
	return nil
}

type ForFinalExpression struct {
	Node
}

func (n *ForFinalExpression) Expression() JsNode {
	return nil
}

type ForInStatement struct {
	Node
}

func (n *ForInStatement) Var() JsNode {
	return nil
}

func (n *ForInStatement) Object() JsNode {
	return nil
}

func (n *ForInStatement) Statement() JsNode {
	return nil
}

type ForInStatementWithVar struct {
	Node
}

func (n *ForInStatementWithVar) ForBinding() JsNode {
	return nil
}

func (n *ForInStatementWithVar) Object() JsNode {
	return nil
}

func (n *ForInStatementWithVar) Statement() JsNode {
	return nil
}

type ForOfStatement struct {
	Node
}

func (n *ForOfStatement) Var() JsNode {
	return nil
}

func (n *ForOfStatement) Iterable() JsNode {
	return nil
}

func (n *ForOfStatement) Statement() JsNode {
	return nil
}

type ForOfStatementWithVar struct {
	Node
}

func (n *ForOfStatementWithVar) ForBinding() JsNode {
	return nil
}

func (n *ForOfStatementWithVar) Iterable() JsNode {
	return nil
}

func (n *ForOfStatementWithVar) Statement() JsNode {
	return nil
}

type ForStatement struct {
	Node
}

func (n *ForStatement) Var() JsNode {
	return nil
}

func (n *ForStatement) ForCondition() JsNode {
	return nil
}

func (n *ForStatement) ForFinalExpression() JsNode {
	return nil
}

func (n *ForStatement) Statement() JsNode {
	return nil
}

type ForStatementWithVar struct {
	Node
}

func (n *ForStatementWithVar) VariableDeclaration() JsNode {
	return nil
}

func (n *ForStatementWithVar) ForCondition() JsNode {
	return nil
}

func (n *ForStatementWithVar) ForFinalExpression() JsNode {
	return nil
}

func (n *ForStatementWithVar) Statement() JsNode {
	return nil
}

func (n *ForStatementWithVar) LexicalBinding() JsNode {
	return nil
}

type Function struct {
	Node
}

func (n *Function) BindingIdentifier() JsNode {
	return nil
}

func (n *Function) Parameters() JsNode {
	return nil
}

func (n *Function) Body() JsNode {
	return nil
}

type FunctionExpression struct {
	Node
}

func (n *FunctionExpression) BindingIdentifier() JsNode {
	return nil
}

func (n *FunctionExpression) Parameters() JsNode {
	return nil
}

func (n *FunctionExpression) Body() JsNode {
	return nil
}

type Generator struct {
	Node
}

func (n *Generator) BindingIdentifier() JsNode {
	return nil
}

func (n *Generator) Parameters() JsNode {
	return nil
}

func (n *Generator) Body() JsNode {
	return nil
}

type GeneratorExpression struct {
	Node
}

func (n *GeneratorExpression) BindingIdentifier() JsNode {
	return nil
}

func (n *GeneratorExpression) Parameters() JsNode {
	return nil
}

func (n *GeneratorExpression) Body() JsNode {
	return nil
}

type GeneratorMethod struct {
	Node
}

func (n *GeneratorMethod) PropertyName() JsNode {
	return nil
}

func (n *GeneratorMethod) Parameters() JsNode {
	return nil
}

func (n *GeneratorMethod) Body() JsNode {
	return nil
}

type Getter struct {
	Node
}

func (n *Getter) PropertyName() JsNode {
	return nil
}

func (n *Getter) Body() JsNode {
	return nil
}

type IdentifierReference struct {
	Node
}

type IfStatement struct {
	Node
}

func (n *IfStatement) Expression() JsNode {
	return nil
}

func (n *IfStatement) Then() JsNode {
	return nil
}

func (n *IfStatement) Else() JsNode {
	return nil
}

type ImportDeclaration struct {
	Node
}

func (n *ImportDeclaration) BindingIdentifier() JsNode {
	return nil
}

func (n *ImportDeclaration) NameSpaceImport() JsNode {
	return nil
}

func (n *ImportDeclaration) NamedImports() JsNode {
	return nil
}

func (n *ImportDeclaration) ModuleSpecifier() JsNode {
	return nil
}

type ImportSpecifier struct {
	Node
}

func (n *ImportSpecifier) BindingIdentifier() JsNode {
	return nil
}

func (n *ImportSpecifier) IdentifierReference() JsNode {
	return nil
}

type IndexAccess struct {
	Node
}

func (n *IndexAccess) Expr() JsNode {
	return nil
}

func (n *IndexAccess) Index() JsNode {
	return nil
}

type Initializer struct {
	Node
}

func (n *Initializer) Expression() JsNode {
	return nil
}

type JSXAttributeName struct {
	Node
}

type JSXClosingElement struct {
	Node
}

func (n *JSXClosingElement) JSXElementName() JsNode {
	return nil
}

type JSXElement struct {
	Node
}

func (n *JSXElement) JSXSelfClosingElement() JsNode {
	return nil
}

func (n *JSXElement) JSXOpeningElement() JsNode {
	return nil
}

func (n *JSXElement) JSXChild() JsNode {
	return nil
}

func (n *JSXElement) JSXClosingElement() JsNode {
	return nil
}

type JSXElementName struct {
	Node
}

type JSXExpression struct {
	Node
}

func (n *JSXExpression) Expression() JsNode {
	return nil
}

type JSXLiteral struct {
	Node
}

type JSXNormalAttribute struct {
	Node
}

func (n *JSXNormalAttribute) JSXAttributeName() JsNode {
	return nil
}

func (n *JSXNormalAttribute) JSXAttributeValue() JsNode {
	return nil
}

type JSXOpeningElement struct {
	Node
}

func (n *JSXOpeningElement) JSXElementName() JsNode {
	return nil
}

func (n *JSXOpeningElement) JSXAttribute() JsNode {
	return nil
}

type JSXSelfClosingElement struct {
	Node
}

func (n *JSXSelfClosingElement) JSXElementName() JsNode {
	return nil
}

func (n *JSXSelfClosingElement) JSXAttribute() JsNode {
	return nil
}

type JSXSpreadAttribute struct {
	Node
}

func (n *JSXSpreadAttribute) Expression() JsNode {
	return nil
}

type JSXText struct {
	Node
}

type LabelIdentifier struct {
	Node
}

type LabelledStatement struct {
	Node
}

func (n *LabelledStatement) Statement() JsNode {
	return nil
}

func (n *LabelledStatement) Function() JsNode {
	return nil
}

type LexicalBinding struct {
	Node
}

func (n *LexicalBinding) BindingIdentifier() JsNode {
	return nil
}

func (n *LexicalBinding) Initializer() JsNode {
	return nil
}

func (n *LexicalBinding) BindingPattern() JsNode {
	return nil
}

type LexicalDeclaration struct {
	Node
}

func (n *LexicalDeclaration) LexicalBinding() JsNode {
	return nil
}

type Literal struct {
	Node
}

type LiteralPropertyName struct {
	Node
}

func (n *LiteralPropertyName) BindingIdentifier() JsNode {
	return nil
}

type LogicalANDExpression struct {
	Node
}

func (n *LogicalANDExpression) Left() JsNode {
	return nil
}

func (n *LogicalANDExpression) Right() JsNode {
	return nil
}

type LogicalORExpression struct {
	Node
}

func (n *LogicalORExpression) Left() JsNode {
	return nil
}

func (n *LogicalORExpression) Right() JsNode {
	return nil
}

type Method struct {
	Node
}

func (n *Method) PropertyName() JsNode {
	return nil
}

func (n *Method) Parameters() JsNode {
	return nil
}

func (n *Method) Body() JsNode {
	return nil
}

type Module struct {
	Node
}

func (n *Module) ModuleItem() JsNode {
	return nil
}

type ModuleSpecifier struct {
	Node
}

type MultiplicativeExpression struct {
	Node
}

func (n *MultiplicativeExpression) Left() JsNode {
	return nil
}

func (n *MultiplicativeExpression) Right() JsNode {
	return nil
}

type NameSpaceImport struct {
	Node
}

func (n *NameSpaceImport) BindingIdentifier() JsNode {
	return nil
}

type NamedImports struct {
	Node
}

func (n *NamedImports) NamedImport() JsNode {
	return nil
}

type NewExpression struct {
	Node
}

func (n *NewExpression) Expr() JsNode {
	return nil
}

func (n *NewExpression) Arguments() JsNode {
	return nil
}

type NewTarget struct {
	Node
}

type ObjectLiteral struct {
	Node
}

func (n *ObjectLiteral) PropertyDefinition() JsNode {
	return nil
}

type ObjectPattern struct {
	Node
}

func (n *ObjectPattern) PropertyPattern() JsNode {
	return nil
}

type Parameter struct {
	Node
}

func (n *Parameter) ElementPattern() JsNode {
	return nil
}

type Parameters struct {
	Node
}

func (n *Parameters) RestParameter() JsNode {
	return nil
}

func (n *Parameters) Parameter() JsNode {
	return nil
}

func (n *Parameters) BindingIdentifier() JsNode {
	return nil
}

func (n *Parameters) Expression() JsNode {
	return nil
}

func (n *Parameters) BindingPattern() JsNode {
	return nil
}

func (n *Parameters) SyntaxError() JsNode {
	return nil
}

type Parenthesized struct {
	Node
}

func (n *Parenthesized) Expression() JsNode {
	return nil
}

func (n *Parenthesized) BindingIdentifier() JsNode {
	return nil
}

func (n *Parenthesized) BindingPattern() JsNode {
	return nil
}

func (n *Parenthesized) SyntaxError() JsNode {
	return nil
}

type PostDec struct {
	Node
}

func (n *PostDec) Expression() JsNode {
	return nil
}

type PostInc struct {
	Node
}

func (n *PostInc) Expression() JsNode {
	return nil
}

type PreDec struct {
	Node
}

func (n *PreDec) Expression() JsNode {
	return nil
}

type PreInc struct {
	Node
}

func (n *PreInc) Expression() JsNode {
	return nil
}

type Property struct {
	Node
}

func (n *Property) PropertyName() JsNode {
	return nil
}

func (n *Property) Value() JsNode {
	return nil
}

type PropertyAccess struct {
	Node
}

func (n *PropertyAccess) Expr() JsNode {
	return nil
}

func (n *PropertyAccess) Selector() JsNode {
	return nil
}

type PropertyBinding struct {
	Node
}

func (n *PropertyBinding) PropertyName() JsNode {
	return nil
}

func (n *PropertyBinding) ElementPattern() JsNode {
	return nil
}

type Regexp struct {
	Node
}

type RelationalExpression struct {
	Node
}

func (n *RelationalExpression) Left() JsNode {
	return nil
}

func (n *RelationalExpression) Right() JsNode {
	return nil
}

type RestParameter struct {
	Node
}

func (n *RestParameter) BindingRestElement() JsNode {
	return nil
}

type ReturnStatement struct {
	Node
}

func (n *ReturnStatement) Expression() JsNode {
	return nil
}

type Setter struct {
	Node
}

func (n *Setter) PropertyName() JsNode {
	return nil
}

func (n *Setter) Parameter() JsNode {
	return nil
}

func (n *Setter) Body() JsNode {
	return nil
}

type ShiftExpression struct {
	Node
}

func (n *ShiftExpression) Left() JsNode {
	return nil
}

func (n *ShiftExpression) Right() JsNode {
	return nil
}

type ShorthandProperty struct {
	Node
}

func (n *ShorthandProperty) IdentifierReference() JsNode {
	return nil
}

type SingleNameBinding struct {
	Node
}

func (n *SingleNameBinding) BindingIdentifier() JsNode {
	return nil
}

func (n *SingleNameBinding) Initializer() JsNode {
	return nil
}

type SpreadElement struct {
	Node
}

func (n *SpreadElement) Expression() JsNode {
	return nil
}

type StaticMethod struct {
	Node
}

func (n *StaticMethod) MethodDefinition() JsNode {
	return nil
}

type SuperExpression struct {
	Node
}

type SwitchStatement struct {
	Node
}

func (n *SwitchStatement) Expression() JsNode {
	return nil
}

func (n *SwitchStatement) Block() JsNode {
	return nil
}

type SyntaxError struct {
	Node
}

func (n *SyntaxError) IdentifierReference() JsNode {
	return nil
}

func (n *SyntaxError) Initializer() JsNode {
	return nil
}

type TaggedTemplate struct {
	Node
}

func (n *TaggedTemplate) Tag() JsNode {
	return nil
}

func (n *TaggedTemplate) Literal() JsNode {
	return nil
}

type TemplateLiteral struct {
	Node
}

func (n *TemplateLiteral) Template() JsNode {
	return nil
}

func (n *TemplateLiteral) Substitution() JsNode {
	return nil
}

type This struct {
	Node
}

type ThrowStatement struct {
	Node
}

func (n *ThrowStatement) Expression() JsNode {
	return nil
}

type TryStatement struct {
	Node
}

func (n *TryStatement) Block() JsNode {
	return nil
}

func (n *TryStatement) Catch() JsNode {
	return nil
}

func (n *TryStatement) Finally() JsNode {
	return nil
}

type UnaryExpression struct {
	Node
}

func (n *UnaryExpression) Expression() JsNode {
	return nil
}

type VariableDeclaration struct {
	Node
}

func (n *VariableDeclaration) BindingIdentifier() JsNode {
	return nil
}

func (n *VariableDeclaration) Initializer() JsNode {
	return nil
}

func (n *VariableDeclaration) BindingPattern() JsNode {
	return nil
}

type VariableStatement struct {
	Node
}

func (n *VariableStatement) VariableDeclaration() JsNode {
	return nil
}

type WhileStatement struct {
	Node
}

func (n *WhileStatement) Expression() JsNode {
	return nil
}

func (n *WhileStatement) Statement() JsNode {
	return nil
}

type WithStatement struct {
	Node
}

func (n *WithStatement) Expression() JsNode {
	return nil
}

func (n *WithStatement) Statement() JsNode {
	return nil
}

type Yield struct {
	Node
}

func (n *Yield) Expression() JsNode {
	return nil
}


