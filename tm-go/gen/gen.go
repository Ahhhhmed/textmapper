// Package gen generates code for compiled grammars.
package gen

import (
	"bytes"
	"github.com/inspirer/textmapper/tm-go/grammar"
	"text/template"
)

// Writer provides a way to save generated files to disk.
type Writer interface {
	Write(filename, content string) error
}

const tokenTpl = `
{{- block "header" . -}}
// generated by Textmapper; DO NOT EDIT

{{end -}}
package {{.Name}}

// Token is an enum of all terminal symbols of the {{.Name}} language.
type Token int

// Token values.
const (
	UNAVAILABLE Token = iota-1
{{- range .Tokens}}
	{{.ID}}{{if .Comment}}  // {{.Comment}}{{end}}
{{- end}}

	NumTokens
)

var tokenStr = [...]string{
{{- range .Tokens}}
	{{if .Comment}}{{str_literal .Comment}}{{else}}{{str_literal .ID}}{{end}},
{{- end}}
}

func (tok Token) String() string {
	if tok >= 0 && int(tok) < len(tokenStr) {
		return tokenStr[tok]
	}
	return "fmt".Sprintf("token(%d)", tok)
}
`

func Generate(g *grammar.Grammar, w Writer) error {
	tmpl, err := template.New("tokenTpl").Funcs(funcMap).Parse(tokenTpl)
	if err != nil {
		return err
	}
	var buf bytes.Buffer
	err = tmpl.Execute(&buf, g)
	if err != nil {
		return err
	}
	src := ExtractImports(buf.String())

	const filename = "token.go"
	ret, err := Format(filename, src)
	if err != nil {
		return err
	}

	w.Write(filename, ret)
	return nil
}
