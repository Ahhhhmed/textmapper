// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

type NodeType int

type Listener func(t NodeType, offset, endoffset int)

const (
	Test  NodeType = iota + 1 // (Declaration)+
	Block                     // (Declaration)+
	Decl1                     // (Identifier)+
	Decl2
	MultiLineComment
	SingleLineComment
	InvalidToken
	Identifier
	NodeTypeMax
)

var nodeTypeStr = [...]string{
	"NONE",
	"Test",
	"Block",
	"Decl1",
	"Decl2",
	"MultiLineComment",
	"SingleLineComment",
	"InvalidToken",
	"Identifier",
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}

var Declaration = []NodeType{
	Block,
	Decl1,
	Decl2,
}

var TokenSet = []NodeType{
	Identifier,
}

var ruleNodeType = [...]NodeType{
	0,     // Declaration_list ::= Declaration_list Declaration
	0,     // Declaration_list ::= Declaration
	Test,  // Test ::= Declaration_list
	0,     // Declaration ::= Decl1
	0,     // Declaration ::= Decl2
	Block, // Declaration ::= '{' Declaration_list '}'
	0,     // QualifiedName ::= Identifier
	0,     // QualifiedName ::= QualifiedName '.' Identifier
	Decl1, // Decl1 ::= 'decl1' '(' QualifiedName ')'
	Decl2, // Decl2 ::= 'decl2'
}
