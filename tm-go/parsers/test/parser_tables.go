// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

var tmNonterminals = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"setof_not_((eoi | '.') | '}')",
	"setof_not_((eoi | '.') | '}')_optlist",
	"empty1",
	"QualifiedName",
	"Decl1",
	"Decl2",
}

func symbolName(sym int32) string {
	if sym < int32(NumTokens) {
		return Token(sym).String()
	}
	if i := int(sym) - int(NumTokens); i < len(tmNonterminals) {
		return tmNonterminals[i]
	}
	return fmt.Sprintf("nonterminal(%d)", sym)
}

var tmAction = []int32{
	-1, -1, -3, -1, -1, 41, -1, -21, 1, 3, 4, -1, 36, 37, -1, 10, -1, -1, 0, 11,
	-1, -1, 38, -1, 8, -1, -1, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 13, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 14, 40, -1, 6, -1, 7, 39, 5, -1, -1,
	-2, -2,
}

var tmLalr = []int32{
	13, -1, 0, 12, 5, 12, 6, 12, 7, 12, 8, 12, 9, 12, 10, 12, -1, -2, 5, -1, 6,
	-1, 7, -1, 8, -1, 9, -1, 0, 2, -1, -2,
}

var tmGoto = []int32{
	0, 4, 6, 8, 10, 16, 34, 52, 72, 90, 110, 124, 130, 136, 140, 144, 146, 148,
	150, 156, 158, 160, 162, 164, 172, 174, 190, 192, 194, 196, 198, 216, 232,
}

var tmFromTo = []int8{
	58, 60, 59, 61, 20, 28, 20, 29, 20, 30, 14, 22, 20, 31, 52, 56, 0, 2, 6, 2,
	7, 2, 16, 2, 17, 2, 20, 32, 25, 2, 26, 2, 54, 2, 0, 3, 6, 3, 7, 3, 16, 3, 17,
	3, 20, 33, 25, 3, 26, 3, 54, 3, 0, 4, 1, 4, 6, 4, 7, 4, 16, 4, 17, 4, 20, 34,
	25, 4, 26, 4, 54, 4, 0, 5, 6, 5, 7, 5, 16, 5, 17, 5, 20, 35, 25, 5, 26, 5,
	54, 5, 0, 6, 3, 12, 6, 6, 7, 6, 16, 6, 17, 6, 20, 36, 25, 6, 26, 6, 54, 6, 6,
	15, 16, 24, 17, 27, 20, 37, 25, 53, 26, 55, 54, 57, 3, 13, 4, 14, 20, 38, 20,
	39, 21, 50, 23, 51, 2, 11, 20, 40, 11, 19, 20, 41, 23, 52, 20, 42, 20, 43, 6,
	16, 16, 25, 20, 44, 20, 45, 20, 46, 20, 47, 20, 48, 0, 7, 6, 17, 16, 26, 25,
	54, 0, 58, 0, 8, 6, 8, 7, 18, 16, 8, 17, 18, 25, 8, 26, 18, 54, 18, 20, 49,
	12, 20, 13, 21, 14, 23, 0, 9, 1, 59, 6, 9, 7, 9, 16, 9, 17, 9, 25, 9, 26, 9,
	54, 9, 0, 10, 6, 10, 7, 10, 16, 10, 17, 10, 25, 10, 26, 10, 54, 10,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 3, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 1, 3, 4, 1,
}

var tmRuleSymbol = []int32{
	23, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 28,
	29, 29, 30, 31,
}

var tmRuleType = [...]NodeType{
	0,          // Declaration_list : Declaration_list Declaration
	0,          // Declaration_list : Declaration
	Test,       // Test : Declaration_list
	0,          // Declaration : Decl1
	0,          // Declaration : Decl2
	Block,      // Declaration : '{' '-' '-' Declaration_list '}'
	Block,      // Declaration : '{' '-' '-' '}'
	Block,      // Declaration : '{' '-' Declaration_list '}'
	Block,      // Declaration : '{' '-' '}'
	Block,      // Declaration : '{' Declaration_list '}'
	Block,      // Declaration : '{' '}'
	Int,        // Declaration : IntegerConstant '[' ']'
	Int,        // Declaration : IntegerConstant
	TestClause, // Declaration : 'test' '{' setof_not_((eoi | '.') | '}')_optlist '}'
	0,          // Declaration : 'test' '(' empty1 ')'
	0,          // setof_not_((eoi | '.') | '}') : invalid_token
	0,          // setof_not_((eoi | '.') | '}') : WhiteSpace
	0,          // setof_not_((eoi | '.') | '}') : SingleLineComment
	0,          // setof_not_((eoi | '.') | '}') : Identifier
	0,          // setof_not_((eoi | '.') | '}') : IntegerConstant
	0,          // setof_not_((eoi | '.') | '}') : 'test'
	0,          // setof_not_((eoi | '.') | '}') : 'decl1'
	0,          // setof_not_((eoi | '.') | '}') : 'decl2'
	0,          // setof_not_((eoi | '.') | '}') : '{'
	0,          // setof_not_((eoi | '.') | '}') : '('
	0,          // setof_not_((eoi | '.') | '}') : ')'
	0,          // setof_not_((eoi | '.') | '}') : '['
	0,          // setof_not_((eoi | '.') | '}') : ']'
	0,          // setof_not_((eoi | '.') | '}') : ','
	0,          // setof_not_((eoi | '.') | '}') : ':'
	0,          // setof_not_((eoi | '.') | '}') : '-'
	0,          // setof_not_((eoi | '.') | '}') : '->'
	0,          // setof_not_((eoi | '.') | '}') : backtrackingToken
	0,          // setof_not_((eoi | '.') | '}') : error
	0,          // setof_not_((eoi | '.') | '}') : MultiLineComment
	0,          // setof_not_((eoi | '.') | '}')_optlist : setof_not_((eoi | '.') | '}')_optlist setof_not_((eoi | '.') | '}')
	0,          // setof_not_((eoi | '.') | '}')_optlist :
	0,          // empty1 :
	0,          // QualifiedName : Identifier
	0,          // QualifiedName : QualifiedName '.' Identifier
	Decl1,      // Decl1 : 'decl1' '(' QualifiedName ')'
	Decl2,      // Decl2 : 'decl2'
}

// set(follow error) =
var afterErr = []int32{}
