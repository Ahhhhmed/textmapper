// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

// Symbol represents a set of all terminal and non-terminal symbols of the test language.
type Symbol int

var symbolStr = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"QualifiedName",
	"Decl1",
	"Decl2",
}

func (n Symbol) String() string {
	if n < Symbol(NumTokens) {
		return Token(n).String()
	}
	i := int(n) - int(NumTokens)
	if i < len(symbolStr) {
		return symbolStr[i]
	}
	return fmt.Sprintf("nonterminal(%d)", n)
}

var tmAction = []int32{
	-1, -1, -3, -1, 16, -1, -19, 1, 3, 4, -1, -1, 10, -1, -1, 0, 11, 13, -1, 8,
	-1, -1, 9, 15, -1, 6, -1, 7, 14, 5, -1, -1, -2, -2,
}

var tmLalr = []int32{
	14, -1, 0, 12, 6, 12, 8, 12, 9, 12, 10, 12, 11, 12, -1, -2, 6, -1, 8, -1, 9,
	-1, 10, -1, 0, 2, -1, -2,
}

var tmGoto = []int32{
	0, 4, 4, 4, 4, 4, 8, 24, 24, 42, 58, 74, 86, 88, 90, 92, 94, 96, 96, 96, 100,
	100, 100, 100, 108, 110, 126, 128, 146, 162,
}

var tmFromTo = []int8{
	30, 32, 31, 33, 11, 17, 24, 28, 0, 2, 5, 2, 6, 2, 13, 2, 14, 2, 20, 2, 21, 2,
	26, 2, 0, 3, 1, 3, 5, 3, 6, 3, 13, 3, 14, 3, 20, 3, 21, 3, 26, 3, 0, 4, 5, 4,
	6, 4, 13, 4, 14, 4, 20, 4, 21, 4, 26, 4, 0, 5, 5, 5, 6, 5, 13, 5, 14, 5, 20,
	5, 21, 5, 26, 5, 5, 12, 13, 19, 14, 22, 20, 25, 21, 27, 26, 29, 3, 11, 18,
	23, 2, 10, 10, 16, 18, 24, 5, 13, 13, 20, 0, 6, 5, 14, 13, 21, 20, 26, 0, 30,
	0, 7, 5, 7, 6, 15, 13, 7, 14, 15, 20, 7, 21, 15, 26, 15, 11, 18, 0, 8, 1, 31,
	5, 8, 6, 8, 13, 8, 14, 8, 20, 8, 21, 8, 26, 8, 0, 9, 5, 9, 6, 9, 13, 9, 14,
	9, 20, 9, 21, 9, 26, 9,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 3, 1, 1, 3, 4, 1,
}

var tmRuleSymbol = []int32{
	23, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 27, 28,
}

// set(follow error) =
var afterErr = []int32{}
