// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

// Symbol represents a set of all terminal and non-terminal symbols of the test language.
type Symbol int

var symbolStr = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"QualifiedName",
	"Decl1",
	"Decl2",
}

func (n Symbol) String() string {
	if n < Symbol(NumTokens) {
		return Token(n).String()
	}
	i := int(n) - int(NumTokens)
	if i < len(symbolStr) {
		return symbolStr[i]
	}
	return fmt.Sprintf("nonterminal(%d)", n)
}

var tmAction = []int32{
	-1, -3, -1, 16, -1, -19, 1, 3, 4, -1, -1, 10, -1, -1, 0, 11,
	13, -1, 8, -1, -1, 9, 15, -1, 6, -1, 7, 14, 5, -1, -2,
}

var tmLalr = []int32{
	14, -1, 0, 12, 6, 12, 8, 12, 9, 12, 10, 12, 11, 12, -1, -2,
	6, -1, 8, -1, 9, -1, 10, -1, 0, 2, -1, -2,
}

var tmGoto = []int32{
	0, 1, 1, 1, 1, 1, 3, 11, 11, 19, 27, 35, 41, 42, 43, 44,
	45, 46, 46, 46, 48, 48, 48, 48, 52, 53, 61, 62, 70, 78,
}

var tmFrom = []int8{
	29, 10, 23, 0, 4, 5, 12, 13, 19, 20, 25, 0, 4, 5, 12, 13,
	19, 20, 25, 0, 4, 5, 12, 13, 19, 20, 25, 0, 4, 5, 12, 13,
	19, 20, 25, 4, 12, 13, 19, 20, 25, 2, 17, 1, 9, 17, 4, 12,
	0, 4, 12, 19, 0, 0, 4, 5, 12, 13, 19, 20, 25, 10, 0, 4,
	5, 12, 13, 19, 20, 25, 0, 4, 5, 12, 13, 19, 20, 25,
}

var tmTo = []int8{
	30, 16, 27, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 11, 18, 21, 24, 26, 28, 10, 22, 9, 15, 23, 12, 19,
	5, 13, 20, 25, 29, 6, 6, 14, 6, 14, 6, 14, 14, 17, 7, 7,
	7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 3, 1, 1, 3, 4,
	1,
}

var tmRuleSymbol = []int32{
	23, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 27,
	28,
}
