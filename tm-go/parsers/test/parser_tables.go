// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

// Symbol represents a set of all terminal and non-terminal symbols of the test language.
type Symbol int

var symbolStr = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"QualifiedName",
	"Decl1",
	"Decl2",
}

func (n Symbol) String() string {
	if n < Symbol(NumTokens) {
		return Token(n).String()
	}
	i := int(n) - int(NumTokens)
	if i < len(symbolStr) {
		return symbolStr[i]
	}
	return fmt.Sprintf("nonterminal(%d)", n)
}

var tmAction = []int32{
	-1, -3, -1, 16, -1, -19, 1, 3, 4, -1, -1, 10, -1, -1, 0, 11,
	13, -1, 8, -1, -1, 9, 15, -1, 6, -1, 7, 14, 5, -1, -2,
}

var tmLalr = []int32{
	14, -1, 0, 12, 6, 12, 8, 12, 9, 12, 10, 12, 11, 12, -1, -2,
	6, -1, 8, -1, 9, -1, 10, -1, 0, 2, -1, -2,
}

var tmGoto = []int32{
	0, 2, 2, 2, 2, 2, 6, 22, 22, 38, 54, 70, 82, 84, 86, 88,
	90, 92, 92, 92, 96, 96, 96, 96, 104, 106, 122, 124, 140, 156,
}

var tmFromTo = []int8{
	29, 30, 10, 16, 23, 27, 0, 1, 4, 1, 5, 1, 12, 1, 13, 1,
	19, 1, 20, 1, 25, 1, 0, 2, 4, 2, 5, 2, 12, 2, 13, 2,
	19, 2, 20, 2, 25, 2, 0, 3, 4, 3, 5, 3, 12, 3, 13, 3,
	19, 3, 20, 3, 25, 3, 0, 4, 4, 4, 5, 4, 12, 4, 13, 4,
	19, 4, 20, 4, 25, 4, 4, 11, 12, 18, 13, 21, 19, 24, 20, 26,
	25, 28, 2, 10, 17, 22, 1, 9, 9, 15, 17, 23, 4, 12, 12, 19,
	0, 5, 4, 13, 12, 20, 19, 25, 0, 29, 0, 6, 4, 6, 5, 14,
	12, 6, 13, 14, 19, 6, 20, 14, 25, 14, 10, 17, 0, 7, 4, 7,
	5, 7, 12, 7, 13, 7, 19, 7, 20, 7, 25, 7, 0, 8, 4, 8,
	5, 8, 12, 8, 13, 8, 19, 8, 20, 8, 25, 8,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 3, 1, 1, 3, 4,
	1,
}

var tmRuleSymbol = []int32{
	23, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 27,
	28,
}

// set(follow error) =
var afterErr = []int32{}
