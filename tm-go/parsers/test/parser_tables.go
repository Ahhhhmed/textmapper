// generated by Textmapper; DO NOT EDIT

package test

import (
	"fmt"
)

// Symbol represents a set of all terminal and non-terminal symbols of the test language.
type Symbol int

var symbolStr = [...]string{
	"Declaration_list",
	"Test",
	"Declaration",
	"QualifiedName",
	"Decl1",
	"Decl2",
}

func (n Symbol) String() string {
	if n < Symbol(NumTokens) {
		return Token(n).String()
	}
	i := int(n) - int(NumTokens)
	if i < len(symbolStr) {
		return symbolStr[i]
	}
	return fmt.Sprintf("nonterminal(%d)", n)
}

var tmAction = []int32{
	-1, -1, 14, -1, -3, 1, 3, 4, -1, 10, -1, -1, 0, 11, -1, 8,
	-1, -1, 9, 13, -1, 6, -1, 7, 12, 5, -1, -2,
}

var tmLalr = []int32{
	7, -1, 8, -1, 9, -1, 0, 2, -1, -2,
}

var tmGoto = []int32{
	0, 1, 1, 1, 1, 1, 3, 3, 11, 19, 27, 33, 34, 35, 35, 35,
	36, 36, 36, 38, 38, 38, 38, 42, 43, 51, 52, 60, 68,
}

var tmFrom = []int8{
	26, 8, 20, 0, 3, 4, 10, 11, 16, 17, 22, 0, 3, 4, 10, 11,
	16, 17, 22, 0, 3, 4, 10, 11, 16, 17, 22, 3, 10, 11, 16, 17,
	22, 1, 14, 14, 3, 10, 0, 3, 10, 16, 0, 0, 3, 4, 10, 11,
	16, 17, 22, 8, 0, 3, 4, 10, 11, 16, 17, 22, 0, 3, 4, 10,
	11, 16, 17, 22,
}

var tmTo = []int8{
	27, 13, 24, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 9, 15, 18, 21, 23,
	25, 8, 19, 20, 10, 16, 4, 11, 17, 22, 26, 5, 5, 12, 5, 12,
	5, 12, 12, 14, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7,
	7, 7, 7, 7,
}

var tmRuleLen = []int8{
	2, 1, 1, 1, 1, 5, 4, 4, 3, 3, 2, 1, 3, 4, 1,
}

var tmRuleSymbol = []int32{
	22, 22, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 26, 27,
}
