// generated by Textmapper; DO NOT EDIT

package test

const tmNumClasses = 26

type mapRange struct {
	lo         rune
	hi         rune
	defaultVal uint8
	val        []uint8
}

func mapRune(c rune) int {
	lo := 0
	hi := len(tmRuneRanges)
	for lo < hi {
		m := lo + (hi-lo)/2
		r := tmRuneRanges[m]
		if c < r.lo {
			hi = m
		} else if c >= r.hi {
			lo = m + 1
		} else {
			i := int(c - r.lo)
			if i < len(r.val) {
				return int(r.val[i])
			}
			return int(r.defaultVal)
		}
	}
	return 1
}

// Latin-1 characters.
var tmRuneClass = []uint8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 5, 6, 7, 1, 8, 9, 10, 11, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 13, 1, 1, 1, 14, 1, 1, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 16, 1, 17, 1, 15, 1, 15, 15, 15, 15, 18, 19, 15, 15, 15, 15, 15, 15,
	15, 15, 20, 15, 15, 15, 21, 22, 15, 15, 15, 15, 15, 15, 23, 1, 24, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

const tmRuneClassLen = 256
const tmFirstRule = -3

var tmRuneRanges = []mapRange{
	{8232, 8234, 25, nil},
}

var tmStateMap = []int{
	0, 29,
}

var tmToken = []Token{
	1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	23, 1, 23, 23, 2,
}

var tmLexerAction = []int8{
	-4, -3, 28, 28, 28, 27, 26, -3, 25, 23, 22, 19, 17, 16, -3, 15, 14, 13, 15,
	15, 15, 15, 3, 2, 1, -3, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -7, -7, -7, -7,
	-7, -7, -7, -7, -7, -1, -7, -7, 15, -7, -7, 15, -7, -7, 4, 15, 15, 15, 15,
	-7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -1, -7, -7, 15, -7, -7, 15,
	-7, -7, 15, 15, 15, 5, 15, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
	-1, -7, -7, 15, -7, -7, 15, -7, -7, 15, 15, 15, 15, 6, -7, -7, -7, -7, -7,
	-7, -7, -7, -7, -7, -7, -7, -2, -7, -7, 15, -7, -7, 15, -7, -7, 15, 7, 15,
	15, 15, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -1, -7, -7, 15, -7,
	-7, 15, -7, -7, 15, 15, 8, 15, 15, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
	-7, -7, -1, -7, -7, 15, -7, -7, 15, -7, -7, 15, 15, 9, 15, 15, -7, -7, -7,
	-7, -7, -7, -7, -7, -7, -7, -7, -7, -2, -7, -7, 15, -7, -7, 15, -7, -7, 15,
	15, 15, 15, 15, -7, -7, -7, -3, -3, -3, -3, -3, -3, -3, -3, -3, 10, -3, -3,
	15, -3, 11, 15, -3, -3, 15, 15, 15, 15, 15, -3, -3, -3, -24, -24, -24, -24,
	-24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24,
	-24, -24, -24, -24, -24, -24, -24, -3, -3, -3, -3, -3, -3, -3, -3, -3, 12,
	-3, -3, 15, -3, -3, 15, -3, -3, 15, 15, 15, 15, 15, -3, -3, -3, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -7, -7, -7, -7, -7, -7, -7, -7, -7, -1, -7, -7, 15,
	-7, -7, 15, -7, -7, 15, 15, 15, 15, 15, -7, -7, -7, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, 18, -8, -8, 18, -8, -8, -8, -8, -8, -8, -8, -8,
	17, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -3, -3, -3, -3, -3, -3, -3, 21, -3, -3, -3, 20, -3, -3, -3, -3, -3,
	-3, -3, -3, -3, -3, -3, -3, -3, -3, -6, 20, 20, -6, -6, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, -6, -25, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, -25, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, 24, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -20, -20, -20,
	-20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -20, -20, -20, -20, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,
	-5, -5, -5, -5, -5, -5, -5, 35, 34, 34, 34, 34, 34, 34, 32, 34, 34, 34, 30,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -29, -29, -29, -29,
	-29, -29, -29, 31, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29,
	-29, -29, -29, -29, -29, -29, -29, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, 33,
	-29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -29, 34, 34, 34, 34, 34,
	34, -29, 34, 34, 34, -29, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
}

var tmBacktracking = []int{
	4, 12, // in Identifier
	4, 10, // in Identifier
}
