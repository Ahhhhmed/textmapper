${template unit-}
${opts.prefix}.Lexems = {
${for i in [0, parser.nterms - 1]-}
	${parser.sym[i].id->js.escapeJsReserved()}: ${i}${if i < parser.nterms-1},${end}
${end-}
};

${opts.prefix}.Lexer = function(text,errorHandler) {
	this.reset(text);
	this.errorHandler = errorHandler;

	this.tokenLine = 1;
	this.currLine = 1;
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
	this.currColumn = 1;
${end-}
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
	this.currOffset = 0;
${end-}
}

${opts.prefix}.Lexer.prototype = {

	reset: function(text) {
		this.text = text;
		this.group = 0;
		this.chr = text.length > 0 ? text.charCodeAt(0) : 0;
		this.offset = 1;
		this.token = "";
	},

	getState: function() {
		return this.group;
	},

	setState: function(state) {
		this.group = state;
	},

${call js.parserTable(lex.char2no, 'short', 'lapg_char2no', 'LapgCharMap')-}

	lapg_lexem: [
		${util.format(lex.change, 2, '[', ']')}
	],

	mapCharacter: function(chr) {
		if (chr >= 0 && chr < ${lex.char2no.length}) {
			return this.lapg_char2no[chr];
		}
		return 1;
	},

	next: function() {
		var lapg_n = {};
		var state;

		do {
${if opts.positions.contains('offset')-}
			lapg_n.offset = this.currOffset;
${end-}
			this.tokenLine =${if opts.positions.contains('line')} lapg_n.line =${end} this.currLine;
${if opts.positions.contains('column')-}
			lapg_n.column = this.currColumn;
${end-}
			this.token = "";
			var tokenStart = this.offset - 1;

			for (state = this.group; state >= 0;) {
				state = this.lapg_lexem[state][this.mapCharacter(this.chr)];
				if (state >= -1 && this.chr != 0) {
${if opts.positions.contains('offset') || opts.endpositions.contains('offset')-}
					this.currOffset++;
${end-}
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
					this.currColumn++;
${end-}
					if (this.chr == '\n') {
${if opts.positions.contains('column') || opts.endpositions.contains('column')-}
						this.currColumn = 1;
${end-}
						this.currLine++;
					}
					this.chr = this.offset < this.text.length ? this.text.charCodeAt(this.offset++) : 0;
				}
			}
${if opts.endpositions.contains('offset')-}
			lapg_n.endoffset = this.currOffset;
${end-}
${if opts.endpositions.contains('line')-}
			lapg_n.endline = this.currLine;
${end-}
${if opts.endpositions.contains('column')-}
			lapg_n.endcolumn = this.currColumn;
${end-}

			if (state == -1) {
				if (this.chr == 0) {
					this.errorHandler(${call js.err_location('lapg_n')}this.currLine, "Unexpected end of file reached");
					break;
				}
				this.errorHandler(${call js.err_location('lapg_n')}this.currLine, "invalid lexem at line " + this.currLine + ": `" + this.token + "`, skipped");
				lapg_n.lexem = -1;
				continue;
			}

			if (this.offset - 1 > tokenStart) {
				this.token = this.text.slice(tokenStart, this.offset - 1 - tokenStart);
			}

			lapg_n.lexem = - state - 2;
			lapg_n.sym = null;

${if syntax.hasLexemActions()-}
		} while (lapg_n.lexem == -1 || !this.createToken(lapg_n));
${else-}
		} while (lapg_n.lexem == -1);
${end-}
		return lapg_n;
	}${if syntax.hasLexemActions()},

	createToken: function(lapg_n) {
		switch (lapg_n.lexem) {
${foreach lexem in syntax.lexems-}
${if lexem.action-}
			case ${lexem.symbol.index}:
				${call lexerAction('lapg_n.sym') for lexem-}
${end-}
${end-}
		}
		return true;
	}${end}
}
${end}


${template lexerAction(lexem)-}
${eval action.contents, '[lexem action in '+getAction().getLocation()+']'}
${end}
