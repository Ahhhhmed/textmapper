${template unpackIntInt-}
	private static int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i = 0; i < size1; i++) {
			for (int j = 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex == -1) ? st : st.substring(0, commaIndex);
				st = st.substring(commaIndex + 1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j] = Integer.parseInt(workString);
					continue;
				}
				lengthString = workString.substring(colonIndex + 1);
				sequenceLength = Integer.parseInt(lengthString);
				workString = workString.substring(0, colonIndex);
				sequenceInteger = Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
${end}

${template unpackChar2no-}
	private static char[] unpack_char2no(int size, String... st) {
		char[] res = new char[size];
		int t = 0;
		int count = 0;
		for (String s : st) {
			int slen = s.length();
			for (int i = 0; i < slen; ) {
				count = i > 0 || count == 0 ? s.charAt(i++) : count;
				if (i < slen) {
					char val = s.charAt(i++);
					while (count-- > 0) res[t++] = val;
				}
			}
		}
		assert res.length == t;
		return res;
	}
${end}

${template unpackInt-}
	private static int[] unpack_int(int size, String st) {
		int[] res = new int[size];
		int next = 0;
		int comma;
		for (int i = 0; i < size; i++) {
			comma = st.indexOf(',', next);
			res[i] = Integer.parseInt(comma == -1 ? st.substring(next) : st.substring(next, comma));
			next = comma + 1;					
		}
		return res;
	}
${end}

${template unpackShort-}
	private static short[] unpack_short(int size, String st) {
		short[] res = new short[size];
		int next = 0;
		int comma;
		for (int i = 0; i < size; i++) {
			comma = st.indexOf(',', next);
			res[i] = Short.parseShort(comma == -1 ? st.substring(next) : st.substring(next, comma));
			next = comma + 1;
		}
		return res;
	}
${end}
