#

class AstModel {
	AstEntity classes[0..*];

}

class AstType {
}

class AstUserType extends AstType {
	string text;
}

class AstEntity extends AstType {
	string kind[set:"enum","interface","class"];
	string name[notempty; identifier];
	common.Symbol* sym[1];
}

class AstInterface extends AstEntity {
    common.Symbol* implementedSyms[0..*];
    { AstInterface => } implements;
## TODO    AstInterface* implements[0..*];
}

class AstClass extends AstInterface {
    common.SymbolRef* containedRefs[0..*];
    { AstInterface => } properties[1];
}

class AstEnum extends AstEntity {
	common.SymbolRef* literals;
}

class AstProperty {
	string kind[set:flagproperty,enumproperty,property];
	AstClass container[1];
	string name[notempty; identifier];
	common.SymbolRef* refs[1..*];
	string type;
	int indexInRule(common.Rule);
}

class AstList extends AstType {
	AstType target;
}

class AstBool extends AstType {
}

class AstObject extends AstType {
}
