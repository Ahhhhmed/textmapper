${template unit-}

// Ast

${foreach cl in self->ast.allClasses()-}
${self->('ast_' + cl.kind)(cl)}
${end-}
${end}


${template implementedInterfaces(cl)-}
${if cl.implements.length > 0-}
 : ${foreach impl in cl.implements.collect(x|self->ast.getClasses(x)) separator ', '}${impl.name}${end-}
${end-}
${end}


${template ast_interface(cl)}
interface ${cl.name}${call implementedInterfaces(cl)} {
}
${end}


${template ast_class(cl)}
class ${cl.name}${call implementedInterfaces(cl)} {
${foreach prop in self->ast.propertiesNew(cl)-}
	property ${prop.name} : ${prop.kind == 'enumproperty' ? 'integer' :
							  prop.kind == 'flagproperty' ? 'boolean' :
							  context->ast.getType(prop.refs.first().target)};
${end-}
}
${end}

${template ast_enum(cl)}
enum ${cl.name} {
${foreach const in cl.literals-}
	${util.uniqueId((const.alias ? const.alias : const.target.id).toUpperCase(), '__ast__'+cl.name)},
${end-}
}
${end}
