${template unit-}
${call astBaseInterface-}
${call astBaseClass-}
${foreach cl in self->ast.allClasses()-}
${self->('ast_' + cl.kind)(cl)} 
${end-}
${if opts.genastdef-}
${file opts.prefix+'Ast.last'}${call ast_text.unit}${end-}
${end-}
${end}


${cached query interfaceName() =
	util.uniqueId('I' + context.opts.astprefix + util.toCamelCase(self.name, true)->java.escapeJavaReserved(), '__classes__')}

${cached query className() =
	util.uniqueId(context.opts.astprefix + util.toCamelCase(self.name, true)->java.escapeJavaReserved(), '__classes__')}

${cached query enumLiteralName(enumname) =
	util.uniqueId((alias ? alias : target.id).toUpperCase()->java.escapeJavaReserved(), '__classes__'+enumname)}

${cached query enumpropertyName(prop) =
	util.uniqueId(self.target.id.toUpperCase()->java.escapeJavaReserved(), '__prop__' + prop.container.name)}

${cached query propertyName() =
	util.uniqueId(util.toCamelCase(self.name, false)->java.escapeJavaReserved(), '__prop__' + self.container.name)}

${query propertyType() =
	self.kind == 'enumproperty'
		? 'int' :
	self.kind == 'flagproperty'
		? 'boolean' :
	context->getType(self.refs.first().target)
}

${query getType(q) =
	asttype = q is ast.AstType ? q : context->ast.getType(q),
	asttype is ast.AstList ? 'java.util.@List<' + self->getType(asttype.target) + '>' :
	asttype is ast.AstBool ? 'Boolean' :
	asttype is ast.AstObject ? 'Object' :
	asttype is ast.AstUserType ? asttype.text :
	self->astPackage() + '.@' + (
		asttype.kind == 'interface'
			? asttype->interfaceName()
			: asttype->className()
	)}


${template implementedInterfaces(cl, prefix)-}
${if cl.implements.length > 0-}
${prefix}${foreach impl in cl.implements.collect(x|self->ast.getClasses(x)) separator ', '}${self->getType(impl)}${end-}
${end-}
${end}





${template ast_interface(cl)-}
${file self->astPath() + cl->interfaceName() + '.java'-}
package ${self->astPackage()};

public interface ${cl->interfaceName()}${call implementedInterfaces(cl,' extends ')} {
}
${end-}
${end}



${template ast_class(cl)-}
${file self->astPath() + cl->className() + '.java'-}
package ${self->astPackage()};

public class ${cl->className()} extends ${opts.astprefix}Node${call implementedInterfaces(cl,' implements ')} {

${foreach prop in self->ast.propertiesNew(cl).select(x|x.kind=='enumproperty')-}
${foreach enumliteral in prop.refs-}
	public static final int ${enumliteral->enumpropertyName(prop)} = ${index+1};
${end-}

${end-}
${foreach prop in self->ast.propertiesNew(cl)-}
	private ${prop->propertyType()} ${prop->propertyName()};
${end-}

	public ${cl->className()}(${foreach prop in self->ast.propertiesNew(cl)}${prop->propertyType()} ${prop->propertyName()}, ${end}${call java.package}.${opts.prefix}Tree.@TextSource input, int start, int end) {
		super(input, start, end);
${foreach prop in self->ast.propertiesNew(cl)-}
		this.${prop->propertyName()} = ${prop->propertyName()};
${end-}
	}

${foreach prop in self->ast.propertiesNew(cl)-}
	public ${prop->propertyType()} get${util.toCamelCase(prop->propertyName(), true)}() {
		return ${prop->propertyName()};
	}
${end-}	
}
${end-}
${end}



${template ast_enum(cl)-}
${file self->astPath() + cl->className() + '.java'-}
package ${self->astPackage()};

public enum ${cl->className()} {
${foreach const in cl.literals-}
	${const->enumLiteralName(cl->className())},
${end-}
}
${end-}
${end}



${template astBaseInterface-}
${file self->astPath() + 'I' + opts.astprefix + 'Node.java'-}
package ${self->astPackage()};

public interface I${opts.astprefix}Node {
	int getOffset();
	int getEndOffset();
	${call java.package}.${opts.prefix}Tree.@TextSource getInput();
	//void accept(Visitor v);
}
${end-}
${end}




${template astBaseClass-}
${file self->astPath() + opts.astprefix + 'Node.java'-}
package ${self->astPackage()};

public abstract class ${opts.astprefix}Node implements I${opts.astprefix}Node {
	
	protected ${call java.package}.${opts.prefix}Tree.@TextSource fInput;
	protected int fStart;
	protected int fEnd;

	public ${opts.astprefix}Node(${call java.package}.${opts.prefix}Tree.@TextSource input, int start, int end) {
		this.fStart = start;
		this.fEnd = end;
		this.fInput = input;
	}

	public int getOffset() {
		return fStart;
	}

	public int getEndOffset() {
		return fEnd;
	}

	public ${call java.package}.${opts.prefix}Tree.@TextSource getInput() {
		return fInput;
	}

	public String toString() {
		return fInput == null ? "" : fInput.getText(fStart, fEnd);
	}

	//public abstract void accept(Visitor v);
}

${end-}
${end}


${query getClass(rule) =
	[self->ast.getClasses(rule.getLeft())].collect(x|x).first()}

${template createEnum(rule)-}
${'$$'} = ${self->astPackage()}.@${self->getClass(rule)->className()}.${rule.getRight().first()->enumLiteralName(self->getClass(rule)->className())};
${end}

${template createObject(rule,cl)-}
new ${self->astPackage()}.@${cl->className()}(
${foreach prop in self->ast.propertiesNew(cl)-}
${if prop.kind == 'enumproperty'-}
${pind = self->ast.propertyIndex(prop,rule,cl), pind >= 0
	? self->astPackage() + '.@' + cl->className() + '.' + rule.getRight()[pind]->enumpropertyName(prop)
	: 0},
${else if prop.kind == 'flagproperty'-}
${pind = self->ast.propertyIndex(prop,rule,cl), pind >= 0
	? 'true' 
	: 'false'},
${else if self->ast.propertyIndex(prop,rule,cl) >= 0 -}
${'$'+ self->ast.propertyIndex(prop,rule,cl)} /* ${prop->propertyName()} */,
${else-}
null /* ${prop->propertyName()} */,
${end-}
${end-}
null /* input */, ${if rule.getRight().length == 0}${'$'}{left().offset}, ${'$'}{left().endoffset}${else}${'$'}{first().offset}, ${'$'}{last().endoffset}${end-}
)${end}

${template createClass(rule)-}
${'$$'} = ${call createObject(rule, self->getClass(rule))};
${end}


${query createList(rule) =
	newexpr =
		self->ast.hasItemClass(rule.getLeft()) ? self->createObject(rule, self->getClass(rule)) :
		self->ast.hasListItem(rule.getLeft()) ? (
			item = self->ast.getListItem(rule.getLeft()),
			refitem = rule.getRight().select(x|x.target == item).first(),
			index = refitem ? rule.getRight().indexOf(refitem) : -1,
			index >= 0
				? '$' + index
				: null
		) : null,
	kind = self->ast.intListRuleKind(rule),

	!newexpr ? null :
	kind == 'leftrec'	? '$0.add(' + newexpr + ');\n' :
	kind == 'rightrec'	? '$'+(rule.getRight().size()-1)+'.add(0, ' + newexpr + ');\n' :
	kind == 'normal'	? '$$ = new java.util.@ArrayList();\n${left()}.add(' + newexpr + ');\n' :
	null
}

${template passArgument(rule)-}
${'$$ = $' + (list = rule.getRight().select(x|x['pass']),
	list.first() ? rule.getRight().indexOf(list.first()) : -1)};
${end}

${cached query astcode(rule) =
	left = rule.getLeft(),
	self->ast.isEnum(left) ? self->createEnum(rule) :
	self->ast.isOptional(left) ?
		(rule.getRight().size() == 1 && rule.getRight().first().target->ast.isSimpleTerm() ? '$$ = Boolean.TRUE;\n' : null) :
 	self->ast.isList(left) ? self->createList(rule) :
	self->ast.symbolKind(left) == 'class' ? self->createClass(rule) :
	self->ast.symbolKind(left) == 'data' && !rule.getRight().first()['pass'] ? self->passArgument(rule) :
	self->ast.symbolKind(left) == 'interface' && rule.getRight().size() > 1 && !rule.getRight().first()['pass'] ? self->passArgument(rule) :
	null 
}

${query astPackage() = context->java.package() + (context.opts.astsubpackage ? '.' + context.opts.astsubpackage : '')}

${query astPath() = context.opts.astsubpackage ? context.opts.astsubpackage.replaceAll('\\.','/') + '/' : ''}