shift: Lnop (nop)
shift: ';' (;)
reduce to statement
reduce to statements
shift: identifier (a)
shift: '=' (=)
shift: icon (5)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ';' (;)
reduce to statement
reduce to statements
shift: Lreset (reset)
shift: identifier (a)
shift: ';' (;)
reduce to reset_statement
reduce to control_statement
reduce to statement
reduce to statements
shift: identifier (a)
shift: '=' (=)
shift: '(' (()
shift: Lnull (null)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ',' (,)
shift: icon (1)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ')' ())
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ';' (;)
reduce to statement
reduce to statements
shift: identifier (q)
shift: '=' (=)
shift: identifier (aa)
shift: '(' (()
shift: identifier (bb)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to expression_list
shift: ',' (,)
shift: identifier (a)
reduce to primary_expression
shift: '[' ([)
shift: icon (1)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ']' (])
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to expression_list
reduce to expression_listopt
shift: ')' ())
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ';' (;)
reduce to statement
reduce to statements
shift: identifier (p)
shift: '=' (=)
shift: identifier (aa)
reduce to primary_expression
shift: '.' (.)
shift: identifier (bb)
shift: '(' (()
shift: '{' ({)
shift: '->' (->)
shift: Lnop (nop)
shift: ';' (;)
reduce to statement
reduce to statements_noreset
shift: '}' (})
reduce to closure
reduce to closure_rule
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to expression_list
reduce to expression_listopt
shift: ')' ())
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ';' (;)
reduce to statement
reduce to statements
shift: identifier (a)
reduce to primary_expression
shift: '.' (.)
shift: identifier (p)
reduce to primary_expression
shift: '->' (->)
shift: Linvoke (invoke)
reduce to exotic_call_prefix
shift: '(' (()
shift: ')' ())
reduce to exotic_call
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ';' (;)
reduce to statement
reduce to statements
shift: identifier (t)
shift: '=' (=)
shift: icon (1)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
shift: '+' (+)
shift: icon (2)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
shift: '*' (*)
shift: icon (3)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to binary_op
reduce to binary_op
shift: '+' (+)
shift: '(' (()
shift: icon (1)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
shift: '?' (?)
shift: icon (1)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
shift: '-' (-)
shift: icon (-1)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to binary_op
reduce to conditional_expression
shift: ':' (:)
shift: icon (2)
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ')' ())
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ';' (;)
reduce to statement
reduce to statements
shift: identifier (er)
shift: '=' (=)
shift: '{' ({)
shift: '->' (->)
shift: Lreset (reset)
shift: identifier (x)
shift: ';' (;)
reduce to reset_statement
reduce to control_statement
reduce to statement
reduce to statements_noreset
shift: '}' (})
reduce to closure
reduce to closure_rule
reduce to primary_expression
reduce to unary_expression
reduce to binary_op
reduce to conditional_expression
reduce to assignment_expression
reduce to expression
shift: ';' (;)
reduce to statement
reduce to statements
reduce to input
shift: eoi ()
