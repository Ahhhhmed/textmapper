
Lexems:

identifier,1:  00000000 40000001 80040000 ffffffff ([a-zA-Z_][a-zA-Z_0-9]*)
icon,2:  e0060002 20000002 80040000 fffffffe (\-?[0-9]+)
_skip,3:  20000003 80040000 fffffffd ([\n\t\r ]+)
'=',4:  80060003 fffffffc (=)
';',5:  80060004 fffffffb (;)
'+',6:  80060005 fffffffa (\+)
'-',7:  80060002 fffffff9 (\-)
'*',8:  80060006 fffffff8 (\*)
'/',9:  80060007 fffffff7 (\/)
'(',10:  80060008 fffffff6 (\()
')',11:  80060009 fffffff5 (\))
'{',12:  8006000a fffffff4 (\{)
'}',13:  8006000b fffffff3 (\})
'[',14:  8006000c fffffff2 (\[)
']',15:  8006000d fffffff1 (\])
',',16:  8006000e fffffff0 (,)
'.',17:  8006000f ffffffef (\.)
'!',18:  80060010 ffffffee (!)
'?',19:  80060011 ffffffed (\?)
':',20:  80060012 ffffffec (:)
'->',21:  80060002 80060013 ffffffeb (\->)
Lnull,22:  (null)
Linvoke,23:  (invoke)
Lreset,24:  (reset)
Lnop,25:  (nop)
Lexotic,26:  (exotic)

Symbols:

0: \x0000
1: \x0001\x0002\x0003\x0004\x0005\x0006\x0007\x0008\x000b\x000c\x000e\x000f\x0010\x0011\x0012\x0013\x0014\x0015\x0016\x0017\x0018\x0019\x001a\x001b\x001c\x001d\x001e\x001f"#$%&'<@\^`|~
2: -
3: =
4: ;
5: +
6: *
7: /
8: (
9: )
10: {
11: }
12: [
13: ]
14: ,
15: .
16: !
17: ?
18: :
19: >
20: ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
21: 0123456789
22: \x0009\x000a\x000d\x0020

Sets:

0:  20
1:  20 21
2:  21
3:  22

Lexem jumps:
 0:  (0: 0) SET#0 (1: 1 2 3) SET#1* (2: 1 2 3) SPLIT  [identifier,1]
 1:  (0: 0 1) #0002? (1: 1) SET#2+ (2: 1 2 3) SPLIT  [icon,2]
 2:  (0: 0) SET#3+ (1: 0 1 2) SPLIT  [_skip,3]
 3:  (0: 0) #0003  ['=',4]
 4:  (0: 0) #0004  [';',5]
 5:  (0: 0) #0005  ['+',6]
 6:  (0: 0) #0002  ['-',7]
 7:  (0: 0) #0006  ['*',8]
 8:  (0: 0) #0007  ['/',9]
 9:  (0: 0) #0008  ['(',10]
10:  (0: 0) #0009  [')',11]
11:  (0: 0) #000a  ['{',12]
12:  (0: 0) #000b  ['}',13]
13:  (0: 0) #000c  ['[',14]
14:  (0: 0) #000d  [']',15]
15:  (0: 0) #000e  [',',16]
16:  (0: 0) #000f  ['.',17]
17:  (0: 0) #0010  ['!',18]
18:  (0: 0) #0011  ['?',19]
19:  (0: 0) #0012  [':',20]
20:  (0: 0) #0002 (1: 1) #0013  ['->',21]


States
0:
  input ::= _ statements
  statements ::= _ statements statement
  statements ::= _ statement
  statement ::= _ control_statement
  statement ::= _ expression ';'
  statement ::= _ Lnop ';'
  statement ::= _ Lexotic exotic_call ';'
  control_statement ::= _ reset_statement
  reset_statement ::= _ Lreset identifier ';'
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

1: (from 0, identifier)
  primary_expression ::= identifier _
  primary_expression ::= identifier _ '(' expression_listopt ')'
  assignment_expression ::= identifier _ '=' conditional_expression

2: (from 0, icon)
  primary_expression ::= icon _

3: (from 0, '-')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  unary_expression ::= '-' _ unary_expression

4: (from 0, '*')
  closure_rule ::= '*' _ identifier

5: (from 0, '(')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= '(' _ expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

6: (from 0, '{')
  closure ::= '{' _ '->' statements_noreset '}'

7: (from 0, '!')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= '!' _ unary_expression
  unary_expression ::= _ '-' unary_expression

8: (from 0, Lnull)
  primary_expression ::= Lnull _

9: (from 0, Lreset)
  reset_statement ::= Lreset _ identifier ';'

10: (from 0, Lnop)
  statement ::= Lnop _ ';'

11: (from 0, Lexotic)
  statement ::= Lexotic _ exotic_call ';'
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke

12: (from 0, statements)
  input ::= statements _
  statements ::= statements _ statement
  statement ::= _ control_statement
  statement ::= _ expression ';'
  statement ::= _ Lnop ';'
  statement ::= _ Lexotic exotic_call ';'
  control_statement ::= _ reset_statement
  reset_statement ::= _ Lreset identifier ';'
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

13: (from 0, statement)
  statements ::= statement _

14: (from 0, control_statement)
  statement ::= control_statement _

15: (from 0, reset_statement)
  control_statement ::= reset_statement _

16: (from 0, primary_expression)
  primary_expression ::= primary_expression _ '.' identifier
  primary_expression ::= primary_expression _ '.' identifier '(' expression_listopt ')'
  primary_expression ::= primary_expression _ '[' expression ']'
  exotic_call_prefix ::= primary_expression _ '->' Linvoke
  unary_expression ::= primary_expression _

17: (from 0, closure_rule)
  primary_expression ::= closure_rule _

18: (from 0, closure)
  closure_rule ::= closure _

19: (from 0, exotic_call)
  primary_expression ::= exotic_call _

20: (from 0, exotic_call_prefix)
  exotic_call ::= exotic_call_prefix _ '(' ')'

21: (from 0, unary_expression)
  binary_op ::= unary_expression _

22: (from 0, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op _ '-' binary_op
  conditional_expression ::= binary_op _
  conditional_expression ::= binary_op _ '?' conditional_expression ':' conditional_expression

23: (from 0, conditional_expression)
  assignment_expression ::= conditional_expression _

24: (from 0, assignment_expression)
  expression ::= assignment_expression _

25: (from 0, expression)
  statement ::= expression _ ';'
  expression ::= expression _ ',' assignment_expression

26: (from 1, '=')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= identifier '=' _ conditional_expression

27: (from 1, '(')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  expression_listopt ::= _
  expression_listopt ::= _ expression_list
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= identifier '(' _ expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  expression_list ::= _ conditional_expression
  expression_list ::= _ expression_list ',' conditional_expression

28: (from 3, identifier)
  primary_expression ::= identifier _
  primary_expression ::= identifier _ '(' expression_listopt ')'

29: (from 3, unary_expression)
  unary_expression ::= '-' unary_expression _

30: (from 4, identifier)
  closure_rule ::= '*' identifier _

31: (from 5, expression)
  primary_expression ::= '(' expression _ ')'
  expression ::= expression _ ',' assignment_expression

32: (from 6, '->')
  statement ::= _ control_statement
  statement ::= _ expression ';'
  statement ::= _ Lnop ';'
  statement ::= _ Lexotic exotic_call ';'
  control_statement ::= _ reset_statement
  reset_statement ::= _ Lreset identifier ';'
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  closure ::= '{' '->' _ statements_noreset '}'
  statements_noreset ::= _ statements_noreset statement
  statements_noreset ::= _ statement
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

33: (from 7, unary_expression)
  unary_expression ::= '!' unary_expression _

34: (from 9, identifier)
  reset_statement ::= Lreset identifier _ ';'

35: (from 10, ';')
  statement ::= Lnop ';' _

36: (from 11, primary_expression)
  primary_expression ::= primary_expression _ '.' identifier
  primary_expression ::= primary_expression _ '.' identifier '(' expression_listopt ')'
  primary_expression ::= primary_expression _ '[' expression ']'
  exotic_call_prefix ::= primary_expression _ '->' Linvoke

37: (from 11, exotic_call)
  statement ::= Lexotic exotic_call _ ';'
  primary_expression ::= exotic_call _

38: (from 12, statement)
  statements ::= statements statement _

39: (from 16, '[')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= primary_expression '[' _ expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

40: (from 16, '.')
  primary_expression ::= primary_expression '.' _ identifier
  primary_expression ::= primary_expression '.' _ identifier '(' expression_listopt ')'

41: (from 16, '->')
  exotic_call_prefix ::= primary_expression '->' _ Linvoke

42: (from 20, '(')
  exotic_call ::= exotic_call_prefix '(' _ ')'

43: (from 22, '+')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= binary_op '+' _ binary_op
  binary_op ::= _ binary_op '-' binary_op

44: (from 22, '-')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  binary_op ::= binary_op '-' _ binary_op

45: (from 22, '*')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= binary_op '*' _ binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op

46: (from 22, '/')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= binary_op '/' _ binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op

47: (from 22, '?')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  conditional_expression ::= binary_op '?' _ conditional_expression ':' conditional_expression

48: (from 25, ';')
  statement ::= expression ';' _

49: (from 25, ',')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= expression ',' _ assignment_expression

50: (from 26, conditional_expression)
  assignment_expression ::= identifier '=' conditional_expression _

51: (from 27, conditional_expression)
  expression_list ::= conditional_expression _

52: (from 27, expression_list)
  expression_listopt ::= expression_list _
  expression_list ::= expression_list _ ',' conditional_expression

53: (from 27, expression_listopt)
  primary_expression ::= identifier '(' expression_listopt _ ')'

54: (from 31, ')')
  primary_expression ::= '(' expression ')' _

55: (from 32, statement)
  statements_noreset ::= statement _

56: (from 32, statements_noreset)
  statement ::= _ control_statement
  statement ::= _ expression ';'
  statement ::= _ Lnop ';'
  statement ::= _ Lexotic exotic_call ';'
  control_statement ::= _ reset_statement
  reset_statement ::= _ Lreset identifier ';'
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  closure ::= '{' '->' statements_noreset _ '}'
  statements_noreset ::= statements_noreset _ statement
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

57: (from 34, ';')
  reset_statement ::= Lreset identifier ';' _

58: (from 37, ';')
  statement ::= Lexotic exotic_call ';' _

59: (from 39, expression)
  primary_expression ::= primary_expression '[' expression _ ']'
  expression ::= expression _ ',' assignment_expression

60: (from 40, identifier)
  primary_expression ::= primary_expression '.' identifier _
  primary_expression ::= primary_expression '.' identifier _ '(' expression_listopt ')'

61: (from 41, Linvoke)
  exotic_call_prefix ::= primary_expression '->' Linvoke _

62: (from 42, ')')
  exotic_call ::= exotic_call_prefix '(' ')' _

63: (from 43, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op '+' binary_op _
  binary_op ::= binary_op _ '-' binary_op

64: (from 44, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op _ '-' binary_op
  binary_op ::= binary_op '-' binary_op _

65: (from 45, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op '*' binary_op _
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op _ '-' binary_op

66: (from 46, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op '/' binary_op _
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op _ '-' binary_op

67: (from 47, conditional_expression)
  conditional_expression ::= binary_op '?' conditional_expression _ ':' conditional_expression

68: (from 49, assignment_expression)
  expression ::= expression ',' assignment_expression _

69: (from 52, ',')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  expression_list ::= expression_list ',' _ conditional_expression

70: (from 53, ')')
  primary_expression ::= identifier '(' expression_listopt ')' _

71: (from 56, '}')
  closure ::= '{' '->' statements_noreset '}' _

72: (from 56, statement)
  statements_noreset ::= statements_noreset statement _

73: (from 59, ']')
  primary_expression ::= primary_expression '[' expression ']' _

74: (from 60, '(')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  expression_listopt ::= _
  expression_listopt ::= _ expression_list
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= primary_expression '.' identifier '(' _ expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  expression_list ::= _ conditional_expression
  expression_list ::= _ expression_list ',' conditional_expression

75: (from 67, ':')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  conditional_expression ::= binary_op '?' conditional_expression ':' _ conditional_expression

76: (from 69, conditional_expression)
  expression_list ::= expression_list ',' conditional_expression _

77: (from 74, expression_listopt)
  primary_expression ::= primary_expression '.' identifier '(' expression_listopt _ ')'

78: (from 75, conditional_expression)
  conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression _

79: (from 77, ')')
  primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')' _

80: (from 0, input)

81: (from 80, eoi)

Rules for var:

input ::
	input ::= statements
	statements ::= statements statement
	statements ::= statement
	statement ::= control_statement
	statement ::= expression ';'
	statement ::= Lnop ';'
	statement ::= Lexotic exotic_call ';'
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
statements ::
	statements ::= statements statement
	statements ::= statement
	statement ::= control_statement
	statement ::= expression ';'
	statement ::= Lnop ';'
	statement ::= Lexotic exotic_call ';'
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
statement ::
	statement ::= control_statement
	statement ::= expression ';'
	statement ::= Lnop ';'
	statement ::= Lexotic exotic_call ';'
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
control_statement ::
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
reset_statement ::
	reset_statement ::= Lreset identifier ';'
primary_expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
closure_rule ::
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
closure ::
	closure ::= '{' '->' statements_noreset '}'
statements_noreset ::
	statement ::= control_statement
	statement ::= expression ';'
	statement ::= Lnop ';'
	statement ::= Lexotic exotic_call ';'
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	statements_noreset ::= statements_noreset statement
	statements_noreset ::= statement
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
exotic_call ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
exotic_call_prefix ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
unary_expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
binary_op ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
conditional_expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
assignment_expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
expression_list ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	expression_list ::= conditional_expression
	expression_list ::= expression_list ',' conditional_expression
expression_listopt ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	expression_listopt ::=
	expression_listopt ::= expression_list
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	expression_list ::= conditional_expression
	expression_list ::= expression_list ',' conditional_expression

Graph:
 0:  1
 1:  3 2
 2:  6
 3:  7
 4:  8
 5:  9
 6:  10
 7:  11
 8:  12
 9:  13
 14:  75 34
 15:  76 35
 16:  77 36
 17:  78 37
 18:  79 38
 19:  80 39
 20:  81 40
 21:  82 41
 22:  83 42
 23:  84 43
 24:  85 44
 25:  86 45
 26:  87 46
 27:  88 47
 28:  89 48
 29:  90 49
 30:  91 50
 31:  92 51
 32:  93 52
 33:  94 53
 34:  54
 35:  55
 36:  56
 37:  57
 38:  58
 39:  59
 40:  60
 41:  61
 42:  62
 43:  63
 44:  64
 45:  65
 46:  66
 47:  67
 48:  68
 49:  69
 50:  70
 51:  71
 52:  72
 53:  73
 74:  5 4
 115:  14 118 116
 116:  15 118 116
 117:  16 118 116
 118:  17 118 116
 119:  19 118 116
 120:  20 118 116
 121:  21 118 116
 122:  22 118 116
 123:  23 118 116
 124:  24 118 116
 125:  25 118 116
 126:  26 118 116
 127:  27 118 116
 128:  28 118 116
 129:  29 118 116
 130:  30 118 116
 131:  31 118 116
 132:  32 118 116
 133:  33 118 116
 134:  115 143 144 141 142
 135:  117 143 144 141 142
 136:  119 143 144 141 142
 137:  120 143 144 141 142
 138:  121 143 144 141 142
 139:  122 143 144 141 142
 140:  123 143 144 141 142
 141:  124 143 144 141 142
 142:  125 143 144 141 142
 143:  126 143 144 141 142
 144:  127 143 144 141 142
 145:  128 143 144 141 142
 146:  129 143 144 141 142
 147:  130 143 144 141 142
 148:  131 143 144 141 142
 149:  132 143 144 141 142
 150:  133 143 144 141 142
 151:  134 163
 152:  135 163
 153:  136 163
 154:  137 163
 155:  138 163
 156:  139 163
 157:  140 163
 158:  145 163
 159:  146 163
 160:  147 163
 161:  148 163
 162:  149 163
 163:  150 163
 164:  151 154
 165:  152 154
 166:  153 154
 167:  156 154
 168:  157 154
 169:  159 154
 170:  160 154
 171:  164 169
 172:  165 169
 173:  166 169
 174:  167 169
 175:  168 169
 176:  170 169
 177:  155 161
 178:  162 161
 179:  177
 180:  178

Graph:
 1:  0
 2:  1
 3:  1
 4:  74
 5:  74
 6:  2
 7:  3
 8:  4
 9:  5
 10:  6
 11:  7
 12:  8
 13:  9
 14:  115
 15:  116
 16:  117
 17:  118
 19:  119
 20:  120
 21:  121
 22:  122
 23:  123
 24:  124
 25:  125
 26:  126
 27:  127
 28:  128
 29:  129
 30:  130
 31:  131
 32:  132
 33:  133
 34:  14
 35:  15
 36:  16
 37:  17
 38:  18
 39:  19
 40:  20
 41:  21
 42:  22
 43:  23
 44:  24
 45:  25
 46:  26
 47:  27
 48:  28
 49:  29
 50:  30
 51:  31
 52:  32
 53:  33
 54:  34
 55:  35
 56:  36
 57:  37
 58:  38
 59:  39
 60:  40
 61:  41
 62:  42
 63:  43
 64:  44
 65:  45
 66:  46
 67:  47
 68:  48
 69:  49
 70:  50
 71:  51
 72:  52
 73:  53
 75:  14
 76:  15
 77:  16
 78:  17
 79:  18
 80:  19
 81:  20
 82:  21
 83:  22
 84:  23
 85:  24
 86:  25
 87:  26
 88:  27
 89:  28
 90:  29
 91:  30
 92:  31
 93:  32
 94:  33
 115:  134
 116:  115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133
 117:  135
 118:  115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133
 119:  136
 120:  137
 121:  138
 122:  139
 123:  140
 124:  141
 125:  142
 126:  143
 127:  144
 128:  145
 129:  146
 130:  147
 131:  148
 132:  149
 133:  150
 134:  151
 135:  152
 136:  153
 137:  154
 138:  155
 139:  156
 140:  157
 141:  134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150
 142:  134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150
 143:  134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150
 144:  134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150
 145:  158
 146:  159
 147:  160
 148:  161
 149:  162
 150:  163
 151:  164
 152:  165
 153:  166
 154:  164 165 166 167 168 169 170
 155:  177
 156:  167
 157:  168
 159:  169
 160:  170
 161:  177 178
 162:  178
 163:  151 152 153 154 155 156 157 158 159 160 161 162 163
 164:  171
 165:  172
 166:  173
 167:  174
 168:  175
 169:  171 172 173 174 175 176
 170:  176
 177:  179
 178:  180

Follow:
0    ->   80	 eoi
0    ->   12	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop Lexotic
0    ->   13	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop Lexotic
12   ->   38	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop Lexotic
32   ->   55	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop Lexotic
56   ->   72	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop Lexotic
0    ->   14	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop Lexotic
12   ->   14	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop Lexotic
32   ->   14	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop Lexotic
56   ->   14	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop Lexotic
0    ->   15	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop Lexotic
12   ->   15	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop Lexotic
32   ->   15	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop Lexotic
56   ->   15	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop Lexotic
0    ->   16	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
3    ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
5    ->   16	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
7    ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
11   ->   36	 '[' '.' '->'
12   ->   16	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
26   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
27   ->   16	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
32   ->   16	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
39   ->   16	 '+' '-' '*' '/' '[' ']' ',' '.' '?' '->'
43   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
44   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
45   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
46   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
47   ->   16	 '+' '-' '*' '/' '[' '.' '?' ':' '->'
49   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
56   ->   16	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
69   ->   16	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
74   ->   16	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
75   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
0    ->   17	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
3    ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
5    ->   17	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
7    ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
11   ->   17	 '[' '.' '->'
12   ->   17	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
26   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
27   ->   17	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
32   ->   17	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
39   ->   17	 '+' '-' '*' '/' '[' ']' ',' '.' '?' '->'
43   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
44   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
45   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
46   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
47   ->   17	 '+' '-' '*' '/' '[' '.' '?' ':' '->'
49   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
56   ->   17	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
69   ->   17	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
74   ->   17	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
75   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
0    ->   18	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
3    ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
5    ->   18	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
7    ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
11   ->   18	 '[' '.' '->'
12   ->   18	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
26   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
27   ->   18	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
32   ->   18	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
39   ->   18	 '+' '-' '*' '/' '[' ']' ',' '.' '?' '->'
43   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
44   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
45   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
46   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
47   ->   18	 '+' '-' '*' '/' '[' '.' '?' ':' '->'
49   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
56   ->   18	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
69   ->   18	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
74   ->   18	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
75   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
32   ->   56	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop Lexotic
0    ->   19	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
3    ->   19	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
5    ->   19	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
7    ->   19	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
11   ->   37	 ';' '[' '.' '->'
12   ->   19	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
26   ->   19	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
27   ->   19	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
32   ->   19	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
39   ->   19	 '+' '-' '*' '/' '[' ']' ',' '.' '?' '->'
43   ->   19	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
44   ->   19	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
45   ->   19	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
46   ->   19	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
47   ->   19	 '+' '-' '*' '/' '[' '.' '?' ':' '->'
49   ->   19	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
56   ->   19	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
69   ->   19	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
74   ->   19	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
75   ->   19	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
0    ->   20	 '('
3    ->   20	 '('
5    ->   20	 '('
7    ->   20	 '('
11   ->   20	 '('
12   ->   20	 '('
26   ->   20	 '('
27   ->   20	 '('
32   ->   20	 '('
39   ->   20	 '('
43   ->   20	 '('
44   ->   20	 '('
45   ->   20	 '('
46   ->   20	 '('
47   ->   20	 '('
49   ->   20	 '('
56   ->   20	 '('
69   ->   20	 '('
74   ->   20	 '('
75   ->   20	 '('
0    ->   21	 ';' '+' '-' '*' '/' ',' '?'
3    ->   29	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
5    ->   21	 '+' '-' '*' '/' ')' ',' '?'
7    ->   33	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
12   ->   21	 ';' '+' '-' '*' '/' ',' '?'
26   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?'
27   ->   21	 '+' '-' '*' '/' ')' ',' '?'
32   ->   21	 ';' '+' '-' '*' '/' ',' '?'
39   ->   21	 '+' '-' '*' '/' ']' ',' '?'
43   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
44   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
45   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
46   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
47   ->   21	 '+' '-' '*' '/' '?' ':'
49   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?'
56   ->   21	 ';' '+' '-' '*' '/' ',' '?'
69   ->   21	 '+' '-' '*' '/' ')' ',' '?'
74   ->   21	 '+' '-' '*' '/' ')' ',' '?'
75   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
0    ->   22	 ';' '+' '-' '*' '/' ',' '?'
5    ->   22	 '+' '-' '*' '/' ')' ',' '?'
12   ->   22	 ';' '+' '-' '*' '/' ',' '?'
26   ->   22	 ';' '+' '-' '*' '/' ')' ']' ',' '?'
27   ->   22	 '+' '-' '*' '/' ')' ',' '?'
32   ->   22	 ';' '+' '-' '*' '/' ',' '?'
39   ->   22	 '+' '-' '*' '/' ']' ',' '?'
43   ->   63	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
44   ->   64	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
45   ->   65	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
46   ->   66	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
47   ->   22	 '+' '-' '*' '/' '?' ':'
49   ->   22	 ';' '+' '-' '*' '/' ')' ']' ',' '?'
56   ->   22	 ';' '+' '-' '*' '/' ',' '?'
69   ->   22	 '+' '-' '*' '/' ')' ',' '?'
74   ->   22	 '+' '-' '*' '/' ')' ',' '?'
75   ->   22	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
0    ->   23	 ';' ','
5    ->   23	 ')' ','
12   ->   23	 ';' ','
26   ->   50	 ';' ')' ']' ','
27   ->   51	 ')' ','
32   ->   23	 ';' ','
39   ->   23	 ']' ','
47   ->   67	 ':'
49   ->   23	 ';' ')' ']' ','
56   ->   23	 ';' ','
69   ->   76	 ')' ','
74   ->   51	 ')' ','
75   ->   78	 ';' ')' ']' ',' ':'
0    ->   24	 ';' ','
5    ->   24	 ')' ','
12   ->   24	 ';' ','
32   ->   24	 ';' ','
39   ->   24	 ']' ','
49   ->   68	 ';' ')' ']' ','
56   ->   24	 ';' ','
0    ->   25	 ';' ','
5    ->   31	 ')' ','
12   ->   25	 ';' ','
32   ->   25	 ';' ','
39   ->   59	 ']' ','
56   ->   25	 ';' ','
27   ->   52	 ')' ','
74   ->   52	 ')' ','
27   ->   53	 ')'
74   ->   77	 ')'

Lookaheads:
1:
  primary_expression ::= identifier _
  >>> ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
12:
  input ::= statements _
  >>> eoi
16:
  unary_expression ::= primary_expression _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
22:
  conditional_expression ::= binary_op _
  >>> ';' ')' ']' ',' ':'
27:
  expression_listopt ::= _
  >>> ')'
28:
  primary_expression ::= identifier _
  >>> ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
37:
  primary_expression ::= exotic_call _
  >>> '[' '.' '->'
52:
  expression_listopt ::= expression_list _
  >>> ')'
60:
  primary_expression ::= primary_expression '.' identifier _
  >>> ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
63:
  binary_op ::= binary_op '+' binary_op _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
64:
  binary_op ::= binary_op '-' binary_op _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
65:
  binary_op ::= binary_op '*' binary_op _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
66:
  binary_op ::= binary_op '/' binary_op _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
74:
  expression_listopt ::= _
  >>> ')'
