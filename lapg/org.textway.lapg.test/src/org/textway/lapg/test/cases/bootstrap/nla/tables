
Lexems:

identifier,1:  00000000 40000001 80040000 ffffffff ([a-zA-Z_][a-zA-Z_0-9]*)
icon,2:  e0060002 20000002 80040000 fffffffe (\-?[0-9]+)
_skip,3:  20000003 80040000 fffffffd ([\n\t\r ]+)
'=',4:  80060003 fffffffc (=)
';',5:  80060004 fffffffb (;)
'+',6:  80060005 fffffffa (\+)
'-',7:  80060002 fffffff9 (\-)
'*',8:  80060006 fffffff8 (\*)
'/',9:  80060007 fffffff7 (\/)
'(',10:  80060008 fffffff6 (\()
')',11:  80060009 fffffff5 (\))
'{',12:  8006000a fffffff4 (\{)
'}',13:  8006000b fffffff3 (\})
'[',14:  8006000c fffffff2 (\[)
']',15:  8006000d fffffff1 (\])
',',16:  8006000e fffffff0 (,)
'.',17:  8006000f ffffffef (\.)
'!',18:  80060010 ffffffee (!)
'?',19:  80060011 ffffffed (\?)
':',20:  80060012 ffffffec (:)
'->',21:  80060002 80060013 ffffffeb (\->)
Lnull,22:  (null)
Linvoke,23:  (invoke)
Lreset,24:  (reset)
Lnop,25:  (nop)

Symbols:

0: \x0000
1: \x0001\x0002\x0003\x0004\x0005\x0006\x0007\x0008\x000b\x000c\x000e\x000f\x0010\x0011\x0012\x0013\x0014\x0015\x0016\x0017\x0018\x0019\x001a\x001b\x001c\x001d\x001e\x001f"#$%&'<@\^`|~
2: -
3: =
4: ;
5: +
6: *
7: /
8: (
9: )
10: {
11: }
12: [
13: ]
14: ,
15: .
16: !
17: ?
18: :
19: >
20: ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
21: 0123456789
22: \x0009\x000a\x000d\x0020

Sets:

0:  20
1:  20 21
2:  21
3:  22

Lexem jumps:
 0:  (0: 0) SET#0 (1: 1 2 3) SET#1* (2: 1 2 3) SPLIT  [identifier,1]
 1:  (0: 0 1) #0002? (1: 1) SET#2+ (2: 1 2 3) SPLIT  [icon,2]
 2:  (0: 0) SET#3+ (1: 0 1 2) SPLIT  [_skip,3]
 3:  (0: 0) #0003  ['=',4]
 4:  (0: 0) #0004  [';',5]
 5:  (0: 0) #0005  ['+',6]
 6:  (0: 0) #0002  ['-',7]
 7:  (0: 0) #0006  ['*',8]
 8:  (0: 0) #0007  ['/',9]
 9:  (0: 0) #0008  ['(',10]
10:  (0: 0) #0009  [')',11]
11:  (0: 0) #000a  ['{',12]
12:  (0: 0) #000b  ['}',13]
13:  (0: 0) #000c  ['[',14]
14:  (0: 0) #000d  [']',15]
15:  (0: 0) #000e  [',',16]
16:  (0: 0) #000f  ['.',17]
17:  (0: 0) #0010  ['!',18]
18:  (0: 0) #0011  ['?',19]
19:  (0: 0) #0012  [':',20]
20:  (0: 0) #0002 (1: 1) #0013  ['->',21]


States
0:
  input ::= _ statements
  statements ::= _ statements statement
  statements ::= _ statement
  statement ::= _ control_statement
  statement ::= _ expression ';'
  statement ::= _ Lnop ';'
  control_statement ::= _ reset_statement
  reset_statement ::= _ Lreset identifier ';'
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

1: (from 0, identifier)
  primary_expression ::= identifier _
  primary_expression ::= identifier _ '(' expression_listopt ')'
  assignment_expression ::= identifier _ '=' conditional_expression

2: (from 0, icon)
  primary_expression ::= icon _

3: (from 0, '-')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  unary_expression ::= '-' _ unary_expression

4: (from 0, '*')
  closure_rule ::= '*' _ identifier

5: (from 0, '(')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= '(' _ expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

6: (from 0, '{')
  closure ::= '{' _ '->' statements_noreset '}'

7: (from 0, '!')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= '!' _ unary_expression
  unary_expression ::= _ '-' unary_expression

8: (from 0, Lnull)
  primary_expression ::= Lnull _

9: (from 0, Lreset)
  reset_statement ::= Lreset _ identifier ';'

10: (from 0, Lnop)
  statement ::= Lnop _ ';'

11: (from 0, statements)
  input ::= statements _
  statements ::= statements _ statement
  statement ::= _ control_statement
  statement ::= _ expression ';'
  statement ::= _ Lnop ';'
  control_statement ::= _ reset_statement
  reset_statement ::= _ Lreset identifier ';'
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

12: (from 0, statement)
  statements ::= statement _

13: (from 0, control_statement)
  statement ::= control_statement _

14: (from 0, reset_statement)
  control_statement ::= reset_statement _

15: (from 0, primary_expression)
  primary_expression ::= primary_expression _ '.' identifier
  primary_expression ::= primary_expression _ '.' identifier '(' expression_listopt ')'
  primary_expression ::= primary_expression _ '[' expression ']'
  exotic_call_prefix ::= primary_expression _ '->' Linvoke
  unary_expression ::= primary_expression _

16: (from 0, closure_rule)
  primary_expression ::= closure_rule _

17: (from 0, closure)
  closure_rule ::= closure _

18: (from 0, exotic_call)
  primary_expression ::= exotic_call _

19: (from 0, exotic_call_prefix)
  exotic_call ::= exotic_call_prefix _ '(' ')'

20: (from 0, unary_expression)
  binary_op ::= unary_expression _

21: (from 0, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op _ '-' binary_op
  conditional_expression ::= binary_op _
  conditional_expression ::= binary_op _ '?' conditional_expression ':' conditional_expression

22: (from 0, conditional_expression)
  assignment_expression ::= conditional_expression _

23: (from 0, assignment_expression)
  expression ::= assignment_expression _

24: (from 0, expression)
  statement ::= expression _ ';'
  expression ::= expression _ ',' assignment_expression

25: (from 1, '=')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= identifier '=' _ conditional_expression

26: (from 1, '(')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  expression_listopt ::= _
  expression_listopt ::= _ expression_list
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= identifier '(' _ expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  expression_list ::= _ conditional_expression
  expression_list ::= _ expression_list ',' conditional_expression

27: (from 3, identifier)
  primary_expression ::= identifier _
  primary_expression ::= identifier _ '(' expression_listopt ')'

28: (from 3, unary_expression)
  unary_expression ::= '-' unary_expression _

29: (from 4, identifier)
  closure_rule ::= '*' identifier _

30: (from 5, expression)
  primary_expression ::= '(' expression _ ')'
  expression ::= expression _ ',' assignment_expression

31: (from 6, '->')
  statement ::= _ control_statement
  statement ::= _ expression ';'
  statement ::= _ Lnop ';'
  control_statement ::= _ reset_statement
  reset_statement ::= _ Lreset identifier ';'
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  closure ::= '{' '->' _ statements_noreset '}'
  statements_noreset ::= _ statements_noreset statement
  statements_noreset ::= _ statement
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

32: (from 7, unary_expression)
  unary_expression ::= '!' unary_expression _

33: (from 9, identifier)
  reset_statement ::= Lreset identifier _ ';'

34: (from 10, ';')
  statement ::= Lnop ';' _

35: (from 11, statement)
  statements ::= statements statement _

36: (from 15, '[')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= primary_expression '[' _ expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

37: (from 15, '.')
  primary_expression ::= primary_expression '.' _ identifier
  primary_expression ::= primary_expression '.' _ identifier '(' expression_listopt ')'

38: (from 15, '->')
  exotic_call_prefix ::= primary_expression '->' _ Linvoke

39: (from 19, '(')
  exotic_call ::= exotic_call_prefix '(' _ ')'

40: (from 21, '+')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= binary_op '+' _ binary_op
  binary_op ::= _ binary_op '-' binary_op

41: (from 21, '-')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  binary_op ::= binary_op '-' _ binary_op

42: (from 21, '*')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= binary_op '*' _ binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op

43: (from 21, '/')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= binary_op '/' _ binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op

44: (from 21, '?')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  conditional_expression ::= binary_op '?' _ conditional_expression ':' conditional_expression

45: (from 24, ';')
  statement ::= expression ';' _

46: (from 24, ',')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= expression ',' _ assignment_expression

47: (from 25, conditional_expression)
  assignment_expression ::= identifier '=' conditional_expression _

48: (from 26, conditional_expression)
  expression_list ::= conditional_expression _

49: (from 26, expression_list)
  expression_listopt ::= expression_list _
  expression_list ::= expression_list _ ',' conditional_expression

50: (from 26, expression_listopt)
  primary_expression ::= identifier '(' expression_listopt _ ')'

51: (from 30, ')')
  primary_expression ::= '(' expression ')' _

52: (from 31, statement)
  statements_noreset ::= statement _

53: (from 31, statements_noreset)
  statement ::= _ control_statement
  statement ::= _ expression ';'
  statement ::= _ Lnop ';'
  control_statement ::= _ reset_statement
  reset_statement ::= _ Lreset identifier ';'
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  closure ::= '{' '->' statements_noreset _ '}'
  statements_noreset ::= statements_noreset _ statement
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  assignment_expression ::= _ conditional_expression
  assignment_expression ::= _ identifier '=' conditional_expression
  expression ::= _ assignment_expression
  expression ::= _ expression ',' assignment_expression

54: (from 33, ';')
  reset_statement ::= Lreset identifier ';' _

55: (from 36, expression)
  primary_expression ::= primary_expression '[' expression _ ']'
  expression ::= expression _ ',' assignment_expression

56: (from 37, identifier)
  primary_expression ::= primary_expression '.' identifier _
  primary_expression ::= primary_expression '.' identifier _ '(' expression_listopt ')'

57: (from 38, Linvoke)
  exotic_call_prefix ::= primary_expression '->' Linvoke _

58: (from 39, ')')
  exotic_call ::= exotic_call_prefix '(' ')' _

59: (from 40, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op '+' binary_op _
  binary_op ::= binary_op _ '-' binary_op

60: (from 41, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op _ '-' binary_op
  binary_op ::= binary_op '-' binary_op _

61: (from 42, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op '*' binary_op _
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op _ '-' binary_op

62: (from 43, binary_op)
  binary_op ::= binary_op _ '*' binary_op
  binary_op ::= binary_op _ '/' binary_op
  binary_op ::= binary_op '/' binary_op _
  binary_op ::= binary_op _ '+' binary_op
  binary_op ::= binary_op _ '-' binary_op

63: (from 44, conditional_expression)
  conditional_expression ::= binary_op '?' conditional_expression _ ':' conditional_expression

64: (from 46, assignment_expression)
  expression ::= expression ',' assignment_expression _

65: (from 49, ',')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  expression_list ::= expression_list ',' _ conditional_expression

66: (from 50, ')')
  primary_expression ::= identifier '(' expression_listopt ')' _

67: (from 53, '}')
  closure ::= '{' '->' statements_noreset '}' _

68: (from 53, statement)
  statements_noreset ::= statements_noreset statement _

69: (from 55, ']')
  primary_expression ::= primary_expression '[' expression ']' _

70: (from 56, '(')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  expression_listopt ::= _
  expression_listopt ::= _ expression_list
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= primary_expression '.' identifier '(' _ expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  expression_list ::= _ conditional_expression
  expression_list ::= _ expression_list ',' conditional_expression

71: (from 63, ':')
  primary_expression ::= _ identifier
  primary_expression ::= _ '(' expression ')'
  primary_expression ::= _ icon
  primary_expression ::= _ Lnull
  primary_expression ::= _ identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '.' identifier
  primary_expression ::= _ primary_expression '.' identifier '(' expression_listopt ')'
  primary_expression ::= _ primary_expression '[' expression ']'
  primary_expression ::= _ exotic_call
  primary_expression ::= _ closure_rule
  closure_rule ::= _ closure
  closure_rule ::= _ '*' identifier
  closure ::= _ '{' '->' statements_noreset '}'
  exotic_call ::= _ exotic_call_prefix '(' ')'
  exotic_call_prefix ::= _ primary_expression '->' Linvoke
  unary_expression ::= _ primary_expression
  unary_expression ::= _ '!' unary_expression
  unary_expression ::= _ '-' unary_expression
  binary_op ::= _ unary_expression
  binary_op ::= _ binary_op '*' binary_op
  binary_op ::= _ binary_op '/' binary_op
  binary_op ::= _ binary_op '+' binary_op
  binary_op ::= _ binary_op '-' binary_op
  conditional_expression ::= _ binary_op
  conditional_expression ::= _ binary_op '?' conditional_expression ':' conditional_expression
  conditional_expression ::= binary_op '?' conditional_expression ':' _ conditional_expression

72: (from 65, conditional_expression)
  expression_list ::= expression_list ',' conditional_expression _

73: (from 70, expression_listopt)
  primary_expression ::= primary_expression '.' identifier '(' expression_listopt _ ')'

74: (from 71, conditional_expression)
  conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression _

75: (from 73, ')')
  primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')' _

76: (from 0, input)

77: (from 76, eoi)

Rules for var:

input ::
	input ::= statements
	statements ::= statements statement
	statements ::= statement
	statement ::= control_statement
	statement ::= expression ';'
	statement ::= Lnop ';'
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
statements ::
	statements ::= statements statement
	statements ::= statement
	statement ::= control_statement
	statement ::= expression ';'
	statement ::= Lnop ';'
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
statement ::
	statement ::= control_statement
	statement ::= expression ';'
	statement ::= Lnop ';'
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
control_statement ::
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
reset_statement ::
	reset_statement ::= Lreset identifier ';'
primary_expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
closure_rule ::
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
closure ::
	closure ::= '{' '->' statements_noreset '}'
statements_noreset ::
	statement ::= control_statement
	statement ::= expression ';'
	statement ::= Lnop ';'
	control_statement ::= reset_statement
	reset_statement ::= Lreset identifier ';'
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	statements_noreset ::= statements_noreset statement
	statements_noreset ::= statement
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
exotic_call ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
exotic_call_prefix ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
unary_expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
binary_op ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
conditional_expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
assignment_expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
expression ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	assignment_expression ::= conditional_expression
	assignment_expression ::= identifier '=' conditional_expression
	expression ::= assignment_expression
	expression ::= expression ',' assignment_expression
expression_list ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	expression_list ::= conditional_expression
	expression_list ::= expression_list ',' conditional_expression
expression_listopt ::
	primary_expression ::= identifier
	primary_expression ::= '(' expression ')'
	primary_expression ::= icon
	primary_expression ::= Lnull
	expression_listopt ::=
	expression_listopt ::= expression_list
	primary_expression ::= identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '.' identifier
	primary_expression ::= primary_expression '.' identifier '(' expression_listopt ')'
	primary_expression ::= primary_expression '[' expression ']'
	primary_expression ::= exotic_call
	primary_expression ::= closure_rule
	closure_rule ::= closure
	closure_rule ::= '*' identifier
	closure ::= '{' '->' statements_noreset '}'
	exotic_call ::= exotic_call_prefix '(' ')'
	exotic_call_prefix ::= primary_expression '->' Linvoke
	unary_expression ::= primary_expression
	unary_expression ::= '!' unary_expression
	unary_expression ::= '-' unary_expression
	binary_op ::= unary_expression
	binary_op ::= binary_op '*' binary_op
	binary_op ::= binary_op '/' binary_op
	binary_op ::= binary_op '+' binary_op
	binary_op ::= binary_op '-' binary_op
	conditional_expression ::= binary_op
	conditional_expression ::= binary_op '?' conditional_expression ':' conditional_expression
	expression_list ::= conditional_expression
	expression_list ::= expression_list ',' conditional_expression

Graph:
 0:  1
 1:  3 2
 2:  6
 3:  7
 4:  8
 5:  9
 6:  10
 7:  11
 8:  12
 9:  13
 14:  72 33
 15:  73 34
 16:  74 35
 17:  75 36
 18:  76 37
 19:  77 38
 20:  78 39
 21:  79 40
 22:  80 41
 23:  81 42
 24:  82 43
 25:  83 44
 26:  84 45
 27:  85 46
 28:  86 47
 29:  87 48
 30:  88 49
 31:  89 50
 32:  90 51
 33:  52
 34:  53
 35:  54
 36:  55
 37:  56
 38:  57
 39:  58
 40:  59
 41:  60
 42:  61
 43:  62
 44:  63
 45:  64
 46:  65
 47:  66
 48:  67
 49:  68
 50:  69
 51:  70
 71:  5 4
 110:  14 113 111
 111:  15 113 111
 112:  16 113 111
 113:  17 113 111
 114:  18 113 111
 115:  19 113 111
 116:  20 113 111
 117:  21 113 111
 118:  22 113 111
 119:  23 113 111
 120:  24 113 111
 121:  25 113 111
 122:  26 113 111
 123:  27 113 111
 124:  28 113 111
 125:  29 113 111
 126:  30 113 111
 127:  31 113 111
 128:  32 113 111
 129:  110 138 139 136 137
 130:  112 138 139 136 137
 131:  114 138 139 136 137
 132:  115 138 139 136 137
 133:  116 138 139 136 137
 134:  117 138 139 136 137
 135:  118 138 139 136 137
 136:  119 138 139 136 137
 137:  120 138 139 136 137
 138:  121 138 139 136 137
 139:  122 138 139 136 137
 140:  123 138 139 136 137
 141:  124 138 139 136 137
 142:  125 138 139 136 137
 143:  126 138 139 136 137
 144:  127 138 139 136 137
 145:  128 138 139 136 137
 146:  129 158
 147:  130 158
 148:  131 158
 149:  132 158
 150:  133 158
 151:  134 158
 152:  135 158
 153:  140 158
 154:  141 158
 155:  142 158
 156:  143 158
 157:  144 158
 158:  145 158
 159:  146 149
 160:  147 149
 161:  148 149
 162:  151 149
 163:  152 149
 164:  154 149
 165:  155 149
 166:  159 164
 167:  160 164
 168:  161 164
 169:  162 164
 170:  163 164
 171:  165 164
 172:  150 156
 173:  157 156
 174:  172
 175:  173

Graph:
 1:  0
 2:  1
 3:  1
 4:  71
 5:  71
 6:  2
 7:  3
 8:  4
 9:  5
 10:  6
 11:  7
 12:  8
 13:  9
 14:  110
 15:  111
 16:  112
 17:  113
 18:  114
 19:  115
 20:  116
 21:  117
 22:  118
 23:  119
 24:  120
 25:  121
 26:  122
 27:  123
 28:  124
 29:  125
 30:  126
 31:  127
 32:  128
 33:  14
 34:  15
 35:  16
 36:  17
 37:  18
 38:  19
 39:  20
 40:  21
 41:  22
 42:  23
 43:  24
 44:  25
 45:  26
 46:  27
 47:  28
 48:  29
 49:  30
 50:  31
 51:  32
 52:  33
 53:  34
 54:  35
 55:  36
 56:  37
 57:  38
 58:  39
 59:  40
 60:  41
 61:  42
 62:  43
 63:  44
 64:  45
 65:  46
 66:  47
 67:  48
 68:  49
 69:  50
 70:  51
 72:  14
 73:  15
 74:  16
 75:  17
 76:  18
 77:  19
 78:  20
 79:  21
 80:  22
 81:  23
 82:  24
 83:  25
 84:  26
 85:  27
 86:  28
 87:  29
 88:  30
 89:  31
 90:  32
 110:  129
 111:  110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128
 112:  130
 113:  110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128
 114:  131
 115:  132
 116:  133
 117:  134
 118:  135
 119:  136
 120:  137
 121:  138
 122:  139
 123:  140
 124:  141
 125:  142
 126:  143
 127:  144
 128:  145
 129:  146
 130:  147
 131:  148
 132:  149
 133:  150
 134:  151
 135:  152
 136:  129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145
 137:  129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145
 138:  129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145
 139:  129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145
 140:  153
 141:  154
 142:  155
 143:  156
 144:  157
 145:  158
 146:  159
 147:  160
 148:  161
 149:  159 160 161 162 163 164 165
 150:  172
 151:  162
 152:  163
 154:  164
 155:  165
 156:  172 173
 157:  173
 158:  146 147 148 149 150 151 152 153 154 155 156 157 158
 159:  166
 160:  167
 161:  168
 162:  169
 163:  170
 164:  166 167 168 169 170 171
 165:  171
 172:  174
 173:  175

Follow:
0    ->   76	 eoi
0    ->   11	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop
0    ->   12	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop
11   ->   35	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop
31   ->   52	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop
53   ->   68	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop
0    ->   13	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop
11   ->   13	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop
31   ->   13	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop
53   ->   13	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop
0    ->   14	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop
11   ->   14	 eoi identifier icon '-' '*' '(' '{' '!' Lnull Linvoke Lreset Lnop
31   ->   14	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop
53   ->   14	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop
0    ->   15	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
3    ->   15	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
5    ->   15	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
7    ->   15	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
11   ->   15	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
25   ->   15	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
26   ->   15	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
31   ->   15	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
36   ->   15	 '+' '-' '*' '/' '[' ']' ',' '.' '?' '->'
40   ->   15	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
41   ->   15	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
42   ->   15	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
43   ->   15	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
44   ->   15	 '+' '-' '*' '/' '[' '.' '?' ':' '->'
46   ->   15	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
53   ->   15	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
65   ->   15	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
70   ->   15	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
71   ->   15	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
0    ->   16	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
3    ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
5    ->   16	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
7    ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
11   ->   16	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
25   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
26   ->   16	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
31   ->   16	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
36   ->   16	 '+' '-' '*' '/' '[' ']' ',' '.' '?' '->'
40   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
41   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
42   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
43   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
44   ->   16	 '+' '-' '*' '/' '[' '.' '?' ':' '->'
46   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
53   ->   16	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
65   ->   16	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
70   ->   16	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
71   ->   16	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
0    ->   17	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
3    ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
5    ->   17	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
7    ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
11   ->   17	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
25   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
26   ->   17	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
31   ->   17	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
36   ->   17	 '+' '-' '*' '/' '[' ']' ',' '.' '?' '->'
40   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
41   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
42   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
43   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
44   ->   17	 '+' '-' '*' '/' '[' '.' '?' ':' '->'
46   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
53   ->   17	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
65   ->   17	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
70   ->   17	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
71   ->   17	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
31   ->   53	 identifier icon '-' '*' '(' '{' '}' '!' Lnull Linvoke Lreset Lnop
0    ->   18	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
3    ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
5    ->   18	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
7    ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
11   ->   18	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
25   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
26   ->   18	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
31   ->   18	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
36   ->   18	 '+' '-' '*' '/' '[' ']' ',' '.' '?' '->'
40   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
41   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
42   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
43   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
44   ->   18	 '+' '-' '*' '/' '[' '.' '?' ':' '->'
46   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
53   ->   18	 ';' '+' '-' '*' '/' '[' ',' '.' '?' '->'
65   ->   18	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
70   ->   18	 '+' '-' '*' '/' ')' '[' ',' '.' '?' '->'
71   ->   18	 ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
0    ->   19	 '('
3    ->   19	 '('
5    ->   19	 '('
7    ->   19	 '('
11   ->   19	 '('
25   ->   19	 '('
26   ->   19	 '('
31   ->   19	 '('
36   ->   19	 '('
40   ->   19	 '('
41   ->   19	 '('
42   ->   19	 '('
43   ->   19	 '('
44   ->   19	 '('
46   ->   19	 '('
53   ->   19	 '('
65   ->   19	 '('
70   ->   19	 '('
71   ->   19	 '('
0    ->   20	 ';' '+' '-' '*' '/' ',' '?'
3    ->   28	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
5    ->   20	 '+' '-' '*' '/' ')' ',' '?'
7    ->   32	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
11   ->   20	 ';' '+' '-' '*' '/' ',' '?'
25   ->   20	 ';' '+' '-' '*' '/' ')' ']' ',' '?'
26   ->   20	 '+' '-' '*' '/' ')' ',' '?'
31   ->   20	 ';' '+' '-' '*' '/' ',' '?'
36   ->   20	 '+' '-' '*' '/' ']' ',' '?'
40   ->   20	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
41   ->   20	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
42   ->   20	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
43   ->   20	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
44   ->   20	 '+' '-' '*' '/' '?' ':'
46   ->   20	 ';' '+' '-' '*' '/' ')' ']' ',' '?'
53   ->   20	 ';' '+' '-' '*' '/' ',' '?'
65   ->   20	 '+' '-' '*' '/' ')' ',' '?'
70   ->   20	 '+' '-' '*' '/' ')' ',' '?'
71   ->   20	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
0    ->   21	 ';' '+' '-' '*' '/' ',' '?'
5    ->   21	 '+' '-' '*' '/' ')' ',' '?'
11   ->   21	 ';' '+' '-' '*' '/' ',' '?'
25   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?'
26   ->   21	 '+' '-' '*' '/' ')' ',' '?'
31   ->   21	 ';' '+' '-' '*' '/' ',' '?'
36   ->   21	 '+' '-' '*' '/' ']' ',' '?'
40   ->   59	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
41   ->   60	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
42   ->   61	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
43   ->   62	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
44   ->   21	 '+' '-' '*' '/' '?' ':'
46   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?'
53   ->   21	 ';' '+' '-' '*' '/' ',' '?'
65   ->   21	 '+' '-' '*' '/' ')' ',' '?'
70   ->   21	 '+' '-' '*' '/' ')' ',' '?'
71   ->   21	 ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
0    ->   22	 ';' ','
5    ->   22	 ')' ','
11   ->   22	 ';' ','
25   ->   47	 ';' ')' ']' ','
26   ->   48	 ')' ','
31   ->   22	 ';' ','
36   ->   22	 ']' ','
44   ->   63	 ':'
46   ->   22	 ';' ')' ']' ','
53   ->   22	 ';' ','
65   ->   72	 ')' ','
70   ->   48	 ')' ','
71   ->   74	 ';' ')' ']' ',' ':'
0    ->   23	 ';' ','
5    ->   23	 ')' ','
11   ->   23	 ';' ','
31   ->   23	 ';' ','
36   ->   23	 ']' ','
46   ->   64	 ';' ')' ']' ','
53   ->   23	 ';' ','
0    ->   24	 ';' ','
5    ->   30	 ')' ','
11   ->   24	 ';' ','
31   ->   24	 ';' ','
36   ->   55	 ']' ','
53   ->   24	 ';' ','
26   ->   49	 ')' ','
70   ->   49	 ')' ','
26   ->   50	 ')'
70   ->   73	 ')'

Lookaheads:
1:
  primary_expression ::= identifier _
  >>> ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' '->'
11:
  input ::= statements _
  >>> eoi
15:
  unary_expression ::= primary_expression _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
21:
  conditional_expression ::= binary_op _
  >>> ';' ')' ']' ',' ':'
26:
  expression_listopt ::= _
  >>> ')'
27:
  primary_expression ::= identifier _
  >>> ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
49:
  expression_listopt ::= expression_list _
  >>> ')'
56:
  primary_expression ::= primary_expression '.' identifier _
  >>> ';' '+' '-' '*' '/' ')' '[' ']' ',' '.' '?' ':' '->'
59:
  binary_op ::= binary_op '+' binary_op _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
60:
  binary_op ::= binary_op '-' binary_op _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
61:
  binary_op ::= binary_op '*' binary_op _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
62:
  binary_op ::= binary_op '/' binary_op _
  >>> ';' '+' '-' '*' '/' ')' ']' ',' '?' ':'
70:
  expression_listopt ::= _
  >>> ')'
