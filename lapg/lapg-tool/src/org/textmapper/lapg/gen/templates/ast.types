## AST model

class AstModel {
	AstEntity elements[0..*];
	{ AstModel => } classes;
}

## Rules

class AstRule {
	AstEntity* ruleclass[0..1];
    string kind[choice:"enum","optional","list","class","pass"];
    common.Rule *rule;
}

class AstEnumRule extends AstRule {
    common.SymbolRef* literal;
}

class AstOptionalRule extends AstRule {
    bool requiresTrue;
}

class AstListRule extends AstRule {
    string listkind[choice:"left","right","normal","none"];
    common.SymbolRef* listitem;
}

class AstPassDataRule extends AstRule {
    common.SymbolRef* data;
}


## Property

class AstProperty {
	string kind[choice:flagproperty,enumproperty,property];
	AstClass container[1];
	string name[notempty; identifier];
	common.SymbolRef* refs[1..*];
	string type;
	int indexInRule(common.Rule);
}

## Types

class AstType { }

class AstUserType extends AstType {
	string text;
}

class AstEntity extends AstType {
	string kind[set:"enum","interface","class"];
	string name[notempty; identifier];
	common.Symbol* sym[1];
}

class AstInterface extends AstEntity {
    common.Symbol* implementedSyms[0..*];
    { AstInterface => } implements;
## TODO    AstInterface* implements[0..*];
}

class AstClass extends AstInterface {
    common.SymbolRef* containedRefs[0..*];
    { AstInterface => } properties[1];
}

class AstEnum extends AstEntity {
	common.SymbolRef* literals[0..*];
}

class AstList extends AstType {
	AstType target;
}

class AstBool extends AstType {
}

class AstObject extends AstType {
}
